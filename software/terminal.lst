                        
   0000                 DMA_REG EQU 0
   0001                 INTP_REG EQU 1
   0002                 INTX_REG EQU 2
   0003                 PC_REG EQU 3
   0004                 R4 EQU 4
   0005                 R5 EQU 5
   0006                 R6 EQU 6
   0007                 R7 EQU 7
   0008                 R8 EQU 8
   0009                 R9 EQU 9
   000a                 R10 EQU 10
   000b                 R11 EQU 11
   000c                 R12 EQU 12
   000d                 CALL_REG EQU 13
   000e                 FCALL_REG EQU 14
   000e                 RETURN EQU 14
   000f                 STACK_REG EQU 15
                        
   ffff                 STACK_ADDRESS EQU 0FFFFh
   3000                 DMA_ADDRESS EQU 03000h
                        
   2000                 INPUT_BUFF EQU 02000h
                        
   2100                 MEMWRITE_ADDRESS EQU 02100h
                        
   2102                 VARLIST_COUNT EQU 02102h
   2104                 VARLIST_FIRSTNODE EQU 02104h
   2106                 VARLIST_LASTNODE EQU 02106h
                        
   2108                 HEAP_LASTADDRESS EQU 02108h
   2110                 HEAP_START EQU 02110h
   fc00                 HEAP_END EQU 0FC00h
                        
                        
   0000                     org 00h
                        
   0000                 START
   0000   71                dis
   0001   00                idl
                            
   0002   7b                seq     ;set Q output to high
                            
   0003   f8 ff             ldi STACK_ADDRESS.0 ;setup the STACK pointer
   0005   af                plo STACK_REG
   0006   f8 ff             ldi STACK_ADDRESS.1
   0008   bf                phi STACK_REG
                            
   0009   f8 01             ldi FCALL.1         ;setup FCALL
   000b   be                phi FCALL_REG
                            
   000c   f8 13             ldi DMA_INIT.0      ;switch PC to R3 and init DMA
   000e   a3                plo PC_REG
   000f   f8 00             ldi DMA_INIT.1
   0011   b3                phi PC_REG
                            
   0012   d3                sep PC_REG
                            
   0013                 DMA_INIT
   0013   f8 00             ldi DMA_ADDRESS.0   ;setup DMA address
   0015   a0                plo DMA_REG
   0016   f8 30             ldi DMA_ADDRESS.1
   0018   b0                phi DMA_REG
                            
   0019   c0 16 db          lbr MAIN_PROGRAM
                            
                        ;-FUNCTION CALL HELPER-------------------------
                        ;-WHERE TO JUMP-(CALL_REG)---------------------
   0100                     org 0100h
                            
   0100                 FCALL
   0100   ef                sex STACK_REG   ;set STACK as X register
   0101   93                ghi PC_REG      ;saving the PC value to stack
   0102   73                stxd
   0103   83                glo PC_REG
   0104   73                stxd
                            
   0105   8d                glo CALL_REG    ;put the new address in the PC
   0106   a3                plo PC_REG
   0107   9d                ghi CALL_REG
   0108   b3                phi PC_REG
   0109   d3                sep PC_REG      ;jumping to PC
                            
   010a                 FRETURN
   010a   1f                inc STACK_REG   ;increment the STACK register
   010b   ef                sex STACK_REG   ;set STACK as X register
   010c   72                ldxa            ;restoring PC from STACK
   010d   a3                plo PC_REG
   010e   f0                ldx
   010f   b3                phi PC_REG
   0110   d3                sep PC_REG      ;jumping to PC
   0111   30 0a             br FRETURN
                        ;----------------------------------------------
                        
                        ;-SERIAL SEND BYTE-----------------------------
                        ;-DATA-R4.1------------------------------------
   0113                 SERIAL_SEND_START
   0113   94                ghi R4      ;R4 high is the data, load it into the D reg
   0114   fb ff             xri 0FFh    ;invert it
   0116   b4                phi R4      ;put it back
   0117   f8 85             ldi 085h    ;load 0x85 to the D reg
   0119   fe                shl         ;shift it left so we get 0x0A and set the flag bit
   011a   a4                plo R4      ;put the 0x10 to R4 low, this will be our bit counter
                        
   011b                 SERIAL_SEND_BIT
   011b   c7                lsnf        ;24 - long skip if the flag is not set
   011c   7a                req         ;16 - reset Q if the flag is set
   011d   c8                lskp        ;24
   011e   7b                seq         ;16 - set Q if the flag is not set
   011f   c4                nop         ;24
                            
   0120   24                dec R4      ;16 - decrement R4, this will only affect the R4 lower 8bit
   0121   84                glo R4      ;16
   0122   c6                lsnz        ;24 - if R4 lower is not 0 then long skip
   0123   de                sep RETURN  ;--
   0124   c4                nop         ;--
   0125   94                ghi R4      ;16 - get R4 high
   0126   f6                shr         ;16 - shift it right to get LSB in the flag
   0127   b4                phi R4      ;16 - put it back
   0128   c4                nop         ;24
   0129   c4                nop         ;24
   012a   c4                nop         ;24
   012b   30 1b             br SERIAL_SEND_BIT ;16
                        ;----------------------------------------------
                        
                        ;-SERIAL READ BYTE-----------------------------
                        ;-RETURN R5.1----------------------------------
   012d                 SERIAL_READ_START
   012d   f8 00             ldi 00h     ;set input data register to 0
   012f   a5                plo R5
   0130   b5                phi R5
                            
   0131                 SERIAL_WAIT_START
   0131   3c 31             bn1 SERIAL_WAIT_START ;16 - loop until EF1 goes low
   0133   c4                nop         ;24
   0134   c4                nop         ;24
   0135   c4                nop         ;24
   0136   c4                nop         ;24
   0137   f9 00             ori 00h     ;16 - do nothing for 16 clock cycles
                        
   0139                 SERIAL_SAMPLE_BIT
   0139   34 3f             b1 SERIAL_NULL_BIT  ;16 - checking the EF1
   013b   f9 80             ori 080h            ;16 - if EF1 is high then set MSB to 1 in D register
   013d   30 43             br SERIAL_SAVE_BIT  ;16
                        
   013f                 SERIAL_NULL_BIT
   013f   f9 00             ori 00h         ;16 - of EF1 is low we do nothing
   0141   f9 00             ori 00h         ;16
                        
   0143                 SERIAL_SAVE_BIT
   0143   b5                phi R5          ;16 - put D in R5 high
   0144   15                inc R5          ;16 - increment R5, this will only affect R5 low 8bit
   0145   85                glo R5          ;16 - get R5 low to D register
   0146   fb 09             xri 09h         ;16 - D = D ^ 0x09
   0148   c6                lsnz            ;24 
   0149   de                sep RETURN      ;--
   014a   c4                nop             ;--
   014b   95                ghi R5          ;16 - get R5 high
   014c   f6                shr             ;16 - shift it righ
   014d   c4                nop             ;24
   014e   c4                nop             ;24
   014f   c4                nop             ;24
   0150   30 39             br SERIAL_SAMPLE_BIT ;16
                        ;----------------------------------------------
                        
                        ;-PRINT----------------------------------------
                        ;-FIRST CHAR-R6--------------------------------
   0152                 PRINT
   0152   e6                sex R6          ;set X register to R6
   0153   72                ldxa            ;load data to D and increment R6
   0154   c6                lsnz            ;if it is not zero then long skip
   0155   de                sep RETURN
   0156   c4                nop
                            
   0157   b4                phi R4          ;put D register to R4 to send it
                            
   0158   f8 13             ldi SERIAL_SEND_START.0     ;prepare to call SERIAL_SEND
   015a   ad                plo CALL_REG
   015b   f8 01             ldi SERIAL_SEND_START.1
   015d   bd                phi CALL_REG
                            
   015e   f8 00             ldi FCALL.0
   0160   ae                plo FCALL_REG
   0161   de                sep FCALL_REG   ;call SERIAL_SEND
   0162   30 52             br PRINT
                        ;----------------------------------------------
                        
   0164                 BACKSPACE_ACTION
   0164   08 20 08 00       db 8, 32, 8, 0
                        ;-READ LINE------------------------------------
                        ;-WHERE TO READ-R7-----------------------------
                        ;-R8.1-Character counter-------------------------
   0168                 READLINE
   0168   f8 00             ldi 0
   016a   a8                plo R8
                            
   016b                 READLINE_LOOP
   016b   f8 2d             ldi SERIAL_READ_START.0     ;prepare calling SERIAL_READ
   016d   ad                plo CALL_REG
   016e   f8 01             ldi SERIAL_READ_START.1
   0170   bd                phi CALL_REG
                            
   0171   f8 00             ldi FCALL.0
   0173   ae                plo FCALL_REG
   0174   de                sep FCALL_REG       ;call SERIAL_READ
                            
   0175   95                ghi R5              ;get the result of SERIAL_READ
   0176   fb 0d             xri 13              ;check if it is 13 (ENTER KEY)
   0178   3a 8e             bnz READLINE_BACKSPACE      ;if not jump to READLINE_BACKSPACE
                            
   017a                 END_LINE
   017a   f8 00             ldi 00h             ;put 0 to the endof the string
   017c   57                str R7
                            
   017d   f8 6c             ldi NEW_LINE.0      ;load the address of CRLF string
   017f   a6                plo R6
   0180   f8 17             ldi NEW_LINE.1
   0182   b6                phi R6
                            
   0183   f8 52             ldi PRINT.0         ;prepare to call PRINT
   0185   ad                plo CALL_REG
   0186   f8 01             ldi PRINT.1
   0188   bd                phi CALL_REG
                            
   0189   f8 00             ldi FCALL.0
   018b   ae                plo FCALL_REG
   018c   de                sep FCALL_REG       ;call PRINT
                            
   018d   de                sep RETURN          ;RETURN from READLINE
                            
   018e                 READLINE_BACKSPACE
   018e   95                ghi R5              ;get the result of SERIAL_READ
   018f   fb 7f             xri 127             ;check if it is 127 (DEL)
   0191   3a aa             bnz STORE_CHAR      ;if not jump to STORE_CHAR
                            
   0193   88                glo R8
   0194   32 6b             bz READLINE_LOOP
                            
   0196   f8 64             ldi BACKSPACE_ACTION.0      ;load the address of the backspace action
   0198   a6                plo R6
   0199   f8 01             ldi BACKSPACE_ACTION.1
   019b   b6                phi R6
                            
   019c   f8 52             ldi PRINT.0                 ;prepare to call PRINT
   019e   ad                plo CALL_REG
   019f   f8 01             ldi PRINT.1
   01a1   bd                phi CALL_REG
                            
   01a2   f8 00             ldi FCALL.0
   01a4   ae                plo FCALL_REG
   01a5   de                sep FCALL_REG               ;call PRINT
                            
   01a6   27                dec R7
   01a7   28                dec R8
                            
   01a8   30 6b             br READLINE_LOOP
                            
   01aa                 STORE_CHAR
   01aa   88                glo R8
   01ab   fb ff             xri 0FFh
   01ad   32 6b             bz READLINE_LOOP
                            
   01af   95                ghi R5              ;get the result of the SERIAL_READ again
   01b0   57                str R7              ;store it where R7 pointing
   01b1   17                inc R7              ;increment R7
   01b2   18                inc R8
                            
   01b3   b4                phi R4              ;load the result to R4 to Echo it back
                            
   01b4   f8 13             ldi SERIAL_SEND_START.0     ;prepare to call SERIAL_SEND
   01b6   ad                plo CALL_REG
   01b7   f8 01             ldi SERIAL_SEND_START.1
   01b9   bd                phi CALL_REG
                            
   01ba   f8 00             ldi FCALL.0
   01bc   ae                plo FCALL_REG
   01bd   de                sep FCALL_REG       ;call SERIAL_SEND
   01be   30 6b             br READLINE_LOOP
                        ;----------------------------------------------
                        
                        ;-STR COMPARATOR-------------------------------
                        ;-R8 stringA-R9 stringB------------------------
                        ;-RETURN R10.0---------------------------------
   01c0                 STR_COMPARATOR
   01c0   f8 00             ldi 0           ;R10 low is the result, set it to 0
   01c2   aa                plo R10
                        	
   01c3                 STR_CHARCHECK
   01c3   08                ldn R8          ;load value from RAM[R8] to D register
   01c4   e9                sex R9          ;set X pointer to R9
   01c5   f3                xor             ;D = D ^ RAM[R9]
                            
   01c6   32 c9             bz STR_EQUAL    ;if D == 0 jump to STR_EQUAL
   01c8   de                sep RETURN      ;RETURN
                            
   01c9                 STR_EQUAL 
   01c9   08            	ldn R8          ;load value from RAM[R8] to D register again
   01ca   3a d0         	bnz STR_INC     ;if D != 0 jump to STR_INC
   01cc   f8 01         	ldi 1           ;set R10 to 1 and return
   01ce   aa            	plo R10
   01cf   de            	sep RETURN
                        	
   01d0                 STR_INC
   01d0   18            	inc R8          ;increment both address by 1
   01d1   19            	inc R9
   01d2   30 c3         	br STR_CHARCHECK
                        ;----------------------------------------------
                        
                        ;-INTEGER DIV----------------------------------
                        ;-R4 pointing to divident----------------------
                        ;-R5 pointing to divider-----------------------
                        ;-R6 pointing to quotient----------------------
                        ;-R7 pointing to remainder---------------------
                        ;-R8.0 bitcnt, R8.1 flags----------------------
                        ;-R9 general counter---------------------------
   01d4                 INTEGER_DIV
   01d4   ef                sex STACK_REG   ;set STACK_REG as data pointer to store variables in STACK
   01d5   f8 00             ldi 0           ;set bitcnt and flags to 0
   01d7   a8                plo R8
   01d8   b8                phi R8
                            
   01d9   15                inc R5          ;increment R5 to the MSB because we want to store the divider it in little-endian format
   01da   15                inc R5
   01db   15                inc R5
                            
   01dc   05                ldn R5          ;copying starts here
   01dd   73                stxd
   01de   25                dec R5
                            
   01df   05                ldn R5
   01e0   73                stxd
   01e1   25                dec R5
                            
   01e2   05                ldn R5
   01e3   73                stxd
   01e4   25                dec R5
                            
   01e5   05                ldn R5
   01e6   73                stxd            ;+11 divider, +11 shows the start of the data from the STACK pointer
                            
   01e7   f8 00             ldi 0           ;storing 0 for the subtractor
   01e9   73                stxd
   01ea   73                stxd
   01eb   73                stxd
   01ec   73                stxd            ;+7 subtractor
                            
   01ed   96                ghi R6          ;saving the quotient pointer
   01ee   73                stxd
   01ef   86                glo R6
   01f0   73                stxd            ;+5 quotient pointer
                        
   01f1   97                ghi R7          ;saving the remainder
   01f2   73                stxd
   01f3   87                glo R7
   01f4   73                stxd            ;+3 remainder pointer
                            
   01f5   94                ghi R4          ;saving the dividend pointer
   01f6   73                stxd
   01f7   84                glo R4
   01f8   73                stxd            ;+1 dividend pointer
                            
   01f9   e4                sex R4
                            
   01fa   72                ldxa            ;copy dividend to remainder
   01fb   57                str R7
   01fc   17                inc R7
                            
   01fd   72                ldxa
   01fe   57                str R7
   01ff   17                inc R7
                            
   0200   72                ldxa
   0201   57                str R7
   0202   17                inc R7
                            
   0203   f0                ldx
   0204   57                str R7
                            
   0205   f8 00             ldi 0
   0207   56                str R6
   0208   16                inc R6
   0209   56                str R6
   020a   16                inc R6
   020b   56                str R6
   020c   16                inc R6
   020d   56                str R6
                        
   020e   8f                glo STACK_REG   ;get the STACK_REG pointer to position it to the divider MSB
   020f   fc 0e             adi 14          ;add 14 to it
   0211   a5                plo R5          ;store the new pointer to R5
   0212   9f                ghi STACK_REG   ;get the STACK_REG high part to add the carry to it
   0213   7c 00             adci 0          ;adding the carry
   0215   b5                phi R5          ;store the new high part to R5
                            
   0216   e5                sex R5          ;set X data pointer to R5
   0217   f0                ldx             ;load data from RAM[R5]
   0218   25                dec R5          ;decrement R5 to set it back to the divider's LSB
   0219   25                dec R5
   021a   25                dec R5
   021b   fa 80             ani 080h        ;check if sign bit is set
                            
   021d   c2 02 34          lbz INTEGER_DIV_NEXT_CHECK
                            
   0220   f8 82             ldi 082h        ;load 0x82 to the D register
   0222   fe                shl             ;shit it left so it will set the carry flag and the D registre will be 4
   0223   a9                plo R9          ;store it to R9 low
                            
   0224                 INTEGER_DIV_INVERT_LOOP1
   0224   f0                ldx             ;load data from RAM[R5]
   0225   fb ff             xri 0FFh        ;xor D with 0xFF to invert it
   0227   7c 00             adci 0          ;add the carry for to the result (inver+1)
   0229   55                str R5          ;store the result to RAM[R5]
   022a   60                irx             ;increment R5
                        
   022b   29                dec R9          ;decrement R8
   022c   89                glo R9          ;get R8 low, and if it's not 0 then do the loop
   022d   ca 02 24          lbnz INTEGER_DIV_INVERT_LOOP1
                            
   0230   98                ghi R8          ;set the flag
   0231   f9 01             ori 1
   0233   b8                phi R8
                            
   0234                 INTEGER_DIV_NEXT_CHECK
   0234   8f                glo STACK_REG
   0235   fc 03             adi 3
   0237   a9                plo R9
   0238   9f                ghi STACK_REG
   0239   7c 00             adci 0
   023b   b9                phi R9
                            
   023c   09                ldn R9              ;restore and get remainder MSB
   023d   fc 03             adi 3
   023f   a4                plo R4
   0240   19                inc R9
   0241   09                ldn R9
   0242   7c 00             adci 0
   0244   b4                phi R4
                            
   0245   e4                sex R4
   0246   f0                ldx
   0247   24                dec R4
   0248   24                dec R4
   0249   24                dec R4
   024a   fa 80             ani 080h            ;check if sign bit is set
                            
   024c   c2 02 62          lbz INTEGER_SHIFT_DR
                            
   024f   f8 82             ldi 082h
   0251   fe                shl
   0252   a9                plo R9
                            
   0253                 INVERT_LOOP2
   0253   f0                ldx         ;invert byte 3
   0254   fb ff             xri 0FFh
   0256   7c 00             adci 0
   0258   54                str R4
   0259   60                irx
                        
   025a   29                dec R9
   025b   89                glo R9
   025c   3a 53             bnz INVERT_LOOP2
                            
   025e   98                ghi R8      ;set the flag
   025f   f9 02             ori 2
   0261   b8                phi R8
                            
   0262                 INTEGER_SHIFT_DR
   0262   8f                glo STACK_REG ;get divider MSB
   0263   fc 0b             adi 11
   0265   a5                plo R5
   0266   9f                ghi STACK_REG
   0267   7c 00             adci 0
   0269   b5                phi R5
                            
   026a   f8 00             ldi 0
   026c   e5                sex R5
   026d   f1                or
   026e   60                irx
   026f   f1                or
   0270   60                irx
   0271   f1                or
   0272   60                irx
   0273   f1                or
   0274   32 8d             bz DIVISION_LOOP
                            
   0276                 SHIFT_DR
   0276   8f                glo STACK_REG ;get divider MSB
   0277   fc 0e             adi 14
   0279   a5                plo R5
   027a   9f                ghi STACK_REG
   027b   7c 00             adci 0
   027d   b5                phi R5
                            
   027e   e5                sex R5
                            
   027f   f8 04             ldi 4
   0281   fe                shl
   0282   a9                plo R9
                            
   0283                 CARRY_SHIFTING
   0283   f0                ldx
   0284   76                shrc
   0285   73                stxd
                            
   0286   29                dec R9
   0287   89                glo R9
   0288   3a 83             bnz CARRY_SHIFTING
                            
   028a   18                inc R8
                            
   028b   30 62             br INTEGER_SHIFT_DR
                            
   028d                 DIVISION_LOOP
   028d   88                glo R8              ;get R8 low
   028e   fd 20             sdi 32              ;if larger than 32 then finish the loop
   0290   cb 03 1f          lbnf FINAL_CHECK
                        
   0293   8f                glo STACK_REG       ;restore quotient pointer to R6
   0294   fc 05             adi 5
   0296   a9                plo R9
   0297   9f                ghi STACK_REG
   0298   7c 00             adci 0
   029a   b9                phi R9
                            
   029b   09                ldn R9
   029c   a6                plo R6
   029d   19                inc R9
   029e   09                ldn R9
   029f   b6                phi R6
                            
   02a0   e6                sex R6
                            
   02a1   f8 02             ldi 2
   02a3   fe                shl
   02a4   a9                plo R9
                            
   02a5                 SHIFTING_Q
   02a5   f0                ldx                 ;shifting quotient to left
   02a6   7e                shlc
   02a7   56                str R6
   02a8   60                irx
                        
   02a9   29                dec R9
   02aa   89                glo R9
   02ab   3a a5             bnz SHIFTING_Q
                            
   02ad   8f                glo STACK_REG    ;restore remainder pointer to R4
   02ae   fc 03             adi 3
   02b0   a9                plo R9
   02b1   9f                ghi STACK_REG
   02b2   7c 00             adci 0
   02b4   b9                phi R9
                            
   02b5   09                ldn R9
   02b6   a4                plo R4
   02b7   19                inc R9
   02b8   09                ldn R9
   02b9   b4                phi R4
                            
   02ba   8f                glo STACK_REG    ;restore subtractor pointer to R5
   02bb   fc 07             adi 7
   02bd   a5                plo R5
   02be   9f                ghi STACK_REG
   02bf   7c 00             adci 0
   02c1   b5                phi R5
                            
   02c2   e4                sex R4
   02c3   f8 82             ldi 082h
   02c5   fe                shl
   02c6   a9                plo R9
                            
   02c7                 TRY_SUBTRACTING         ;try subtracting
   02c7   05                ldn R5
   02c8   75                sdb
   02c9   60                irx
   02ca   15                inc R5
                            
   02cb   29                dec R9
   02cc   89                glo R9
   02cd   3a c7             bnz TRY_SUBTRACTING
                            
   02cf   cb 03 07          lbnf NEXT_BIT        ;if subtracting unsuccesful, jump to NEXT_BIT
                            
   02d2   8f                glo STACK_REG
   02d3   fc 05             adi 5
   02d5   a9                plo R9
   02d6   9f                ghi STACK_REG
   02d7   7c 00             adci 0
   02d9   b9                phi R9
                            
   02da   09                ldn R9
   02db   a6                plo R6
   02dc   19                inc R9
   02dd   09                ldn R9
   02de   b6                phi R6
                            
   02df   06                ldn R6
   02e0   f9 01             ori 1
   02e2   56                str R6
                            
   02e3   8f                glo STACK_REG    ;restore remainder pointer
   02e4   fc 03             adi 3
   02e6   a9                plo R9
   02e7   9f                ghi STACK_REG
   02e8   7c 00             adci 0
   02ea   b9                phi R9
                            
   02eb   09                ldn R9
   02ec   a4                plo R4
   02ed   19                inc R9
   02ee   09                ldn R9
   02ef   b4                phi R4
                            
   02f0   8f                glo STACK_REG    ;restore subtractor's pointer to R5
   02f1   fc 07             adi 7
   02f3   a5                plo R5
   02f4   9f                ghi STACK_REG
   02f5   7c 00             adci 0
   02f7   b5                phi R5
                            
   02f8   e4                sex R4
                            
   02f9   f8 82             ldi 082h
   02fb   fe                shl
   02fc   a9                plo R9
                            
   02fd                 SUBTRACT_FOR_REAL
   02fd   05                ldn R5          ;subtract the subtractor from the remainder and store it
   02fe   75                sdb
   02ff   54                str R4
   0300   60                irx
   0301   15                inc R5
                            
   0302   29                dec R9
   0303   89                glo R9
   0304   ca 02 fd          lbnz SUBTRACT_FOR_REAL
                            
   0307                 NEXT_BIT
   0307   8f                glo STACK_REG    ;restore subtractor pointer to R5 and set it to MSB
   0308   fc 0a             adi 10
   030a   a5                plo R5
   030b   9f                ghi STACK_REG
   030c   7c 00             adci 0
   030e   b5                phi R5
                            
   030f   e5                sex R5
   0310   f8 02             ldi 2
   0312   fe                shl
   0313   a9                plo R9
                            
   0314                 SHIFT_SUBTRACTOR
   0314   f0                ldx
   0315   76                shrc
   0316   73                stxd
                            
   0317   29                dec R9
   0318   89                glo R9
   0319   3a 14             bnz SHIFT_SUBTRACTOR
                            
   031b   18                inc R8
   031c   c0 02 8d          lbr DIVISION_LOOP
                            
   031f                 FINAL_CHECK
   031f   98                ghi R8
   0320   fa 02             ani 2
   0322   c2 03 43          lbz FINAL_CHECK2
                            
   0325   8f                glo STACK_REG    ;restore remainder pointer to R4
   0326   fc 03             adi 3
   0328   a9                plo R9
   0329   9f                ghi STACK_REG
   032a   7c 00             adci 0
   032c   b9                phi R9
                            
   032d   09                ldn R9
   032e   a4                plo R4
   032f   19                inc R9
   0330   09                ldn R9
   0331   b4                phi R4
                            
   0332   e4                sex R4
                            
   0333   f8 82             ldi 082h
   0335   fe                shl
   0336   a9                plo R9
                            
   0337                 INVERT_LOOP3
   0337   f0                ldx
   0338   fb ff             xri 0FFh
   033a   7c 00             adci 0
   033c   54                str R4
   033d   60                irx
                            
   033e   29                dec R9
   033f   89                glo R9
   0340   ca 03 37          lbnz INVERT_LOOP3
                            
   0343                 FINAL_CHECK2
   0343   98                ghi R8
   0344   c2 03 69          lbz THE_END
   0347   fb 03             xri 3
   0349   c2 03 69          lbz THE_END
                            
   034c   8f                glo STACK_REG    ;restore quotient pointer to R6
   034d   fc 05             adi 5
   034f   a9                plo R9
   0350   9f                ghi STACK_REG
   0351   7c 00             adci 0
   0353   b9                phi R9
                            
   0354   09                ldn R9
   0355   a6                plo R6
   0356   19                inc R9
   0357   09                ldn R9
   0358   b6                phi R6
                            
   0359   e6                sex R6
                            
   035a   f8 82             ldi 082h
   035c   fe                shl
   035d   a9                plo R9
                            
   035e                 INVERT_LOOP4
   035e   f0                ldx
   035f   fb ff             xri 0FFh
   0361   7c 00             adci 0
   0363   56                str R6
   0364   60                irx
                            
   0365   29                dec R9
   0366   89                glo R9
   0367   3a 5e             bnz INVERT_LOOP4
                        
   0369                 THE_END
   0369   8f                glo STACK_REG       ;setting back the STACK_REG for return
   036a   fc 0e             adi 14
   036c   af                plo STACK_REG
   036d   9f                ghi STACK_REG
   036e   7c 00             adci 0
   0370   bf                phi STACK_REG
                            
   0371   de                sep RETURN          ;RETURN
                        ;----------------------------------------------
                        
                        ;-INTEGER MUL----------------------------------
                        ;-R4-multiplicand pointer----------------------
                        ;-R5-multiplier pointer------------------------
                        ;-R6-result pointer----------------------------
                        ;-R7-general register--------------------------
   0372                 INTEGER_MUL
   0372   ef                sex STACK_REG
                            
   0373   14                inc R4      ;increment R4 and R5 pointer to MSB
   0374   14                inc R4      ;to copy the values to the local variables
   0375   14                inc R4
                            
   0376   15                inc R5
   0377   15                inc R5
   0378   15                inc R5
                            
   0379   04                ldn R4      ;copying starts here
   037a   73                stxd
   037b   24                dec R4
                            
   037c   04                ldn R4
   037d   73                stxd
   037e   24                dec R4
                            
   037f   04                ldn R4
   0380   73                stxd
   0381   24                dec R4
                            
   0382   04                ldn R4
   0383   73                stxd        ;+7 multiplicand
                            
   0384   05                ldn R5
   0385   73                stxd
   0386   25                dec R5
                            
   0387   05                ldn R5
   0388   73                stxd
   0389   25                dec R5
                            
   038a   05                ldn R5
   038b   73                stxd
   038c   25                dec R5
                            
   038d   05                ldn R5
   038e   73                stxd        ;+3 multiplier
                            
   038f   96                ghi R6
   0390   73                stxd
   0391   86                glo R6
   0392   73                stxd        ;+1 result pointer
                        
   0393   f8 00             ldi 0       ;zeroing the result
                            
   0395   56                str R6
   0396   16                inc R6
                            
   0397   56                str R6
   0398   16                inc R6
                            
   0399   56                str R6
   039a   16                inc R6
                            
   039b   56                str R6
                            
   039c   26                dec R6
   039d   26                dec R6
   039e   26                dec R6
                        
   039f                 INTEGER_MUL_LOOP
   039f   8f                glo STACK_REG   ;restore multiplier pointer
   03a0   fc 03             adi 3
   03a2   a5                plo R5
   03a3   9f                ghi STACK_REG
   03a4   7c 00             adci 0
   03a6   b5                phi R5
                            
   03a7   e5                sex R5          ;check if multiplier is 0
   03a8   f8 00             ldi 0
   03aa   f1                or
   03ab   60                irx
   03ac   f1                or
   03ad   60                irx
   03ae   f1                or
   03af   60                irx
   03b0   f1                or
                            
   03b1   25                dec R5
   03b2   25                dec R5
   03b3   25                dec R5
                            
   03b4   c2 04 09          lbz INTEGER_MUL_END      ;if 0 then jump to the end
                            
   03b7   05                ldn R5                  ;load the multiplier's LSB
   03b8   fa 01             ani 1                   ;filter for the LSb
   03ba   32 dc             bz INTEGER_MUL_SHIFT    ;if zero, skip the addition
                            
   03bc   8f                glo STACK_REG           ;restore multiplicand pointer
   03bd   fc 07             adi 7
   03bf   a4                plo R4
   03c0   9f                ghi STACK_REG
   03c1   7c 00             adci 0
   03c3   b4                phi R4
                            
   03c4   8f                glo STACK_REG           ;restore result pointer
   03c5   a7                plo R7
   03c6   9f                ghi STACK_REG
   03c7   b7                phi R7
   03c8   17                inc R7
                            
   03c9   07                ldn R7
   03ca   a5                plo R5
   03cb   17                inc R7
   03cc   07                ldn R7
   03cd   b5                phi R5
                            
   03ce   e5                sex R5
                            
   03cf   f8 02             ldi 2                   ;prepare addition
   03d1   fe                shl
   03d2   a7                plo R7
                            
   03d3                 INTEGER_MUL_ADD
   03d3   04                ldn R4
   03d4   74                adc
   03d5   55                str R5
   03d6   60                irx
   03d7   14                inc R4
                            
   03d8   27                dec R7
   03d9   87                glo R7
   03da   3a d3             bnz INTEGER_MUL_ADD
                        
   03dc                 INTEGER_MUL_SHIFT
                        
   03dc   8f                glo STACK_REG           ;set multiplier's pointer to MSB
   03dd   fc 06             adi 6                   ;to shift it right
   03df   a5                plo R5
   03e0   9f                ghi STACK_REG
   03e1   7c 00             adci 0
   03e3   b5                phi R5
                            
   03e4   e5                sex R5
                            
   03e5   f8 02             ldi 2
   03e7   fe                shl
   03e8   a7                plo R7
                            
   03e9                 INTEGER_MUL_SHMULTIPLIER
   03e9   f0                ldx                     ;shifting right the multiplier
   03ea   76                shrc
   03eb   73                stxd
                            
   03ec   27                dec R7
   03ed   87                glo R7
   03ee   3a e9             bnz INTEGER_MUL_SHMULTIPLIER
                            
   03f0   8f                glo STACK_REG           ;restore multiplicand pointer
   03f1   fc 07             adi 7                   ;to shift it left
   03f3   a4                plo R4
   03f4   9f                ghi STACK_REG
   03f5   7c 00             adci 0
   03f7   b4                phi R4
                            
   03f8   e4                sex R4
                            
   03f9   f8 02             ldi 2
   03fb   fe                shl
   03fc   a7                plo R7
                            
   03fd                 INTEGER_MUL_SHMULTIPLICAND
   03fd   f0                ldx                     ;shifting the multiplicand left
   03fe   7e                shlc
   03ff   54                str R4
   0400   60                irx
                        
   0401   27                dec R7
   0402   87                glo R7
   0403   ca 03 fd          lbnz INTEGER_MUL_SHMULTIPLICAND
                            
   0406   c0 03 9f          lbr INTEGER_MUL_LOOP
                            
   0409                 INTEGER_MUL_END
   0409   8f                glo STACK_REG
   040a   fc 0a             adi 10
   040c   af                plo STACK_REG
   040d   9f                ghi STACK_REG
   040e   7c 00             adci 0
   0410   bf                phi STACK_REG
                            
   0411   de                sep RETURN          ;RETURN    
                        ;----------------------------------------------
                        
                        ;-PRINT HEX------------------------------------
                        ;-R4-int pointer-------------------------------
                        ;-R5.0-number of digits------------------------
                        ;-Local registers------------------------------
                        ;-R5.1-flag, R6--------------------------------
   0412                 HEX_CHARS
   0412   30 31 32 33       db "0123456789ABCDEF"
   0416   34 35 36 37   
   041a   38 39 41 42   
   041e   43 44 45 46   
                        ;----------------------------------------------
   0422                 PRINT_HEX
   0422   ef                sex STACK_REG
                            
   0423   95                ghi R5  ;saving the state of the local registers
   0424   73                stxd
                            
   0425   96                ghi R6
   0426   73                stxd
   0427   86                glo R6
   0428   73                stxd
                            
   0429   14                inc R4  ;making a copy of the Integer
   042a   14                inc R4
   042b   14                inc R4
                            
   042c   04                ldn R4
   042d   73                stxd
   042e   24                dec R4
   042f   04                ldn R4
   0430   73                stxd
   0431   24                dec R4
   0432   04                ldn R4
   0433   73                stxd
   0434   24                dec R4
   0435   04                ldn R4
   0436   73                stxd    ;+2 the integer
                            
   0437   f8 00             ldi 0   ;+1 
   0439   73                stxd
                            
   043a   8f                glo STACK_REG   ;set R4 to point to the Integer
   043b   a4                plo R4
   043c   9f                ghi STACK_REG
   043d   b4                phi R4
   043e   14                inc R4
   043f   14                inc R4
                            
   0440   f8 00             ldi 0           ;set R5 flags to 0
   0442   b5                phi R5
   0443   85                glo R5              
   0444   3a 49             bnz PRINT_UNTIL_R
   0446   f8 01             ldi 1           ;if R5 low, the number of digits, is zero, then set R5 flag
   0448   b5                phi R5
                        
   0449                 PRINT_UNTIL_R
   0449   95                ghi R5                  ;check the flag if set or not
   044a   32 5e             bz PRINT_CHECK_DIGIT    
   044c   e4                sex R4              ;checking the integer if it's zero
   044d   f8 00             ldi 0
   044f   f1                or
   0450   60                irx
   0451   f1                or
   0452   60                irx
   0453   f1                or
   0454   60                irx
   0455   f1                or
                            
   0456   24                dec R4
   0457   24                dec R4
   0458   24                dec R4
                            
   0459   ef                sex STACK_REG    
   045a   3a 61             bnz PRINT_DIGIT_LOOP
   045c   30 8f             br PRINT_HEX_END
                            
   045e                 PRINT_CHECK_DIGIT
   045e   85                glo R5
   045f   32 8f             bz PRINT_HEX_END
                        
   0461                 PRINT_DIGIT_LOOP
   0461   04                ldn R4
   0462   fa 0f             ani 0Fh
   0464   5f                str STACK_REG
   0465   f8 12             ldi HEX_CHARS.0
   0467   f4                add
   0468   a6                plo R6
   0469   f8 04             ldi HEX_CHARS.1
   046b   7c 00             adci 0
   046d   b6                phi R6
                            
   046e   06                ldn R6
   046f   73                stxd
                            
   0470   f8 04             ldi 4
   0472   a6                plo R6
                            
   0473                 PRINT_HEX_SHIFT_LOOP1
   0473   14                inc R4
   0474   14                inc R4
   0475   14                inc R4
                            
   0476   04                ldn R4
   0477   f6                shr
   0478   54                str R4
   0479   24                dec R4
                            
   047a   04                ldn R4
   047b   76                shrc
   047c   54                str R4
   047d   24                dec R4
                            
   047e   04                ldn R4
   047f   76                shrc
   0480   54                str R4
   0481   24                dec R4
                            
   0482   04                ldn R4
   0483   76                shrc
   0484   54                str R4
                            
   0485   26                dec R6
   0486   86                glo R6
   0487   3a 73             bnz PRINT_HEX_SHIFT_LOOP1
                            
   0489   95                ghi R5      ;check if R5 flag is set, if set then skip decrementing.
   048a   c6                lsnz
   048b   25                dec R5
   048c   c4                nop
   048d   30 49             br PRINT_UNTIL_R
                        
   048f                 PRINT_HEX_END
   048f   8f                glo STACK_REG
   0490   a6                plo R6
   0491   9f                ghi STACK_REG
   0492   b6                phi R6
   0493   16                inc R6
                            
   0494   f8 52             ldi PRINT.0     ;prepare to call PRINT
   0496   ad                plo CALL_REG
   0497   f8 01             ldi PRINT.1
   0499   bd                phi CALL_REG
                            
   049a   f8 00             ldi FCALL.0
   049c   ae                plo FCALL_REG
   049d   de                sep FCALL_REG
                            
   049e   86                glo R6
   049f   fc 04             adi 4
   04a1   af                plo STACK_REG
   04a2   96                ghi R6
   04a3   7c 00             adci 0
   04a5   bf                phi STACK_REG
                            
   04a6   ef                sex STACK_REG   ;restore local registers
   04a7   72                ldxa
   04a8   a6                plo R6
   04a9   72                ldxa
   04aa   b6                phi R6
   04ab   f0                ldx
   04ac   b5                phi R5
                            
   04ad   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-PRINT DEC------------------------------------
                        ;-R4-int pointer-------------------------------
                        ;-Local registers------------------------------
                        ;-R5-R6-R7-R10-R12-----------------------------
                        ;-R10-flags------------------------------------
   04ae                 PRINT_DEC
   04ae   ef                sex STACK_REG
                            
   04af   95                ghi R5          ;saving local registers
   04b0   73                stxd
   04b1   85                glo R5
   04b2   73                stxd
                            
   04b3   96                ghi R6
   04b4   73                stxd
   04b5   86                glo R6
   04b6   73                stxd
                            
   04b7   97                ghi R7
   04b8   73                stxd
   04b9   87                glo R7
   04ba   73                stxd
                        
   04bb   9a                ghi R10
   04bc   73                stxd
   04bd   8a                glo R10
   04be   73                stxd
                            
   04bf   9c                ghi R12
   04c0   73                stxd
   04c1   8c                glo R12
   04c2   73                stxd
                            
   04c3   f8 00             ldi 0
   04c5   aa                plo R10
   04c6   ba                phi R10
                            
   04c7   14                inc R4
   04c8   14                inc R4
   04c9   14                inc R4
                            
   04ca   04                ldn R4
   04cb   73                stxd
   04cc   24                dec R4
   04cd   04                ldn R4
   04ce   73                stxd
   04cf   24                dec R4
   04d0   04                ldn R4
   04d1   73                stxd
   04d2   24                dec R4
   04d3   04                ldn R4
   04d4   73                stxd        ;+10 the integer
                            
   04d5   f8 00             ldi 0
   04d7   73                stxd
   04d8   73                stxd
   04d9   73                stxd
   04da   f8 0a             ldi 0Ah
   04dc   73                stxd        ;+6 divider
                            
   04dd   f8 00             ldi 0
   04df   73                stxd
   04e0   73                stxd
   04e1   73                stxd
   04e2   73                stxd        ;+2 remainder
                            
   04e3   73                stxd        ;+1 output string buffer end
                            
   04e4   8f                glo STACK_REG
   04e5   ac                plo R12
   04e6   9f                ghi STACK_REG
   04e7   bc                phi R12
                            
   04e8   8c                glo R12
   04e9   fc 0d             adi 13
   04eb   a4                plo R4
   04ec   9c                ghi R12
   04ed   7c 00             adci 0
   04ef   b4                phi R4
                            
   04f0   e4                sex R4
   04f1   f0                ldx
   04f2   fa 80             ani 080h
   04f4   c2 05 0d          lbz PRINT_DEC_MAIN_LOOP
                            
   04f7   8a                glo R10
   04f8   f9 01             ori 1
   04fa   aa                plo R10
                            
   04fb   24                dec R4
   04fc   24                dec R4
   04fd   24                dec R4
                            
   04fe   f8 82             ldi 082h
   0500   fe                shl
   0501   a6                plo R6
                            
   0502                 PRINT_DEC_INVER_LOOP
   0502   f0                ldx
   0503   fb ff             xri 0FFh
   0505   7c 00             adci 0
   0507   54                str R4
   0508   14                inc R4
                            
   0509   26                dec R6
   050a   86                glo R6
   050b   3a 02             bnz PRINT_DEC_INVER_LOOP
                            
   050d                 PRINT_DEC_MAIN_LOOP    
   050d   8c                glo R12
   050e   fc 0a             adi 10
   0510   a4                plo R4
   0511   a6                plo R6
   0512   9c                ghi R12
   0513   7c 00             adci 0
   0515   b4                phi R4
   0516   b6                phi R6
                            
   0517   8c                glo R12
   0518   fc 06             adi 6
   051a   a5                plo R5
   051b   9c                ghi R12
   051c   7c 00             adci 0
   051e   b5                phi R5
                            
   051f   8c                glo R12
   0520   fc 02             adi 2
   0522   a7                plo R7
   0523   9c                ghi R12
   0524   7c 00             adci 0
   0526   b7                phi R7
                            
   0527   f8 d4             ldi INTEGER_DIV.0
   0529   ad                plo CALL_REG
   052a   f8 01             ldi INTEGER_DIV.1
   052c   bd                phi CALL_REG
                            
   052d   f8 00             ldi FCALL.0
   052f   ae                plo FCALL_REG
   0530   de                sep FCALL_REG
                            
   0531   ef                sex STACK_REG
                            
   0532   8c                glo R12
   0533   fc 02             adi 2
   0535   a7                plo R7
   0536   9c                ghi R12
   0537   7c 00             adci 0
   0539   b7                phi R7
                            
   053a   07                ldn R7
   053b   fc 30             adi 48
   053d   73                stxd
                            
   053e   8c                glo R12
   053f   fc 0a             adi 10
   0541   a4                plo R4
   0542   9c                ghi R12
   0543   7c 00             adci 0
   0545   b4                phi R4
                            
   0546   e4                sex R4
                            
   0547   f8 00             ldi 0
   0549   f1                or
   054a   60                irx
   054b   f1                or
   054c   60                irx
   054d   f1                or
   054e   60                irx
   054f   f1                or
                            
   0550   32 55             bz PRINT_DEC_END
   0552   c0 05 0d          lbr PRINT_DEC_MAIN_LOOP
                        
   0555                 PRINT_DEC_END
   0555   8a                glo R10
   0556   fa 01             ani 1
   0558   32 5e             bz PRINT_DEC_FINAL
                            
   055a   ef                sex STACK_REG
   055b   f8 2d             ldi 45
   055d   73                stxd
                        
   055e                 PRINT_DEC_FINAL
   055e   8f                glo STACK_REG
   055f   a6                plo R6
   0560   9f                ghi STACK_REG
   0561   b6                phi R6
   0562   16                inc R6
                            
   0563   f8 52             ldi PRINT.0
   0565   ad                plo CALL_REG
   0566   f8 01             ldi PRINT.1
   0568   bd                phi CALL_REG
                            
   0569   f8 00             ldi FCALL.0
   056b   ae                plo FCALL_REG
   056c   de                sep FCALL_REG
                            
   056d   8c                glo R12
   056e   fc 0e             adi 14
   0570   af                plo STACK_REG
   0571   9c                ghi R12
   0572   7c 00             adci 0
   0574   bf                phi STACK_REG
                            
   0575   ef                sex STACK_REG
                            
   0576   72                ldxa
   0577   ac                plo R12
   0578   72                ldxa
   0579   bc                phi R12
                            
   057a   72                ldxa
   057b   aa                plo R10
   057c   72                ldxa
   057d   ba                phi R10
                            
   057e   72                ldxa
   057f   a7                plo R7
   0580   72                ldxa
   0581   b7                phi R7
                            
   0582   72                ldxa
   0583   a6                plo R6
   0584   72                ldxa
   0585   b6                phi R6
                            
   0586   72                ldxa
   0587   a5                plo R5
   0588   f0                ldx
   0589   b5                phi R5
                            
   058a   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-READ DEC-------------------------------------
                        ;-R4-string pointer----------------------------
                        ;-R5-result pointer----------------------------
   058b                 READ_DEC
   058b   ef                sex STACK_REG
                            
   058c   94                ghi R4
   058d   73                stxd
   058e   84                glo R4
   058f   73                stxd        ;+7 string pointer
                            
   0590   95                ghi R5
   0591   73                stxd
   0592   85                glo R5
   0593   73                stxd        ;+5 result pointer
                            
   0594   f8 00             ldi 0
   0596   73                stxd
   0597   73                stxd
   0598   73                stxd
   0599   f8 0a             ldi 0Ah
   059b   73                stxd        ;+1 multiplier
                            
   059c   f8 00             ldi 0       ;set result to 0
   059e   55                str R5
   059f   15                inc R5
   05a0   55                str R5
   05a1   15                inc R5
   05a2   55                str R5
   05a3   15                inc R5
   05a4   55                str R5
                            
   05a5                 READ_DEC_MAIN_LOOP
   05a5   8f                glo STACK_REG
   05a6   fc 07             adi 7
   05a8   a6                plo R6
   05a9   9f                ghi STACK_REG
   05aa   7c 00             adci 0
   05ac   b6                phi R6
                            
   05ad   06                ldn R6
   05ae   a4                plo R4
   05af   16                inc R6
   05b0   06                ldn R6
   05b1   b4                phi R4
                            
   05b2   04                ldn R4
   05b3   ff 30             smi 48
   05b5   cb 06 1c          lbnf READ_DEC_END
   05b8   ff 0a             smi 10
   05ba   c3 06 1c          lbdf READ_DEC_END
                            
   05bd   8f                glo STACK_REG
   05be   fc 05             adi 5
   05c0   a6                plo R6
   05c1   9f                ghi STACK_REG
   05c2   7c 00             adci 0
   05c4   b6                phi R6
                            
   05c5   06                ldn R6
   05c6   a4                plo R4
   05c7   16                inc R6
   05c8   06                ldn R6
   05c9   b4                phi R4
                            
   05ca   b6                phi R6
   05cb   84                glo R4
   05cc   a6                plo R6
                            
   05cd   8f                glo STACK_REG
   05ce   a5                plo R5
   05cf   9f                ghi STACK_REG
   05d0   b5                phi R5
   05d1   15                inc R5
                            
   05d2   f8 72             ldi INTEGER_MUL.0     ;prepare to call INTEGER_MUL
   05d4   ad                plo CALL_REG
   05d5   f8 03             ldi INTEGER_MUL.1       
   05d7   bd                phi CALL_REG
                            
   05d8   f8 00             ldi FCALL.0
   05da   ae                plo FCALL_REG
   05db   de                sep FCALL_REG
                            
   05dc   8f                glo STACK_REG
   05dd   fc 07             adi 7
   05df   a6                plo R6
   05e0   9f                ghi STACK_REG
   05e1   7c 00             adci 0
   05e3   b6                phi R6
                            
   05e4   06                ldn R6
   05e5   a4                plo R4
   05e6   16                inc R6
   05e7   06                ldn R6
   05e8   b4                phi R4
                            
   05e9   8f                glo STACK_REG
   05ea   fc 05             adi 5
   05ec   a6                plo R6
   05ed   9f                ghi STACK_REG
   05ee   7c 00             adci 0
   05f0   b6                phi R6
                            
   05f1   06                ldn R6
   05f2   a5                plo R5
   05f3   16                inc R6
   05f4   06                ldn R6
   05f5   b5                phi R5
                            
   05f6   e5                sex R5
                            
   05f7   04                ldn R4
   05f8   ff 30             smi 48
                            
   05fa   f4                add
   05fb   55                str R5
   05fc   15                inc R5
                            
   05fd   f8 00             ldi 0
   05ff   74                adc
   0600   55                str R5
   0601   15                inc R5
                            
   0602   f8 00             ldi 0
   0604   74                adc
   0605   55                str R5
   0606   15                inc R5
                            
   0607   f8 00             ldi 0
   0609   74                adc
   060a   55                str R5
                        
   060b   14                inc R4
                            
   060c   8f                glo STACK_REG
   060d   fc 07             adi 7
   060f   a6                plo R6
   0610   9f                ghi STACK_REG
   0611   7c 00             adci 0
   0613   b6                phi R6
                            
   0614   84                glo R4
   0615   56                str R6
   0616   16                inc R6
   0617   94                ghi R4
   0618   56                str R6
                            
   0619   c0 05 a5          lbr READ_DEC_MAIN_LOOP
                           
   061c                 READ_DEC_END
   061c   8f                glo STACK_REG
   061d   fc 05             adi 5
   061f   af                plo STACK_REG
   0620   9f                ghi STACK_REG
   0621   7c 00             adci 0
   0623   bf                phi STACK_REG
                            
   0624   ef                sex STACK_REG
                            
   0625   72                ldxa            ;restore R4 and R5
   0626   a5                plo R5
   0627   72                ldxa
   0628   b5                phi R5
   0629   72                ldxa
   062a   a4                plo R4
   062b   f0                ldx
   062c   b4                phi R4
                            
   062d   de                sep RETURN      ;RETURN    
                        ;----------------------------------------------
                        
                        ;-READ HEX-------------------------------------
                        ;-R4-string pointer----------------------------
                        ;-R5-result pointer----------------------------
   062e                 READ_HEX
   062e   ef                sex STACK_REG
                            
   062f   96                ghi R6
   0630   73                stxd
   0631   86                glo R6
   0632   73                stxd
                            
   0633   97                ghi R7
   0634   73                stxd
   0635   87                glo R7
   0636   73                stxd
                            
   0637   94                ghi R4
   0638   73                stxd
   0639   84                glo R4
   063a   73                stxd        ;+3 string pointer
                            
   063b   95                ghi R5
   063c   73                stxd
   063d   85                glo R5
   063e   73                stxd        ;+1 result pointer
                            
   063f   f8 00             ldi 0       ;set result to 0
   0641   55                str R5
   0642   15                inc R5
   0643   55                str R5
   0644   15                inc R5
   0645   55                str R5
   0646   15                inc R5
   0647   55                str R5
                            
   0648   25                dec R5
   0649   25                dec R5
   064a   25                dec R5
                            
   064b                 READ_HEX_MAINLOOP
   064b   f8 00             ldi 0
   064d   a7                plo R7
                            
   064e   04                ldn R4
   064f   ff 30             smi 48
   0651   3b 9e             bm READ_HEX_END
   0653   17                inc R7
   0654   ff 0a             smi 10
   0656   3b 6a             bm READ_HEX_CONTINUE
   0658   ff 07             smi 7
   065a   3b 9e             bm READ_HEX_END
   065c   17                inc R7
   065d   ff 06             smi 6
   065f   3b 6a             bm READ_HEX_CONTINUE
   0661   ff 1a             smi 26
   0663   3b 9e             bm READ_HEX_END
   0665   17                inc R7
   0666   ff 06             smi 6
   0668   33 9e             bpz READ_HEX_END
                            
   066a                 READ_HEX_CONTINUE
   066a   f8 04             ldi 4
   066c   a6                plo R6
                        
   066d                 READ_HEX_SHIFTLOOP      ;result = result << 4
   066d   05                ldn R5
   066e   fe                shl
   066f   55                str R5
   0670   15                inc R5
                            
   0671   05                ldn R5
   0672   7e                shlc
   0673   55                str R5
   0674   15                inc R5
                            
   0675   05                ldn R5
   0676   7e                shlc
   0677   55                str R5
   0678   15                inc R5
                            
   0679   05                ldn R5
   067a   7e                shlc
   067b   55                str R5
                            
   067c   25                dec R5
   067d   25                dec R5
   067e   25                dec R5
                            
   067f   26                dec R6
   0680   86                glo R6
   0681   3a 6d             bnz READ_HEX_SHIFTLOOP
                            
   0683   e5                sex R5
                            
   0684   27                dec R7
   0685   87                glo R7
   0686   3a 8d             bnz READ_HEX_HEXDIGIT
   0688   04                ldn R4
   0689   ff 30             smi 48
   068b   30 99             br READ_HEX_NEXTCHAR
                        
   068d                 READ_HEX_HEXDIGIT   
   068d   27                dec R7
   068e   87                glo R7
   068f   3a 96             bnz READ_HEX_HEXDIGITLOWER
   0691   04                ldn R4
   0692   ff 37             smi 55
   0694   30 99             br READ_HEX_NEXTCHAR
                            
   0696                 READ_HEX_HEXDIGITLOWER
   0696   04                ldn R4
   0697   ff 57             smi 87
                            
   0699                 READ_HEX_NEXTCHAR
   0699   f4                add
   069a   55                str R5
   069b   14                inc R4
   069c   30 4b             br READ_HEX_MAINLOOP
                        
   069e                 READ_HEX_END
   069e   8f                glo STACK_REG
   069f   fc 05             adi 5
   06a1   af                plo STACK_REG
   06a2   9f                ghi STACK_REG
   06a3   7c 00             adci 0
   06a5   bf                phi STACK_REG
                            
   06a6   ef                sex STACK_REG
                            
   06a7   72                ldxa
   06a8   a7                plo R7
   06a9   72                ldxa
   06aa   b7                phi R7
                            
   06ab   72                ldxa
   06ac   a6                plo R6
   06ad   f0                ldx
   06ae   b6                phi R6
                            
   06af   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-READ-VAR-------------------------------------
                        ;-R4-string pointer----------------------------
                        ;-R5-result pointer----------------------------
                        ;-Local registers------------------------------
                        ;-R6-R7-R8-R9-R10------------------------------
   06b0                 READ_VAR
   06b0   ef                sex STACK_REG
                            
   06b1   96                ghi R6          ;saving local registers
   06b2   73                stxd
   06b3   86                glo R6
   06b4   73                stxd
                            
   06b5   97                ghi R7
   06b6   73                stxd
   06b7   87                glo R7
   06b8   73                stxd
                            
   06b9   98                ghi R8
   06ba   73                stxd
   06bb   88                glo R8
   06bc   73                stxd
                            
   06bd   99                ghi R9
   06be   73                stxd
   06bf   89                glo R9
   06c0   73                stxd
                            
   06c1   9a                ghi R10
   06c2   73                stxd
   06c3   8a                glo R10
   06c4   73                stxd
                            
   06c5   95                ghi R5
   06c6   73                stxd
   06c7   85                glo R5
   06c8   73                stxd                            ;+34 result pointer
                            
   06c9   8f                glo STACK_REG
   06ca   ff 21             smi 33
   06cc   af                plo STACK_REG
   06cd   9f                ghi STACK_REG
   06ce   7f 00             smbi 0
   06d0   bf                phi STACK_REG                   ;+1
                            
   06d1   8f                glo STACK_REG
   06d2   a5                plo R5
   06d3   9f                ghi STACK_REG
   06d4   b5                phi R5
   06d5   15                inc R5
                            
   06d6   f8 1f             ldi 31
   06d8   a6                plo R6
                            
   06d9                 READ_VAR_COPYLOOP
   06d9   04                ldn R4                  
   06da   ff 30             smi 48
   06dc   cb 07 11          lbnf READ_VAR_CONTINUE   ;if *R4 < '0'
   06df   04                ldn R4
   06e0   ff 3a             smi 58
   06e2   cb 07 06          lbnf READ_VAR_STRCHAR    ;if *R4 <= '9'
   06e5   04                ldn R4
   06e6   ff 41             smi 65
   06e8   cb 07 11          lbnf READ_VAR_CONTINUE   ;if *R4 < 'A'
   06eb   04                ldn R4
   06ec   ff 5b             smi 91
   06ee   cb 07 06          lbnf READ_VAR_STRCHAR    ;if *R4 <= 'Z'
   06f1   04                ldn R4
   06f2   fb 5f             xri 95
   06f4   c2 07 06          lbz READ_VAR_STRCHAR     ;if *R4 == '_'
   06f7   04                ldn R4
   06f8   ff 61             smi 97
   06fa   cb 07 11          lbnf READ_VAR_CONTINUE   ;if *R4 < 'a'
   06fd   04                ldn R4
   06fe   ff 7b             smi 123
   0700   cb 07 06          lbnf READ_VAR_STRCHAR    ;if *R4 <= 'z'
                            
   0703   c0 07 11          lbr READ_VAR_CONTINUE   ;
                            
   0706                 READ_VAR_STRCHAR
   0706   44                lda R4
   0707   55                str R5
   0708   86                glo R6
   0709   c2 06 d9          lbz READ_VAR_COPYLOOP
   070c   15                inc R5
   070d   26                dec R6
                        
   070e   c0 06 d9          lbr READ_VAR_COPYLOOP
                            
   0711                 READ_VAR_CONTINUE
   0711   f8 00             ldi 0
   0713   55                str R5
                            
   0714   f8 04             ldi VARLIST_FIRSTNODE.0         ;load the first node address
   0716   a5                plo R5
   0717   f8 21             ldi VARLIST_FIRSTNODE.1
   0719   b5                phi R5
                            
   071a                 READ_VAR_SEARCHLOOP
   071a   45                lda R5                              ;test if the address in R5 is zero or not.
   071b   3a 21             bnz READ_VAR_SEARCHLOOP_CONTINUE
   071d   05                ldn R5
   071e   c2 07 63          lbz READ_VAR_NOTFOUND
                            
   0721                 READ_VAR_SEARCHLOOP_CONTINUE
   0721   25                dec R5
                            
   0722   45                lda R5                              ;set R6 pointer to node address
   0723   a6                plo R6
   0724   45                lda R5
   0725   b6                phi R6
                            
   0726   16                inc R6                              ;skip next node
   0727   16                inc R6
                            
   0728   8f                glo STACK_REG
   0729   a9                plo R9
   072a   9f                ghi STACK_REG
   072b   b9                phi R9
   072c   19                inc R9
                            
   072d   46                lda R6                              ;load variableNode->name address to R8
   072e   a8                plo R8                              ;for comparing the strings
   072f   46                lda R6
   0730   b8                phi R8
                            
   0731   f8 c0             ldi STR_COMPARATOR.0                ;call STR_COMPARATOR
   0733   ad                plo CALL_REG
   0734   f8 01             ldi STR_COMPARATOR.1
   0736   bd                phi CALL_REG
                            
   0737   f8 00             ldi FCALL.0
   0739   ae                plo FCALL_REG
   073a   de                sep FCALL_REG
                            
   073b   8a                glo R10                             ;if R10 == 1 then READ_VAR_FOUND
   073c   ca 07 4a          lbnz READ_VAR_FOUND
                        
   073f                 READ_VAR_NEXTNODE
   073f   26                dec R6                              ;set back R6 to the base of the node
   0740   26                dec R6
   0741   26                dec R6
   0742   26                dec R6
                            
   0743   86                glo R6                              ;load next node address to R5
   0744   a5                plo R5
   0745   96                ghi R6
   0746   b5                phi R5
                            
   0747   c0 07 1a          lbr READ_VAR_SEARCHLOOP
                        
   074a                 READ_VAR_FOUND
   074a   8f                glo STACK_REG
   074b   fc 22             adi 34                               ;set R7 pointer to result pointer
   074d   a7                plo R7
   074e   9f                ghi STACK_REG
   074f   7c 00             adci 0
   0751   b7                phi R7
                            
   0752   47                lda R7
   0753   a5                plo R5
   0754   47                lda R7
   0755   b5                phi R5
                            
   0756   46                lda R6
   0757   55                str R5
   0758   15                inc R5
                            
   0759   46                lda R6
   075a   55                str R5
   075b   15                inc R5
                            
   075c   46                lda R6
   075d   55                str R5
   075e   15                inc R5
                            
   075f   46                lda R6
   0760   55                str R5
                            
   0761   30 78             br READ_VAR_END
                            
   0763                 READ_VAR_NOTFOUND
   0763   8f                glo STACK_REG
   0764   fc 22             adi 34                               ;set R7 pointer to result pointer
   0766   a7                plo R7
   0767   9f                ghi STACK_REG
   0768   7c 00             adci 0
   076a   b7                phi R7
                            
   076b   47                lda R7
   076c   a5                plo R5
   076d   47                lda R7
   076e   b5                phi R5
                            
   076f   f8 00             ldi 0
   0771   55                str R5
   0772   15                inc R5
                            
   0773   55                str R5
   0774   15                inc R5
                            
   0775   55                str R5
   0776   15                inc R5
                            
   0777   55                str R5
                        
   0778                 READ_VAR_END
   0778   8f                glo STACK_REG
   0779   fc 22             adi 34
   077b   af                plo STACK_REG
   077c   9f                ghi STACK_REG
   077d   7c 00             adci 0
   077f   bf                phi STACK_REG
                            
   0780   ef                sex STACK_REG
                            
   0781   72                ldxa
   0782   a5                plo R5
   0783   72                ldxa
   0784   b5                phi R5
                            
   0785   72                ldxa                ;restoring local registers
   0786   aa                plo R10
   0787   72                ldxa
   0788   ba                phi R10
                            
   0789   72                ldxa
   078a   a9                plo R9
   078b   72                ldxa
   078c   b9                phi R9
                            
   078d   72                ldxa
   078e   a8                plo R8
   078f   72                ldxa
   0790   b8                phi R8
                            
   0791   72                ldxa
   0792   a7                plo R7
   0793   72                ldxa
   0794   b7                phi R7
                            
   0795   72                ldxa
   0796   a6                plo R6
   0797   f0                ldx
   0798   b6                phi R6
                        
   0799   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-FACTOR---------------------------------------
                        ;-R4-string pointer----------------------------
                        ;-R5-result pointer----------------------------
                        ;-R10-result code------------------------------
   079a                 FACTOR
   079a   ef                sex STACK_REG
                            
   079b   94                ghi R4
   079c   73                stxd
   079d   84                glo R4
   079e   73                stxd    ;+4 string pt
                            
   079f   95                ghi R5
   07a0   73                stxd
   07a1   85                glo R5
   07a2   73                stxd    ;+2 result pt
                            
   07a3   f8 00             ldi 0
   07a5   73                stxd    ;+1 flag, indicates if the factor needs to be negated
                            
                            
   07a6                 FACTOR_MAIN
   07a6   04                ldn R4
   07a7   fb 20             xri 32
   07a9   c2 08 3b          lbz FACTOR_NEXT_CYCLE       ;if ' '
   07ac   04                ldn R4
   07ad   fb 2b             xri 43
   07af   c2 08 3b          lbz FACTOR_NEXT_CYCLE       ;if '+'
   07b2   04                ldn R4
   07b3   fb 2d             xri 45
   07b5   c2 08 30          lbz FACTOR_NEGATE           ;if '-'
   07b8   04                ldn R4
   07b9   fb 28             xri 40
   07bb   c2 08 16          lbz FACTOR_PARENTHESIS      ;if '('
                        
   07be   04                ldn R4
   07bf   ff 30             smi 48
   07c1   cb 08 3f          lbnf FACTOR_END             ;if *R4 < '0'
   07c4   ff 0a             smi 10
   07c6   cb 07 ee          lbnf FACTOR_READ_NUMBER     ;if *R4 <= '9'
                        
   07c9   04                ldn R4
   07ca   ff 41             smi 65
   07cc   cb 08 3f          lbnf FACTOR_END             ;if *R4 < 'A'
   07cf   04                ldn R4
   07d0   ff 5b             smi 91
   07d2   cb 07 e1          lbnf FACTOR_VAR             ;if *R4 <= 'Z'
                        
   07d5   04                ldn R4
   07d6   ff 61             smi 97
   07d8   cb 08 3f          lbnf FACTOR_END             ;if *R4 < 'a'
   07db   04                ldn R4
   07dc   ff 7b             smi 123
   07de   c3 08 3f          lbdf FACTOR_END             ;if *R4 > 'z'
                        
   07e1                 FACTOR_VAR
   07e1   f8 b0             ldi READ_VAR.0
   07e3   ad                plo CALL_REG
   07e4   f8 06             ldi READ_VAR.1
   07e6   bd                phi CALL_REG
                            
   07e7   f8 00             ldi FCALL.0
   07e9   ae                plo FCALL_REG
   07ea   de                sep FCALL_REG
                            
   07eb   c0 08 3f          lbr FACTOR_END
                        
   07ee                 FACTOR_READ_NUMBER
   07ee   04                ldn R4
   07ef   fb 30             xri 48
   07f1   3a fb             bnz FACTOR_READ_DEC         ;if *R4 != '0'
                            
   07f3   14                inc R4                      ;increment R4 to get the next char
   07f4   04                ldn R4
   07f5   fb 78             xri 120
   07f7   c2 08 08          lbz FACTOR_READ_HEX          ;if *R4 == 'x'
                            
   07fa   24                dec R4                      ;decrement R4 to step back
                        
   07fb                 FACTOR_READ_DEC    
   07fb   f8 8b             ldi READ_DEC.0
   07fd   ad                plo CALL_REG
   07fe   f8 05             ldi READ_DEC.1
   0800   bd                phi CALL_REG
                            
   0801   f8 00             ldi FCALL.0
   0803   ae                plo FCALL_REG
   0804   de                sep FCALL_REG
                            
   0805   c0 08 3f          lbr FACTOR_END
                            
   0808                 FACTOR_READ_HEX
   0808   14                inc R4
                            
   0809   f8 2e             ldi READ_HEX.0
   080b   ad                plo CALL_REG
   080c   f8 06             ldi READ_HEX.1
   080e   bd                phi CALL_REG
                            
   080f   f8 00             ldi FCALL.0
   0811   ae                plo FCALL_REG
   0812   de                sep FCALL_REG
                            
   0813   c0 08 3f          lbr FACTOR_END
                            
   0816                 FACTOR_PARENTHESIS
   0816   14                inc R4
                            
   0817   f8 65             ldi EXPRESSION.0
   0819   ad                plo CALL_REG
   081a   f8 09             ldi EXPRESSION.1
   081c   bd                phi CALL_REG
                            
   081d   f8 00             ldi FCALL.0
   081f   ae                plo FCALL_REG
   0820   de                sep FCALL_REG
                        
   0821                 FACTOR_PARENTHESIS_SKIPSPACES
   0821   44                lda R4
   0822   fb 20             xri 32
   0824   32 21             bz FACTOR_PARENTHESIS_SKIPSPACES
   0826   24                dec R4
                            
   0827   44                lda R4
   0828   fb 29             xri 41
   082a   c2 08 3f          lbz FACTOR_END
                            
   082d   c0 07 a6          lbr FACTOR_MAIN
                            
   0830                 FACTOR_NEGATE
   0830   8f                glo STACK_REG
   0831   a6                plo R6
   0832   9f                ghi STACK_REG
   0833   b6                phi R6
   0834   16                inc R6
                            
   0835   06                ldn R6
   0836   fb ff             xri 0FFh
   0838   fa 01             ani 1
   083a   56                str R6
                            
   083b                 FACTOR_NEXT_CYCLE
   083b   14                inc R4
   083c   c0 07 a6          lbr FACTOR_MAIN
                            
   083f                 FACTOR_END
   083f   8f                glo STACK_REG
   0840   a6                plo R6
   0841   9f                ghi STACK_REG
   0842   b6                phi R6
   0843   16                inc R6
                            
   0844   06                ldn R6
   0845   c2 08 65          lbz FACTOR_FINAL
                            
   0848   8f                glo STACK_REG
   0849   fc 02             adi 2
   084b   a6                plo R6
   084c   9f                ghi STACK_REG
   084d   7c 00             adci 0
   084f   b6                phi R6
                            
   0850   06                ldn R6
   0851   a5                plo R5
   0852   16                inc R6
   0853   06                ldn R6
   0854   b5                phi R5
                            
   0855   e5                sex R5
                            
   0856   f8 82             ldi 082h
   0858   fe                shl
   0859   a6                plo R6
                            
   085a                 FACTOR_INVERTING
   085a   f0                ldx
   085b   fb ff             xri 0FFh
   085d   7c 00             adci 0
   085f   55                str R5
   0860   60                irx
                            
   0861   26                dec R6
   0862   86                glo R6
   0863   3a 5a             bnz FACTOR_INVERTING
                            
   0865                 FACTOR_FINAL
   0865   8f                glo STACK_REG
   0866   fc 05             adi 5
   0868   af                plo STACK_REG
   0869   9f                ghi STACK_REG
   086a   7c 00             adci 0
   086c   bf                phi STACK_REG
                            
   086d   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-TERM-----------------------------------------
                        ;-R4-string pointer----------------------------
                        ;-R5-result------------------------------------
   086e                 TERM
   086e   ef                sex STACK_REG
                            
   086f   94                ghi R4
   0870   73                stxd
   0871   84                glo R4
   0872   73                stxd
                            
   0873   95                ghi R5
   0874   73                stxd
   0875   85                glo R5
   0876   73                stxd
                            
   0877   f8 9a             ldi FACTOR.0
   0879   ad                plo CALL_REG
   087a   f8 07             ldi FACTOR.1
   087c   bd                phi CALL_REG
                            
   087d   f8 00             ldi FCALL.0
   087f   ae                plo FCALL_REG
   0880   de                sep FCALL_REG
                            
   0881                 TERM_MAIN
   0881   04                ldn R4
   0882   fb 20             xri 32
   0884   c2 09 4f          lbz TERM_NEXT_CYCLE
   0887   04                ldn R4
   0888   fb 2a             xri 42
   088a   c2 08 fa          lbz TERM_MULTIPLY       ;if '*'
   088d   04                ldn R4
   088e   fb 2f             xri 47
   0890   32 95             bz TERM_DIVIDE          ;if '/'
                            
   0892   c0 09 53          lbr TERM_END
                            
   0895                 TERM_DIVIDE
   0895   14                inc R4
                            
   0896   f8 00             ldi 0
   0898   73                stxd
   0899   73                stxd
   089a   73                stxd
   089b   73                stxd    ;+5 remainder
                            
   089c   73                stxd
   089d   73                stxd
   089e   73                stxd
   089f   73                stxd    ;+1 divider
                            
   08a0   8f                glo STACK_REG
   08a1   a5                plo R5
   08a2   9f                ghi STACK_REG
   08a3   b5                phi R5
   08a4   15                inc R5
                            
   08a5   f8 9a             ldi FACTOR.0
   08a7   ad                plo CALL_REG
   08a8   f8 07             ldi FACTOR.1
   08aa   bd                phi CALL_REG
                            
   08ab   f8 00             ldi FCALL.0
   08ad   ae                plo FCALL_REG
   08ae   de                sep FCALL_REG
                            
   08af   8f                glo STACK_REG ;save R4 pointer
   08b0   fc 0b             adi 11
   08b2   a6                plo R6
   08b3   9f                ghi STACK_REG
   08b4   7c 00             adci 0
   08b6   b6                phi R6
                            
   08b7   84                glo R4
   08b8   56                str R6
   08b9   16                inc R6
   08ba   94                ghi R4
   08bb   56                str R6
                            
   08bc   8f                glo STACK_REG
   08bd   fc 09             adi 9
   08bf   a8                plo R8
   08c0   9f                ghi STACK_REG
   08c1   7c 00             adci 0
   08c3   b8                phi R8
                            
   08c4   08                ldn R8
   08c5   a4                plo R4
   08c6   a6                plo R6
   08c7   18                inc R8
   08c8   08                ldn R8
   08c9   b4                phi R4
   08ca   b6                phi R6
                            
   08cb   8f                glo STACK_REG
   08cc   a5                plo R5
   08cd   9f                ghi STACK_REG
   08ce   b5                phi R5
   08cf   15                inc R5
                            
   08d0   8f                glo STACK_REG
   08d1   fc 05             adi 5
   08d3   a7                plo R7
   08d4   9f                ghi STACK_REG
   08d5   7c 00             adci 0
   08d7   b7                phi R7
                            
   08d8   f8 d4             ldi INTEGER_DIV.0
   08da   ad                plo CALL_REG
   08db   f8 01             ldi INTEGER_DIV.1
   08dd   bd                phi CALL_REG
                            
   08de   f8 00             ldi FCALL.0
   08e0   ae                plo FCALL_REG
   08e1   de                sep FCALL_REG
                            
   08e2   8f                glo STACK_REG
   08e3   fc 0b             adi 11
   08e5   a6                plo R6
   08e6   9f                ghi STACK_REG
   08e7   7c 00             adci 0
   08e9   b6                phi R6
                            
   08ea   06                ldn R6
   08eb   a4                plo R4
   08ec   16                inc R6
   08ed   06                ldn R6
   08ee   b4                phi R4
                            
   08ef   8f                glo STACK_REG
   08f0   fc 08             adi 8
   08f2   af                plo STACK_REG
   08f3   9f                ghi STACK_REG
   08f4   7c 00             adci 0
   08f6   bf                phi STACK_REG
                        
   08f7   c0 08 81          lbr TERM_MAIN
                            
   08fa                 TERM_MULTIPLY
   08fa   14                inc R4
                            
   08fb   f8 00             ldi 0
   08fd   73                stxd
   08fe   73                stxd
   08ff   73                stxd
   0900   73                stxd
                            
   0901   8f                glo STACK_REG
   0902   a5                plo R5
   0903   9f                ghi STACK_REG
   0904   b5                phi R5
   0905   15                inc R5
                            
   0906   f8 9a             ldi FACTOR.0
   0908   ad                plo CALL_REG
   0909   f8 07             ldi FACTOR.1
   090b   bd                phi CALL_REG
                            
   090c   f8 00             ldi FCALL.0
   090e   ae                plo FCALL_REG
   090f   de                sep FCALL_REG
                            
   0910   8f                glo STACK_REG
   0911   fc 07             adi 7
   0913   a6                plo R6
   0914   9f                ghi STACK_REG
   0915   7c 00             adci 0
   0917   b6                phi R6
                            
   0918   84                glo R4
   0919   56                str R6
   091a   16                inc R6
   091b   94                ghi R4
   091c   56                str R6
                            
   091d   8f                glo STACK_REG
   091e   fc 05             adi 5
   0920   a8                plo R8
   0921   9f                ghi STACK_REG
   0922   7c 00             adci 0
   0924   b8                phi R8
                            
   0925   08                ldn R8
   0926   a4                plo R4
   0927   a6                plo R6
   0928   18                inc R8
   0929   08                ldn R8
   092a   b4                phi R4
   092b   b6                phi R6
                            
   092c   8f                glo STACK_REG
   092d   a5                plo R5
   092e   9f                ghi STACK_REG
   092f   b5                phi R5
   0930   15                inc R5
                            
   0931   f8 72             ldi INTEGER_MUL.0
   0933   ad                plo CALL_REG
   0934   f8 03             ldi INTEGER_MUL.1
   0936   bd                phi CALL_REG
                            
   0937   f8 00             ldi FCALL.0
   0939   ae                plo FCALL_REG
   093a   de                sep FCALL_REG
                            
   093b   8f                glo STACK_REG
   093c   fc 07             adi 7
   093e   a6                plo R6
   093f   9f                ghi STACK_REG
   0940   7c 00             adci 0
   0942   b6                phi R6
                            
   0943   06                ldn R6
   0944   a4                plo R4
   0945   16                inc R6
   0946   06                ldn R6
   0947   b4                phi R4
                            
   0948   1f                inc STACK_REG
   0949   1f                inc STACK_REG
   094a   1f                inc STACK_REG
   094b   1f                inc STACK_REG
                        
   094c   c0 08 81          lbr TERM_MAIN
                            
   094f                 TERM_NEXT_CYCLE
   094f   14                inc R4
   0950   c0 08 81          lbr TERM_MAIN
                            
   0953                 TERM_END
   0953   8f                glo STACK_REG
   0954   a6                plo R6
   0955   9f                ghi STACK_REG
   0956   b6                phi R6
   0957   16                inc R6
                            
   0958   46                lda R6
   0959   a5                plo R5
   095a   46                lda R6
   095b   b5                phi R5
                            
   095c   8f                glo STACK_REG
   095d   fc 04             adi 4
   095f   af                plo STACK_REG
   0960   9f                ghi STACK_REG
   0961   7c 00             adci 0
   0963   bf                phi STACK_REG
                            
   0964   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-EXPRESSION-----------------------------------
                        ;-R4-string pointer----------------------------
                        ;-R5-result pointer----------------------------
                        ;-Local registers------------------------------
                        ;-R6-R7----------------------------------------
   0965                 EXPRESSION
   0965   ef                sex STACK_REG
                            
   0966   97                ghi R7      ;saving local registers
   0967   73                stxd
   0968   87                glo R7
   0969   73                stxd
                            
   096a   96                ghi R6
   096b   73                stxd
   096c   86                glo R6
   096d   73                stxd
                            
   096e   94                ghi R4      ;R4 pointer to input string 
   096f   73                stxd
   0970   84                glo R4
   0971   73                stxd        ;+3 input string pointer
                            
   0972   95                ghi R5      ;R5 pointer to result
   0973   73                stxd
   0974   85                glo R5
   0975   73                stxd        ;+1 result pointer
                            
   0976                 EXPRESSION_SKIPSPACES           ;skip spaces
   0976   44                lda R4
   0977   fb 20             xri 32
   0979   32 76             bz EXPRESSION_SKIPSPACES
   097b   24                dec R4
                            
   097c   f8 6e             ldi TERM.0                  ;read TERM
   097e   ad                plo CALL_REG
   097f   f8 08             ldi TERM.1
   0981   bd                phi CALL_REG
                            
   0982   f8 00             ldi FCALL.0
   0984   ae                plo FCALL_REG
   0985   de                sep FCALL_REG
                            
   0986                 EXPRESSION_MAIN
   0986   04                ldn R4
   0987   fb 20             xri 32                      ;if ' '
   0989   c2 0a 4b          lbz EXPRESSION_NEXT_CYCLE
   098c   04                ldn R4
   098d   fb 2b             xri 43                      ;if '+'
   098f   32 9a             bz EXPRESSION_ADD
   0991   04                ldn R4
   0992   fb 2d             xri 45                      ;if '-'
   0994   c2 09 f3          lbz EXPRESSION_SUB
                            
                            
   0997   c0 0a 4f          lbr EXPRESSION_END
                            
   099a                 EXPRESSION_ADD
   099a   14                inc R4
                            
   099b   f8 00             ldi 0               ;new result
   099d   73                stxd
   099e   73                stxd
   099f   73                stxd
   09a0   73                stxd
                            
   09a1   8f                glo STACK_REG       ;set R5 pointer to new result
   09a2   a5                plo R5
   09a3   9f                ghi STACK_REG
   09a4   b5                phi R5
   09a5   15                inc R5
                            
   09a6   f8 6e             ldi TERM.0          ;read TERM
   09a8   ad                plo CALL_REG
   09a9   f8 08             ldi TERM.1
   09ab   bd                phi CALL_REG
                            
   09ac   f8 00             ldi FCALL.0
   09ae   ae                plo FCALL_REG
   09af   de                sep FCALL_REG
                            
   09b0   8f                glo STACK_REG       ; set R6 register to point to the input string pointer
   09b1   fc 07             adi 7
   09b3   a6                plo R6
   09b4   9f                ghi STACK_REG
   09b5   7c 00             adci 0
   09b7   b6                phi R6
                            
   09b8   84                glo R4              ;input string pointer = R4
   09b9   56                str R6
   09ba   16                inc R6
   09bb   94                ghi R4
   09bc   56                str R6
                            
   09bd   8f                glo STACK_REG       ;set R5 register to point to result
   09be   a5                plo R5
   09bf   9f                ghi STACK_REG
   09c0   b5                phi R5
   09c1   15                inc R5
                            
   09c2   8f                glo STACK_REG       ;set R6 register to point to the result pointer
   09c3   fc 05             adi 5
   09c5   a6                plo R6
   09c6   9f                ghi STACK_REG
   09c7   7c 00             adci 0
   09c9   b6                phi R6
                            
   09ca   06                ldn R6              ;R4 = result pointer
   09cb   a4                plo R4
   09cc   16                inc R6
   09cd   06                ldn R6
   09ce   b4                phi R4
                            
   09cf   e4                sex R4
                            
   09d0   f8 02             ldi 2
   09d2   fe                shl
   09d3   a7                plo R7
                            
   09d4                 EXPRESSION_ADD_LOOP     ;*result pointer += result;
   09d4   05                ldn R5
   09d5   74                adc
   09d6   54                str R4
   09d7   15                inc R5
   09d8   60                irx
                            
   09d9   27                dec R7
   09da   87                glo R7
   09db   ca 09 d4          lbnz EXPRESSION_ADD_LOOP
                            
   09de   ef                sex STACK_REG
                            
   09df   8f                glo STACK_REG       
   09e0   fc 07             adi 7
   09e2   a6                plo R6
   09e3   9f                ghi STACK_REG
   09e4   7c 00             adci 0
   09e6   b6                phi R6
                            
   09e7   06                ldn R6              ;R4 = input string pointer
   09e8   a4                plo R4
   09e9   16                inc R6
   09ea   06                ldn R6
   09eb   b4                phi R4
                            
   09ec   1f                inc STACK_REG
   09ed   1f                inc STACK_REG
   09ee   1f                inc STACK_REG
   09ef   1f                inc STACK_REG
                        
   09f0   c0 09 86          lbr EXPRESSION_MAIN
                        
   09f3                 EXPRESSION_SUB
   09f3   14                inc R4
                            
   09f4   f8 00             ldi 0
   09f6   73                stxd
   09f7   73                stxd
   09f8   73                stxd
   09f9   73                stxd
                            
   09fa   8f                glo STACK_REG
   09fb   a5                plo R5
   09fc   9f                ghi STACK_REG
   09fd   b5                phi R5
   09fe   15                inc R5
                            
   09ff   f8 6e             ldi TERM.0
   0a01   ad                plo CALL_REG
   0a02   f8 08             ldi TERM.1
   0a04   bd                phi CALL_REG
                            
   0a05   f8 00             ldi FCALL.0
   0a07   ae                plo FCALL_REG
   0a08   de                sep FCALL_REG
                            
   0a09   8f                glo STACK_REG
   0a0a   fc 07             adi 7
   0a0c   a6                plo R6
   0a0d   9f                ghi STACK_REG
   0a0e   7c 00             adci 0
   0a10   b6                phi R6
                            
   0a11   84                glo R4
   0a12   56                str R6
   0a13   16                inc R6
   0a14   94                ghi R4
   0a15   56                str R6
                            
   0a16   8f                glo STACK_REG
   0a17   a5                plo R5
   0a18   9f                ghi STACK_REG
   0a19   b5                phi R5
   0a1a   15                inc R5
                            
   0a1b   8f                glo STACK_REG
   0a1c   fc 05             adi 5
   0a1e   a6                plo R6
   0a1f   9f                ghi STACK_REG
   0a20   7c 00             adci 0
   0a22   b6                phi R6
                            
   0a23   06                ldn R6
   0a24   a4                plo R4
   0a25   16                inc R6
   0a26   06                ldn R6
   0a27   b4                phi R4
                            
   0a28   e4                sex R4
                            
   0a29   f8 82             ldi 082h
   0a2b   fe                shl
   0a2c   a7                plo R7
                            
   0a2d                 EXPRESSION_SUB_LOOP
   0a2d   05                ldn R5
   0a2e   75                sdb
   0a2f   54                str R4
   0a30   15                inc R5
   0a31   60                irx
                            
   0a32   27                dec R7
   0a33   87                glo R7
   0a34   3a 2d             bnz EXPRESSION_SUB_LOOP
                            
   0a36   ef                sex STACK_REG
                            
   0a37   8f                glo STACK_REG
   0a38   fc 07             adi 7
   0a3a   a6                plo R6
   0a3b   9f                ghi STACK_REG
   0a3c   7c 00             adci 0
   0a3e   b6                phi R6
                            
   0a3f   06                ldn R6
   0a40   a4                plo R4
   0a41   16                inc R6
   0a42   06                ldn R6
   0a43   b4                phi R4
                            
   0a44   1f                inc STACK_REG
   0a45   1f                inc STACK_REG
   0a46   1f                inc STACK_REG
   0a47   1f                inc STACK_REG
                        
   0a48   c0 09 86          lbr EXPRESSION_MAIN
                        
   0a4b                 EXPRESSION_NEXT_CYCLE    
   0a4b   14                inc R4
   0a4c   c0 09 86          lbr EXPRESSION_MAIN
                            
   0a4f                 EXPRESSION_END
   0a4f   ef                sex STACK_REG
   0a50   60                irx
                            
   0a51   72                ldxa            ;restoring registers
   0a52   a5                plo R5
   0a53   72                ldxa
   0a54   b5                phi R5
   0a55   60                irx
   0a56   60                irx
   0a57   72                ldxa
   0a58   a6                plo R6
   0a59   72                ldxa
   0a5a   b6                phi R6
   0a5b   72                ldxa
   0a5c   a7                plo R7
   0a5d   f0                ldx
   0a5e   b7                phi R7
                            
   0a5f   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-DYN MEMORY INIT------------------------------
   0a60                 DYN_MEMORY_INIT
   0a60   f8 08             ldi HEAP_LASTADDRESS.0
   0a62   a4                plo R4
   0a63   f8 21             ldi HEAP_LASTADDRESS.1
   0a65   b4                phi R4
                            
   0a66   f8 10             ldi HEAP_START.0
   0a68   54                str R4
   0a69   14                inc R4
   0a6a   f8 21             ldi HEAP_START.1
   0a6c   54                str R4
                            
   0a6d   f8 10             ldi HEAP_START.0
   0a6f   a4                plo R4
   0a70   f8 21             ldi HEAP_START.1
   0a72   b4                phi R4
                            
   0a73   f8 eb             ldi (HEAP_END - HEAP_START - 5).0
   0a75   54                str R4
   0a76   14                inc R4
   0a77   f8 da             ldi (HEAP_END - HEAP_START - 5).1
   0a79   54                str R4
   0a7a   14                inc R4
                            
   0a7b   f8 00             ldi 0
   0a7d   54                str R4
   0a7e   14                inc R4
   0a7f   54                str R4
   0a80   14                inc R4
   0a81   54                str R4
                            
   0a82   de                sep RETURN
                        ;----------------------------------------------
                        
   0a83                 DYN_MEMORY_DEBUG_STR
   0a83   20 2d 3e 20       db " -> size: ",0,", address: ",0,", previous: ",0,", ",0
   0a87   73 69 7a 65   
   0a8b   3a 20 00 2c   
   0a8f   20 61 64 64   
   0a93   72 65 73 73   
   0a97   3a 20 00 2c   
   0a9b   20 70 72 65   
   0a9f   76 69 6f 75   
   0aa3   73 3a 20 00   
   0aa7   2c 20 00      
   0aaa                 DYN_MEMORY_DEBUG_STR_FREE
   0aaa   46 52 45 45       db "FREE\r\n",0
   0aae   0d 0a 00      
   0ab1                 DYN_MEMORY_DEBUG_STR_USED
   0ab1   55 53 45 44       db "USED\r\n",0
   0ab5   0d 0a 00      
                        ;-DYN MEMORY DEBUG-----------------------------
   0ab8                 DYN_MEMORY_DEBUG
   0ab8   ef                sex STACK_REG
                            
   0ab9   f8 00             ldi 0
   0abb   73                stxd
   0abc   73                stxd
   0abd   73                stxd
   0abe   73                stxd                    ;+14 address + 5
                            
   0abf   73                stxd
   0ac0   73                stxd
   0ac1   f8 21             ldi HEAP_START.1
   0ac3   73                stxd
   0ac4   f8 10             ldi HEAP_START.0
   0ac6   73                stxd                    ;+10 address
                            
   0ac7   f8 00             ldi 0
   0ac9   73                stxd                    ;+9 used
                            
   0aca   73                stxd
   0acb   73                stxd
   0acc   73                stxd
   0acd   73                stxd                    ;+5 previous
                            
   0ace   73                stxd
   0acf   73                stxd
   0ad0   73                stxd
   0ad1   73                stxd                    ;+1 size
                            
   0ad2                 DYN_MEMORY_DEBUG_MAINLOOP
   0ad2   8f                glo STACK_REG
   0ad3   fc 0a             adi 10
   0ad5   a4                plo R4
   0ad6   9f                ghi STACK_REG
   0ad7   7c 00             adci 0
   0ad9   b4                phi R4
                            
   0ada   e4                sex R4
                            
   0adb   f8 00             ldi HEAP_END.0
   0add   f5                sd
   0ade   14                inc R4
   0adf   f8 fc             ldi HEAP_END.1
   0ae1   75                sdb
                            
   0ae2   c3 0b ee          lbdf DYN_MEMORY_DEBUG_END    ;if address >= HEAP_END
                            
   0ae5   8f                glo STACK_REG
   0ae6   fc 0a             adi 10
   0ae8   a4                plo R4
   0ae9   9f                ghi STACK_REG
   0aea   7c 00             adci 0
   0aec   b4                phi R4
                            
   0aed   44                lda R4                      ;R5 = address
   0aee   a5                plo R5
   0aef   44                lda R4
   0af0   b5                phi R5
                            
   0af1   8f                glo STACK_REG
   0af2   a4                plo R4
   0af3   9f                ghi STACK_REG
   0af4   b4                phi R4
   0af5   14                inc R4
                            
   0af6   45                lda R5
   0af7   54                str R4
   0af8   14                inc R4
                            
   0af9   45                lda R5
   0afa   54                str R4
   0afb   14                inc R4
                            
   0afc   14                inc R4
   0afd   14                inc R4
                            
   0afe   45                lda R5
   0aff   54                str R4
   0b00   14                inc R4
                            
   0b01   45                lda R5
   0b02   54                str R4
   0b03   14                inc R4
                            
   0b04   14                inc R4
   0b05   14                inc R4
                            
   0b06   45                lda R5
   0b07   54                str R4
                            
   0b08   8f                glo STACK_REG
   0b09   fc 0e             adi 14
   0b0b   a4                plo R4
   0b0c   9f                ghi STACK_REG
   0b0d   7c 00             adci 0
   0b0f   b4                phi R4
                            
   0b10   85                glo R5
   0b11   54                str R4
   0b12   14                inc R4
                            
   0b13   95                ghi R5
   0b14   54                str R4
                            
   0b15                 DYN_MEMORY_DEBUG_PRINT
   0b15   8f                glo STACK_REG               ;set R4 to address
   0b16   fc 0a             adi 10
   0b18   a4                plo R4
   0b19   9f                ghi STACK_REG
   0b1a   7c 00             adci 0
   0b1c   b4                phi R4
                        
   0b1d   f8 ae             ldi PRINT_DEC.0             ;print address in decimal
   0b1f   ad                plo CALL_REG
   0b20   f8 04             ldi PRINT_DEC.1
   0b22   bd                phi CALL_REG
                            
   0b23   f8 00             ldi FCALL.0
   0b25   ae                plo FCALL_REG
   0b26   de                sep FCALL_REG
                            
   0b27   f8 83             ldi DYN_MEMORY_DEBUG_STR.0      ;print the debug string
   0b29   a6                plo R6
   0b2a   f8 0a             ldi DYN_MEMORY_DEBUG_STR.1
   0b2c   b6                phi R6
                            
   0b2d   f8 52             ldi PRINT.0         ;prepare to call PRINT
   0b2f   ad                plo CALL_REG
   0b30   f8 01             ldi PRINT.1
   0b32   bd                phi CALL_REG
                            
   0b33   f8 00             ldi FCALL.0
   0b35   ae                plo FCALL_REG
   0b36   de                sep FCALL_REG       ;call PRINT
                            
   0b37   86                glo R6                  ;save R6 value
   0b38   a7                plo R7
   0b39   96                ghi R6
   0b3a   b7                phi R7
                            
   0b3b   8f                glo STACK_REG           ;set R4 to size
   0b3c   a4                plo R4
   0b3d   9f                ghi STACK_REG
   0b3e   b4                phi R4
   0b3f   14                inc R4
                        
   0b40   f8 ae             ldi PRINT_DEC.0         ;print size in decimal
   0b42   ad                plo CALL_REG
   0b43   f8 04             ldi PRINT_DEC.1
   0b45   bd                phi CALL_REG
                            
   0b46   f8 00             ldi FCALL.0
   0b48   ae                plo FCALL_REG
   0b49   de                sep FCALL_REG
                            
   0b4a   87                glo R7                  ;continue printing the debug string
   0b4b   a6                plo R6
   0b4c   97                ghi R7
   0b4d   b6                phi R6
                            
   0b4e   f8 52             ldi PRINT.0             ;prepare to call PRINT
   0b50   ad                plo CALL_REG
   0b51   f8 01             ldi PRINT.1
   0b53   bd                phi CALL_REG
                            
   0b54   f8 00             ldi FCALL.0
   0b56   ae                plo FCALL_REG
   0b57   de                sep FCALL_REG           ;call PRINT
                            
   0b58   86                glo R6                  ;save R6 value
   0b59   a7                plo R7
   0b5a   96                ghi R6
   0b5b   b7                phi R7
                            
   0b5c   8f                glo STACK_REG           ;set R4 to address+5
   0b5d   fc 0e             adi 14
   0b5f   a4                plo R4
   0b60   9f                ghi STACK_REG
   0b61   7c 00             adci 0
   0b63   b4                phi R4
                            
   0b64   f8 ae             ldi PRINT_DEC.0         ;print address+5 in decimal
   0b66   ad                plo CALL_REG
   0b67   f8 04             ldi PRINT_DEC.1
   0b69   bd                phi CALL_REG
                            
   0b6a   f8 00             ldi FCALL.0
   0b6c   ae                plo FCALL_REG
   0b6d   de                sep FCALL_REG
                            
   0b6e   87                glo R7                  ;continue printing the debug string
   0b6f   a6                plo R6
   0b70   97                ghi R7
   0b71   b6                phi R6
                            
   0b72   f8 52             ldi PRINT.0             ;prepare to call PRINT
   0b74   ad                plo CALL_REG
   0b75   f8 01             ldi PRINT.1
   0b77   bd                phi CALL_REG
                            
   0b78   f8 00             ldi FCALL.0
   0b7a   ae                plo FCALL_REG
   0b7b   de                sep FCALL_REG           ;call PRINT
                            
   0b7c   86                glo R6                  ;save R6 value
   0b7d   a7                plo R7
   0b7e   96                ghi R6
   0b7f   b7                phi R7
                            
   0b80   8f                glo STACK_REG           ;set R4 to previous
   0b81   fc 05             adi 5
   0b83   a4                plo R4
   0b84   9f                ghi STACK_REG
   0b85   7c 00             adci 0
   0b87   b4                phi R4
                            
   0b88   f8 ae             ldi PRINT_DEC.0         ;print previous in decimal
   0b8a   ad                plo CALL_REG
   0b8b   f8 04             ldi PRINT_DEC.1
   0b8d   bd                phi CALL_REG
                            
   0b8e   f8 00             ldi FCALL.0
   0b90   ae                plo FCALL_REG
   0b91   de                sep FCALL_REG
                            
   0b92   87                glo R7                  ;continue printing the debug string
   0b93   a6                plo R6
   0b94   97                ghi R7
   0b95   b6                phi R6
                            
   0b96   f8 52             ldi PRINT.0             ;prepare to call PRINT
   0b98   ad                plo CALL_REG
   0b99   f8 01             ldi PRINT.1
   0b9b   bd                phi CALL_REG
                            
   0b9c   f8 00             ldi FCALL.0
   0b9e   ae                plo FCALL_REG
   0b9f   de                sep FCALL_REG           ;call PRINT
                            
   0ba0   8f                glo STACK_REG           ;set R4 to previous
   0ba1   fc 09             adi 9
   0ba3   a4                plo R4
   0ba4   9f                ghi STACK_REG
   0ba5   7c 00             adci 0
   0ba7   b4                phi R4
                            
   0ba8   04                ldn R4
   0ba9   32 b3             bz DYN_MEMORY_DEBUG_FREE
                            
   0bab   f8 b1             ldi DYN_MEMORY_DEBUG_STR_USED.0
   0bad   a6                plo R6
   0bae   f8 0a             ldi DYN_MEMORY_DEBUG_STR_USED.1
   0bb0   b6                phi R6
                            
   0bb1   30 b9             br DYN_MEMORY_DEBUG_NEXTADDRESS
                            
   0bb3                 DYN_MEMORY_DEBUG_FREE
   0bb3   f8 aa             ldi DYN_MEMORY_DEBUG_STR_FREE.0
   0bb5   a6                plo R6
   0bb6   f8 0a             ldi DYN_MEMORY_DEBUG_STR_FREE.1
   0bb8   b6                phi R6
                            
   0bb9                 DYN_MEMORY_DEBUG_NEXTADDRESS
   0bb9   f8 52             ldi PRINT.0             ;prepare to call PRINT
   0bbb   ad                plo CALL_REG
   0bbc   f8 01             ldi PRINT.1
   0bbe   bd                phi CALL_REG
                            
   0bbf   f8 00             ldi FCALL.0
   0bc1   ae                plo FCALL_REG
   0bc2   de                sep FCALL_REG           ;call PRINT
                            
   0bc3   8f                glo STACK_REG           ;set R4 to address
   0bc4   fc 0a             adi 10
   0bc6   a4                plo R4
   0bc7   9f                ghi STACK_REG
   0bc8   7c 00             adci 0
   0bca   b4                phi R4
                            
   0bcb   8f                glo STACK_REG           ;set R5 to address+5
   0bcc   fc 0e             adi 14
   0bce   a5                plo R5
   0bcf   9f                ghi STACK_REG
   0bd0   7c 00             adci 0
   0bd2   b5                phi R5
                            
   0bd3   8f                glo STACK_REG           ;set R6 to size
   0bd4   a6                plo R6
   0bd5   9f                ghi STACK_REG
   0bd6   b6                phi R6
   0bd7   16                inc R6
                            
   0bd8   e6                sex R6
                            
   0bd9   45                lda R5
   0bda   f4                add
   0bdb   60                irx
   0bdc   54                str R4
   0bdd   14                inc R4
                            
   0bde   45                lda R5
   0bdf   74                adc
   0be0   60                irx
   0be1   54                str R4
   0be2   14                inc R4
                            
   0be3   45                lda R5
   0be4   74                adc
   0be5   60                irx
   0be6   54                str R4
   0be7   14                inc R4
                            
   0be8   45                lda R5
   0be9   74                adc
   0bea   54                str R4
                            
   0beb   c0 0a d2          lbr DYN_MEMORY_DEBUG_MAINLOOP
                        
   0bee                 DYN_MEMORY_DEBUG_END
   0bee   8f                glo STACK_REG           ;set R6 to size
   0bef   fc 11             adi 17
   0bf1   af                plo STACK_REG
   0bf2   9f                ghi STACK_REG
   0bf3   7c 00             adci 0
   0bf5   bf                phi STACK_REG
                            
   0bf6   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-DYN MEMORY ALLOCATION------------------------
                        ;-R4-Size--------------------------------------
                        ;-R10-return address---------------------------
                        ;-Local registers------------------------------
                        ;-R5-R6-R7-R8----------------------------------
   0bf7                 DYN_MEMORY_ALLOC
   0bf7   ef                sex STACK_REG
                            
   0bf8   98                ghi R8
   0bf9   73                stxd
   0bfa   88                glo R8
   0bfb   73                stxd
                            
   0bfc   97                ghi R7
   0bfd   73                stxd
   0bfe   87                glo R7
   0bff   73                stxd
                            
   0c00   96                ghi R6
   0c01   73                stxd
   0c02   86                glo R6
   0c03   73                stxd
                            
   0c04   95                ghi R5
   0c05   73                stxd
   0c06   85                glo R5
   0c07   73                stxd
                            
   0c08   f8 00             ldi 0
   0c0a   73                stxd
   0c0b   73                stxd                ;+7 currentSize
                            
   0c0c   94                ghi R4
   0c0d   73                stxd
   0c0e   84                glo R4
   0c0f   73                stxd                ;+5 size
                            
   0c10   84                glo R4              ;R4 += 5
   0c11   fc 05             adi 5
   0c13   a4                plo R4
   0c14   94                ghi R4
   0c15   7c 00             adci 0
   0c17   b4                phi R4
                            
   0c18   94                ghi R4
   0c19   73                stxd
   0c1a   84                glo R4              ;newSize is initialized to size+5 for further calculation
   0c1b   73                stxd                ;+3 newSize
                        
   0c1c   f8 fc             ldi HEAP_END.1
   0c1e   73                stxd
   0c1f   f8 00             ldi HEAP_END.0
   0c21   73                stxd                ;+1 endAddress = HEAP_END
                            
   0c22   f8 08             ldi HEAP_LASTADDRESS.0
   0c24   a4                plo R4
   0c25   f8 21             ldi HEAP_LASTADDRESS.1
   0c27   b4                phi R4
                            
   0c28   44                lda R4
   0c29   a5                plo R5
   0c2a   44                lda R4
   0c2b   b5                phi R5              ;R5 = lastAddress
                            
   0c2c   f8 00             ldi 0               ;R10 = 0
   0c2e   aa                plo R10
   0c2f   ba                phi R10
                            
   0c30   f8 02             ldi 2               ;R8 = 2
   0c32   a8                plo R8
                            
   0c33                 DYN_MEMORY_ALLOC_MAINLOOP
   0c33   8f                glo STACK_REG       ;set R4 pointer to endAddress
   0c34   a4                plo R4
   0c35   9f                ghi STACK_REG
   0c36   b4                phi R4
   0c37   14                inc R4
                            
   0c38   e4                sex R4
                            
   0c39   85                glo R5              ;currentAddress - endAddress
   0c3a   f7                sm
   0c3b   60                irx
   0c3c   95                ghi R5
   0c3d   77                smb
                            
   0c3e   c3 0d 27          lbdf DYN_MEMORY_ALLOC_NEXTPASS      ;if currentAddress >= endAddress
                            
   0c41   8f                glo STACK_REG                       ;set R4 pointer to currentSize
   0c42   fc 07             adi 7
   0c44   a4                plo R4
   0c45   9f                ghi STACK_REG
   0c46   7c 00             adci 0
   0c48   b4                phi R4
                            
   0c49   85                glo R5                              ;R6 = R5 (currentAddress)
   0c4a   a6                plo R6
   0c4b   95                ghi R5
   0c4c   b6                phi R6
                            
   0c4d   46                lda R6                              ;currentSize = block size
   0c4e   54                str R4
   0c4f   14                inc R4
                            
   0c50   46                lda R6
   0c51   54                str R4
                            
   0c52   16                inc R6
   0c53   16                inc R6
                                
   0c54   06                ldn R6
   0c55   ca 0d 0d          lbnz DYN_MEMORY_ALLOC_NEXTADDRESS   ;if the current block is USED
                            
   0c58   24                dec R4
                            
   0c59   8f                glo STACK_REG                   ;R6 pointer set to size
   0c5a   fc 05             adi 5
   0c5c   a6                plo R6
   0c5d   9f                ghi STACK_REG
   0c5e   7c 00             adci 0
   0c60   b6                phi R6
                            
   0c61   06                ldn R6                          ;currentSize == size
   0c62   f5                sd
   0c63   ca 0c 82          lbnz DYN_MEMORY_ALLOC_SIZEBIGGER
   0c66   60                irx
   0c67   16                inc R6
   0c68   06                ldn R6
   0c69   75                sdb
                        
   0c6a   26                dec R6                              ;set back R6
   0c6b   24                dec R4                              ;set back R4
                            
   0c6c   ca 0c 82          lbnz DYN_MEMORY_ALLOC_SIZEBIGGER    ;if currentSize != size
                        
   0c6f                 DYN_MEMORY_ALLOC_SIZEEQ
   0c6f   85                glo R5                              ;R6 = currentAddress + 4
   0c70   fc 04             adi 4
   0c72   a6                plo R6
   0c73   95                ghi R5
   0c74   7c 00             adci 0
   0c76   b6                phi R6
                            
   0c77   f8 01             ldi 1
   0c79   56                str R6                              ;used = 1
                            
   0c7a   16                inc R6                              ;R6++
   0c7b   86                glo R6
   0c7c   aa                plo R10                             ;R10 = R6
   0c7d   96                ghi R6
   0c7e   ba                phi R10
                            
   0c7f   c0 0d 42          lbr DYN_MEMORY_ALLOC_END            ;RETURN
                        
   0c82                 DYN_MEMORY_ALLOC_SIZEBIGGER
   0c82   8f                glo STACK_REG                   ;R6 pinter set to newSize (size+5)
   0c83   fc 03             adi 3
   0c85   a6                plo R6
   0c86   9f                ghi STACK_REG
   0c87   7c 00             adci 0
   0c89   b6                phi R6
                            
   0c8a   46                lda R6                          ;currentSize - newSize (size+5)
   0c8b   f5                sd
   0c8c   60                irx
   0c8d   46                lda R6
   0c8e   75                sdb
                            
   0c8f   26                dec R6                              ;set back R6
   0c90   26                dec R6
                               
   0c91   cb 0d 0d          lbnf DYN_MEMORY_ALLOC_NEXTADDRESS   ;if currentSize < newSize (size+5)
                            
   0c94   24                dec R4                              ;R4 pointer to size
   0c95   24                dec R4
   0c96   24                dec R4
                            
   0c97   85                glo R5                              ;R6 = R5 (currentAddress)
   0c98   a6                plo R6
   0c99   95                ghi R5
   0c9a   b6                phi R6
                            
   0c9b   44                lda R4                              ;set current block size to size
   0c9c   56                str R6
   0c9d   16                inc R6
                            
   0c9e   44                lda R4
   0c9f   56                str R6
   0ca0   16                inc R6
                            
   0ca1   16                inc R6                              ;R6 += 2
   0ca2   16                inc R6
                            
   0ca3   f8 01             ldi 1                               ;set used to 1
   0ca5   56                str R6
                            
   0ca6   16                inc R6                              ;R6++
   0ca7   86                glo R6
   0ca8   aa                plo R10                             ;R10 = R6
   0ca9   96                ghi R6                              ;R10 is set for return
   0caa   ba                phi R10
                            
   0cab   8f                glo STACK_REG                   ;R4 pinter set to newSize (size+5)
   0cac   fc 03             adi 3
   0cae   a4                plo R4
   0caf   9f                ghi STACK_REG
   0cb0   7c 00             adci 0
   0cb2   b4                phi R4
                            
   0cb3   85                glo R5                          ;R7 = currentAddress + size + 5
   0cb4   f4                add
   0cb5   60                irx
   0cb6   a7                plo R7
   0cb7   95                ghi R5
   0cb8   74                adc
   0cb9   b7                phi R7                          ;R7 is the newAddress
                            
   0cba   f8 08             ldi HEAP_LASTADDRESS.0
   0cbc   a4                plo R4
   0cbd   f8 21             ldi HEAP_LASTADDRESS.1
   0cbf   b4                phi R4
                            
   0cc0   87                glo R7                          ;lastAddress = R7
   0cc1   54                str R4
   0cc2   14                inc R4
                            
   0cc3   97                ghi R7
   0cc4   54                str R4
                        
   0cc5   8f                glo STACK_REG                   ;R4 pinter set to newSize
   0cc6   fc 03             adi 3
   0cc8   a4                plo R4
   0cc9   9f                ghi STACK_REG
   0cca   7c 00             adci 0
   0ccc   b4                phi R4
                            
   0ccd   8f                glo STACK_REG                   ;R4 pinter set to currentSize
   0cce   fc 07             adi 7
   0cd0   a6                plo R6
   0cd1   9f                ghi STACK_REG
   0cd2   7c 00             adci 0
   0cd4   b6                phi R6
                            
   0cd5   46                lda R6                          ;newSize = currentSize - (size + 5)
   0cd6   f7                sm
   0cd7   54                str R4
   0cd8   60                irx
                            
   0cd9   46                lda R6
   0cda   77                smb
   0cdb   54                str R4
                            
   0cdc   24                dec R4                          ;set back R4 to newSize
                            
   0cdd   87                glo R7                          ;R6 = R7 (newAddress)
   0cde   a6                plo R6
   0cdf   97                ghi R7
   0ce0   b6                phi R6
                            
   0ce1   44                lda R4                          ;new block size = newSize
   0ce2   56                str R6
   0ce3   16                inc R6
                            
   0ce4   44                lda R4
   0ce5   56                str R6
   0ce6   16                inc R6
                            
   0ce7   85                glo R5                          ;new block previous address = currentAddress
   0ce8   56                str R6
   0ce9   16                inc R6
                            
   0cea   95                ghi R5
   0ceb   56                str R6
   0cec   16                inc R6
                            
   0ced   f8 00             ldi 0                           ;new block used = 0
   0cef   56                str R6
   0cf0   16                inc R6
                            
   0cf1   24                dec R4
   0cf2   24                dec R4
                            
   0cf3   86                glo R6                          ;R6 = R6 + newSize
   0cf4   f4                add
   0cf5   60                irx
   0cf6   a6                plo R6
   0cf7   96                ghi R6
   0cf8   74                adc
   0cf9   b6                phi R6
                            
   0cfa   16                inc R6                          ;R6 += 2
   0cfb   16                inc R6
                            
   0cfc   86                glo R6
   0cfd   ff 00             smi HEAP_END.0
   0cff   96                ghi R6
   0d00   7f fc             smbi HEAP_END.1
                            
   0d02   c3 0d 42          lbdf DYN_MEMORY_ALLOC_END
                            
   0d05   87                glo R7                          ;next block previous address = R7
   0d06   56                str R6
   0d07   16                inc R6
                            
   0d08   97                ghi R7
   0d09   56                str R6
                            
   0d0a   c0 0d 42          lbr DYN_MEMORY_ALLOC_END
                            
   0d0d                 DYN_MEMORY_ALLOC_NEXTADDRESS
   0d0d   8f                glo STACK_REG               ;set R4 pointer to currentSize
   0d0e   fc 07             adi 7
   0d10   a4                plo R4
   0d11   9f                ghi STACK_REG
   0d12   7c 00             adci 0
   0d14   b4                phi R4
                            
   0d15   85                glo R5
   0d16   f4                add
   0d17   60                irx
   0d18   a5                plo R5
   0d19   95                ghi R5
   0d1a   74                adc
   0d1b   b5                phi R5                          ;currentAddress += size
                            
   0d1c   85                glo R5
   0d1d   fc 05             adi 5
   0d1f   a5                plo R5
   0d20   95                ghi R5
   0d21   7c 00             adci 0
   0d23   b5                phi R5                          ;currentAddress += 5
                            
   0d24   c0 0c 33          lbr DYN_MEMORY_ALLOC_MAINLOOP
                            
   0d27                 DYN_MEMORY_ALLOC_NEXTPASS
   0d27   f8 10             ldi HEAP_START.0
   0d29   a5                plo R5
   0d2a   f8 21             ldi HEAP_START.1
   0d2c   b5                phi R5
                            
   0d2d   8f                glo STACK_REG                       ;set R4 pointer to endAddress
   0d2e   a4                plo R4
   0d2f   9f                ghi STACK_REG
   0d30   b4                phi R4
   0d31   14                inc R4
                            
   0d32   f8 08             ldi HEAP_LASTADDRESS.0
   0d34   a6                plo R6
   0d35   f8 21             ldi HEAP_LASTADDRESS.1
   0d37   b6                phi R6
                            
   0d38   46                lda R6
   0d39   54                str R4
   0d3a   14                inc R4
                            
   0d3b   46                lda R6
   0d3c   54                str R4
                        
   0d3d   28                dec R8
   0d3e   88                glo R8
   0d3f   ca 0c 33          lbnz DYN_MEMORY_ALLOC_MAINLOOP
                            
   0d42                 DYN_MEMORY_ALLOC_END
   0d42   8f                glo STACK_REG
   0d43   fc 09             adi 9
   0d45   af                plo STACK_REG
   0d46   9f                ghi STACK_REG
   0d47   7c 00             adci 0
   0d49   bf                phi STACK_REG
                            
   0d4a   ef                sex STACK_REG
                            
   0d4b   72                ldxa
   0d4c   a5                plo R5
   0d4d   72                ldxa
   0d4e   b5                phi R5
                            
   0d4f   72                ldxa
   0d50   a6                plo R6
   0d51   72                ldxa
   0d52   b6                phi R6
                            
   0d53   72                ldxa
   0d54   a7                plo R7
   0d55   72                ldxa
   0d56   b7                phi R7
                            
   0d57   72                ldxa
   0d58   a8                plo R8
   0d59   f0                ldx
   0d5a   b8                phi R8
                            
   0d5b   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-DYN MEMORY FREE------------------------------
                        ;-R4-address-----------------------------------
                        ;-Local registers------------------------------
                        ;-R5-R6----------------------------------------
   0d5c                 DYN_MEMORY_FREE
   0d5c   ef                sex STACK_REG
                            
   0d5d   95                ghi R5      ;saving local registers
   0d5e   73                stxd
   0d5f   85                glo R5
   0d60   73                stxd
                            
   0d61   96                ghi R6
   0d62   73                stxd
   0d63   86                glo R6
   0d64   73                stxd
                            
   0d65   f8 00             ldi 0
   0d67   73                stxd
   0d68   73                stxd
   0d69   73                stxd
   0d6a   73                stxd        ;+5 size
                            
   0d6b   73                stxd
   0d6c   73                stxd
   0d6d   73                stxd
   0d6e   73                stxd        ;+1 nextSize
                            
   0d6f   24                dec R4      ;R4-- (address--)
   0d70   54                str R4      ;set current block to free
                            
   0d71   24                dec R4
   0d72   24                dec R4
                            
   0d73   44                lda R4      ;R6 = previous block address
   0d74   a6                plo R6
   0d75   44                lda R4
   0d76   b6                phi R6
                            
   0d77   24                dec R4      ;set R4 to the beginning of the current block
   0d78   24                dec R4
   0d79   24                dec R4
   0d7a   24                dec R4
                            
   0d7b   86                glo R6
   0d7c   ca 0d 85          lbnz DYN_MEMORY_FREE_NEXTCHECK
   0d7f   96                ghi R6
   0d80   ca 0d 85          lbnz DYN_MEMORY_FREE_NEXTCHECK      ;if previousAddress != 0
                            
   0d83   30 94             br DYN_MEMORY_FREE_MERGE
                        
   0d85                 DYN_MEMORY_FREE_NEXTCHECK
   0d85   86                glo R6                              ;set R5 pointer to previous block used
   0d86   fc 04             adi 4
   0d88   a5                plo R5
   0d89   96                ghi R6
   0d8a   7c 00             adci 0
   0d8c   b5                phi R5
                            
   0d8d   05                ldn R5
   0d8e   3a 94             bnz DYN_MEMORY_FREE_MERGE           ;if used != 0
                            
   0d90   86                glo R6                              ;set R4 to previous block
   0d91   a4                plo R4
   0d92   96                ghi R6
   0d93   b4                phi R4
                            
   0d94                 DYN_MEMORY_FREE_MERGE
   0d94   8f                glo STACK_REG                       ;set R5 pointer to size
   0d95   fc 05             adi 5
   0d97   a5                plo R5
   0d98   9f                ghi STACK_REG
   0d99   7c 00             adci 0
   0d9b   b5                phi R5
                            
   0d9c   e5                sex R5                              ;set R5 to pointer
                            
   0d9d   44                lda R4                              ;load block size to size
   0d9e   55                str R5
   0d9f   15                inc R5
                            
   0da0   44                lda R4
   0da1   55                str R5
                            
   0da2   24                dec R4
   0da3   24                dec R4                              ;set back R4 and R5
   0da4   25                dec R5
                            
   0da5   84                glo R4                              ;R6 (nextAddress) = address + 5 
   0da6   fc 05             adi 5
   0da8   a6                plo R6
   0da9   94                ghi R4
   0daa   7c 00             adci 0
   0dac   b6                phi R6
                            
   0dad   86                glo R6                              ;R6 += size
   0dae   f4                add
   0daf   60                irx
   0db0   a6                plo R6
   0db1   96                ghi R6
   0db2   74                adc
   0db3   b6                phi R6
                            
   0db4                 DYN_MEMORY_FREE_MERGELOOP
   0db4   86                glo R6
   0db5   ff 00             smi HEAP_END.0
   0db7   96                ghi R6
   0db8   7f fc             smbi HEAP_END.1
                            
   0dba   c3 0d f3          lbdf DYN_MEMORY_FREE_END            ;if nextAddress - HEAP_END >= 0
                            
   0dbd   86                glo R6                              ;set R5 to nextAddress used
   0dbe   fc 04             adi 4
   0dc0   a5                plo R5
   0dc1   96                ghi R6
   0dc2   7c 00             adci 0
   0dc4   b5                phi R5
                            
   0dc5   05                ldn R5
   0dc6   ca 0d ec          lbnz DYN_MEMORY_FREE_SETPREVIOUS    ;if used != 0
                            
   0dc9   8f                glo STACK_REG                       ;set R5 pointer to nextSize
   0dca   a5                plo R5
   0dcb   9f                ghi STACK_REG
   0dcc   b5                phi R5
   0dcd   15                inc R5
                            
   0dce   46                lda R6                              ;load size + 5 to nextSize 
   0dcf   fc 05             adi 5
   0dd1   55                str R5
   0dd2   60                irx
                            
   0dd3   06                ldn R6
   0dd4   7c 00             adci 0
   0dd6   55                str R5
                            
   0dd7   25                dec R5                              ;set back R5 and R6
   0dd8   26                dec R6
                            
   0dd9   04                ldn R4                              ;current block size += nextSize
   0dda   f4                add
   0ddb   54                str R4
   0ddc   60                irx
   0ddd   14                inc R4
                            
   0dde   04                ldn R4
   0ddf   74                adc
   0de0   54                str R4
                            
   0de1   25                dec R5                              ;set back R4 and R5
   0de2   24                dec R4
                            
   0de3   86                glo R6                              ;R6 (nextAddress) += nextSize
   0de4   f4                add
   0de5   a6                plo R6
   0de6   60                irx
   0de7   96                ghi R6
   0de8   74                adc
   0de9   b6                phi R6
                            
   0dea   30 b4             br DYN_MEMORY_FREE_MERGELOOP
                        
   0dec                 DYN_MEMORY_FREE_SETPREVIOUS    
   0dec   16                inc R6                              ;increment nextAddress to previous address section
   0ded   16                inc R6
                            
   0dee   84                glo R4                              ;set previous address to R4 value
   0def   56                str R6
   0df0   16                inc R6
   0df1   94                ghi R4
   0df2   56                str R6
                        
   0df3                 DYN_MEMORY_FREE_END
   0df3   8f                glo STACK_REG
   0df4   fc 09             adi 9
   0df6   af                plo STACK_REG
   0df7   9f                ghi STACK_REG
   0df8   7c 00             adci 0
   0dfa   bf                phi STACK_REG
                            
   0dfb   ef                sex STACK_REG
                            
   0dfc   f8 08             ldi HEAP_LASTADDRESS.0
   0dfe   a5                plo R5
   0dff   f8 21             ldi HEAP_LASTADDRESS.1
   0e01   b5                phi R5
                            
   0e02   84                glo R4
   0e03   55                str R5
   0e04   15                inc R5
                            
   0e05   94                ghi R4
   0e06   55                str R5
                            
   0e07   72                ldxa            ;restoring local registers
   0e08   a6                plo R6
   0e09   72                ldxa
   0e0a   b6                phi R6
                            
   0e0b   72                ldxa
   0e0c   a5                plo R5
   0e0d   f0                ldx
   0e0e   b5                phi R5
                            
   0e0f   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-VAR-LIST-INIT--------------------------------
   0e10                 VAR_LIST_INIT
   0e10   f8 02             ldi VARLIST_COUNT.0
   0e12   a4                plo R4
   0e13   f8 21             ldi VARLIST_COUNT.1
   0e15   b4                phi R4
                            
   0e16   f8 06             ldi 6
   0e18   a5                plo R5
                        
   0e19                 VAR_LIST_INIT_LOOP
   0e19   f8 00             ldi 0
   0e1b   54                str R4
   0e1c   14                inc R4
                            
   0e1d   25                dec R5
   0e1e   85                glo R5
   0e1f   3a 19             bnz VAR_LIST_INIT_LOOP
                            
   0e21   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-GET-STRING-----------------------------------
                        ;-R4-Input string------------------------------
                        ;-R10-New string address-----------------------
                        ;-Local registers------------------------------
                        ;-R5-R6----------------------------------------
   0e22                 GET_STRING
   0e22   ef                sex STACK_REG
                            
   0e23   95                ghi R5
   0e24   73                stxd
   0e25   85                glo R5
   0e26   73                stxd
                            
   0e27   96                ghi R6
   0e28   73                stxd
   0e29   86                glo R6
   0e2a   73                stxd
                            
   0e2b   94                ghi R4
   0e2c   73                stxd
   0e2d   84                glo R4
   0e2e   73                stxd                    ;+1 startAddress
                            
   0e2f   f8 00             ldi 0                   ;set R5 and R10 to zero
   0e31   a5                plo R5
   0e32   b5                phi R5
                            
   0e33   aa                plo R10
   0e34   ba                phi R10
                        
   0e35                 GET_STRING_LEN
   0e35   04                ldn R4                  
   0e36   ff 30             smi 48
   0e38   cb 0e 61          lbnf GET_STRING_LEN_END   ;if *R4 < '0'
   0e3b   04                ldn R4
   0e3c   ff 3a             smi 58
   0e3e   cb 0e 5c          lbnf GET_STRING_ADDLEN    ;if *R4 <= '9'
   0e41   04                ldn R4
   0e42   ff 41             smi 65
   0e44   cb 0e 61          lbnf GET_STRING_LEN_END   ;if *R4 < 'A'
   0e47   04                ldn R4
   0e48   ff 5b             smi 91
   0e4a   cb 0e 5c          lbnf GET_STRING_ADDLEN    ;if *R4 <= 'Z'
   0e4d   04                ldn R4
   0e4e   ff 61             smi 97
   0e50   cb 0e 61          lbnf GET_STRING_LEN_END   ;if *R4 < 'a'
   0e53   04                ldn R4
   0e54   ff 7b             smi 123
   0e56   cb 0e 5c          lbnf GET_STRING_ADDLEN    ;if *R4 <= 'z'
                            
   0e59   c0 0e 61          lbr GET_STRING_LEN_END   ;length checking end
                            
   0e5c                 GET_STRING_ADDLEN
   0e5c   15                inc R5                  ;increment R4 and R5
   0e5d   14                inc R4
   0e5e   c0 0e 35          lbr GET_STRING_LEN
                                
   0e61                 GET_STRING_LEN_END
   0e61   85                glo R5
   0e62   3a 68             bnz GET_STRING_ALLOCATE_MEM
   0e64   95                ghi R5
   0e65   c2 0e 96          lbz GET_STRING_END               ;if R5 == 0
                            
   0e68                 GET_STRING_ALLOCATE_MEM
   0e68   85                glo R5
   0e69   a4                plo R4
   0e6a   95                ghi R5
   0e6b   b4                phi R4
   0e6c   14                inc R4                          ;increment R4 because we need spacefor the termination char
                            
   0e6d   f8 f7             ldi DYN_MEMORY_ALLOC.0         ;call DYN_MEMORY_ALLOC
   0e6f   ad                plo CALL_REG
   0e70   f8 0b             ldi DYN_MEMORY_ALLOC.1
   0e72   bd                phi CALL_REG
                            
   0e73   f8 00             ldi FCALL.0
   0e75   ae                plo FCALL_REG
   0e76   de                sep FCALL_REG
                            
   0e77   8a                glo R10
   0e78   ca 0e 7f          lbnz GET_STRING_COPY
   0e7b   9a                ghi R10
   0e7c   c2 0e 96          lbz GET_STRING_END               ;if R10 == 0
                            
   0e7f                 GET_STRING_COPY
   0e7f   8f                glo STACK_REG                   ;restore R4
   0e80   a6                plo R6
   0e81   9f                ghi STACK_REG
   0e82   b6                phi R6
   0e83   16                inc R6
                            
   0e84   46                lda R6
   0e85   a4                plo R4
   0e86   46                lda R6
   0e87   b4                phi R4
                            
   0e88   8a                glo R10                         ;R6 = R10
   0e89   a6                plo R6
   0e8a   9a                ghi R10
   0e8b   b6                phi R6
                            
   0e8c                 GET_STRING_COPY_LOOP
   0e8c   44                lda R4                          ;read data from R4 location
   0e8d   56                str R6                          ;and store to R6 location
   0e8e   16                inc R6
                            
   0e8f   25                dec R5                          ;decrement R5
   0e90   85                glo R5
   0e91   3a 8c             bnz GET_STRING_COPY_LOOP        ;if R5 != 0
                            
   0e93   f8 00             ldi 0
   0e95   56                str R6                          ;terminate the string
                        
   0e96                 GET_STRING_END
   0e96   60                irx
   0e97   60                irx
   0e98   60                irx
                            
   0e99   72                ldxa                            ;restore local registers
   0e9a   a6                plo R6
   0e9b   72                ldxa
   0e9c   b6                phi R6
                            
   0e9d   72                ldxa
   0e9e   a5                plo R5
   0e9f   f0                ldx
   0ea0   b5                phi R5
                            
   0ea1   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-LET-STATEMENT--------------------------------
                        ;-R4-Input string------------------------------
                        ;-Local registres------------------------------
                        ;-R5-R6-R7-------------------------------------
   0ea2                 LET_STATEMENT
   0ea2   ef                sex STACK_REG
                            
   0ea3   95                ghi R5
   0ea4   73                stxd
   0ea5   85                glo R5
   0ea6   73                stxd
                            
   0ea7   96                ghi R6
   0ea8   73                stxd
   0ea9   86                glo R6
   0eaa   73                stxd
                            
   0eab   97                ghi R7
   0eac   73                stxd
   0ead   87                glo R7
   0eae   73                stxd
                            
   0eaf   94                ghi R4          ;saving R4 value
   0eb0   73                stxd
   0eb1   84                glo R4
   0eb2   73                stxd            ;+3 inputString
                            
   0eb3   f8 00             ldi 0
   0eb5   73                stxd
   0eb6   73                stxd            ;+1 variableNode address
                            
   0eb7   b4                phi R4          ;R4 = 8
   0eb8   f8 08             ldi 8
   0eba   a4                plo R4
                            
   0ebb   f8 f7             ldi DYN_MEMORY_ALLOC.0          ;call DYN_MEMORY_ALLOC
   0ebd   ad                plo CALL_REG                    ;Allocating memory for the variable node
   0ebe   f8 0b             ldi DYN_MEMORY_ALLOC.1
   0ec0   bd                phi CALL_REG
                            
   0ec1   f8 00             ldi FCALL.0
   0ec3   ae                plo FCALL_REG
   0ec4   de                sep FCALL_REG
                            
   0ec5   8a                glo R10
   0ec6   3a cc             bnz LET_STATEMENT_CONTINUE1
   0ec8   9a                ghi R10
   0ec9   c2 0f 80          lbz LET_STATEMENT_END            ;if R10 == 0
                            
   0ecc                 LET_STATEMENT_CONTINUE1
   0ecc   8f                glo STACK_REG                   ;set R5 pointer to variableNode address
   0ecd   a5                plo R5
   0ece   9f                ghi STACK_REG
   0ecf   b5                phi R5
   0ed0   15                inc R5
                            
   0ed1   8a                glo R10                         ;store R10 to variableNode address
   0ed2   55                str R5
   0ed3   15                inc R5
                            
   0ed4   9a                ghi R10
   0ed5   55                str R5
   0ed6   15                inc R5
                        
   0ed7   45                lda R5                          ;restore R4 inputString
   0ed8   a4                plo R4
   0ed9   45                lda R5
   0eda   b4                phi R4
                            
   0edb                 LET_STATEMENT_SKIPSPACES            ;skipping spaces
   0edb   44                lda R4
   0edc   fb 20             xri 32
   0ede   32 db             bz LET_STATEMENT_SKIPSPACES
                            
   0ee0   24                dec R4
                            
   0ee1   f8 22             ldi GET_STRING.0                ;call GET_STRING
   0ee3   ad                plo CALL_REG
   0ee4   f8 0e             ldi GET_STRING.1
   0ee6   bd                phi CALL_REG
                            
   0ee7   f8 00             ldi FCALL.0
   0ee9   ae                plo FCALL_REG
   0eea   de                sep FCALL_REG
                            
   0eeb   8a                glo R10
   0eec   3a f2             bnz LET_STATEMENT_CONTINUE2
   0eee   9a                ghi R10
   0eef   c2 0f 6e          lbz LET_STATEMENT_FREENODE       ;if allocating failed
                        
   0ef2                 LET_STATEMENT_CONTINUE2
   0ef2   8f                glo STACK_REG
   0ef3   a6                plo R6
   0ef4   9f                ghi STACK_REG
   0ef5   b6                phi R6
   0ef6   16                inc R6
                            
   0ef7   46                lda R6                          ;set R6 to variableNode address
   0ef8   a5                plo R5
   0ef9   46                lda R6
   0efa   b5                phi R5
                            
   0efb   f8 00             ldi 0                           ;set variableNode->nextNode to 0
   0efd   55                str R5
   0efe   15                inc R5
                            
   0eff   55                str R5
   0f00   15                inc R5
                            
   0f01   8a                glo R10                         ;store R10 to variableNode->name
   0f02   55                str R5
   0f03   15                inc R5
                            
   0f04   9a                ghi R10
   0f05   55                str R5
   0f06   15                inc R5
                            
   0f07                 LET_STATEMENT_MAINLOOP
   0f07   04                ldn R4
   0f08   fb 20             xri 32
   0f0a   32 14             bz LET_STATEMENT_NEXTCHARACTER      ;if ' '
   0f0c   04                ldn R4
   0f0d   fb 3d             xri 61
   0f0f   32 17             bz LET_STATEMENT_EXPRESSION         ;if '='
                            
   0f11   c0 0f 80          lbr LET_STATEMENT_END
                        
   0f14                 LET_STATEMENT_NEXTCHARACTER
   0f14   14                inc R4
   0f15   30 07             br LET_STATEMENT_MAINLOOP
                        
   0f17                 LET_STATEMENT_EXPRESSION
   0f17   14                inc R4
                            
   0f18   f8 65             ldi EXPRESSION.0         ;call EXPRESSION
   0f1a   ad                plo CALL_REG
   0f1b   f8 09             ldi EXPRESSION.1
   0f1d   bd                phi CALL_REG
                            
   0f1e   f8 00             ldi FCALL.0
   0f20   ae                plo FCALL_REG
   0f21   de                sep FCALL_REG
                            
   0f22                 LET_STATEMENT_ADDVAR
   0f22   f8 02             ldi VARLIST_COUNT.0
   0f24   a5                plo R5
   0f25   f8 21             ldi VARLIST_COUNT.1
   0f27   b5                phi R5
                            
   0f28   e5                sex R5
                            
   0f29   45                lda R5
   0f2a   ca 0f 31          lbnz LET_STATEMENT_ADDNODE
   0f2d   05                ldn R5
   0f2e   c2 0f 52          lbz LET_STATEMENT_FIRSTNODE
                            
   0f31                 LET_STATEMENT_ADDNODE
   0f31   25                dec R5                          ;reset R5 to the VARLIST header
                            
   0f32   f8 01             ldi 1                           ;increment the VARLIST_COUNT by one
   0f34   f4                add
   0f35   55                str R5
   0f36   15                inc R5
                            
   0f37   f8 00             ldi 0
   0f39   74                adc
   0f3a   55                str R5
   0f3b   15                inc R5
                            
   0f3c   15                inc R5                          ;skip VARLIST_FIRSTNODE
   0f3d   15                inc R5
                            
   0f3e   45                lda R5                          ;read VARLIST_LASTNODE
   0f3f   a7                plo R7                          ;and place the address to R7
   0f40   05                ldn R5
   0f41   b7                phi R7
                            
   0f42   25                dec R5                          ;set R5 back to VARLIST_LASTNODE
                            
   0f43   26                dec R6                          ;reset R6 to variableNode
   0f44   26                dec R6
                            
   0f45   46                lda R6                          ;load address and store it to address R7 and R5
   0f46   57                str R7
   0f47   55                str R5
   0f48   17                inc R7
   0f49   15                inc R5
                            
   0f4a   46                lda R6
   0f4b   57                str R7
   0f4c   55                str R5
   0f4d   17                inc R7
   0f4e   15                inc R5
                            
   0f4f   c0 0f 80          lbr LET_STATEMENT_END
                        
   0f52                 LET_STATEMENT_FIRSTNODE
   0f52   25                dec R5                          ;reset R5 to the VARLIST header
                            
   0f53   f8 01             ldi 1                           ;set VARLIST_COUNT to one
   0f55   55                str R5
   0f56   15                inc R5
                            
   0f57   f8 00             ldi 0
   0f59   55                str R5
   0f5a   15                inc R5
                            
   0f5b   26                dec R6                          ;reset R6 to variableNode
   0f5c   26                dec R6
                            
   0f5d   46                lda R6                          ;load address and store it to VARLIST_FIRSTNODE
   0f5e   55                str R5
   0f5f   15                inc R5
                            
   0f60   46                lda R6
   0f61   55                str R5
   0f62   15                inc R5
                            
   0f63   26                dec R6                          ;reset R6 to variableNode
   0f64   26                dec R6
                            
   0f65   46                lda R6                          ;load address and store it to VARLIST_LASTNODE
   0f66   55                str R5
   0f67   15                inc R5
                            
   0f68   46                lda R6
   0f69   55                str R5
   0f6a   15                inc R5
                            
   0f6b   c0 0f 80          lbr LET_STATEMENT_END
                        
   0f6e                 LET_STATEMENT_FREENODE
   0f6e   25                dec R5
   0f6f   25                dec R5
   0f70   25                dec R5
   0f71   25                dec R5
                            
   0f72   45                lda R5
   0f73   a4                plo R4
   0f74   45                lda R5
   0f75   b4                phi R4
                            
   0f76   f8 5c             ldi DYN_MEMORY_FREE.0         ;call DYN_MEMORY_FREE
   0f78   ad                plo CALL_REG
   0f79   f8 0d             ldi DYN_MEMORY_FREE.1
   0f7b   bd                phi CALL_REG
                            
   0f7c   f8 00             ldi FCALL.0
   0f7e   ae                plo FCALL_REG
   0f7f   de                sep FCALL_REG
                            
   0f80                 LET_STATEMENT_END
   0f80   8f                glo STACK_REG
   0f81   fc 05             adi 5
   0f83   af                plo STACK_REG
   0f84   9f                ghi STACK_REG
   0f85   7c 00             adci 0
   0f87   bf                phi STACK_REG
                            
   0f88   ef                sex STACK_REG
                            
   0f89   72                ldxa
   0f8a   a7                plo R7
   0f8b   72                ldxa
   0f8c   b7                phi R7
                            
   0f8d   72                ldxa
   0f8e   a6                plo R6
   0f8f   72                ldxa
   0f90   b6                phi R6
                            
   0f91   72                ldxa
   0f92   a5                plo R5
   0f93   f0                ldx
   0f94   b5                phi R5
                            
   0f95   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-HEXVIEWER------------------------------------
                        ;-R4-Start address-----------------------------
                        ;-R5-Count-------------------------------------
   0f96                 HEX_BASE_SRT
   0f96   0d 0a 42 61       db "\r\nBase address: 0x",0
   0f9a   73 65 20 61   
   0f9e   64 64 72 65   
   0fa2   73 73 3a 20   
   0fa6   30 78 00      
   0fa9                 HEX_HEADER_STR
   0fa9   0d 0a 0d 0a       db "\r\n\r\nOffset  00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F  String\r\n"
   0fad   4f 66 66 73   
   0fb1   65 74 20 20   
   0fb5   30 30 20 30   
   0fb9   31 20 30 32   
   0fbd   20 30 33 20   
   0fc1   30 34 20 30   
   0fc5   35 20 30 36   
   0fc9   20 30 37 20   
   0fcd   30 38 20 30   
   0fd1   39 20 30 41   
   0fd5   20 30 42 20   
   0fd9   30 43 20 30   
   0fdd   44 20 30 45   
   0fe1   20 30 46 20   
   0fe5   20 53 74 72   
   0fe9   69 6e 67 0d   
   0fed   0a            
   0fee   2d 2d 2d 2d       db         "-------------------------------------------------------------------------\r\n",0
   0ff2   2d 2d 2d 2d   
   0ff6   2d 2d 2d 2d   
   0ffa   2d 2d 2d 2d   
   0ffe   2d 2d 2d 2d   
   1002   2d 2d 2d 2d   
   1006   2d 2d 2d 2d   
   100a   2d 2d 2d 2d   
   100e   2d 2d 2d 2d   
   1012   2d 2d 2d 2d   
   1016   2d 2d 2d 2d   
   101a   2d 2d 2d 2d   
   101e   2d 2d 2d 2d   
   1022   2d 2d 2d 2d   
   1026   2d 2d 2d 2d   
   102a   2d 2d 2d 2d   
   102e   2d 2d 2d 2d   
   1032   2d 2d 2d 2d   
   1036   2d 0d 0a 00   
                        ;              "0000:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................"
   103a                 HEX_LINECNT_SEPARATOR
   103a   3a 20 20 20       db ":   ",0
   103e   00            
                            
   103f                 HEXVIEWER
   103f   ef                sex STACK_REG
                            
   1040   f8 00             ldi 0
   1042   73                stxd
   1043   73                stxd
   1044   94                ghi R4
   1045   73                stxd
   1046   84                glo R4
   1047   73                stxd    ;+17 current address
                            
   1048   f8 00             ldi 0
   104a   73                stxd
   104b   73                stxd
   104c   94                ghi R4
   104d   73                stxd
   104e   84                glo R4
   104f   73                stxd    ;+13 start address
                            
   1050   f8 00             ldi 0
   1052   73                stxd
   1053   73                stxd
   1054   95                ghi R5
   1055   73                stxd
   1056   85                glo R5
   1057   73                stxd    ;+9 last address
                            
   1058   f8 00             ldi 0
   105a   73                stxd
   105b   73                stxd
   105c   73                stxd
   105d   73                stxd    ;+5 line counter
                            
   105e   73                stxd
   105f   73                stxd
   1060   73                stxd
   1061   73                stxd    ;+1 temp for hex digits
                            
   1062   8f                glo STACK_REG
   1063   fc 0d             adi 13
   1065   a4                plo R4
   1066   9f                ghi STACK_REG
   1067   7c 00             adci 0
   1069   b4                phi R4
                            
   106a   8f                glo STACK_REG
   106b   fc 09             adi 9
   106d   a6                plo R6
   106e   9f                ghi STACK_REG
   106f   7c 00             adci 0
   1071   b6                phi R6
                            
   1072   e4                sex R4
                            
   1073   85                glo R5      ;adding R5 value to start address and store it to last address
   1074   f4                add
   1075   56                str R6
   1076   60                irx
   1077   16                inc R6
   1078   95                ghi R5
   1079   74                adc
   107a   56                str R6
   107b   60                irx
   107c   16                inc R6
   107d   f8 00             ldi 0
   107f   74                adc
   1080   56                str R6
                            
   1081   f8 96             ldi HEX_BASE_SRT.0     ;prepare to print base address
   1083   a6                plo R6
   1084   f8 0f             ldi HEX_BASE_SRT.1
   1086   b6                phi R6
                        	
   1087   f8 52             ldi PRINT.0         ;prepare to call PRINT
   1089   ad                plo CALL_REG
   108a   f8 01             ldi PRINT.1
   108c   bd                phi CALL_REG
                            
   108d   f8 00             ldi FCALL.0
   108f   ae                plo FCALL_REG
   1090   de                sep FCALL_REG
                            
   1091   8f                glo STACK_REG       ;prepare to print the address in hex
   1092   fc 0d             adi 13
   1094   a4                plo R4
   1095   9f                ghi STACK_REG
   1096   7c 00             adci 0
   1098   b4                phi R4
                            
   1099   f8 04             ldi 4               ;with 4 digits
   109b   a5                plo R5
                            
   109c   f8 22             ldi PRINT_HEX.0     ;prepare to call PRINT_HEX
   109e   ad                plo CALL_REG
   109f   f8 04             ldi PRINT_HEX.1
   10a1   bd                phi CALL_REG
                            
   10a2   f8 00             ldi FCALL.0
   10a4   ae                plo FCALL_REG
   10a5   de                sep FCALL_REG
                            
   10a6   f8 a9             ldi HEX_HEADER_STR.0     ;prepare to print the header
   10a8   a6                plo R6
   10a9   f8 0f             ldi HEX_HEADER_STR.1
   10ab   b6                phi R6
                        	
   10ac   f8 52             ldi PRINT.0         ;prepare to call PRINT
   10ae   ad                plo CALL_REG
   10af   f8 01             ldi PRINT.1
   10b1   bd                phi CALL_REG
                            
   10b2   f8 00             ldi FCALL.0
   10b4   ae                plo FCALL_REG
   10b5   de                sep FCALL_REG
                        
   10b6                 HEXVIEWER_MAINLOOP
   10b6   8f                glo STACK_REG       ;prepare to print the first address in hex
   10b7   fc 05             adi 5
   10b9   a4                plo R4
   10ba   9f                ghi STACK_REG
   10bb   7c 00             adci 0
   10bd   b4                phi R4
                            
   10be   f8 04             ldi 4               ;with 4 digits
   10c0   a5                plo R5
                            
   10c1   f8 22             ldi PRINT_HEX.0     ;prepare to call PRINT_HEX
   10c3   ad                plo CALL_REG
   10c4   f8 04             ldi PRINT_HEX.1
   10c6   bd                phi CALL_REG
                            
   10c7   f8 00             ldi FCALL.0
   10c9   ae                plo FCALL_REG
   10ca   de                sep FCALL_REG
                            
   10cb   f8 3a             ldi HEX_LINECNT_SEPARATOR.0     ;prepare to print address separator
   10cd   a6                plo R6
   10ce   f8 10             ldi HEX_LINECNT_SEPARATOR.1
   10d0   b6                phi R6
                        	
   10d1   f8 52             ldi PRINT.0         ;prepare to call PRINT
   10d3   ad                plo CALL_REG
   10d4   f8 01             ldi PRINT.1
   10d6   bd                phi CALL_REG
                            
   10d7   f8 00             ldi FCALL.0
   10d9   ae                plo FCALL_REG
   10da   de                sep FCALL_REG
                            
   10db   f8 10             ldi 16      ;set R8 low to 16 for counting the bytes
   10dd   a8                plo R8
                           
   10de                 HEXVIEWER_PRINT_HEX_LOOP
   10de   8f                glo STACK_REG       ;set R4 pointer to current address
   10df   fc 11             adi 17
   10e1   a4                plo R4
   10e2   9f                ghi STACK_REG
   10e3   7c 00             adci 0
   10e5   b4                phi R4
                            
   10e6   8f                glo STACK_REG       ;set R5 pointer to last address
   10e7   fc 09             adi 9
   10e9   a5                plo R5
   10ea   9f                ghi STACK_REG
   10eb   7c 00             adci 0
   10ed   b5                phi R5
                        
   10ee   e4                sex R4          ;check if current address is >= last address
                            
   10ef   45                lda R5
   10f0   f5                sd
   10f1   60                irx
                            
   10f2   45                lda R5
   10f3   75                sdb
   10f4   60                irx
                            
   10f5   45                lda R5
   10f6   75                sdb
   10f7   60                irx
                            
   10f8   05                ldn R5
   10f9   75                sdb
                            
   10fa   c3 11 22          lbdf HEXVIEWER_PRINT_HEX_SPACES   ;if current address >= last address then 
                        
   10fd   8f                glo STACK_REG       ;set R4 pointer to current address
   10fe   fc 11             adi 17
   1100   a4                plo R4
   1101   9f                ghi STACK_REG
   1102   7c 00             adci 0
   1104   b4                phi R4
                            
   1105   44                lda R4              ;get current address and load it in R5
   1106   a5                plo R5
   1107   44                lda R4
   1108   b5                phi R5
                            
   1109   05                ldn R5              ;get data from R5 address
   110a   a5                plo R5              ;store data in R5 low
                            
   110b   8f                glo STACK_REG       ;set R4 pointer to temp
   110c   a4                plo R4
   110d   9f                ghi STACK_REG
   110e   b4                phi R4
   110f   14                inc R4
                            
   1110   85                glo R5              ;get data from R5 low
   1111   54                str R4              ;store data to temp
                           
   1112   f8 02             ldi 2
   1114   a5                plo R5              ;set R5 low to 2 digits
                            
   1115   f8 22             ldi PRINT_HEX.0     ;prepare to call PRINT_HEX
   1117   ad                plo CALL_REG
   1118   f8 04             ldi PRINT_HEX.1
   111a   bd                phi CALL_REG
                            
   111b   f8 00             ldi FCALL.0
   111d   ae                plo FCALL_REG
   111e   de                sep FCALL_REG
                            
   111f   c0 11 32          lbr HEXVIEWER_NEXT_HEX
                            
   1122                 HEXVIEWER_PRINT_HEX_SPACES
   1122   f8 3c             ldi HEX_LINECNT_SEPARATOR+2.0     ;prepare to print two space
   1124   a6                plo R6
   1125   f8 10             ldi HEX_LINECNT_SEPARATOR+2.1
   1127   b6                phi R6
                        	
   1128   f8 52             ldi PRINT.0         ;prepare to call PRINT
   112a   ad                plo CALL_REG
   112b   f8 01             ldi PRINT.1
   112d   bd                phi CALL_REG
                            
   112e   f8 00             ldi FCALL.0
   1130   ae                plo FCALL_REG
   1131   de                sep FCALL_REG
                        
   1132                 HEXVIEWER_NEXT_HEX
   1132   f8 3d             ldi HEX_LINECNT_SEPARATOR+3.0     ;prepare to print a space
   1134   a6                plo R6
   1135   f8 10             ldi HEX_LINECNT_SEPARATOR+3.1
   1137   b6                phi R6
                        	
   1138   f8 52             ldi PRINT.0         ;prepare to call PRINT
   113a   ad                plo CALL_REG
   113b   f8 01             ldi PRINT.1
   113d   bd                phi CALL_REG
                            
   113e   f8 00             ldi FCALL.0
   1140   ae                plo FCALL_REG
   1141   de                sep FCALL_REG
                            
   1142   8f                glo STACK_REG       ;set R4 pointer to current address
   1143   fc 11             adi 17
   1145   a4                plo R4
   1146   9f                ghi STACK_REG
   1147   7c 00             adci 0
   1149   b4                phi R4
                            
   114a   e4                sex R4
   114b   f8 01             ldi 1
   114d   f4                add
   114e   54                str R4
   114f   60                irx
                            
   1150   f8 00             ldi 0
   1152   74                adc
   1153   54                str R4
   1154   60                irx
                            
   1155   f8 00             ldi 0
   1157   74                adc
   1158   54                str R4
   1159   60                irx
                            
   115a   f8 00             ldi 0
   115c   74                adc
   115d   54                str R4
                            
   115e   28                dec R8
   115f   88                glo R8
   1160   ca 10 de          lbnz HEXVIEWER_PRINT_HEX_LOOP
                            
   1163   f8 3d             ldi HEX_LINECNT_SEPARATOR+3.0     ;prepare to print a space
   1165   a6                plo R6
   1166   f8 10             ldi HEX_LINECNT_SEPARATOR+3.1
   1168   b6                phi R6
                        	
   1169   f8 52             ldi PRINT.0         ;prepare to call PRINT
   116b   ad                plo CALL_REG
   116c   f8 01             ldi PRINT.1
   116e   bd                phi CALL_REG
                            
   116f   f8 00             ldi FCALL.0
   1171   ae                plo FCALL_REG
   1172   de                sep FCALL_REG
                            
   1173   8f                glo STACK_REG       ;set R4 pointer to current address
   1174   fc 11             adi 17
   1176   a4                plo R4
   1177   9f                ghi STACK_REG
   1178   7c 00             adci 0
   117a   b4                phi R4
                            
   117b   8f                glo STACK_REG       ;set R5 pointer to start address
   117c   fc 0d             adi 13
   117e   a5                plo R5
   117f   9f                ghi STACK_REG
   1180   7c 00             adci 0
   1182   b5                phi R5
                            
   1183   e5                sex R5
                            
   1184   72                ldxa
   1185   54                str R4
   1186   14                inc R4
                            
   1187   72                ldxa
   1188   54                str R4
   1189   14                inc R4
                            
   118a   72                ldxa
   118b   54                str R4
   118c   14                inc R4
                            
   118d   72                ldxa
   118e   54                str R4
                            
   118f   f8 10             ldi 16      ;set R8 low to 16 for counting the bytes
   1191   a8                plo R8
                        
   1192                 HEXVIEWER_PRINT_STR_LOOP
   1192   8f                glo STACK_REG       ;set R4 pointer to current address
   1193   fc 11             adi 17
   1195   a4                plo R4
   1196   9f                ghi STACK_REG
   1197   7c 00             adci 0
   1199   b4                phi R4
                            
   119a   8f                glo STACK_REG       ;set R5 pointer to last address
   119b   fc 09             adi 9
   119d   a5                plo R5
   119e   9f                ghi STACK_REG
   119f   7c 00             adci 0
   11a1   b5                phi R5
                        
   11a2   e4                sex R4          ;check if current address is <= last address
                            
   11a3   45                lda R5
   11a4   f5                sd
   11a5   60                irx
                            
   11a6   45                lda R5
   11a7   75                sdb
   11a8   60                irx
                            
   11a9   45                lda R5
   11aa   75                sdb
   11ab   60                irx
                            
   11ac   05                ldn R5
   11ad   75                sdb
                            
   11ae   c3 11 e4          lbdf HEXVIEWER_PRINT_STR_SPACE   ;if current address >= last address then 
                            
   11b1   8f                glo STACK_REG       ;set R4 pointer to current address
   11b2   fc 11             adi 17
   11b4   a4                plo R4
   11b5   9f                ghi STACK_REG
   11b6   7c 00             adci 0
   11b8   b4                phi R4
                            
   11b9   44                lda R4              ;get current address and load it in R5
   11ba   a5                plo R5
   11bb   44                lda R4
   11bc   b5                phi R5
                            
   11bd   05                ldn R5              ;get data from R5 address
   11be   a5                plo R5              ;store data in R5 low
                            
   11bf   ff 20             smi 32
   11c1   3b d5             bm HEXVIEWER_PRINT_STR_DOT
   11c3   ff 5f             smi 95
   11c5   33 d5             bpz HEXVIEWER_PRINT_STR_DOT
                            
   11c7   85                glo R5
   11c8   b4                phi R4
                            
   11c9   f8 13             ldi SERIAL_SEND_START.0         ;prepare to call SERIAL_SEND_START to send one char
   11cb   ad                plo CALL_REG
   11cc   f8 01             ldi SERIAL_SEND_START.1
   11ce   bd                phi CALL_REG
                            
   11cf   f8 00             ldi FCALL.0
   11d1   ae                plo FCALL_REG
   11d2   de                sep FCALL_REG
                            
   11d3   30 f1             br HEXVIEWER_NEXT_STR
                            
   11d5                 HEXVIEWER_PRINT_STR_DOT
   11d5   f8 2e             ldi 46
   11d7   b4                phi R4
                            
   11d8   f8 13             ldi SERIAL_SEND_START.0         ;prepare to call SERIAL_SEND_START to send one char
   11da   ad                plo CALL_REG
   11db   f8 01             ldi SERIAL_SEND_START.1
   11dd   bd                phi CALL_REG
                            
   11de   f8 00             ldi FCALL.0
   11e0   ae                plo FCALL_REG
   11e1   de                sep FCALL_REG
                            
   11e2   30 f1             br HEXVIEWER_NEXT_STR
                        
   11e4                 HEXVIEWER_PRINT_STR_SPACE
   11e4   f8 20             ldi 32
   11e6   b4                phi R4
                            
   11e7   f8 13             ldi SERIAL_SEND_START.0         ;prepare to call SERIAL_SEND_START to send one char
   11e9   ad                plo CALL_REG
   11ea   f8 01             ldi SERIAL_SEND_START.1
   11ec   bd                phi CALL_REG
                            
   11ed   f8 00             ldi FCALL.0
   11ef   ae                plo FCALL_REG
   11f0   de                sep FCALL_REG
                            
   11f1                 HEXVIEWER_NEXT_STR
   11f1   8f                glo STACK_REG       ;set R4 pointer to current address
   11f2   fc 11             adi 17
   11f4   a4                plo R4
   11f5   9f                ghi STACK_REG
   11f6   7c 00             adci 0
   11f8   b4                phi R4
                            
   11f9   e4                sex R4
   11fa   f8 01             ldi 1
   11fc   f4                add
   11fd   54                str R4
   11fe   60                irx
                            
   11ff   f8 00             ldi 0
   1201   74                adc
   1202   54                str R4
   1203   60                irx
                            
   1204   f8 00             ldi 0
   1206   74                adc
   1207   54                str R4
   1208   60                irx
                            
   1209   f8 00             ldi 0
   120b   74                adc
   120c   54                str R4
                            
   120d   28                dec R8
   120e   88                glo R8
   120f   ca 11 92          lbnz HEXVIEWER_PRINT_STR_LOOP
                            
   1212   f8 6c             ldi NEW_LINE.0     ;prepare to print a space
   1214   a6                plo R6
   1215   f8 17             ldi NEW_LINE.1
   1217   b6                phi R6
                        	
   1218   f8 52             ldi PRINT.0         ;prepare to call PRINT
   121a   ad                plo CALL_REG
   121b   f8 01             ldi PRINT.1
   121d   bd                phi CALL_REG
                            
   121e   f8 00             ldi FCALL.0
   1220   ae                plo FCALL_REG
   1221   de                sep FCALL_REG
                            
   1222   8f                glo STACK_REG       ;set R4 pointer to current address
   1223   fc 11             adi 17
   1225   a4                plo R4
   1226   9f                ghi STACK_REG
   1227   7c 00             adci 0
   1229   b4                phi R4
                            
   122a   8f                glo STACK_REG       ;set R5 pointer to last address
   122b   fc 09             adi 9
   122d   a5                plo R5
   122e   9f                ghi STACK_REG
   122f   7c 00             adci 0
   1231   b5                phi R5
                        
   1232   e4                sex R4          ;check if current address is >= last address
                            
   1233   45                lda R5
   1234   f5                sd
   1235   60                irx
                            
   1236   45                lda R5
   1237   75                sdb
   1238   60                irx
                            
   1239   45                lda R5
   123a   75                sdb
   123b   60                irx
                            
   123c   05                ldn R5
   123d   75                sdb
                            
   123e   c3 12 7c          lbdf HEXVIEWER_END
                            
   1241   8f                glo STACK_REG       ;set R4 pointer to line counter
   1242   fc 05             adi 5
   1244   a4                plo R4
   1245   9f                ghi STACK_REG
   1246   7c 00             adci 0
   1248   b4                phi R4
                            
   1249   e4                sex R4
                            
   124a   f8 10             ldi 16
   124c   f4                add
   124d   54                str R4
   124e   60                irx
                            
   124f   f8 00             ldi 0
   1251   74                adc
   1252   54                str R4
   1253   60                irx
                            
   1254   f8 00             ldi 0
   1256   74                adc
   1257   54                str R4
   1258   60                irx
                            
   1259   f8 00             ldi 0
   125b   74                adc
   125c   54                str R4
                            
   125d   8f                glo STACK_REG       ;set R4 pointer to current address
   125e   fc 11             adi 17
   1260   a4                plo R4
   1261   9f                ghi STACK_REG
   1262   7c 00             adci 0
   1264   b4                phi R4
                            
   1265   8f                glo STACK_REG       ;set R5 pointer to start address
   1266   fc 0d             adi 13
   1268   a5                plo R5
   1269   9f                ghi STACK_REG
   126a   7c 00             adci 0
   126c   b5                phi R5
                            
   126d   e4                sex R4
                            
   126e   72                ldxa
   126f   55                str R5
   1270   15                inc R5
                            
   1271   72                ldxa
   1272   55                str R5
   1273   15                inc R5
                            
   1274   72                ldxa
   1275   55                str R5
   1276   15                inc R5
                            
   1277   72                ldxa
   1278   55                str R5
                            
   1279   c0 10 b6          lbr HEXVIEWER_MAINLOOP
                        
   127c                 HEXVIEWER_END
   127c   8f                glo STACK_REG
   127d   fc 14             adi 20
   127f   af                plo STACK_REG
   1280   9f                ghi STACK_REG
   1281   7c 00             adci 0
   1283   bf                phi STACK_REG
                            
   1284   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-DYN MEMORY ALLOC CALLER----------------------
   1285                 DYN_MEMORY_ALLOC_CALLER_STR1
   1285   20 62 79 74       db " bytes of memory allocated at memory address ",0," (0x",0,")\r\n",0
   1289   65 73 20 6f   
   128d   66 20 6d 65   
   1291   6d 6f 72 79   
   1295   20 61 6c 6c   
   1299   6f 63 61 74   
   129d   65 64 20 61   
   12a1   74 20 6d 65   
   12a5   6d 6f 72 79   
   12a9   20 61 64 64   
   12ad   72 65 73 73   
   12b1   20 00 20 28   
   12b5   30 78 00 29   
   12b9   0d 0a 00      
   12bc                 DYN_MEMORY_ALLOC_CALLER_STR2
   12bc   4f 75 74 20       db "Out of memory!\r\n",0
   12c0   6f 66 20 6d   
   12c4   65 6d 6f 72   
   12c8   79 21 0d 0a   
   12cc   00            
                        
   12cd                 DYN_MEMORY_ALLOC_CALLER
   12cd   ef                sex STACK_REG
                            
   12ce   f8 00             ldi 0
   12d0   73                stxd
   12d1   73                stxd
   12d2   73                stxd
   12d3   73                stxd                        ;+5 address
                            
   12d4   73                stxd
   12d5   73                stxd
   12d6   73                stxd
   12d7   73                stxd                        ;+1 size
                            
   12d8   8f                glo STACK_REG               ;set R5 pointer to size
   12d9   a5                plo R5
   12da   9f                ghi STACK_REG
   12db   b5                phi R5
   12dc   15                inc R5
                            
   12dd   f8 65             ldi EXPRESSION.0            ;evaluate expression
   12df   ad                plo CALL_REG
   12e0   f8 09             ldi EXPRESSION.1
   12e2   bd                phi CALL_REG
                            
   12e3   f8 00             ldi FCALL.0
   12e5   ae                plo FCALL_REG
   12e6   de                sep FCALL_REG
                            
   12e7   8f                glo STACK_REG               ;set R5 pointer to size
   12e8   a5                plo R5
   12e9   9f                ghi STACK_REG
   12ea   b5                phi R5
   12eb   15                inc R5
                            
   12ec   45                lda R5                      ;R4 = size
   12ed   a4                plo R4
   12ee   45                lda R5
   12ef   b4                phi R4
                            
   12f0   f8 f7             ldi DYN_MEMORY_ALLOC.0      ;call memory allocation
   12f2   ad                plo CALL_REG
   12f3   f8 0b             ldi DYN_MEMORY_ALLOC.1
   12f5   bd                phi CALL_REG
                            
   12f6   f8 00             ldi FCALL.0
   12f8   ae                plo FCALL_REG
   12f9   de                sep FCALL_REG
                            
   12fa   8a                glo R10                                 ;check if R10 has a value, if it is 0 then it failed
   12fb   ca 13 15          lbnz DYN_MEMORY_ALLOC_CALLER_SUCCESS
   12fe   9a                ghi R10
   12ff   ca 13 15          lbnz DYN_MEMORY_ALLOC_CALLER_SUCCESS
                            
   1302                 DYN_MEMORY_ALLOC_CALLER_FAIL
   1302   f8 bc             ldi DYN_MEMORY_ALLOC_CALLER_STR2.0      ;print out of memory
   1304   a6                plo R6
   1305   f8 12             ldi DYN_MEMORY_ALLOC_CALLER_STR2.1
   1307   b6                phi R6
                            
   1308   f8 52             ldi PRINT.0                             ;prepare to call PRINT
   130a   ad                plo CALL_REG
   130b   f8 01             ldi PRINT.1
   130d   bd                phi CALL_REG
                            
   130e   f8 00             ldi FCALL.0
   1310   ae                plo FCALL_REG
   1311   de                sep FCALL_REG                           ;call PRINT
                        	
   1312   c0 13 7f          lbr DYN_MEMORY_ALLOC_CALLER_END         ;return
                        
   1315                 DYN_MEMORY_ALLOC_CALLER_SUCCESS
   1315   8f                glo STACK_REG                           ;set R5 pointer to address
   1316   fc 05             adi 5
   1318   a4                plo R4
   1319   9f                ghi STACK_REG
   131a   7c 00             adci 0
   131c   b4                phi R4
                            
   131d   8a                glo R10                                 ;copy R10 value to address
   131e   54                str R4
   131f   14                inc R4
                            
   1320   9a                ghi R10
   1321   54                str R4
                            
   1322   8f                glo STACK_REG                           ;set R4 pointor to size
   1323   a4                plo R4
   1324   9f                ghi STACK_REG
   1325   b4                phi R4
   1326   14                inc R4
                            
   1327   f8 ae             ldi PRINT_DEC.0                         ;print size in decimal
   1329   ad                plo CALL_REG
   132a   f8 04             ldi PRINT_DEC.1
   132c   bd                phi CALL_REG
                            
   132d   f8 00             ldi FCALL.0
   132f   ae                plo FCALL_REG
   1330   de                sep FCALL_REG
                            
   1331   f8 85             ldi DYN_MEMORY_ALLOC_CALLER_STR1.0      ;print the first part of the allocation message
   1333   a6                plo R6
   1334   f8 12             ldi DYN_MEMORY_ALLOC_CALLER_STR1.1
   1336   b6                phi R6
                            
   1337   f8 52             ldi PRINT.0                             ;prepare to call PRINT
   1339   ad                plo CALL_REG    
   133a   f8 01             ldi PRINT.1
   133c   bd                phi CALL_REG
                            
   133d   f8 00             ldi FCALL.0
   133f   ae                plo FCALL_REG
   1340   de                sep FCALL_REG                           ;call PRINT
                            
   1341   8f                glo STACK_REG                           ;set R4 pointer to address
   1342   fc 05             adi 5
   1344   a4                plo R4
   1345   9f                ghi STACK_REG
   1346   7c 00             adci 0
   1348   b4                phi R4
                            
   1349   f8 ae             ldi PRINT_DEC.0                         ;print address in decimal
   134b   ad                plo CALL_REG
   134c   f8 04             ldi PRINT_DEC.1
   134e   bd                phi CALL_REG
                            
   134f   f8 00             ldi FCALL.0
   1351   ae                plo FCALL_REG
   1352   de                sep FCALL_REG
                            
   1353   f8 52             ldi PRINT.0                             ;print the second part of the allocation message
   1355   ad                plo CALL_REG
   1356   f8 01             ldi PRINT.1
   1358   bd                phi CALL_REG
                            
   1359   f8 00             ldi FCALL.0
   135b   ae                plo FCALL_REG
   135c   de                sep FCALL_REG                           ;call PRINT
                            
   135d   8f                glo STACK_REG                           ;reset R4 pointer to address
   135e   fc 05             adi 5
   1360   a4                plo R4
   1361   9f                ghi STACK_REG
   1362   7c 00             adci 0
   1364   b4                phi R4
                            
   1365   f8 04             ldi 4                                   ;set number of digits to 4
   1367   a5                plo R5
   1368   f8 00             ldi 0
   136a   b5                phi R5
                            
   136b   f8 22             ldi PRINT_HEX.0                         ;print address in hexadecimal
   136d   ad                plo CALL_REG
   136e   f8 04             ldi PRINT_HEX.1
   1370   bd                phi CALL_REG
                            
   1371   f8 00             ldi FCALL.0
   1373   ae                plo FCALL_REG
   1374   de                sep FCALL_REG
                            
   1375   f8 52             ldi PRINT.0                             ;print the last part of the allocation message
   1377   ad                plo CALL_REG
   1378   f8 01             ldi PRINT.1
   137a   bd                phi CALL_REG
                            
   137b   f8 00             ldi FCALL.0
   137d   ae                plo FCALL_REG
   137e   de                sep FCALL_REG                           ;call PRINT
                        
   137f                 DYN_MEMORY_ALLOC_CALLER_END
   137f   8f                glo STACK_REG
   1380   fc 08             adi 8
   1382   af                plo STACK_REG
   1383   9f                ghi STACK_REG
   1384   7c 00             adci 0
   1386   bf                phi STACK_REG
                            
   1387   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-DYN MEMORY FREE CALLER-----------------------
   1388                 DYN_MEMORY_FREE_CALLER_STR1
   1388   41 6c 6c 6f       db "Allocated memory has been freed at address ",0," (0x",0,")\r\n",0
   138c   63 61 74 65   
   1390   64 20 6d 65   
   1394   6d 6f 72 79   
   1398   20 68 61 73   
   139c   20 62 65 65   
   13a0   6e 20 66 72   
   13a4   65 65 64 20   
   13a8   61 74 20 61   
   13ac   64 64 72 65   
   13b0   73 73 20 00   
   13b4   20 28 30 78   
   13b8   00 29 0d 0a   
   13bc   00            
   13bd                 DYN_MEMORY_FREE_CALLER_STR2
   13bd   4d 65 6d 6f       db "Memory address is out of the heap range!\r\n",0
   13c1   72 79 20 61   
   13c5   64 64 72 65   
   13c9   73 73 20 69   
   13cd   73 20 6f 75   
   13d1   74 20 6f 66   
   13d5   20 74 68 65   
   13d9   20 68 65 61   
   13dd   70 20 72 61   
   13e1   6e 67 65 21   
   13e5   0d 0a 00      
                            
   13e8                 DYN_MEMORY_FREE_CALLER
   13e8   ef                sex STACK_REG
                            
   13e9   f8 00             ldi 0
   13eb   73                stxd
   13ec   73                stxd
   13ed   73                stxd
   13ee   73                stxd                    ;+1 address
                            
   13ef   8f                glo STACK_REG
   13f0   a5                plo R5
   13f1   9f                ghi STACK_REG
   13f2   b5                phi R5
   13f3   15                inc R5
                            
   13f4   f8 65             ldi EXPRESSION.0
   13f6   ad                plo CALL_REG
   13f7   f8 09             ldi EXPRESSION.1
   13f9   bd                phi CALL_REG
                            
   13fa   f8 00             ldi FCALL.0
   13fc   ae                plo FCALL_REG
   13fd   de                sep FCALL_REG
                            
   13fe   8f                glo STACK_REG
   13ff   a5                plo R5
   1400   9f                ghi STACK_REG
   1401   b5                phi R5
   1402   15                inc R5
                            
   1403   e5                sex R5
                            
   1404   f8 10             ldi HEAP_START.0
   1406   f5                sd
   1407   60                irx
   1408   f8 21             ldi HEAP_START.1
   140a   75                sdb
                            
   140b   25                dec R5
                            
   140c   cb 14 72          lbnf DYN_MEMORY_FREE_CALLER_OUTOFRANGE
                            
   140f   f8 00             ldi HEAP_END.0
   1411   f5                sd
   1412   60                irx
   1413   f8 fc             ldi HEAP_END.1
   1415   75                sdb
                            
   1416   25                dec R5
                            
   1417   c3 14 72          lbdf DYN_MEMORY_FREE_CALLER_OUTOFRANGE
                            
   141a   72                ldxa
   141b   a4                plo R4
   141c   f0                ldx
   141d   b4                phi R4
                            
   141e   25                dec R5
                            
   141f   f8 5c             ldi DYN_MEMORY_FREE.0                 ;call free
   1421   ad                plo CALL_REG
   1422   f8 0d             ldi DYN_MEMORY_FREE.1
   1424   bd                phi CALL_REG
                            
   1425   f8 00             ldi FCALL.0
   1427   ae                plo FCALL_REG
   1428   de                sep FCALL_REG
                            
   1429   f8 88             ldi DYN_MEMORY_FREE_CALLER_STR1.0
   142b   a6                plo R6
   142c   f8 13             ldi DYN_MEMORY_FREE_CALLER_STR1.1
   142e   b6                phi R6
                            
   142f   f8 52             ldi PRINT.0                             ;print the success message 1st part
   1431   ad                plo CALL_REG
   1432   f8 01             ldi PRINT.1
   1434   bd                phi CALL_REG
                            
   1435   f8 00             ldi FCALL.0
   1437   ae                plo FCALL_REG
   1438   de                sep FCALL_REG
                            
   1439   85                glo R5
   143a   a4                plo R4
   143b   95                ghi R5
   143c   b4                phi R4
                            
   143d   f8 ae             ldi PRINT_DEC.0                         ;print address in decimal
   143f   ad                plo CALL_REG
   1440   f8 04             ldi PRINT_DEC.1
   1442   bd                phi CALL_REG
                            
   1443   f8 00             ldi FCALL.0
   1445   ae                plo FCALL_REG
   1446   de                sep FCALL_REG
                            
   1447   f8 52             ldi PRINT.0                             ;print the success message 2nd part
   1449   ad                plo CALL_REG
   144a   f8 01             ldi PRINT.1
   144c   bd                phi CALL_REG
                            
   144d   f8 00             ldi FCALL.0
   144f   ae                plo FCALL_REG
   1450   de                sep FCALL_REG
                            
   1451   85                glo R5
   1452   a4                plo R4
   1453   95                ghi R5
   1454   b4                phi R4
                            
   1455   f8 04             ldi 4
   1457   a5                plo R5
   1458   f8 00             ldi 0
   145a   b5                phi R5
                            
   145b   f8 22             ldi PRINT_HEX.0                         ;print address in hexadecimal
   145d   ad                plo CALL_REG
   145e   f8 04             ldi PRINT_HEX.1
   1460   bd                phi CALL_REG
                            
   1461   f8 00             ldi FCALL.0
   1463   ae                plo FCALL_REG
   1464   de                sep FCALL_REG
                            
   1465   f8 52             ldi PRINT.0                             ;print the success message 2nd part
   1467   ad                plo CALL_REG
   1468   f8 01             ldi PRINT.1
   146a   bd                phi CALL_REG
                            
   146b   f8 00             ldi FCALL.0
   146d   ae                plo FCALL_REG
   146e   de                sep FCALL_REG
                            
   146f   c0 14 82          lbr DYN_MEMORY_FREE_CALLER_END
                            
   1472                 DYN_MEMORY_FREE_CALLER_OUTOFRANGE
   1472   f8 bd             ldi DYN_MEMORY_FREE_CALLER_STR2.0
   1474   a6                plo R6
   1475   f8 13             ldi DYN_MEMORY_FREE_CALLER_STR2.1
   1477   b6                phi R6
                            
   1478   f8 52             ldi PRINT.0                             ;print the out of range message
   147a   ad                plo CALL_REG
   147b   f8 01             ldi PRINT.1
   147d   bd                phi CALL_REG
                            
   147e   f8 00             ldi FCALL.0
   1480   ae                plo FCALL_REG
   1481   de                sep FCALL_REG                           ;call PRINT
                            
   1482                 DYN_MEMORY_FREE_CALLER_END
   1482   8f                glo STACK_REG
   1483   fc 04             adi 4
   1485   af                plo STACK_REG
   1486   9f                ghi STACK_REG
   1487   7c 00             adci 0
   1489   bf                phi STACK_REG
                            
   148a   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-HEXVIEW_CALLER-------------------------------
   148b                 HEXVIEW_CALLER
   148b   ef                sex STACK_REG
                            
   148c   f8 00             ldi 0
   148e   73                stxd
   148f   73                stxd
   1490   73                stxd
   1491   73                stxd    ;+5 first arg
                            
   1492   73                stxd
   1493   73                stxd
   1494   f8 01             ldi 1
   1496   73                stxd
   1497   f8 00             ldi 0
   1499   73                stxd    ;+1 second arg
                            
   149a   8f                glo STACK_REG
   149b   fc 05             adi 5
   149d   a5                plo R5
   149e   9f                ghi STACK_REG
   149f   7c 00             adci 0
   14a1   b5                phi R5
                            
   14a2   f8 65             ldi EXPRESSION.0
   14a4   ad                plo CALL_REG
   14a5   f8 09             ldi EXPRESSION.1
   14a7   bd                phi CALL_REG
                            
   14a8   f8 00             ldi FCALL.0
   14aa   ae                plo FCALL_REG
   14ab   de                sep FCALL_REG
                            
   14ac   44                lda R4
   14ad   fb 2c             xri 44
   14af   c2 14 c6          lbz HEXVIEW_CALLER_NEXTARG
   14b2   24                dec R4
   14b3   44                lda R4
   14b4   c2 14 d5          lbz HEXVIEW_CALLER_EXEC
   14b7   24                dec R4
                            
   14b8   04                ldn R4
   14b9   b4                phi R4
                            
   14ba   f8 13             ldi SERIAL_SEND_START.0
   14bc   ad                plo CALL_REG
   14bd   f8 01             ldi SERIAL_SEND_START.1
   14bf   bd                phi CALL_REG
                            
   14c0   f8 00             ldi FCALL.0
   14c2   ae                plo FCALL_REG
   14c3   de                sep FCALL_REG
                            
   14c4   30 f4             br HEXVIEW_CALLER_END
                            
   14c6                 HEXVIEW_CALLER_NEXTARG
   14c6   8f                glo STACK_REG
   14c7   a5                plo R5
   14c8   9f                ghi STACK_REG
   14c9   b5                phi R5
   14ca   15                inc R5
                            
   14cb   f8 65             ldi EXPRESSION.0
   14cd   ad                plo CALL_REG
   14ce   f8 09             ldi EXPRESSION.1
   14d0   bd                phi CALL_REG
                            
   14d1   f8 00             ldi FCALL.0
   14d3   ae                plo FCALL_REG
   14d4   de                sep FCALL_REG
                            
   14d5                 HEXVIEW_CALLER_EXEC
   14d5   8f                glo STACK_REG
   14d6   fc 05             adi 5
   14d8   a5                plo R5
   14d9   9f                ghi STACK_REG
   14da   7c 00             adci 0
   14dc   b5                phi R5
                            
   14dd   45                lda R5
   14de   a4                plo R4
   14df   45                lda R5
   14e0   b4                phi R4
                            
   14e1   8f                glo STACK_REG
   14e2   a6                plo R6
   14e3   9f                ghi STACK_REG
   14e4   b6                phi R6
   14e5   16                inc R6
                            
   14e6   46                lda R6
   14e7   a5                plo R5
   14e8   46                lda R6
   14e9   b5                phi R5
                            
   14ea   f8 3f             ldi HEXVIEWER.0
   14ec   ad                plo CALL_REG
   14ed   f8 10             ldi HEXVIEWER.1
   14ef   bd                phi CALL_REG
                            
   14f0   f8 00             ldi FCALL.0
   14f2   ae                plo FCALL_REG
   14f3   de                sep FCALL_REG
                            
   14f4                 HEXVIEW_CALLER_END
   14f4   8f                glo STACK_REG
   14f5   fc 08             adi 8
   14f7   af                plo STACK_REG
   14f8   9f                ghi STACK_REG
   14f9   7c 00             adci 0
   14fb   bf                phi STACK_REG
                            
   14fc   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-TEST FUNCTION--------------------------------
   14fd                 TEST_STR1
   14fd   52 65 73 75       db "Result: ",0
   1501   6c 74 3a 20   
   1505   00            
                        
   1506                 FUNC_TEST
   1506   ef                sex STACK_REG
                            
   1507   f8 00             ldi 0
   1509   73                stxd
   150a   73                stxd
   150b   73                stxd
   150c   73                stxd    ;+1 result
                            
   150d   8f                glo STACK_REG
   150e   a5                plo R5
   150f   9f                ghi STACK_REG
   1510   b5                phi R5
   1511   15                inc R5
                            
   1512   f8 65             ldi EXPRESSION.0
   1514   ad                plo CALL_REG
   1515   f8 09             ldi EXPRESSION.1
   1517   bd                phi CALL_REG
                            
   1518   f8 00             ldi FCALL.0
   151a   ae                plo FCALL_REG
   151b   de                sep FCALL_REG
                            
   151c   8f                glo STACK_REG
   151d   a4                plo R4
   151e   9f                ghi STACK_REG
   151f   b4                phi R4
   1520   14                inc R4
                        
   1521   f8 00             ldi 0
   1523   a5                plo R5
                            
   1524   f8 ae             ldi PRINT_DEC.0     ;prepare to print the Decimal result.
   1526   ad                plo CALL_REG
   1527   f8 04             ldi PRINT_DEC.1
   1529   bd                phi CALL_REG
                            
   152a   f8 00             ldi FCALL.0
   152c   ae                plo FCALL_REG
   152d   de                sep FCALL_REG
                            
   152e   f8 6c             ldi NEW_LINE.0  ;print newline
   1530   a6                plo R6
   1531   f8 17             ldi NEW_LINE.1
   1533   b6                phi R6
                        	
   1534   f8 52             ldi PRINT.0     ;prepare to call PRINT
   1536   ad                plo CALL_REG
   1537   f8 01             ldi PRINT.1
   1539   bd                phi CALL_REG
                            
   153a   f8 00             ldi FCALL.0
   153c   ae                plo FCALL_REG
   153d   de                sep FCALL_REG
                            
   153e   8f                glo STACK_REG
   153f   fc 04             adi 4
   1541   af                plo STACK_REG
   1542   9f                ghi STACK_REG
   1543   7c 00             adci 0
   1545   bf                phi STACK_REG
                            
   1546   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-STATEMENT------------------------------------
                        ;-R4-input string------------------------------
   1547                 STATEMENT
   1547   ef                sex STACK_REG
                            
   1548   f8 00             ldi 0
   154a   73                stxd
   154b   73                stxd
   154c   73                stxd
   154d   73                stxd                    ;+34 var result
                            
   154e   8f                glo STACK_REG
   154f   ff 21             smi 33
   1551   af                plo STACK_REG
   1552   9f                ghi STACK_REG
   1553   7f 00             smbi 0
   1555   bf                phi STACK_REG           ;+1 statement buffer
                        
   1556                 STATEMENT_SKIPSPACES
   1556   44                lda R4
   1557   fb 20             xri 32
   1559   32 56             bz STATEMENT_SKIPSPACES
                            
   155b   24                dec R4
                            
   155c   8f                glo STACK_REG
   155d   a5                plo R5
   155e   9f                ghi STACK_REG
   155f   b5                phi R5
   1560   15                inc R5
                            
   1561   f8 1f             ldi 31
   1563   a6                plo R6
                            
   1564                 STATEMENT_COPYLOOP
   1564   04                ldn R4                  
   1565   ff 30             smi 48
   1567   cb 15 9c          lbnf STATEMENT_SEARCH   ;if *R4 < '0'
   156a   04                ldn R4
   156b   ff 3a             smi 58
   156d   cb 15 91          lbnf STATEMENT_STRCHAR    ;if *R4 <= '9'
   1570   04                ldn R4
   1571   ff 41             smi 65
   1573   cb 15 9c          lbnf STATEMENT_SEARCH   ;if *R4 < 'A'
   1576   04                ldn R4
   1577   ff 5b             smi 91
   1579   cb 15 91          lbnf STATEMENT_STRCHAR    ;if *R4 <= 'Z'
   157c   04                ldn R4
   157d   fb 5f             xri 95
   157f   c2 15 91          lbz STATEMENT_STRCHAR     ;if *R4 == '_'
   1582   04                ldn R4
   1583   ff 61             smi 97
   1585   cb 15 9c          lbnf STATEMENT_SEARCH   ;if *R4 < 'a'
   1588   04                ldn R4
   1589   ff 7b             smi 123
   158b   cb 15 91          lbnf STATEMENT_STRCHAR    ;if *R4 <= 'z'
                            
   158e   c0 15 9c          lbr STATEMENT_SEARCH   ;
                            
   1591                 STATEMENT_STRCHAR
   1591   44                lda R4
   1592   55                str R5
   1593   86                glo R6
   1594   c2 15 64          lbz STATEMENT_COPYLOOP
   1597   15                inc R5
   1598   26                dec R6
                        
   1599   c0 15 64          lbr STATEMENT_COPYLOOP
                            
   159c                 STATEMENT_SEARCH
   159c   f8 00             ldi 0
   159e   55                str R5
                            
   159f   f8 bf             ldi COMMAND_FUNC_LIST.0
   15a1   a5                plo R5
   15a2   f8 17             ldi COMMAND_FUNC_LIST.1
   15a4   b5                phi R5
                            
   15a5   f8 6f             ldi COMMAND_LIST.0
   15a7   a9                plo R9
   15a8   f8 17             ldi COMMAND_LIST.1
   15aa   b9                phi R9
                            
   15ab                 STATEMENT_SEARCHLOOP
   15ab   8f                glo STACK_REG
   15ac   a8                plo R8
   15ad   9f                ghi STACK_REG
   15ae   b8                phi R8
   15af   18                inc R8
                            
   15b0   09                ldn R9
   15b1   c2 15 cb          lbz STATEMENT_SEARCHVAR
                            
   15b4   f8 c0             ldi STR_COMPARATOR.0
   15b6   ad                plo CALL_REG
   15b7   f8 01             ldi STR_COMPARATOR.1
   15b9   bd                phi CALL_REG
                            
   15ba   f8 00             ldi FCALL.0
   15bc   ae                plo FCALL_REG
   15bd   de                sep FCALL_REG
                            
   15be   8a                glo R10
   15bf   ca 16 2d          lbnz STATEMENT_EXEC
                            
   15c2                 STATEMENT_SKIPCHARS
   15c2   49                lda R9
   15c3   ca 15 c2          lbnz STATEMENT_SKIPCHARS
                            
   15c6   15                inc R5
   15c7   15                inc R5
   15c8   c0 15 ab          lbr STATEMENT_SEARCHLOOP
                            
   15cb                 STATEMENT_SEARCHVAR
   15cb   44                lda R4
   15cc   fb 20             xri 32
   15ce   32 cb             bz STATEMENT_SEARCHVAR
                            
   15d0   24                dec R4
                            
   15d1   44                lda R4
   15d2   fb 3d             xri 61
   15d4   ca 16 35          lbnz STATEMENT_END
                            
   15d7   f8 04             ldi VARLIST_FIRSTNODE.0         ;load the first node address
   15d9   a5                plo R5
   15da   f8 21             ldi VARLIST_FIRSTNODE.1
   15dc   b5                phi R5
                            
   15dd                 STATEMENT_SEARCHVARLOOP
   15dd   45                lda R5                              ;test if the address in R5 is zero or not.
   15de   3a e4             bnz STATEMENT_SEARCHVARLOOP_CONTINUE
   15e0   05                ldn R5
   15e1   c2 16 2a          lbz STATEMENT_VAR_NOTFOUND
                            
   15e4                 STATEMENT_SEARCHVARLOOP_CONTINUE
   15e4   25                dec R5
                            
   15e5   8f                glo STACK_REG                       ;set R6 pointer to string address
   15e6   a9                plo R9
   15e7   9f                ghi STACK_REG
   15e8   b9                phi R9
   15e9   19                inc R9
                            
   15ea   45                lda R5                              ;set R6 pointer to node address
   15eb   a6                plo R6
   15ec   45                lda R5
   15ed   b6                phi R6
                            
   15ee   16                inc R6                              ;skip next node
   15ef   16                inc R6
                            
   15f0   46                lda R6                              ;load variableNode->name address to R8
   15f1   a8                plo R8                              ;for comparing the strings
   15f2   46                lda R6
   15f3   b8                phi R8
                            
   15f4   f8 c0             ldi STR_COMPARATOR.0                ;call STR_COMPARATOR
   15f6   ad                plo CALL_REG
   15f7   f8 01             ldi STR_COMPARATOR.1
   15f9   bd                phi CALL_REG
                            
   15fa   f8 00             ldi FCALL.0
   15fc   ae                plo FCALL_REG
   15fd   de                sep FCALL_REG
                            
   15fe   8a                glo R10                             ;if R10 == 1 then READ_VAR_FOUND
   15ff   ca 16 0d          lbnz STATEMENT_VAR_FOUND
                        
   1602                 STATEMENT_NEXTNODE
   1602   26                dec R6                              ;set back R6 to the base of the node
   1603   26                dec R6
   1604   26                dec R6
   1605   26                dec R6
                            
   1606   86                glo R6                              ;load next node address to R5
   1607   a5                plo R5
   1608   96                ghi R6
   1609   b5                phi R5
                            
   160a   c0 15 dd          lbr STATEMENT_SEARCHVARLOOP
                            
   160d                 STATEMENT_VAR_FOUND
   160d   8f                glo STACK_REG
   160e   fc 22             adi 34
   1610   a5                plo R5
   1611   9f                ghi STACK_REG
   1612   7c 00             adci 0
   1614   b5                phi R5
                            
   1615   f8 65             ldi EXPRESSION.0
   1617   ad                plo CALL_REG
   1618   f8 09             ldi EXPRESSION.1
   161a   bd                phi CALL_REG
                            
   161b   f8 00             ldi FCALL.0
   161d   ae                plo FCALL_REG
   161e   de                sep FCALL_REG
                            
   161f   45                lda R5
   1620   56                str R6
   1621   16                inc R6
                            
   1622   45                lda R5
   1623   56                str R6
   1624   16                inc R6
                            
   1625   45                lda R5
   1626   56                str R6
   1627   16                inc R6
                            
   1628   45                lda R5
   1629   56                str R6
                            
   162a                 STATEMENT_VAR_NOTFOUND
   162a   c0 16 35          lbr STATEMENT_END
                        
   162d                 STATEMENT_EXEC
   162d   45                lda R5
   162e   ad                plo CALL_REG
   162f   45                lda R5
   1630   bd                phi CALL_REG
                            
   1631   f8 00             ldi FCALL.0
   1633   ae                plo FCALL_REG
   1634   de                sep FCALL_REG
                        
   1635                 STATEMENT_END
   1635   8f                glo STACK_REG
   1636   fc 25             adi 37
   1638   af                plo STACK_REG
   1639   9f                ghi STACK_REG
   163a   7c 00             adci 0
   163c   bf                phi STACK_REG
                            
   163d   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-DMA-SET--------------------------------------
   163e                 DMA_SET
   163e   ef                sex STACK_REG
                            
   163f   f8 00             ldi 0
   1641   73                stxd
   1642   73                stxd
   1643   73                stxd
   1644   73                stxd
                            
   1645   8f                glo STACK_REG
   1646   a5                plo R5
   1647   9f                ghi STACK_REG
   1648   b5                phi R5
   1649   15                inc R5
                            
   164a   f8 65             ldi EXPRESSION.0
   164c   ad                plo CALL_REG
   164d   f8 09             ldi EXPRESSION.1
   164f   bd                phi CALL_REG
                            
   1650   f8 00             ldi FCALL.0
   1652   ae                plo FCALL_REG
   1653   de                sep FCALL_REG
                            
   1654   45                lda R5
   1655   a0                plo DMA_REG
   1656   45                lda R5
   1657   b0                phi DMA_REG
                            
   1658                 DMA_SET_END
   1658   1f                inc STACK_REG
   1659   1f                inc STACK_REG
   165a   1f                inc STACK_REG
   165b   1f                inc STACK_REG
                            
   165c   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-MEM-SET--------------------------------------
   165d                 MEM_SET
   165d   ef                sex STACK_REG
                            
   165e   f8 00             ldi 0
   1660   73                stxd
   1661   73                stxd
   1662   73                stxd
   1663   73                stxd
                            
   1664   8f                glo STACK_REG
   1665   a5                plo R5
   1666   9f                ghi STACK_REG
   1667   b5                phi R5
   1668   15                inc R5
                            
   1669   f8 65             ldi EXPRESSION.0
   166b   ad                plo CALL_REG
   166c   f8 09             ldi EXPRESSION.1
   166e   bd                phi CALL_REG
                            
   166f   f8 00             ldi FCALL.0
   1671   ae                plo FCALL_REG
   1672   de                sep FCALL_REG
                            
   1673   f8 00             ldi MEMWRITE_ADDRESS.0
   1675   a6                plo R6
   1676   f8 21             ldi MEMWRITE_ADDRESS.1
   1678   b6                phi R6
                            
   1679   45                lda R5
   167a   56                str R6
   167b   16                inc R6
                            
   167c   45                lda R5
   167d   56                str R6
                            
   167e                 MEM_SET_END
   167e   1f                inc STACK_REG
   167f   1f                inc STACK_REG
   1680   1f                inc STACK_REG
   1681   1f                inc STACK_REG
                            
   1682   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-MEM-WRITE------------------------------------
   1683                 MEM_WRITE
   1683   ef                sex STACK_REG
                            
   1684   f8 00             ldi 0
   1686   73                stxd
   1687   73                stxd
   1688   73                stxd
   1689   73                stxd
                            
   168a                 MEM_WRITE_LOOP
   168a   8f                glo STACK_REG
   168b   a5                plo R5
   168c   9f                ghi STACK_REG
   168d   b5                phi R5
   168e   15                inc R5
                            
   168f   f8 65             ldi EXPRESSION.0
   1691   ad                plo CALL_REG
   1692   f8 09             ldi EXPRESSION.1
   1694   bd                phi CALL_REG
                            
   1695   f8 00             ldi FCALL.0
   1697   ae                plo FCALL_REG
   1698   de                sep FCALL_REG
                            
   1699   f8 00             ldi MEMWRITE_ADDRESS.0
   169b   a6                plo R6
   169c   f8 21             ldi MEMWRITE_ADDRESS.1
   169e   b6                phi R6
                            
   169f   46                lda R6
   16a0   a7                plo R7
   16a1   46                lda R6
   16a2   b7                phi R7
                            
   16a3   45                lda R5
   16a4   57                str R7
   16a5   17                inc R7
                            
   16a6   26                dec R6
   16a7   26                dec R6
                            
   16a8   87                glo R7
   16a9   56                str R6
   16aa   16                inc R6
                            
   16ab   97                ghi R7
   16ac   56                str R6
                            
   16ad   44                lda R4
   16ae   fb 2c             xri 44
   16b0   c2 16 8a          lbz MEM_WRITE_LOOP
                        
   16b3                 MEM_WRITE_END
   16b3   1f                inc STACK_REG
   16b4   1f                inc STACK_REG
   16b5   1f                inc STACK_REG
   16b6   1f                inc STACK_REG
                            
   16b7   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-EXEC-----------------------------------------
   16b8                 EXEC
   16b8   ef                sex STACK_REG
                            
   16b9   f8 00             ldi 0
   16bb   73                stxd
   16bc   73                stxd
   16bd   73                stxd
   16be   73                stxd
                            
   16bf   8f                glo STACK_REG
   16c0   a5                plo R5
   16c1   9f                ghi STACK_REG
   16c2   b5                phi R5
   16c3   15                inc R5
                            
   16c4   f8 65             ldi EXPRESSION.0
   16c6   ad                plo CALL_REG
   16c7   f8 09             ldi EXPRESSION.1
   16c9   bd                phi CALL_REG
                            
   16ca   f8 00             ldi FCALL.0
   16cc   ae                plo FCALL_REG
   16cd   de                sep FCALL_REG
                            
   16ce   45                lda R5
   16cf   ad                plo CALL_REG
   16d0   45                lda R5
   16d1   bd                phi CALL_REG
                            
   16d2   f8 00             ldi FCALL.0
   16d4   ae                plo FCALL_REG
   16d5   de                sep FCALL_REG
                        
   16d6                 EXEC_END
   16d6   1f                inc STACK_REG
   16d7   1f                inc STACK_REG
   16d8   1f                inc STACK_REG
   16d9   1f                inc STACK_REG
                            
   16da   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-MAIN-----------------------------------------
   16db                 MAIN_PROGRAM
   16db   f8 10             ldi VAR_LIST_INIT.0       ;variable list init
   16dd   ad                plo CALL_REG
   16de   f8 0e             ldi VAR_LIST_INIT.1
   16e0   bd                phi CALL_REG
                            
   16e1   f8 00             ldi FCALL.0
   16e3   ae                plo FCALL_REG
   16e4   de                sep FCALL_REG
                            
   16e5   f8 60             ldi DYN_MEMORY_INIT.0     ;heap init
   16e7   ad                plo CALL_REG
   16e8   f8 0a             ldi DYN_MEMORY_INIT.1
   16ea   bd                phi CALL_REG
                            
   16eb   f8 00             ldi FCALL.0
   16ed   ae                plo FCALL_REG
   16ee   de                sep FCALL_REG   ;call heap init
                            
   16ef   f8 32             ldi BOOT_MSG.0  ;set the address of the boot msg in R6
   16f1   a6                plo R6
   16f2   f8 17             ldi BOOT_MSG.1
   16f4   b6                phi R6
                        	
   16f5   f8 52             ldi PRINT.0     ;prepare to call PRINT
   16f7   ad                plo CALL_REG
   16f8   f8 01             ldi PRINT.1
   16fa   bd                phi CALL_REG
                            
   16fb   f8 00             ldi FCALL.0
   16fd   ae                plo FCALL_REG
   16fe   de                sep FCALL_REG   ;call PRINT
                        
   16ff                 ASK_INPUT
   16ff   f8 00             ldi INPUT_BUFF.0    ;load the address of the buffer to R7
   1701   a7                plo R7
   1702   f8 20             ldi INPUT_BUFF.1
   1704   b7                phi R7
                            
   1705   f8 68             ldi READLINE.0      ;prepare to call READLINE
   1707   ad                plo CALL_REG
   1708   f8 01             ldi READLINE.1
   170a   bd                phi CALL_REG
                            
   170b   f8 00             ldi FCALL.0
   170d   ae                plo FCALL_REG
   170e   de                sep FCALL_REG       ;call READLINE
                            
                            ;Program goes here
   170f   f8 00             ldi INPUT_BUFF.0
   1711   a4                plo R4
   1712   f8 20             ldi INPUT_BUFF.1
   1714   b4                phi R4
                            
   1715   f8 47             ldi STATEMENT.0      ;prepare to call COMMAND_CHECK
   1717   ad                plo CALL_REG
   1718   f8 15             ldi STATEMENT.1
   171a   bd                phi CALL_REG
                            
   171b   f8 00             ldi FCALL.0
   171d   ae                plo FCALL_REG
   171e   de                sep FCALL_REG
                            ;Program ends here
                            
   171f   f8 68             ldi ASK_IN.0        ;load the ASK_IN string's address to R6
   1721   a6                plo R6
   1722   f8 17             ldi ASK_IN.1
   1724   b6                phi R6
                            
   1725   f8 52             ldi PRINT.0         ;prepare to call PRINT
   1727   ad                plo CALL_REG
   1728   f8 01             ldi PRINT.1
   172a   bd                phi CALL_REG
                            
   172b   f8 00             ldi FCALL.0
   172d   ae                plo FCALL_REG
   172e   de                sep FCALL_REG       ;call PRINT
                        	
   172f   c0 16 ff          lbr ASK_INPUT
                        ;----------------------------------------------
                        
                        ;-CONSTANT DATA--------------------------------
   1732                 BOOT_MSG
   1732   0d 0a 2d 2d       db "\r\n---CPU RESET---\r\n"
   1736   2d 43 50 55   
   173a   20 52 45 53   
   173e   45 54 2d 2d   
   1742   2d 0d 0a      
   1745   5a 4c 45 44       db "ZLED - CDP1802 Terminal.\r\n\r\nREADY\r\n"
   1749   20 2d 20 43   
   174d   44 50 31 38   
   1751   30 32 20 54   
   1755   65 72 6d 69   
   1759   6e 61 6c 2e   
   175d   0d 0a 0d 0a   
   1761   52 45 41 44   
   1765   59 0d 0a      
   1768                 ASK_IN
   1768   0d 0a 3e 00       db "\r\n>",0
   176c                 NEW_LINE
   176c   0d 0a 00          db "\r\n",0
   176f                 COMMAND_LIST
   176f   70 72 69 6e       db "print",0,"let",0,"mem_view",0,"mem_debug",0,"mem_alloc",0,"mem_free",0
   1773   74 00 6c 65   
   1777   74 00 6d 65   
   177b   6d 5f 76 69   
   177f   65 77 00 6d   
   1783   65 6d 5f 64   
   1787   65 62 75 67   
   178b   00 6d 65 6d   
   178f   5f 61 6c 6c   
   1793   6f 63 00 6d   
   1797   65 6d 5f 66   
   179b   72 65 65 00   
   179f   6d 65 6d 5f       db "mem_set",0,"mem_write",0,"dma_set",0,"exec",0,0
   17a3   73 65 74 00   
   17a7   6d 65 6d 5f   
   17ab   77 72 69 74   
   17af   65 00 64 6d   
   17b3   61 5f 73 65   
   17b7   74 00 65 78   
   17bb   65 63 00 00   
   17bf                 COMMAND_FUNC_LIST
   17bf   06 15             db FUNC_TEST.0,FUNC_TEST.1
   17c1   a2 0e             db LET_STATEMENT.0,LET_STATEMENT.1
   17c3   8b 14             db HEXVIEW_CALLER.0,HEXVIEW_CALLER.1
   17c5   b8 0a             db DYN_MEMORY_DEBUG.0,DYN_MEMORY_DEBUG.1
   17c7   cd 12             db DYN_MEMORY_ALLOC_CALLER.0,DYN_MEMORY_ALLOC_CALLER.1
   17c9   e8 13             db DYN_MEMORY_FREE_CALLER.0,DYN_MEMORY_FREE_CALLER.1
   17cb   5d 16             db MEM_SET.0,MEM_SET.1
   17cd   83 16             db MEM_WRITE.0,MEM_WRITE.1
   17cf   3e 16             db DMA_SET.0,DMA_SET.1
   17d1   b8 16             db EXEC.0,EXEC.1
   17d3                 UNKNOWN_COMMAND
   17d3   55 6e 6b 6e       db "Unknown command.\r\n",0
   17d7   6f 77 6e 20   
   17db   63 6f 6d 6d   
   17df   61 6e 64 2e   
   17e3   0d 0a 00      
   17e6                 TEST_RESP
   17e6   45 76 65 72       db "Everything is ok!",0
   17ea   79 74 68 69   
   17ee   6e 67 20 69   
   17f2   73 20 6f 6b   
   17f6   21 00         
                        
   17f8                     end
1768  ASK_IN        16ff  ASK_INPUT     0164  BACKSPACE_ACTION    1732  BOOT_MSG  
000d  CALL_REG      0283  CARRY_SHIFTING    17bf  COMMAND_FUNC_LIST    176f  COMMAND_LIST
028d  DIVISION_LOOP    3000  DMA_ADDRESS    0013  DMA_INIT      0000  DMA_REG   
163e  DMA_SET       1658  DMA_SET_END    0bf7  DYN_MEMORY_ALLOC    12cd  DYN_MEMORY_ALLOC_CALLER
137f  DYN_MEMORY_ALLOC_CALLER_END    1302  DYN_MEMORY_ALLOC_CALLER_FAIL    1285  DYN_MEMORY_ALLOC_CALLER_STR1    12bc  DYN_MEMORY_ALLOC_CALLER_STR2
1315  DYN_MEMORY_ALLOC_CALLER_SUCCESS    0d42  DYN_MEMORY_ALLOC_END    0c33  DYN_MEMORY_ALLOC_MAINLOOP    0d0d  DYN_MEMORY_ALLOC_NEXTADDRESS
0d27  DYN_MEMORY_ALLOC_NEXTPASS    0c82  DYN_MEMORY_ALLOC_SIZEBIGGER    0c6f  DYN_MEMORY_ALLOC_SIZEEQ    0ab8  DYN_MEMORY_DEBUG
0bee  DYN_MEMORY_DEBUG_END    0bb3  DYN_MEMORY_DEBUG_FREE    0ad2  DYN_MEMORY_DEBUG_MAINLOOP    0bb9  DYN_MEMORY_DEBUG_NEXTADDRESS
0b15  DYN_MEMORY_DEBUG_PRINT    0a83  DYN_MEMORY_DEBUG_STR    0aaa  DYN_MEMORY_DEBUG_STR_FREE    0ab1  DYN_MEMORY_DEBUG_STR_USED
0d5c  DYN_MEMORY_FREE    13e8  DYN_MEMORY_FREE_CALLER    1482  DYN_MEMORY_FREE_CALLER_END    1472  DYN_MEMORY_FREE_CALLER_OUTOFRANGE
1388  DYN_MEMORY_FREE_CALLER_STR1    13bd  DYN_MEMORY_FREE_CALLER_STR2    0df3  DYN_MEMORY_FREE_END    0d94  DYN_MEMORY_FREE_MERGE
0db4  DYN_MEMORY_FREE_MERGELOOP    0d85  DYN_MEMORY_FREE_NEXTCHECK    0dec  DYN_MEMORY_FREE_SETPREVIOUS    0a60  DYN_MEMORY_INIT
017a  END_LINE      16b8  EXEC          16d6  EXEC_END      0965  EXPRESSION
099a  EXPRESSION_ADD    09d4  EXPRESSION_ADD_LOOP    0a4f  EXPRESSION_END    0986  EXPRESSION_MAIN
0a4b  EXPRESSION_NEXT_CYCLE    0976  EXPRESSION_SKIPSPACES    09f3  EXPRESSION_SUB    0a2d  EXPRESSION_SUB_LOOP
079a  FACTOR        083f  FACTOR_END    0865  FACTOR_FINAL    085a  FACTOR_INVERTING
07a6  FACTOR_MAIN    0830  FACTOR_NEGATE    083b  FACTOR_NEXT_CYCLE    0816  FACTOR_PARENTHESIS
0821  FACTOR_PARENTHESIS_SKIPSPACES    07fb  FACTOR_READ_DEC    0808  FACTOR_READ_HEX    07ee  FACTOR_READ_NUMBER
07e1  FACTOR_VAR    0100  FCALL         000e  FCALL_REG     031f  FINAL_CHECK
0343  FINAL_CHECK2    010a  FRETURN       1506  FUNC_TEST     0e22  GET_STRING
0e5c  GET_STRING_ADDLEN    0e68  GET_STRING_ALLOCATE_MEM    0e7f  GET_STRING_COPY    0e8c  GET_STRING_COPY_LOOP
0e96  GET_STRING_END    0e35  GET_STRING_LEN    0e61  GET_STRING_LEN_END    fc00  HEAP_END  
2108  HEAP_LASTADDRESS    2110  HEAP_START    103f  HEXVIEWER     127c  HEXVIEWER_END
10b6  HEXVIEWER_MAINLOOP    1132  HEXVIEWER_NEXT_HEX    11f1  HEXVIEWER_NEXT_STR    10de  HEXVIEWER_PRINT_HEX_LOOP
1122  HEXVIEWER_PRINT_HEX_SPACES    11d5  HEXVIEWER_PRINT_STR_DOT    1192  HEXVIEWER_PRINT_STR_LOOP    11e4  HEXVIEWER_PRINT_STR_SPACE
148b  HEXVIEW_CALLER    14f4  HEXVIEW_CALLER_END    14d5  HEXVIEW_CALLER_EXEC    14c6  HEXVIEW_CALLER_NEXTARG
0f96  HEX_BASE_SRT    0412  HEX_CHARS     0fa9  HEX_HEADER_STR    103a  HEX_LINECNT_SEPARATOR
2000  INPUT_BUFF    01d4  INTEGER_DIV    0224  INTEGER_DIV_INVERT_LOOP1    0234  INTEGER_DIV_NEXT_CHECK
0372  INTEGER_MUL    03d3  INTEGER_MUL_ADD    0409  INTEGER_MUL_END    039f  INTEGER_MUL_LOOP
03dc  INTEGER_MUL_SHIFT    03fd  INTEGER_MUL_SHMULTIPLICAND    03e9  INTEGER_MUL_SHMULTIPLIER    0262  INTEGER_SHIFT_DR
0001  INTP_REG      0002  INTX_REG      0253  INVERT_LOOP2    0337  INVERT_LOOP3
035e  INVERT_LOOP4    0ea2  LET_STATEMENT    0f31  LET_STATEMENT_ADDNODE    0f22  LET_STATEMENT_ADDVAR
0ecc  LET_STATEMENT_CONTINUE1    0ef2  LET_STATEMENT_CONTINUE2    0f80  LET_STATEMENT_END    0f17  LET_STATEMENT_EXPRESSION
0f52  LET_STATEMENT_FIRSTNODE    0f6e  LET_STATEMENT_FREENODE    0f07  LET_STATEMENT_MAINLOOP    0f14  LET_STATEMENT_NEXTCHARACTER
0edb  LET_STATEMENT_SKIPSPACES    16db  MAIN_PROGRAM    2100  MEMWRITE_ADDRESS    165d  MEM_SET   
167e  MEM_SET_END    1683  MEM_WRITE     16b3  MEM_WRITE_END    168a  MEM_WRITE_LOOP
176c  NEW_LINE      0307  NEXT_BIT      0003  PC_REG        0152  PRINT     
045e  PRINT_CHECK_DIGIT    04ae  PRINT_DEC     0555  PRINT_DEC_END    055e  PRINT_DEC_FINAL
0502  PRINT_DEC_INVER_LOOP    050d  PRINT_DEC_MAIN_LOOP    0461  PRINT_DIGIT_LOOP    0422  PRINT_HEX 
048f  PRINT_HEX_END    0473  PRINT_HEX_SHIFT_LOOP1    0449  PRINT_UNTIL_R    000a  R10       
000b  R11           000c  R12           0004  R4            0005  R5        
0006  R6            0007  R7            0008  R8            0009  R9        
0168  READLINE      018e  READLINE_BACKSPACE    016b  READLINE_LOOP    058b  READ_DEC  
061c  READ_DEC_END    05a5  READ_DEC_MAIN_LOOP    062e  READ_HEX      066a  READ_HEX_CONTINUE
069e  READ_HEX_END    068d  READ_HEX_HEXDIGIT    0696  READ_HEX_HEXDIGITLOWER    064b  READ_HEX_MAINLOOP
0699  READ_HEX_NEXTCHAR    066d  READ_HEX_SHIFTLOOP    06b0  READ_VAR      0711  READ_VAR_CONTINUE
06d9  READ_VAR_COPYLOOP    0778  READ_VAR_END    074a  READ_VAR_FOUND    073f  READ_VAR_NEXTNODE
0763  READ_VAR_NOTFOUND    071a  READ_VAR_SEARCHLOOP    0721  READ_VAR_SEARCHLOOP_CONTINUE    0706  READ_VAR_STRCHAR
000e  RETURN        013f  SERIAL_NULL_BIT    012d  SERIAL_READ_START    0139  SERIAL_SAMPLE_BIT
0143  SERIAL_SAVE_BIT    011b  SERIAL_SEND_BIT    0113  SERIAL_SEND_START    0131  SERIAL_WAIT_START
02a5  SHIFTING_Q    0276  SHIFT_DR      0314  SHIFT_SUBTRACTOR    ffff  STACK_ADDRESS
000f  STACK_REG     0000  START         1547  STATEMENT     1564  STATEMENT_COPYLOOP
1635  STATEMENT_END    162d  STATEMENT_EXEC    1602  STATEMENT_NEXTNODE    159c  STATEMENT_SEARCH
15ab  STATEMENT_SEARCHLOOP    15cb  STATEMENT_SEARCHVAR    15dd  STATEMENT_SEARCHVARLOOP    15e4  STATEMENT_SEARCHVARLOOP_CONTINUE
15c2  STATEMENT_SKIPCHARS    1556  STATEMENT_SKIPSPACES    1591  STATEMENT_STRCHAR    160d  STATEMENT_VAR_FOUND
162a  STATEMENT_VAR_NOTFOUND    01aa  STORE_CHAR    01c3  STR_CHARCHECK    01c0  STR_COMPARATOR
01c9  STR_EQUAL     01d0  STR_INC       02fd  SUBTRACT_FOR_REAL    086e  TERM      
0895  TERM_DIVIDE    0953  TERM_END      0881  TERM_MAIN     08fa  TERM_MULTIPLY
094f  TERM_NEXT_CYCLE    17e6  TEST_RESP     14fd  TEST_STR1     0369  THE_END   
02c7  TRY_SUBTRACTING    17d3  UNKNOWN_COMMAND    2102  VARLIST_COUNT    2104  VARLIST_FIRSTNODE
2106  VARLIST_LASTNODE    0e10  VAR_LIST_INIT    0e19  VAR_LIST_INIT_LOOP    
