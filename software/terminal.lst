                        
   0000                 DMA_REG EQU 0
   0001                 INTP_REG EQU 1
   0002                 INTX_REG EQU 2
   0003                 PC_REG EQU 3
   0004                 R4 EQU 4
   0005                 R5 EQU 5
   0006                 R6 EQU 6
   0007                 R7 EQU 7
   0008                 R8 EQU 8
   0009                 R9 EQU 9
   000a                 R10 EQU 10
   000b                 R11 EQU 11
   000c                 R12 EQU 12
   000d                 CALL_REG EQU 13
   000e                 FCALL_REG EQU 14
   000e                 RETURN EQU 14
   000f                 STACK_REG EQU 15
                        
   ffff                 STACK_ADDRESS EQU 0FFFFh
   3000                 DMA_ADDRESS EQU 03000h
                        
   2000                 INPUT_BUFF EQU 02000h
                        
   0000                     org 00h
                        
   0000                 START
   0000   71                dis
   0001   00                idl
                            
   0002   7b                seq     ;set Q output to high
                            
   0003   f8 ff             ldi STACK_ADDRESS.0 ;setup the STACK pointer
   0005   af                plo STACK_REG
   0006   f8 ff             ldi STACK_ADDRESS.1
   0008   bf                phi STACK_REG
                            
   0009   f8 01             ldi FCALL.1         ;setup FCALL
   000b   be                phi FCALL_REG
                            
   000c   f8 13             ldi DMA_INIT.0      ;switch PC to R3 and init DMA
   000e   a3                plo PC_REG
   000f   f8 00             ldi DMA_INIT.1
   0011   b3                phi PC_REG
                            
   0012   d3                sep PC_REG
                            
   0013                 DMA_INIT
   0013   f8 00             ldi DMA_ADDRESS.0   ;setup DMA address
   0015   a0                plo DMA_REG
   0016   f8 30             ldi DMA_ADDRESS.1
   0018   b0                phi DMA_REG
                            
   0019   c0 0c 89          lbr MAIN_PROGRAM
                            
                        ;-FUNCTION CALL HELPER-------------------------
                        ;-WHERE TO JUMP-(CALL_REG)---------------------
   0100                     org 0100h
                            
   0100                 FCALL
   0100   ef                sex STACK_REG   ;set STACK as X register
   0101   93                ghi PC_REG      ;saving the PC value to stack
   0102   73                stxd
   0103   83                glo PC_REG
   0104   73                stxd
                            
   0105   8d                glo CALL_REG    ;put the new address in the PC
   0106   a3                plo PC_REG
   0107   9d                ghi CALL_REG
   0108   b3                phi PC_REG
   0109   d3                sep PC_REG      ;jumping to PC
                            
   010a                 FRETURN
   010a   1f                inc STACK_REG   ;increment the STACK register
   010b   ef                sex STACK_REG   ;set STACK as X register
   010c   72                ldxa            ;restoring PC from STACK
   010d   a3                plo PC_REG
   010e   f0                ldx
   010f   b3                phi PC_REG
   0110   d3                sep PC_REG      ;jumping to PC
   0111   30 0a             br FRETURN
                        ;----------------------------------------------
                        
                        ;-SERIAL SEND BYTE-----------------------------
                        ;-DATA-R4.1------------------------------------
   0113                 SERIAL_SEND_START
   0113   94                ghi R4      ;R4 high is the data, load it into the D reg
   0114   fb ff             xri 0FFh    ;invert it
   0116   b4                phi R4      ;put it back
   0117   f8 85             ldi 085h    ;load 0x85 to the D reg
   0119   fe                shl         ;shift it left so we get 0x0A and set the flag bit
   011a   a4                plo R4      ;put the 0x10 to R4 low, this will be our bit counter
                        
   011b                 SERIAL_SEND_BIT
   011b   c7                lsnf        ;24 - long skip if the flag is not set
   011c   7a                req         ;16 - reset Q if the flag is set
   011d   c8                lskp        ;24
   011e   7b                seq         ;16 - set Q if the flag is not set
   011f   c4                nop         ;24
                            
   0120   24                dec R4      ;16 - decrement R4, this will only affect the R4 lower 8bit
   0121   84                glo R4      ;16
   0122   c6                lsnz        ;24 - if R4 lower is not 0 then long skip
   0123   de                sep RETURN  ;--
   0124   c4                nop         ;--
   0125   94                ghi R4      ;16 - get R4 high
   0126   f6                shr         ;16 - shift it right to get LSB in the flag
   0127   b4                phi R4      ;16 - put it back
   0128   c4                nop         ;24
   0129   c4                nop         ;24
   012a   c4                nop         ;24
   012b   30 1b             br SERIAL_SEND_BIT ;16
                        ;----------------------------------------------
                        
                        ;-SERIAL READ BYTE-----------------------------
                        ;-RETURN R5.1----------------------------------
   012d                 SERIAL_READ_START
   012d   f8 00             ldi 00h     ;set input data register to 0
   012f   a5                plo R5
   0130   b5                phi R5
                            
   0131                 SERIAL_WAIT_START
   0131   3c 31             bn1 SERIAL_WAIT_START ;16 - loop until EF1 goes low
   0133   c4                nop         ;24
   0134   c4                nop         ;24
   0135   c4                nop         ;24
   0136   c4                nop         ;24
   0137   f9 00             ori 00h     ;16 - do nothing for 16 clock cycles
                        
   0139                 SERIAL_SAMPLE_BIT
   0139   34 3f             b1 SERIAL_NULL_BIT  ;16 - checking the EF1
   013b   f9 80             ori 080h            ;16 - if EF1 is high then set MSB to 1 in D register
   013d   30 43             br SERIAL_SAVE_BIT  ;16
                        
   013f                 SERIAL_NULL_BIT
   013f   f9 00             ori 00h         ;16 - of EF1 is low we do nothing
   0141   f9 00             ori 00h         ;16
                        
   0143                 SERIAL_SAVE_BIT
   0143   b5                phi R5          ;16 - put D in R5 high
   0144   15                inc R5          ;16 - increment R5, this will only affect R5 low 8bit
   0145   85                glo R5          ;16 - get R5 low to D register
   0146   fb 09             xri 09h         ;16 - D = D ^ 0x09
   0148   c6                lsnz            ;24 
   0149   de                sep RETURN      ;--
   014a   c4                nop             ;--
   014b   95                ghi R5          ;16 - get R5 high
   014c   f6                shr             ;16 - shift it righ
   014d   c4                nop             ;24
   014e   c4                nop             ;24
   014f   c4                nop             ;24
   0150   30 39             br SERIAL_SAMPLE_BIT ;16
                        ;----------------------------------------------
                        
                        ;-PRINT----------------------------------------
                        ;-FIRST CHAR-R6--------------------------------
   0152                 PRINT
   0152   e6                sex R6          ;set X register to R6
   0153   72                ldxa            ;load data to D and increment R6
   0154   c6                lsnz            ;if it is not zero then long skip
   0155   de                sep RETURN
   0156   c4                nop
                            
   0157   b4                phi R4          ;put D register to R4 to send it
                            
   0158   f8 13             ldi SERIAL_SEND_START.0     ;prepare to call SERIAL_SEND
   015a   ad                plo CALL_REG
   015b   f8 01             ldi SERIAL_SEND_START.1
   015d   bd                phi CALL_REG
                            
   015e   f8 00             ldi FCALL.0
   0160   ae                plo FCALL_REG
   0161   de                sep FCALL_REG   ;call SERIAL_SEND
   0162   30 52             br PRINT
                        ;----------------------------------------------
                        
   0164                 BACKSPACE_ACTION
   0164   08 20 08 00       db 8, 32, 8, 0
                        ;-READ LINE------------------------------------
                        ;-WHERE TO READ-R7-----------------------------
                        ;-R8.1-Character counter-------------------------
   0168                 READLINE
   0168   f8 00             ldi 0
   016a   a8                plo R8
                            
   016b                 READLINE_LOOP
   016b   f8 2d             ldi SERIAL_READ_START.0     ;prepare calling SERIAL_READ
   016d   ad                plo CALL_REG
   016e   f8 01             ldi SERIAL_READ_START.1
   0170   bd                phi CALL_REG
                            
   0171   f8 00             ldi FCALL.0
   0173   ae                plo FCALL_REG
   0174   de                sep FCALL_REG       ;call SERIAL_READ
                            
   0175   95                ghi R5              ;get the result of SERIAL_READ
   0176   fb 0d             xri 13              ;check if it is 13 (ENTER KEY)
   0178   3a 8e             bnz READLINE_BACKSPACE      ;if not jump to READLINE_BACKSPACE
                            
   017a                 END_LINE
   017a   f8 00             ldi 00h             ;put 0 to the endof the string
   017c   57                str R7
                            
   017d   f8 f3             ldi NEW_LINE.0      ;load the address of CRLF string
   017f   a6                plo R6
   0180   f8 0c             ldi NEW_LINE.1
   0182   b6                phi R6
                            
   0183   f8 52             ldi PRINT.0         ;prepare to call PRINT
   0185   ad                plo CALL_REG
   0186   f8 01             ldi PRINT.1
   0188   bd                phi CALL_REG
                            
   0189   f8 00             ldi FCALL.0
   018b   ae                plo FCALL_REG
   018c   de                sep FCALL_REG       ;call PRINT
                            
   018d   de                sep RETURN          ;RETURN from READLINE
                            
   018e                 READLINE_BACKSPACE
   018e   95                ghi R5              ;get the result of SERIAL_READ
   018f   fb 7f             xri 127             ;check if it is 127 (DEL)
   0191   3a aa             bnz STORE_CHAR      ;if not jump to STORE_CHAR
                            
   0193   88                glo R8
   0194   32 6b             bz READLINE_LOOP
                            
   0196   f8 64             ldi BACKSPACE_ACTION.0      ;load the address of the backspace action
   0198   a6                plo R6
   0199   f8 01             ldi BACKSPACE_ACTION.1
   019b   b6                phi R6
                            
   019c   f8 52             ldi PRINT.0                 ;prepare to call PRINT
   019e   ad                plo CALL_REG
   019f   f8 01             ldi PRINT.1
   01a1   bd                phi CALL_REG
                            
   01a2   f8 00             ldi FCALL.0
   01a4   ae                plo FCALL_REG
   01a5   de                sep FCALL_REG               ;call PRINT
                            
   01a6   27                dec R7
   01a7   28                dec R8
                            
   01a8   30 6b             br READLINE_LOOP
                            
   01aa                 STORE_CHAR
   01aa   88                glo R8
   01ab   fb ff             xri 0FFh
   01ad   32 6b             bz READLINE_LOOP
                            
   01af   95                ghi R5              ;get the result of the SERIAL_READ again
   01b0   57                str R7              ;store it where R7 pointing
   01b1   17                inc R7              ;increment R7
   01b2   18                inc R8
                            
   01b3   b4                phi R4              ;load the result to R4 to Echo it back
                            
   01b4   f8 13             ldi SERIAL_SEND_START.0     ;prepare to call SERIAL_SEND
   01b6   ad                plo CALL_REG
   01b7   f8 01             ldi SERIAL_SEND_START.1
   01b9   bd                phi CALL_REG
                            
   01ba   f8 00             ldi FCALL.0
   01bc   ae                plo FCALL_REG
   01bd   de                sep FCALL_REG       ;call SERIAL_SEND
   01be   30 6b             br READLINE_LOOP
                        ;----------------------------------------------
                        
                        ;-STR COMPARATOR-------------------------------
                        ;-R8 stringA-R9 stringB------------------------
                        ;-RETURN R10.0---------------------------------
   01c0                 STR_COMPARATOR
   01c0   f8 00             ldi 0           ;R10 low is the result, set it to 0
   01c2   aa                plo R10
                        	
   01c3                 STR_CHARCHECK
   01c3   08                ldn R8          ;load value from RAM[R8] to D register
   01c4   e9                sex R9          ;set X pointer to R9
   01c5   f3                xor             ;D = D ^ RAM[R9]
                            
   01c6   32 c9             bz STR_EQUAL    ;if D == 0 jump to STR_EQUAL
   01c8   de                sep RETURN      ;RETURN
                            
   01c9                 STR_EQUAL 
   01c9   08            	ldn R8          ;load value from RAM[R8] to D register again
   01ca   3a d0         	bnz STR_INC     ;if D != 0 jump to STR_INC
   01cc   f8 01         	ldi 1           ;set R10 to 1 and return
   01ce   aa            	plo R10
   01cf   de            	sep RETURN
                        	
   01d0                 STR_INC
   01d0   18            	inc R8          ;increment both address by 1
   01d1   19            	inc R9
   01d2   30 c3         	br STR_CHARCHECK
                        ;----------------------------------------------
                        
                        ;-INTEGER DIV----------------------------------
                        ;-R4 pointing to divident----------------------
                        ;-R5 pointing to divider-----------------------
                        ;-R6 pointing to quotient----------------------
                        ;-R7 pointing to remainder---------------------
                        ;-R8.0 bitcnt, R8.1 flags----------------------
                        ;-R9 general counter---------------------------
   01d4                 INTEGER_DIV
   01d4   ef                sex STACK_REG   ;set STACK_REG as data pointer to store variables in STACK
   01d5   f8 00             ldi 0           ;set bitcnt and flags to 0
   01d7   a8                plo R8
   01d8   b8                phi R8
                            
   01d9   15                inc R5          ;increment R5 to the MSB because we want to store the divider it in little-endian format
   01da   15                inc R5
   01db   15                inc R5
                            
   01dc   05                ldn R5          ;copying starts here
   01dd   73                stxd
   01de   25                dec R5
                            
   01df   05                ldn R5
   01e0   73                stxd
   01e1   25                dec R5
                            
   01e2   05                ldn R5
   01e3   73                stxd
   01e4   25                dec R5
                            
   01e5   05                ldn R5
   01e6   73                stxd            ;+11 divider, +11 shows the start of the data from the STACK pointer
                            
   01e7   f8 00             ldi 0           ;storing 0 for the subtractor
   01e9   73                stxd
   01ea   73                stxd
   01eb   73                stxd
   01ec   73                stxd            ;+7 subtractor
                            
   01ed   96                ghi R6          ;saving the quotient pointer
   01ee   73                stxd
   01ef   86                glo R6
   01f0   73                stxd            ;+5 quotient pointer
                        
   01f1   97                ghi R7          ;saving the remainder
   01f2   73                stxd
   01f3   87                glo R7
   01f4   73                stxd            ;+3 remainder pointer
                            
   01f5   94                ghi R4          ;saving the dividend pointer
   01f6   73                stxd
   01f7   84                glo R4
   01f8   73                stxd            ;+1 dividend pointer
                            
   01f9   e4                sex R4
                            
   01fa   72                ldxa            ;copy dividend to remainder
   01fb   57                str R7
   01fc   17                inc R7
                            
   01fd   72                ldxa
   01fe   57                str R7
   01ff   17                inc R7
                            
   0200   72                ldxa
   0201   57                str R7
   0202   17                inc R7
                            
   0203   f0                ldx
   0204   57                str R7
                            
   0205   f8 00             ldi 0
   0207   56                str R6
   0208   16                inc R6
   0209   56                str R6
   020a   16                inc R6
   020b   56                str R6
   020c   16                inc R6
   020d   56                str R6
                        
   020e   8f                glo STACK_REG   ;get the STACK_REG pointer to position it to the divider MSB
   020f   fc 0e             adi 14          ;add 14 to it
   0211   a5                plo R5          ;store the new pointer to R5
   0212   9f                ghi STACK_REG   ;get the STACK_REG high part to add the carry to it
   0213   7c 00             adci 0          ;adding the carry
   0215   b5                phi R5          ;store the new high part to R5
                            
   0216   e5                sex R5          ;set X data pointer to R5
   0217   f0                ldx             ;load data from RAM[R5]
   0218   25                dec R5          ;decrement R5 to set it back to the divider's LSB
   0219   25                dec R5
   021a   25                dec R5
   021b   fa 80             ani 080h        ;check if sign bit is set
                            
   021d   c2 02 34          lbz INTEGER_DIV_NEXT_CHECK
                            
   0220   f8 82             ldi 082h        ;load 0x82 to the D register
   0222   fe                shl             ;shit it left so it will set the carry flag and the D registre will be 4
   0223   a9                plo R9          ;store it to R9 low
                            
   0224                 INTEGER_DIV_INVERT_LOOP1
   0224   f0                ldx             ;load data from RAM[R5]
   0225   fb ff             xri 0FFh        ;xor D with 0xFF to invert it
   0227   7c 00             adci 0          ;add the carry for to the result (inver+1)
   0229   55                str R5          ;store the result to RAM[R5]
   022a   60                irx             ;increment R5
                        
   022b   29                dec R9          ;decrement R8
   022c   89                glo R9          ;get R8 low, and if it's not 0 then do the loop
   022d   ca 02 24          lbnz INTEGER_DIV_INVERT_LOOP1
                            
   0230   98                ghi R8          ;set the flag
   0231   f9 01             ori 1
   0233   b8                phi R8
                            
   0234                 INTEGER_DIV_NEXT_CHECK
   0234   8f                glo STACK_REG
   0235   fc 03             adi 3
   0237   a9                plo R9
   0238   9f                ghi STACK_REG
   0239   7c 00             adci 0
   023b   b9                phi R9
                            
   023c   09                ldn R9              ;restore and get remainder MSB
   023d   fc 03             adi 3
   023f   a4                plo R4
   0240   19                inc R9
   0241   09                ldn R9
   0242   7c 00             adci 0
   0244   b4                phi R4
                            
   0245   e4                sex R4
   0246   f0                ldx
   0247   24                dec R4
   0248   24                dec R4
   0249   24                dec R4
   024a   fa 80             ani 080h            ;check if sign bit is set
                            
   024c   c2 02 62          lbz INTEGER_SHIFT_DR
                            
   024f   f8 82             ldi 082h
   0251   fe                shl
   0252   a9                plo R9
                            
   0253                 INVERT_LOOP2
   0253   f0                ldx         ;invert byte 3
   0254   fb ff             xri 0FFh
   0256   7c 00             adci 0
   0258   54                str R4
   0259   60                irx
                        
   025a   29                dec R9
   025b   89                glo R9
   025c   3a 53             bnz INVERT_LOOP2
                            
   025e   98                ghi R8      ;set the flag
   025f   f9 02             ori 2
   0261   b8                phi R8
                            
   0262                 INTEGER_SHIFT_DR
   0262   8f                glo STACK_REG ;get divider MSB
   0263   fc 0b             adi 11
   0265   a5                plo R5
   0266   9f                ghi STACK_REG
   0267   7c 00             adci 0
   0269   b5                phi R5
                            
   026a   f8 00             ldi 0
   026c   e5                sex R5
   026d   f1                or
   026e   60                irx
   026f   f1                or
   0270   60                irx
   0271   f1                or
   0272   60                irx
   0273   f1                or
   0274   32 8d             bz DIVISION_LOOP
                            
   0276                 SHIFT_DR
   0276   8f                glo STACK_REG ;get divider MSB
   0277   fc 0e             adi 14
   0279   a5                plo R5
   027a   9f                ghi STACK_REG
   027b   7c 00             adci 0
   027d   b5                phi R5
                            
   027e   e5                sex R5
                            
   027f   f8 04             ldi 4
   0281   fe                shl
   0282   a9                plo R9
                            
   0283                 CARRY_SHIFTING
   0283   f0                ldx
   0284   76                shrc
   0285   73                stxd
                            
   0286   29                dec R9
   0287   89                glo R9
   0288   3a 83             bnz CARRY_SHIFTING
                            
   028a   18                inc R8
                            
   028b   30 62             br INTEGER_SHIFT_DR
                            
   028d                 DIVISION_LOOP
   028d   88                glo R8              ;get R8 low
   028e   fd 20             sdi 32              ;if larger than 32 then finish the loop
   0290   cb 03 1f          lbnf FINAL_CHECK
                        
   0293   8f                glo STACK_REG       ;restore quotient pointer to R6
   0294   fc 05             adi 5
   0296   a9                plo R9
   0297   9f                ghi STACK_REG
   0298   7c 00             adci 0
   029a   b9                phi R9
                            
   029b   09                ldn R9
   029c   a6                plo R6
   029d   19                inc R9
   029e   09                ldn R9
   029f   b6                phi R6
                            
   02a0   e6                sex R6
                            
   02a1   f8 02             ldi 2
   02a3   fe                shl
   02a4   a9                plo R9
                            
   02a5                 SHIFTING_Q
   02a5   f0                ldx                 ;shifting quotient to left
   02a6   7e                shlc
   02a7   56                str R6
   02a8   60                irx
                        
   02a9   29                dec R9
   02aa   89                glo R9
   02ab   3a a5             bnz SHIFTING_Q
                            
   02ad   8f                glo STACK_REG    ;restore remainder pointer to R4
   02ae   fc 03             adi 3
   02b0   a9                plo R9
   02b1   9f                ghi STACK_REG
   02b2   7c 00             adci 0
   02b4   b9                phi R9
                            
   02b5   09                ldn R9
   02b6   a4                plo R4
   02b7   19                inc R9
   02b8   09                ldn R9
   02b9   b4                phi R4
                            
   02ba   8f                glo STACK_REG    ;restore subtractor pointer to R5
   02bb   fc 07             adi 7
   02bd   a5                plo R5
   02be   9f                ghi STACK_REG
   02bf   7c 00             adci 0
   02c1   b5                phi R5
                            
   02c2   e4                sex R4
   02c3   f8 82             ldi 082h
   02c5   fe                shl
   02c6   a9                plo R9
                            
   02c7                 TRY_SUBTRACTING         ;try subtracting
   02c7   05                ldn R5
   02c8   75                sdb
   02c9   60                irx
   02ca   15                inc R5
                            
   02cb   29                dec R9
   02cc   89                glo R9
   02cd   3a c7             bnz TRY_SUBTRACTING
                            
   02cf   cb 03 07          lbnf NEXT_BIT        ;if subtracting unsuccesful, jump to NEXT_BIT
                            
   02d2   8f                glo STACK_REG
   02d3   fc 05             adi 5
   02d5   a9                plo R9
   02d6   9f                ghi STACK_REG
   02d7   7c 00             adci 0
   02d9   b9                phi R9
                            
   02da   09                ldn R9
   02db   a6                plo R6
   02dc   19                inc R9
   02dd   09                ldn R9
   02de   b6                phi R6
                            
   02df   06                ldn R6
   02e0   f9 01             ori 1
   02e2   56                str R6
                            
   02e3   8f                glo STACK_REG    ;restore remainder pointer
   02e4   fc 03             adi 3
   02e6   a9                plo R9
   02e7   9f                ghi STACK_REG
   02e8   7c 00             adci 0
   02ea   b9                phi R9
                            
   02eb   09                ldn R9
   02ec   a4                plo R4
   02ed   19                inc R9
   02ee   09                ldn R9
   02ef   b4                phi R4
                            
   02f0   8f                glo STACK_REG    ;restore subtractor's pointer to R5
   02f1   fc 07             adi 7
   02f3   a5                plo R5
   02f4   9f                ghi STACK_REG
   02f5   7c 00             adci 0
   02f7   b5                phi R5
                            
   02f8   e4                sex R4
                            
   02f9   f8 82             ldi 082h
   02fb   fe                shl
   02fc   a9                plo R9
                            
   02fd                 SUBTRACT_FOR_REAL
   02fd   05                ldn R5          ;subtract the subtractor from the remainder and store it
   02fe   75                sdb
   02ff   54                str R4
   0300   60                irx
   0301   15                inc R5
                            
   0302   29                dec R9
   0303   89                glo R9
   0304   ca 02 fd          lbnz SUBTRACT_FOR_REAL
                            
   0307                 NEXT_BIT
   0307   8f                glo STACK_REG    ;restore subtractor pointer to R5 and set it to MSB
   0308   fc 0a             adi 10
   030a   a5                plo R5
   030b   9f                ghi STACK_REG
   030c   7c 00             adci 0
   030e   b5                phi R5
                            
   030f   e5                sex R5
   0310   f8 02             ldi 2
   0312   fe                shl
   0313   a9                plo R9
                            
   0314                 SHIFT_SUBTRACTOR
   0314   f0                ldx
   0315   76                shrc
   0316   73                stxd
                            
   0317   29                dec R9
   0318   89                glo R9
   0319   3a 14             bnz SHIFT_SUBTRACTOR
                            
   031b   18                inc R8
   031c   c0 02 8d          lbr DIVISION_LOOP
                            
   031f                 FINAL_CHECK
   031f   98                ghi R8
   0320   fa 02             ani 2
   0322   c2 03 43          lbz FINAL_CHECK2
                            
   0325   8f                glo STACK_REG    ;restore remainder pointer to R4
   0326   fc 03             adi 3
   0328   a9                plo R9
   0329   9f                ghi STACK_REG
   032a   7c 00             adci 0
   032c   b9                phi R9
                            
   032d   09                ldn R9
   032e   a4                plo R4
   032f   19                inc R9
   0330   09                ldn R9
   0331   b4                phi R4
                            
   0332   e4                sex R4
                            
   0333   f8 82             ldi 082h
   0335   fe                shl
   0336   a9                plo R9
                            
   0337                 INVERT_LOOP3
   0337   f0                ldx
   0338   fb ff             xri 0FFh
   033a   7c 00             adci 0
   033c   54                str R4
   033d   60                irx
                            
   033e   29                dec R9
   033f   89                glo R9
   0340   ca 03 37          lbnz INVERT_LOOP3
                            
   0343                 FINAL_CHECK2
   0343   98                ghi R8
   0344   c2 03 69          lbz THE_END
   0347   fb 03             xri 3
   0349   c2 03 69          lbz THE_END
                            
   034c   8f                glo STACK_REG    ;restore quotient pointer to R6
   034d   fc 05             adi 5
   034f   a9                plo R9
   0350   9f                ghi STACK_REG
   0351   7c 00             adci 0
   0353   b9                phi R9
                            
   0354   09                ldn R9
   0355   a6                plo R6
   0356   19                inc R9
   0357   09                ldn R9
   0358   b6                phi R6
                            
   0359   e6                sex R6
                            
   035a   f8 82             ldi 082h
   035c   fe                shl
   035d   a9                plo R9
                            
   035e                 INVERT_LOOP4
   035e   f0                ldx
   035f   fb ff             xri 0FFh
   0361   7c 00             adci 0
   0363   56                str R6
   0364   60                irx
                            
   0365   29                dec R9
   0366   89                glo R9
   0367   3a 5e             bnz INVERT_LOOP4
                        
   0369                 THE_END
   0369   8f                glo STACK_REG       ;setting back the STACK_REG for return
   036a   fc 0e             adi 14
   036c   af                plo STACK_REG
   036d   9f                ghi STACK_REG
   036e   7c 00             adci 0
   0370   bf                phi STACK_REG
                            
   0371   de                sep RETURN          ;RETURN
                        ;----------------------------------------------
                        
                        ;-INTEGER MUL----------------------------------
                        ;-R4-multiplicand pointer----------------------
                        ;-R5-multiplier pointer------------------------
                        ;-R6-result pointer----------------------------
                        ;-R7-general register--------------------------
   0372                 INTEGER_MUL
   0372   ef                sex STACK_REG
                            
   0373   14                inc R4      ;increment R4 and R5 pointer to MSB
   0374   14                inc R4      ;to copy the values to the local variables
   0375   14                inc R4
                            
   0376   15                inc R5
   0377   15                inc R5
   0378   15                inc R5
                            
   0379   04                ldn R4      ;copying starts here
   037a   73                stxd
   037b   24                dec R4
                            
   037c   04                ldn R4
   037d   73                stxd
   037e   24                dec R4
                            
   037f   04                ldn R4
   0380   73                stxd
   0381   24                dec R4
                            
   0382   04                ldn R4
   0383   73                stxd        ;+7 multiplicand
                            
   0384   05                ldn R5
   0385   73                stxd
   0386   25                dec R5
                            
   0387   05                ldn R5
   0388   73                stxd
   0389   25                dec R5
                            
   038a   05                ldn R5
   038b   73                stxd
   038c   25                dec R5
                            
   038d   05                ldn R5
   038e   73                stxd        ;+3 multiplier
                            
   038f   96                ghi R6
   0390   73                stxd
   0391   86                glo R6
   0392   73                stxd        ;+1 result pointer
                        
   0393   f8 00             ldi 0       ;zeroing the result
                            
   0395   56                str R6
   0396   16                inc R6
                            
   0397   56                str R6
   0398   16                inc R6
                            
   0399   56                str R6
   039a   16                inc R6
                            
   039b   56                str R6
                            
   039c   26                dec R6
   039d   26                dec R6
   039e   26                dec R6
                        
   039f                 INTEGER_MUL_LOOP
   039f   8f                glo STACK_REG   ;restore multiplier pointer
   03a0   fc 03             adi 3
   03a2   a5                plo R5
   03a3   9f                ghi STACK_REG
   03a4   7c 00             adci 0
   03a6   b5                phi R5
                            
   03a7   e5                sex R5          ;check if multiplier is 0
   03a8   f8 00             ldi 0
   03aa   f1                or
   03ab   60                irx
   03ac   f1                or
   03ad   60                irx
   03ae   f1                or
   03af   60                irx
   03b0   f1                or
                            
   03b1   25                dec R5
   03b2   25                dec R5
   03b3   25                dec R5
                            
   03b4   c2 04 09          lbz INTEGER_MUL_END      ;if 0 then jump to the end
                            
   03b7   05                ldn R5                  ;load the multiplier's LSB
   03b8   fa 01             ani 1                   ;filter for the LSb
   03ba   32 dc             bz INTEGER_MUL_SHIFT    ;if zero, skip the addition
                            
   03bc   8f                glo STACK_REG           ;restore multiplicand pointer
   03bd   fc 07             adi 7
   03bf   a4                plo R4
   03c0   9f                ghi STACK_REG
   03c1   7c 00             adci 0
   03c3   b4                phi R4
                            
   03c4   8f                glo STACK_REG           ;restore result pointer
   03c5   a7                plo R7
   03c6   9f                ghi STACK_REG
   03c7   b7                phi R7
   03c8   17                inc R7
                            
   03c9   07                ldn R7
   03ca   a5                plo R5
   03cb   17                inc R7
   03cc   07                ldn R7
   03cd   b5                phi R5
                            
   03ce   e5                sex R5
                            
   03cf   f8 02             ldi 2                   ;prepare addition
   03d1   fe                shl
   03d2   a7                plo R7
                            
   03d3                 INTEGER_MUL_ADD
   03d3   04                ldn R4
   03d4   74                adc
   03d5   55                str R5
   03d6   60                irx
   03d7   14                inc R4
                            
   03d8   27                dec R7
   03d9   87                glo R7
   03da   3a d3             bnz INTEGER_MUL_ADD
                        
   03dc                 INTEGER_MUL_SHIFT
                        
   03dc   8f                glo STACK_REG           ;set multiplier's pointer to MSB
   03dd   fc 06             adi 6                   ;to shift it right
   03df   a5                plo R5
   03e0   9f                ghi STACK_REG
   03e1   7c 00             adci 0
   03e3   b5                phi R5
                            
   03e4   e5                sex R5
                            
   03e5   f8 02             ldi 2
   03e7   fe                shl
   03e8   a7                plo R7
                            
   03e9                 INTEGER_MUL_SHMULTIPLIER
   03e9   f0                ldx                     ;shifting right the multiplier
   03ea   76                shrc
   03eb   73                stxd
                            
   03ec   27                dec R7
   03ed   87                glo R7
   03ee   3a e9             bnz INTEGER_MUL_SHMULTIPLIER
                            
   03f0   8f                glo STACK_REG           ;restore multiplicand pointer
   03f1   fc 07             adi 7                   ;to shift it left
   03f3   a4                plo R4
   03f4   9f                ghi STACK_REG
   03f5   7c 00             adci 0
   03f7   b4                phi R4
                            
   03f8   e4                sex R4
                            
   03f9   f8 02             ldi 2
   03fb   fe                shl
   03fc   a7                plo R7
                            
   03fd                 INTEGER_MUL_SHMULTIPLICAND
   03fd   f0                ldx                     ;shifting the multiplicand left
   03fe   7e                shlc
   03ff   54                str R4
   0400   60                irx
                        
   0401   27                dec R7
   0402   87                glo R7
   0403   ca 03 fd          lbnz INTEGER_MUL_SHMULTIPLICAND
                            
   0406   c0 03 9f          lbr INTEGER_MUL_LOOP
                            
   0409                 INTEGER_MUL_END
   0409   8f                glo STACK_REG
   040a   fc 0a             adi 10
   040c   af                plo STACK_REG
   040d   9f                ghi STACK_REG
   040e   7c 00             adci 0
   0410   bf                phi STACK_REG
                            
   0411   de                sep RETURN          ;RETURN    
                        ;----------------------------------------------
                        
                        ;-PRINT HEX------------------------------------
                        ;-R4-int pointer-------------------------------
                        ;-R5.0-number of digits------------------------
                        ;-Local registers------------------------------
                        ;-R5.1-flag, R6--------------------------------
   0412                 HEX_CHARS
   0412   30 31 32 33       db "0123456789ABCDEF"
   0416   34 35 36 37   
   041a   38 39 41 42   
   041e   43 44 45 46   
                        ;----------------------------------------------
   0422                 PRINT_HEX
   0422   ef                sex STACK_REG
                            
   0423   95                ghi R5  ;saving the state of the local registers
   0424   73                stxd
                            
   0425   96                ghi R6
   0426   73                stxd
   0427   86                glo R6
   0428   73                stxd
                            
   0429   14                inc R4  ;making a copy of the Integer
   042a   14                inc R4
   042b   14                inc R4
                            
   042c   04                ldn R4
   042d   73                stxd
   042e   24                dec R4
   042f   04                ldn R4
   0430   73                stxd
   0431   24                dec R4
   0432   04                ldn R4
   0433   73                stxd
   0434   24                dec R4
   0435   04                ldn R4
   0436   73                stxd    ;+2 the integer
                            
   0437   f8 00             ldi 0   ;+1 
   0439   73                stxd
                            
   043a   8f                glo STACK_REG   ;set R4 to point to the Integer
   043b   a4                plo R4
   043c   9f                ghi STACK_REG
   043d   b4                phi R4
   043e   14                inc R4
   043f   14                inc R4
                            
   0440   f8 00             ldi 0           ;set R5 flags to 0
   0442   b5                phi R5
   0443   85                glo R5              
   0444   3a 49             bnz PRINT_UNTIL_R
   0446   f8 01             ldi 1           ;if R5 low, the number of digits, is zero, then set R5 flag
   0448   b5                phi R5
                        
   0449                 PRINT_UNTIL_R
   0449   95                ghi R5                  ;check the flag if set or not
   044a   32 5e             bz PRINT_CHECK_DIGIT    
   044c   e4                sex R4              ;checking the integer if it's zero
   044d   f8 00             ldi 0
   044f   f1                or
   0450   60                irx
   0451   f1                or
   0452   60                irx
   0453   f1                or
   0454   60                irx
   0455   f1                or
                            
   0456   24                dec R4
   0457   24                dec R4
   0458   24                dec R4
                            
   0459   ef                sex STACK_REG    
   045a   3a 61             bnz PRINT_DIGIT_LOOP
   045c   30 8f             br PRINT_HEX_END
                            
   045e                 PRINT_CHECK_DIGIT
   045e   85                glo R5
   045f   32 8f             bz PRINT_HEX_END
                        
   0461                 PRINT_DIGIT_LOOP
   0461   04                ldn R4
   0462   fa 0f             ani 0Fh
   0464   5f                str STACK_REG
   0465   f8 12             ldi HEX_CHARS.0
   0467   f4                add
   0468   a6                plo R6
   0469   f8 04             ldi HEX_CHARS.1
   046b   7c 00             adci 0
   046d   b6                phi R6
                            
   046e   06                ldn R6
   046f   73                stxd
                            
   0470   f8 04             ldi 4
   0472   a6                plo R6
                            
   0473                 PRINT_HEX_SHIFT_LOOP1
   0473   14                inc R4
   0474   14                inc R4
   0475   14                inc R4
                            
   0476   04                ldn R4
   0477   f6                shr
   0478   54                str R4
   0479   24                dec R4
                            
   047a   04                ldn R4
   047b   76                shrc
   047c   54                str R4
   047d   24                dec R4
                            
   047e   04                ldn R4
   047f   76                shrc
   0480   54                str R4
   0481   24                dec R4
                            
   0482   04                ldn R4
   0483   76                shrc
   0484   54                str R4
                            
   0485   26                dec R6
   0486   86                glo R6
   0487   3a 73             bnz PRINT_HEX_SHIFT_LOOP1
                            
   0489   95                ghi R5      ;check if R5 flag is set, if set then skip decrementing.
   048a   c6                lsnz
   048b   25                dec R5
   048c   c4                nop
   048d   30 49             br PRINT_UNTIL_R
                        
   048f                 PRINT_HEX_END
   048f   8f                glo STACK_REG
   0490   a6                plo R6
   0491   9f                ghi STACK_REG
   0492   b6                phi R6
   0493   16                inc R6
                            
   0494   f8 52             ldi PRINT.0     ;prepare to call PRINT
   0496   ad                plo CALL_REG
   0497   f8 01             ldi PRINT.1
   0499   bd                phi CALL_REG
                            
   049a   f8 00             ldi FCALL.0
   049c   ae                plo FCALL_REG
   049d   de                sep FCALL_REG
                            
   049e   86                glo R6
   049f   fc 04             adi 4
   04a1   af                plo STACK_REG
   04a2   96                ghi R6
   04a3   7c 00             adci 0
   04a5   bf                phi STACK_REG
                            
   04a6   ef                sex STACK_REG   ;restore local registers
   04a7   72                ldxa
   04a8   a6                plo R6
   04a9   72                ldxa
   04aa   b6                phi R6
   04ab   f0                ldx
   04ac   b5                phi R5
                            
   04ad   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-PRINT DEC------------------------------------
                        ;-R4-int pointer-------------------------------
                        
                        ;-R10-flags------------------------------------
   04ae                 PRINT_DEC
   04ae   ef                sex STACK_REG
                            
   04af   f8 00             ldi 0
   04b1   aa                plo R10
   04b2   ba                phi R10
                            
   04b3   14                inc R4
   04b4   14                inc R4
   04b5   14                inc R4
                            
   04b6   04                ldn R4
   04b7   73                stxd
   04b8   24                dec R4
   04b9   04                ldn R4
   04ba   73                stxd
   04bb   24                dec R4
   04bc   04                ldn R4
   04bd   73                stxd
   04be   24                dec R4
   04bf   04                ldn R4
   04c0   73                stxd        ;+10 the integer
                            
   04c1   f8 00             ldi 0
   04c3   73                stxd
   04c4   73                stxd
   04c5   73                stxd
   04c6   f8 0a             ldi 0Ah
   04c8   73                stxd        ;+6 divider
                            
   04c9   f8 00             ldi 0
   04cb   73                stxd
   04cc   73                stxd
   04cd   73                stxd
   04ce   73                stxd        ;+2 remainder
                            
   04cf   73                stxd        ;+1 output string buffer end
                            
   04d0   8f                glo STACK_REG
   04d1   ac                plo R12
   04d2   9f                ghi STACK_REG
   04d3   bc                phi R12
                            
   04d4   8c                glo R12
   04d5   fc 0d             adi 13
   04d7   a4                plo R4
   04d8   9c                ghi R12
   04d9   7c 00             adci 0
   04db   b4                phi R4
                            
   04dc   e4                sex R4
   04dd   f0                ldx
   04de   fa 80             ani 080h
   04e0   32 f8             bz PRINT_DEC_MAIN_LOOP
                            
   04e2   8a                glo R10
   04e3   f9 01             ori 1
   04e5   aa                plo R10
                            
   04e6   24                dec R4
   04e7   24                dec R4
   04e8   24                dec R4
                            
   04e9   f8 82             ldi 082h
   04eb   fe                shl
   04ec   a6                plo R6
                            
   04ed                 PRINT_DEC_INVER_LOOP
   04ed   f0                ldx
   04ee   fb ff             xri 0FFh
   04f0   7c 00             adci 0
   04f2   54                str R4
   04f3   14                inc R4
                            
   04f4   26                dec R6
   04f5   86                glo R6
   04f6   3a ed             bnz PRINT_DEC_INVER_LOOP
                            
   04f8                 PRINT_DEC_MAIN_LOOP    
   04f8   8c                glo R12
   04f9   fc 0a             adi 10
   04fb   a4                plo R4
   04fc   a6                plo R6
   04fd   9c                ghi R12
   04fe   7c 00             adci 0
   0500   b4                phi R4
   0501   b6                phi R6
                            
   0502   8c                glo R12
   0503   fc 06             adi 6
   0505   a5                plo R5
   0506   9c                ghi R12
   0507   7c 00             adci 0
   0509   b5                phi R5
                            
   050a   8c                glo R12
   050b   fc 02             adi 2
   050d   a7                plo R7
   050e   9c                ghi R12
   050f   7c 00             adci 0
   0511   b7                phi R7
                            
   0512   f8 d4             ldi INTEGER_DIV.0
   0514   ad                plo CALL_REG
   0515   f8 01             ldi INTEGER_DIV.1
   0517   bd                phi CALL_REG
                            
   0518   f8 00             ldi FCALL.0
   051a   ae                plo FCALL_REG
   051b   de                sep FCALL_REG
                            
   051c   ef                sex STACK_REG
                            
   051d   8c                glo R12
   051e   fc 02             adi 2
   0520   a7                plo R7
   0521   9c                ghi R12
   0522   7c 00             adci 0
   0524   b7                phi R7
                            
   0525   07                ldn R7
   0526   fc 30             adi 48
   0528   73                stxd
                            
   0529   8c                glo R12
   052a   fc 0a             adi 10
   052c   a4                plo R4
   052d   9c                ghi R12
   052e   7c 00             adci 0
   0530   b4                phi R4
                            
   0531   e4                sex R4
                            
   0532   f8 00             ldi 0
   0534   f1                or
   0535   60                irx
   0536   f1                or
   0537   60                irx
   0538   f1                or
   0539   60                irx
   053a   f1                or
                            
   053b   32 40             bz PRINT_DEC_END
   053d   c0 04 f8          lbr PRINT_DEC_MAIN_LOOP
                        
   0540                 PRINT_DEC_END
   0540   8a                glo R10
   0541   fa 01             ani 1
   0543   32 49             bz PRINT_DEC_FINAL
                            
   0545   ef                sex STACK_REG
   0546   f8 2d             ldi 45
   0548   73                stxd
                        
   0549                 PRINT_DEC_FINAL
   0549   8f                glo STACK_REG
   054a   a6                plo R6
   054b   9f                ghi STACK_REG
   054c   b6                phi R6
   054d   16                inc R6
                            
   054e   f8 52             ldi PRINT.0
   0550   ad                plo CALL_REG
   0551   f8 01             ldi PRINT.1
   0553   bd                phi CALL_REG
                            
   0554   f8 00             ldi FCALL.0
   0556   ae                plo FCALL_REG
   0557   de                sep FCALL_REG
                            
   0558   8c                glo R12
   0559   fc 0d             adi 13
   055b   af                plo STACK_REG
   055c   9c                ghi R12
   055d   7c 00             adci 0
   055f   bf                phi STACK_REG
                            
   0560   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-READ DEC-------------------------------------
                        ;-R4-string pointer----------------------------
                        ;-R5-result pointer----------------------------
   0561                 READ_DEC
   0561   ef                sex STACK_REG
                            
   0562   94                ghi R4
   0563   73                stxd
   0564   84                glo R4
   0565   73                stxd        ;+7 string pointer
                            
   0566   95                ghi R5
   0567   73                stxd
   0568   85                glo R5
   0569   73                stxd        ;+5 result pointer
                            
   056a   f8 00             ldi 0
   056c   73                stxd
   056d   73                stxd
   056e   73                stxd
   056f   f8 0a             ldi 0Ah
   0571   73                stxd        ;+1 multiplier
                            
   0572   f8 00             ldi 0       ;set result to 0
   0574   55                str R5
   0575   15                inc R5
   0576   55                str R5
   0577   15                inc R5
   0578   55                str R5
   0579   15                inc R5
   057a   55                str R5
                            
   057b                 READ_DEC_MAIN_LOOP
   057b   8f                glo STACK_REG
   057c   fc 07             adi 7
   057e   a6                plo R6
   057f   9f                ghi STACK_REG
   0580   7c 00             adci 0
   0582   b6                phi R6
                            
   0583   06                ldn R6
   0584   a4                plo R4
   0585   16                inc R6
   0586   06                ldn R6
   0587   b4                phi R4
                            
   0588   04                ldn R4
   0589   ff 30             smi 48
   058b   3b ef             bnf READ_DEC_END
   058d   ff 0a             smi 10
   058f   33 ef             bdf READ_DEC_END
                            
   0591   8f                glo STACK_REG
   0592   fc 05             adi 5
   0594   a6                plo R6
   0595   9f                ghi STACK_REG
   0596   7c 00             adci 0
   0598   b6                phi R6
                            
   0599   06                ldn R6
   059a   a4                plo R4
   059b   16                inc R6
   059c   06                ldn R6
   059d   b4                phi R4
                            
   059e   b6                phi R6
   059f   84                glo R4
   05a0   a6                plo R6
                            
   05a1   8f                glo STACK_REG
   05a2   a5                plo R5
   05a3   9f                ghi STACK_REG
   05a4   b5                phi R5
   05a5   15                inc R5
                            
   05a6   f8 72             ldi INTEGER_MUL.0     ;prepare to call INTEGER_MUL
   05a8   ad                plo CALL_REG
   05a9   f8 03             ldi INTEGER_MUL.1       
   05ab   bd                phi CALL_REG
                            
   05ac   f8 00             ldi FCALL.0
   05ae   ae                plo FCALL_REG
   05af   de                sep FCALL_REG
                            
   05b0   8f                glo STACK_REG
   05b1   fc 07             adi 7
   05b3   a6                plo R6
   05b4   9f                ghi STACK_REG
   05b5   7c 00             adci 0
   05b7   b6                phi R6
                            
   05b8   06                ldn R6
   05b9   a4                plo R4
   05ba   16                inc R6
   05bb   06                ldn R6
   05bc   b4                phi R4
                            
   05bd   8f                glo STACK_REG
   05be   fc 05             adi 5
   05c0   a6                plo R6
   05c1   9f                ghi STACK_REG
   05c2   7c 00             adci 0
   05c4   b6                phi R6
                            
   05c5   06                ldn R6
   05c6   a5                plo R5
   05c7   16                inc R6
   05c8   06                ldn R6
   05c9   b5                phi R5
                            
   05ca   e5                sex R5
                            
   05cb   04                ldn R4
   05cc   ff 30             smi 48
                            
   05ce   f4                add
   05cf   55                str R5
   05d0   15                inc R5
                            
   05d1   f8 00             ldi 0
   05d3   74                adc
   05d4   55                str R5
   05d5   15                inc R5
                            
   05d6   f8 00             ldi 0
   05d8   74                adc
   05d9   55                str R5
   05da   15                inc R5
                            
   05db   f8 00             ldi 0
   05dd   74                adc
   05de   55                str R5
                        
   05df   14                inc R4
                            
   05e0   8f                glo STACK_REG
   05e1   fc 07             adi 7
   05e3   a6                plo R6
   05e4   9f                ghi STACK_REG
   05e5   7c 00             adci 0
   05e7   b6                phi R6
                            
   05e8   84                glo R4
   05e9   56                str R6
   05ea   16                inc R6
   05eb   94                ghi R4
   05ec   56                str R6
                            
   05ed   30 7b             br READ_DEC_MAIN_LOOP
                           
   05ef                 READ_DEC_END
   05ef   8f                glo STACK_REG
   05f0   fc 05             adi 5
   05f2   af                plo STACK_REG
   05f3   9f                ghi STACK_REG
   05f4   7c 00             adci 0
   05f6   bf                phi STACK_REG
                            
   05f7   ef                sex STACK_REG
                            
   05f8   72                ldxa            ;restore R4 and R5
   05f9   a5                plo R5
   05fa   72                ldxa
   05fb   b5                phi R5
   05fc   72                ldxa
   05fd   a4                plo R4
   05fe   f0                ldx
   05ff   b4                phi R4
                            
   0600   de                sep RETURN      ;RETURN    
                        ;----------------------------------------------
                        
                        ;-FACTOR---------------------------------------
                        ;-R4-string pointer----------------------------
                        ;-R5-result pointer----------------------------
                        ;-R10-result code------------------------------
   0601                 FACTOR
   0601   ef                sex STACK_REG
                            
   0602   94                ghi R4
   0603   73                stxd
   0604   84                glo R4
   0605   73                stxd    ;+4 string pt
                            
   0606   95                ghi R5
   0607   73                stxd
   0608   85                glo R5
   0609   73                stxd    ;+2 result pt
                            
   060a   f8 00             ldi 0
   060c   73                stxd    ;+1 flag, indicates if the factor needs to be negated
                            
                            
   060d                 FACTOR_MAIN
   060d   04                ldn R4
   060e   fb 20             xri 32
   0610   c2 06 61          lbz FACTOR_NEXT_CYCLE       ;if ' '
   0613   04                ldn R4
   0614   fb 2b             xri 43
   0616   c2 06 61          lbz FACTOR_NEXT_CYCLE       ;if '+'
   0619   04                ldn R4
   061a   fb 2d             xri 45
   061c   c2 06 56          lbz FACTOR_NEGATE           ;if '-'
   061f   04                ldn R4
   0620   fb 28             xri 40
   0622   c2 06 3d          lbz FACTOR_PARENTHESIS      ;if '('
   0625   04                ldn R4
   0626   ff 30             smi 48
   0628   cb 06 65          lbnf FACTOR_END
   062b   ff 0a             smi 10
   062d   c3 06 65          lbdf FACTOR_END
                            
   0630   f8 61             ldi READ_DEC.0
   0632   ad                plo CALL_REG
   0633   f8 05             ldi READ_DEC.1
   0635   bd                phi CALL_REG
                            
   0636   f8 00             ldi FCALL.0
   0638   ae                plo FCALL_REG
   0639   de                sep FCALL_REG
                            
   063a   c0 06 65          lbr FACTOR_END
                            
   063d                 FACTOR_PARENTHESIS
   063d   14                inc R4
                            
   063e   f8 8b             ldi EXPRESSION.0
   0640   ad                plo CALL_REG
   0641   f8 07             ldi EXPRESSION.1
   0643   bd                phi CALL_REG
                            
   0644   f8 00             ldi FCALL.0
   0646   ae                plo FCALL_REG
   0647   de                sep FCALL_REG
                        
   0648                 FACTOR_PARENTHESIS_SKIPSPACES
   0648   44                lda R4
   0649   fb 20             xri 32
   064b   32 48             bz FACTOR_PARENTHESIS_SKIPSPACES
   064d   24                dec R4
                            
   064e   44                lda R4
   064f   fb 29             xri 41
   0651   32 65             bz FACTOR_END
                            
   0653   c0 06 0d          lbr FACTOR_MAIN
                            
   0656                 FACTOR_NEGATE
   0656   8f                glo STACK_REG
   0657   a6                plo R6
   0658   9f                ghi STACK_REG
   0659   b6                phi R6
   065a   16                inc R6
                            
   065b   06                ldn R6
   065c   fb ff             xri 0FFh
   065e   fa 01             ani 1
   0660   56                str R6
                            
   0661                 FACTOR_NEXT_CYCLE
   0661   14                inc R4
   0662   c0 06 0d          lbr FACTOR_MAIN
                            
   0665                 FACTOR_END
   0665   8f                glo STACK_REG
   0666   a6                plo R6
   0667   9f                ghi STACK_REG
   0668   b6                phi R6
   0669   16                inc R6
                            
   066a   06                ldn R6
   066b   c2 06 8b          lbz FACTOR_FINAL
                            
   066e   8f                glo STACK_REG
   066f   fc 02             adi 2
   0671   a6                plo R6
   0672   9f                ghi STACK_REG
   0673   7c 00             adci 0
   0675   b6                phi R6
                            
   0676   06                ldn R6
   0677   a5                plo R5
   0678   16                inc R6
   0679   06                ldn R6
   067a   b5                phi R5
                            
   067b   e5                sex R5
                            
   067c   f8 82             ldi 082h
   067e   fe                shl
   067f   a6                plo R6
                            
   0680                 FACTOR_INVERTING
   0680   f0                ldx
   0681   fb ff             xri 0FFh
   0683   7c 00             adci 0
   0685   55                str R5
   0686   60                irx
                            
   0687   26                dec R6
   0688   86                glo R6
   0689   3a 80             bnz FACTOR_INVERTING
                            
   068b                 FACTOR_FINAL
   068b   8f                glo STACK_REG
   068c   fc 05             adi 5
   068e   af                plo STACK_REG
   068f   9f                ghi STACK_REG
   0690   7c 00             adci 0
   0692   bf                phi STACK_REG
                            
   0693   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-TERM-----------------------------------------
                        ;-R4-string pointer----------------------------
                        ;-R5-result------------------------------------
   0694                 TERM
   0694   ef                sex STACK_REG
                            
   0695   94                ghi R4
   0696   73                stxd
   0697   84                glo R4
   0698   73                stxd
                            
   0699   95                ghi R5
   069a   73                stxd
   069b   85                glo R5
   069c   73                stxd
                            
   069d   f8 01             ldi FACTOR.0
   069f   ad                plo CALL_REG
   06a0   f8 06             ldi FACTOR.1
   06a2   bd                phi CALL_REG
                            
   06a3   f8 00             ldi FCALL.0
   06a5   ae                plo FCALL_REG
   06a6   de                sep FCALL_REG
                            
   06a7                 TERM_MAIN
   06a7   04                ldn R4
   06a8   fb 20             xri 32
   06aa   c2 07 75          lbz TERM_NEXT_CYCLE
   06ad   04                ldn R4
   06ae   fb 2a             xri 42
   06b0   c2 07 20          lbz TERM_MULTIPLY       ;if '*'
   06b3   04                ldn R4
   06b4   fb 2f             xri 47
   06b6   32 bb             bz TERM_DIVIDE          ;if '/'
                            
   06b8   c0 07 79          lbr TERM_END
                            
   06bb                 TERM_DIVIDE
   06bb   14                inc R4
                            
   06bc   f8 00             ldi 0
   06be   73                stxd
   06bf   73                stxd
   06c0   73                stxd
   06c1   73                stxd    ;+5 remainder
                            
   06c2   73                stxd
   06c3   73                stxd
   06c4   73                stxd
   06c5   73                stxd    ;+1 divider
                            
   06c6   8f                glo STACK_REG
   06c7   a5                plo R5
   06c8   9f                ghi STACK_REG
   06c9   b5                phi R5
   06ca   15                inc R5
                            
   06cb   f8 01             ldi FACTOR.0
   06cd   ad                plo CALL_REG
   06ce   f8 06             ldi FACTOR.1
   06d0   bd                phi CALL_REG
                            
   06d1   f8 00             ldi FCALL.0
   06d3   ae                plo FCALL_REG
   06d4   de                sep FCALL_REG
                            
   06d5   8f                glo STACK_REG ;save R4 pointer
   06d6   fc 0b             adi 11
   06d8   a6                plo R6
   06d9   9f                ghi STACK_REG
   06da   7c 00             adci 0
   06dc   b6                phi R6
                            
   06dd   84                glo R4
   06de   56                str R6
   06df   16                inc R6
   06e0   94                ghi R4
   06e1   56                str R6
                            
   06e2   8f                glo STACK_REG
   06e3   fc 09             adi 9
   06e5   a8                plo R8
   06e6   9f                ghi STACK_REG
   06e7   7c 00             adci 0
   06e9   b8                phi R8
                            
   06ea   08                ldn R8
   06eb   a4                plo R4
   06ec   a6                plo R6
   06ed   18                inc R8
   06ee   08                ldn R8
   06ef   b4                phi R4
   06f0   b6                phi R6
                            
   06f1   8f                glo STACK_REG
   06f2   a5                plo R5
   06f3   9f                ghi STACK_REG
   06f4   b5                phi R5
   06f5   15                inc R5
                            
   06f6   8f                glo STACK_REG
   06f7   fc 05             adi 5
   06f9   a7                plo R7
   06fa   9f                ghi STACK_REG
   06fb   7c 00             adci 0
   06fd   b7                phi R7
                            
   06fe   f8 d4             ldi INTEGER_DIV.0
   0700   ad                plo CALL_REG
   0701   f8 01             ldi INTEGER_DIV.1
   0703   bd                phi CALL_REG
                            
   0704   f8 00             ldi FCALL.0
   0706   ae                plo FCALL_REG
   0707   de                sep FCALL_REG
                            
   0708   8f                glo STACK_REG
   0709   fc 0b             adi 11
   070b   a6                plo R6
   070c   9f                ghi STACK_REG
   070d   7c 00             adci 0
   070f   b6                phi R6
                            
   0710   06                ldn R6
   0711   a4                plo R4
   0712   16                inc R6
   0713   06                ldn R6
   0714   b4                phi R4
                            
   0715   8f                glo STACK_REG
   0716   fc 08             adi 8
   0718   af                plo STACK_REG
   0719   9f                ghi STACK_REG
   071a   7c 00             adci 0
   071c   bf                phi STACK_REG
                        
   071d   c0 06 a7          lbr TERM_MAIN
                            
   0720                 TERM_MULTIPLY
   0720   14                inc R4
                            
   0721   f8 00             ldi 0
   0723   73                stxd
   0724   73                stxd
   0725   73                stxd
   0726   73                stxd
                            
   0727   8f                glo STACK_REG
   0728   a5                plo R5
   0729   9f                ghi STACK_REG
   072a   b5                phi R5
   072b   15                inc R5
                            
   072c   f8 01             ldi FACTOR.0
   072e   ad                plo CALL_REG
   072f   f8 06             ldi FACTOR.1
   0731   bd                phi CALL_REG
                            
   0732   f8 00             ldi FCALL.0
   0734   ae                plo FCALL_REG
   0735   de                sep FCALL_REG
                            
   0736   8f                glo STACK_REG
   0737   fc 07             adi 7
   0739   a6                plo R6
   073a   9f                ghi STACK_REG
   073b   7c 00             adci 0
   073d   b6                phi R6
                            
   073e   84                glo R4
   073f   56                str R6
   0740   16                inc R6
   0741   94                ghi R4
   0742   56                str R6
                            
   0743   8f                glo STACK_REG
   0744   fc 05             adi 5
   0746   a8                plo R8
   0747   9f                ghi STACK_REG
   0748   7c 00             adci 0
   074a   b8                phi R8
                            
   074b   08                ldn R8
   074c   a4                plo R4
   074d   a6                plo R6
   074e   18                inc R8
   074f   08                ldn R8
   0750   b4                phi R4
   0751   b6                phi R6
                            
   0752   8f                glo STACK_REG
   0753   a5                plo R5
   0754   9f                ghi STACK_REG
   0755   b5                phi R5
   0756   15                inc R5
                            
   0757   f8 72             ldi INTEGER_MUL.0
   0759   ad                plo CALL_REG
   075a   f8 03             ldi INTEGER_MUL.1
   075c   bd                phi CALL_REG
                            
   075d   f8 00             ldi FCALL.0
   075f   ae                plo FCALL_REG
   0760   de                sep FCALL_REG
                            
   0761   8f                glo STACK_REG
   0762   fc 07             adi 7
   0764   a6                plo R6
   0765   9f                ghi STACK_REG
   0766   7c 00             adci 0
   0768   b6                phi R6
                            
   0769   06                ldn R6
   076a   a4                plo R4
   076b   16                inc R6
   076c   06                ldn R6
   076d   b4                phi R4
                            
   076e   1f                inc STACK_REG
   076f   1f                inc STACK_REG
   0770   1f                inc STACK_REG
   0771   1f                inc STACK_REG
                        
   0772   c0 06 a7          lbr TERM_MAIN
                            
   0775                 TERM_NEXT_CYCLE
   0775   14                inc R4
   0776   c0 06 a7          lbr TERM_MAIN
                            
   0779                 TERM_END
   0779   8f                glo STACK_REG
   077a   a6                plo R6
   077b   9f                ghi STACK_REG
   077c   b6                phi R6
   077d   16                inc R6
                            
   077e   46                lda R6
   077f   a5                plo R5
   0780   46                lda R6
   0781   b5                phi R5
                            
   0782   8f                glo STACK_REG
   0783   fc 04             adi 4
   0785   af                plo STACK_REG
   0786   9f                ghi STACK_REG
   0787   7c 00             adci 0
   0789   bf                phi STACK_REG
                            
   078a   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-EXPRESSION-----------------------------------
                        ;-R4-string pointer----------------------------
                        ;-R5-result pointer----------------------------
                        ;-Local registers------------------------------
                        ;-R6-R7----------------------------------------
   078b                 EXPRESSION
   078b   ef                sex STACK_REG
                            
   078c   97                ghi R7      ;saving local registers
   078d   73                stxd
   078e   87                glo R7
   078f   73                stxd
                            
   0790   96                ghi R6
   0791   73                stxd
   0792   86                glo R6
   0793   73                stxd
                            
   0794   94                ghi R4      ;R4 pointer to input string 
   0795   73                stxd
   0796   84                glo R4
   0797   73                stxd        ;+3 input string pointer
                            
   0798   95                ghi R5      ;R5 pointer to result
   0799   73                stxd
   079a   85                glo R5
   079b   73                stxd        ;+1 result pointer
                            
   079c                 EXPRESSION_SKIPSPACES           ;skip spaces
   079c   44                lda R4
   079d   fb 20             xri 32
   079f   32 9c             bz EXPRESSION_SKIPSPACES
   07a1   24                dec R4
                            
   07a2   f8 94             ldi TERM.0                  ;read TERM
   07a4   ad                plo CALL_REG
   07a5   f8 06             ldi TERM.1
   07a7   bd                phi CALL_REG
                            
   07a8   f8 00             ldi FCALL.0
   07aa   ae                plo FCALL_REG
   07ab   de                sep FCALL_REG
                            
   07ac                 EXPRESSION_MAIN
   07ac   04                ldn R4
   07ad   fb 20             xri 32                      ;if ' '
   07af   c2 08 71          lbz EXPRESSION_NEXT_CYCLE
   07b2   04                ldn R4
   07b3   fb 2b             xri 43                      ;if '+'
   07b5   32 c0             bz EXPRESSION_ADD
   07b7   04                ldn R4
   07b8   fb 2d             xri 45                      ;if '-'
   07ba   c2 08 19          lbz EXPRESSION_SUB
                            
                            
   07bd   c0 08 75          lbr EXPRESSION_END
                            
   07c0                 EXPRESSION_ADD
   07c0   14                inc R4
                            
   07c1   f8 00             ldi 0               ;new result
   07c3   73                stxd
   07c4   73                stxd
   07c5   73                stxd
   07c6   73                stxd
                            
   07c7   8f                glo STACK_REG       ;set R5 pointer to new result
   07c8   a5                plo R5
   07c9   9f                ghi STACK_REG
   07ca   b5                phi R5
   07cb   15                inc R5
                            
   07cc   f8 94             ldi TERM.0          ;read TERM
   07ce   ad                plo CALL_REG
   07cf   f8 06             ldi TERM.1
   07d1   bd                phi CALL_REG
                            
   07d2   f8 00             ldi FCALL.0
   07d4   ae                plo FCALL_REG
   07d5   de                sep FCALL_REG
                            
   07d6   8f                glo STACK_REG       ; set R6 register to point to the input string pointer
   07d7   fc 07             adi 7
   07d9   a6                plo R6
   07da   9f                ghi STACK_REG
   07db   7c 00             adci 0
   07dd   b6                phi R6
                            
   07de   84                glo R4              ;input string pointer = R4
   07df   56                str R6
   07e0   16                inc R6
   07e1   94                ghi R4
   07e2   56                str R6
                            
   07e3   8f                glo STACK_REG       ;set R5 register to point to result
   07e4   a5                plo R5
   07e5   9f                ghi STACK_REG
   07e6   b5                phi R5
   07e7   15                inc R5
                            
   07e8   8f                glo STACK_REG       ;set R6 register to point to the result pointer
   07e9   fc 05             adi 5
   07eb   a6                plo R6
   07ec   9f                ghi STACK_REG
   07ed   7c 00             adci 0
   07ef   b6                phi R6
                            
   07f0   06                ldn R6              ;R4 = result pointer
   07f1   a4                plo R4
   07f2   16                inc R6
   07f3   06                ldn R6
   07f4   b4                phi R4
                            
   07f5   e4                sex R4
                            
   07f6   f8 02             ldi 2
   07f8   fe                shl
   07f9   a7                plo R7
                            
   07fa                 EXPRESSION_ADD_LOOP     ;*result pointer += result;
   07fa   05                ldn R5
   07fb   74                adc
   07fc   54                str R4
   07fd   15                inc R5
   07fe   60                irx
                            
   07ff   27                dec R7
   0800   87                glo R7
   0801   ca 07 fa          lbnz EXPRESSION_ADD_LOOP
                            
   0804   ef                sex STACK_REG
                            
   0805   8f                glo STACK_REG       
   0806   fc 07             adi 7
   0808   a6                plo R6
   0809   9f                ghi STACK_REG
   080a   7c 00             adci 0
   080c   b6                phi R6
                            
   080d   06                ldn R6              ;R4 = input string pointer
   080e   a4                plo R4
   080f   16                inc R6
   0810   06                ldn R6
   0811   b4                phi R4
                            
   0812   1f                inc STACK_REG
   0813   1f                inc STACK_REG
   0814   1f                inc STACK_REG
   0815   1f                inc STACK_REG
                        
   0816   c0 07 ac          lbr EXPRESSION_MAIN
                        
   0819                 EXPRESSION_SUB
   0819   14                inc R4
                            
   081a   f8 00             ldi 0
   081c   73                stxd
   081d   73                stxd
   081e   73                stxd
   081f   73                stxd
                            
   0820   8f                glo STACK_REG
   0821   a5                plo R5
   0822   9f                ghi STACK_REG
   0823   b5                phi R5
   0824   15                inc R5
                            
   0825   f8 94             ldi TERM.0
   0827   ad                plo CALL_REG
   0828   f8 06             ldi TERM.1
   082a   bd                phi CALL_REG
                            
   082b   f8 00             ldi FCALL.0
   082d   ae                plo FCALL_REG
   082e   de                sep FCALL_REG
                            
   082f   8f                glo STACK_REG
   0830   fc 07             adi 7
   0832   a6                plo R6
   0833   9f                ghi STACK_REG
   0834   7c 00             adci 0
   0836   b6                phi R6
                            
   0837   84                glo R4
   0838   56                str R6
   0839   16                inc R6
   083a   94                ghi R4
   083b   56                str R6
                            
   083c   8f                glo STACK_REG
   083d   a5                plo R5
   083e   9f                ghi STACK_REG
   083f   b5                phi R5
   0840   15                inc R5
                            
   0841   8f                glo STACK_REG
   0842   fc 05             adi 5
   0844   a6                plo R6
   0845   9f                ghi STACK_REG
   0846   7c 00             adci 0
   0848   b6                phi R6
                            
   0849   06                ldn R6
   084a   a4                plo R4
   084b   16                inc R6
   084c   06                ldn R6
   084d   b4                phi R4
                            
   084e   e4                sex R4
                            
   084f   f8 82             ldi 082h
   0851   fe                shl
   0852   a7                plo R7
                            
   0853                 EXPRESSION_SUB_LOOP
   0853   05                ldn R5
   0854   75                sdb
   0855   54                str R4
   0856   15                inc R5
   0857   60                irx
                            
   0858   27                dec R7
   0859   87                glo R7
   085a   3a 53             bnz EXPRESSION_SUB_LOOP
                            
   085c   ef                sex STACK_REG
                            
   085d   8f                glo STACK_REG
   085e   fc 07             adi 7
   0860   a6                plo R6
   0861   9f                ghi STACK_REG
   0862   7c 00             adci 0
   0864   b6                phi R6
                            
   0865   06                ldn R6
   0866   a4                plo R4
   0867   16                inc R6
   0868   06                ldn R6
   0869   b4                phi R4
                            
   086a   1f                inc STACK_REG
   086b   1f                inc STACK_REG
   086c   1f                inc STACK_REG
   086d   1f                inc STACK_REG
                        
   086e   c0 07 ac          lbr EXPRESSION_MAIN
                        
   0871                 EXPRESSION_NEXT_CYCLE    
   0871   14                inc R4
   0872   c0 07 ac          lbr EXPRESSION_MAIN
                            
   0875                 EXPRESSION_END
   0875   ef                sex STACK_REG
   0876   60                irx
                            
   0877   72                ldxa            ;restoring registers
   0878   a5                plo R5
   0879   72                ldxa
   087a   b5                phi R5
   087b   60                irx
   087c   60                irx
   087d   72                ldxa
   087e   a6                plo R6
   087f   72                ldxa
   0880   b6                phi R6
   0881   72                ldxa
   0882   a7                plo R7
   0883   f0                ldx
   0884   b7                phi R7
                            
   0885   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-HEXVIEWER------------------------------------
                        ;-R4-Start address-----------------------------
                        ;-R5-Count-------------------------------------
   0886                 HEX_BASE_SRT
   0886   0d 0a 42 61       db "\r\nBase address: 0x",0
   088a   73 65 20 61   
   088e   64 64 72 65   
   0892   73 73 3a 20   
   0896   30 78 00      
   0899                 HEX_HEADER_STR
   0899   0d 0a 0d 0a       db "\r\n\r\nOffset  00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F  String\r\n"
   089d   4f 66 66 73   
   08a1   65 74 20 20   
   08a5   30 30 20 30   
   08a9   31 20 30 32   
   08ad   20 30 33 20   
   08b1   30 34 20 30   
   08b5   35 20 30 36   
   08b9   20 30 37 20   
   08bd   30 38 20 30   
   08c1   39 20 30 41   
   08c5   20 30 42 20   
   08c9   30 43 20 30   
   08cd   44 20 30 45   
   08d1   20 30 46 20   
   08d5   20 53 74 72   
   08d9   69 6e 67 0d   
   08dd   0a            
   08de   2d 2d 2d 2d       db         "-------------------------------------------------------------------------\r\n",0
   08e2   2d 2d 2d 2d   
   08e6   2d 2d 2d 2d   
   08ea   2d 2d 2d 2d   
   08ee   2d 2d 2d 2d   
   08f2   2d 2d 2d 2d   
   08f6   2d 2d 2d 2d   
   08fa   2d 2d 2d 2d   
   08fe   2d 2d 2d 2d   
   0902   2d 2d 2d 2d   
   0906   2d 2d 2d 2d   
   090a   2d 2d 2d 2d   
   090e   2d 2d 2d 2d   
   0912   2d 2d 2d 2d   
   0916   2d 2d 2d 2d   
   091a   2d 2d 2d 2d   
   091e   2d 2d 2d 2d   
   0922   2d 2d 2d 2d   
   0926   2d 0d 0a 00   
                        ;              "0000:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................"
   092a                 HEX_LINECNT_SEPARATOR
   092a   3a 20 20 20       db ":   ",0
   092e   00            
                            
   092f                 HEXVIEWER
   092f   ef                sex STACK_REG
                            
   0930   f8 00             ldi 0
   0932   73                stxd
   0933   73                stxd
   0934   94                ghi R4
   0935   73                stxd
   0936   84                glo R4
   0937   73                stxd    ;+17 current address
                            
   0938   f8 00             ldi 0
   093a   73                stxd
   093b   73                stxd
   093c   94                ghi R4
   093d   73                stxd
   093e   84                glo R4
   093f   73                stxd    ;+13 start address
                            
   0940   f8 00             ldi 0
   0942   73                stxd
   0943   73                stxd
   0944   95                ghi R5
   0945   73                stxd
   0946   85                glo R5
   0947   73                stxd    ;+9 last address
                            
   0948   f8 00             ldi 0
   094a   73                stxd
   094b   73                stxd
   094c   73                stxd
   094d   73                stxd    ;+5 line counter
                            
   094e   73                stxd
   094f   73                stxd
   0950   73                stxd
   0951   73                stxd    ;+1 temp for hex digits
                            
   0952   8f                glo STACK_REG
   0953   fc 0d             adi 13
   0955   a4                plo R4
   0956   9f                ghi STACK_REG
   0957   7c 00             adci 0
   0959   b4                phi R4
                            
   095a   8f                glo STACK_REG
   095b   fc 09             adi 9
   095d   a6                plo R6
   095e   9f                ghi STACK_REG
   095f   7c 00             adci 0
   0961   b6                phi R6
                            
   0962   e4                sex R4
                            
   0963   85                glo R5      ;adding R5 value to start address and store it to last address
   0964   f4                add
   0965   56                str R6
   0966   60                irx
   0967   16                inc R6
   0968   95                ghi R5
   0969   74                adc
   096a   56                str R6
   096b   60                irx
   096c   16                inc R6
   096d   f8 00             ldi 0
   096f   74                adc
   0970   56                str R6
                            
   0971   f8 86             ldi HEX_BASE_SRT.0     ;prepare to print base address
   0973   a6                plo R6
   0974   f8 08             ldi HEX_BASE_SRT.1
   0976   b6                phi R6
                        	
   0977   f8 52             ldi PRINT.0         ;prepare to call PRINT
   0979   ad                plo CALL_REG
   097a   f8 01             ldi PRINT.1
   097c   bd                phi CALL_REG
                            
   097d   f8 00             ldi FCALL.0
   097f   ae                plo FCALL_REG
   0980   de                sep FCALL_REG
                            
   0981   8f                glo STACK_REG       ;prepare to print the address in hex
   0982   fc 0d             adi 13
   0984   a4                plo R4
   0985   9f                ghi STACK_REG
   0986   7c 00             adci 0
   0988   b4                phi R4
                            
   0989   f8 04             ldi 4               ;with 4 digits
   098b   a5                plo R5
                            
   098c   f8 22             ldi PRINT_HEX.0     ;prepare to call PRINT_HEX
   098e   ad                plo CALL_REG
   098f   f8 04             ldi PRINT_HEX.1
   0991   bd                phi CALL_REG
                            
   0992   f8 00             ldi FCALL.0
   0994   ae                plo FCALL_REG
   0995   de                sep FCALL_REG
                            
   0996   f8 99             ldi HEX_HEADER_STR.0     ;prepare to print the header
   0998   a6                plo R6
   0999   f8 08             ldi HEX_HEADER_STR.1
   099b   b6                phi R6
                        	
   099c   f8 52             ldi PRINT.0         ;prepare to call PRINT
   099e   ad                plo CALL_REG
   099f   f8 01             ldi PRINT.1
   09a1   bd                phi CALL_REG
                            
   09a2   f8 00             ldi FCALL.0
   09a4   ae                plo FCALL_REG
   09a5   de                sep FCALL_REG
                        
   09a6                 HEXVIEWER_MAINLOOP
   09a6   8f                glo STACK_REG       ;prepare to print the first address in hex
   09a7   fc 05             adi 5
   09a9   a4                plo R4
   09aa   9f                ghi STACK_REG
   09ab   7c 00             adci 0
   09ad   b4                phi R4
                            
   09ae   f8 04             ldi 4               ;with 4 digits
   09b0   a5                plo R5
                            
   09b1   f8 22             ldi PRINT_HEX.0     ;prepare to call PRINT_HEX
   09b3   ad                plo CALL_REG
   09b4   f8 04             ldi PRINT_HEX.1
   09b6   bd                phi CALL_REG
                            
   09b7   f8 00             ldi FCALL.0
   09b9   ae                plo FCALL_REG
   09ba   de                sep FCALL_REG
                            
   09bb   f8 2a             ldi HEX_LINECNT_SEPARATOR.0     ;prepare to print address separator
   09bd   a6                plo R6
   09be   f8 09             ldi HEX_LINECNT_SEPARATOR.1
   09c0   b6                phi R6
                        	
   09c1   f8 52             ldi PRINT.0         ;prepare to call PRINT
   09c3   ad                plo CALL_REG
   09c4   f8 01             ldi PRINT.1
   09c6   bd                phi CALL_REG
                            
   09c7   f8 00             ldi FCALL.0
   09c9   ae                plo FCALL_REG
   09ca   de                sep FCALL_REG
                            
   09cb   f8 10             ldi 16      ;set R8 low to 16 for counting the bytes
   09cd   a8                plo R8
                           
   09ce                 HEXVIEWER_PRINT_HEX_LOOP
   09ce   8f                glo STACK_REG       ;set R4 pointer to current address
   09cf   fc 11             adi 17
   09d1   a4                plo R4
   09d2   9f                ghi STACK_REG
   09d3   7c 00             adci 0
   09d5   b4                phi R4
                            
   09d6   8f                glo STACK_REG       ;set R5 pointer to last address
   09d7   fc 09             adi 9
   09d9   a5                plo R5
   09da   9f                ghi STACK_REG
   09db   7c 00             adci 0
   09dd   b5                phi R5
                        
   09de   e4                sex R4          ;check if current address is >= last address
                            
   09df   45                lda R5
   09e0   f5                sd
   09e1   60                irx
                            
   09e2   45                lda R5
   09e3   75                sdb
   09e4   60                irx
                            
   09e5   45                lda R5
   09e6   75                sdb
   09e7   60                irx
                            
   09e8   05                ldn R5
   09e9   75                sdb
                            
   09ea   c3 0a 12          lbdf HEXVIEWER_PRINT_HEX_SPACES   ;if current address >= last address then 
                        
   09ed   8f                glo STACK_REG       ;set R4 pointer to current address
   09ee   fc 11             adi 17
   09f0   a4                plo R4
   09f1   9f                ghi STACK_REG
   09f2   7c 00             adci 0
   09f4   b4                phi R4
                            
   09f5   44                lda R4              ;get current address and load it in R5
   09f6   a5                plo R5
   09f7   44                lda R4
   09f8   b5                phi R5
                            
   09f9   05                ldn R5              ;get data from R5 address
   09fa   a5                plo R5              ;store data in R5 low
                            
   09fb   8f                glo STACK_REG       ;set R4 pointer to temp
   09fc   a4                plo R4
   09fd   9f                ghi STACK_REG
   09fe   b4                phi R4
   09ff   14                inc R4
                            
   0a00   85                glo R5              ;get data from R5 low
   0a01   54                str R4              ;store data to temp
                           
   0a02   f8 02             ldi 2
   0a04   a5                plo R5              ;set R5 low to 2 digits
                            
   0a05   f8 22             ldi PRINT_HEX.0     ;prepare to call PRINT_HEX
   0a07   ad                plo CALL_REG
   0a08   f8 04             ldi PRINT_HEX.1
   0a0a   bd                phi CALL_REG
                            
   0a0b   f8 00             ldi FCALL.0
   0a0d   ae                plo FCALL_REG
   0a0e   de                sep FCALL_REG
                            
   0a0f   c0 0a 22          lbr HEXVIEWER_NEXT_HEX
                            
   0a12                 HEXVIEWER_PRINT_HEX_SPACES
   0a12   f8 2c             ldi HEX_LINECNT_SEPARATOR+2.0     ;prepare to print two space
   0a14   a6                plo R6
   0a15   f8 09             ldi HEX_LINECNT_SEPARATOR+2.1
   0a17   b6                phi R6
                        	
   0a18   f8 52             ldi PRINT.0         ;prepare to call PRINT
   0a1a   ad                plo CALL_REG
   0a1b   f8 01             ldi PRINT.1
   0a1d   bd                phi CALL_REG
                            
   0a1e   f8 00             ldi FCALL.0
   0a20   ae                plo FCALL_REG
   0a21   de                sep FCALL_REG
                        
   0a22                 HEXVIEWER_NEXT_HEX
   0a22   f8 2d             ldi HEX_LINECNT_SEPARATOR+3.0     ;prepare to print a space
   0a24   a6                plo R6
   0a25   f8 09             ldi HEX_LINECNT_SEPARATOR+3.1
   0a27   b6                phi R6
                        	
   0a28   f8 52             ldi PRINT.0         ;prepare to call PRINT
   0a2a   ad                plo CALL_REG
   0a2b   f8 01             ldi PRINT.1
   0a2d   bd                phi CALL_REG
                            
   0a2e   f8 00             ldi FCALL.0
   0a30   ae                plo FCALL_REG
   0a31   de                sep FCALL_REG
                            
   0a32   8f                glo STACK_REG       ;set R4 pointer to current address
   0a33   fc 11             adi 17
   0a35   a4                plo R4
   0a36   9f                ghi STACK_REG
   0a37   7c 00             adci 0
   0a39   b4                phi R4
                            
   0a3a   e4                sex R4
   0a3b   f8 01             ldi 1
   0a3d   f4                add
   0a3e   54                str R4
   0a3f   60                irx
                            
   0a40   f8 00             ldi 0
   0a42   74                adc
   0a43   54                str R4
   0a44   60                irx
                            
   0a45   f8 00             ldi 0
   0a47   74                adc
   0a48   54                str R4
   0a49   60                irx
                            
   0a4a   f8 00             ldi 0
   0a4c   74                adc
   0a4d   54                str R4
                            
   0a4e   28                dec R8
   0a4f   88                glo R8
   0a50   ca 09 ce          lbnz HEXVIEWER_PRINT_HEX_LOOP
                            
   0a53   f8 2d             ldi HEX_LINECNT_SEPARATOR+3.0     ;prepare to print a space
   0a55   a6                plo R6
   0a56   f8 09             ldi HEX_LINECNT_SEPARATOR+3.1
   0a58   b6                phi R6
                        	
   0a59   f8 52             ldi PRINT.0         ;prepare to call PRINT
   0a5b   ad                plo CALL_REG
   0a5c   f8 01             ldi PRINT.1
   0a5e   bd                phi CALL_REG
                            
   0a5f   f8 00             ldi FCALL.0
   0a61   ae                plo FCALL_REG
   0a62   de                sep FCALL_REG
                            
   0a63   8f                glo STACK_REG       ;set R4 pointer to current address
   0a64   fc 11             adi 17
   0a66   a4                plo R4
   0a67   9f                ghi STACK_REG
   0a68   7c 00             adci 0
   0a6a   b4                phi R4
                            
   0a6b   8f                glo STACK_REG       ;set R5 pointer to start address
   0a6c   fc 0d             adi 13
   0a6e   a5                plo R5
   0a6f   9f                ghi STACK_REG
   0a70   7c 00             adci 0
   0a72   b5                phi R5
                            
   0a73   e5                sex R5
                            
   0a74   72                ldxa
   0a75   54                str R4
   0a76   14                inc R4
                            
   0a77   72                ldxa
   0a78   54                str R4
   0a79   14                inc R4
                            
   0a7a   72                ldxa
   0a7b   54                str R4
   0a7c   14                inc R4
                            
   0a7d   72                ldxa
   0a7e   54                str R4
                            
   0a7f   f8 10             ldi 16      ;set R8 low to 16 for counting the bytes
   0a81   a8                plo R8
                        
   0a82                 HEXVIEWER_PRINT_STR_LOOP
   0a82   8f                glo STACK_REG       ;set R4 pointer to current address
   0a83   fc 11             adi 17
   0a85   a4                plo R4
   0a86   9f                ghi STACK_REG
   0a87   7c 00             adci 0
   0a89   b4                phi R4
                            
   0a8a   8f                glo STACK_REG       ;set R5 pointer to last address
   0a8b   fc 09             adi 9
   0a8d   a5                plo R5
   0a8e   9f                ghi STACK_REG
   0a8f   7c 00             adci 0
   0a91   b5                phi R5
                        
   0a92   e4                sex R4          ;check if current address is <= last address
                            
   0a93   45                lda R5
   0a94   f5                sd
   0a95   60                irx
                            
   0a96   45                lda R5
   0a97   75                sdb
   0a98   60                irx
                            
   0a99   45                lda R5
   0a9a   75                sdb
   0a9b   60                irx
                            
   0a9c   05                ldn R5
   0a9d   75                sdb
                            
   0a9e   33 d3             bpz HEXVIEWER_PRINT_STR_SPACE   ;if current address >= last address then 
                            
   0aa0   8f                glo STACK_REG       ;set R4 pointer to current address
   0aa1   fc 11             adi 17
   0aa3   a4                plo R4
   0aa4   9f                ghi STACK_REG
   0aa5   7c 00             adci 0
   0aa7   b4                phi R4
                            
   0aa8   44                lda R4              ;get current address and load it in R5
   0aa9   a5                plo R5
   0aaa   44                lda R4
   0aab   b5                phi R5
                            
   0aac   05                ldn R5              ;get data from R5 address
   0aad   a5                plo R5              ;store data in R5 low
                            
   0aae   ff 20             smi 32
   0ab0   3b c4             bm HEXVIEWER_PRINT_STR_DOT
   0ab2   ff 5f             smi 95
   0ab4   33 c4             bpz HEXVIEWER_PRINT_STR_DOT
                            
   0ab6   85                glo R5
   0ab7   b4                phi R4
                            
   0ab8   f8 13             ldi SERIAL_SEND_START.0         ;prepare to call SERIAL_SEND_START to send one char
   0aba   ad                plo CALL_REG
   0abb   f8 01             ldi SERIAL_SEND_START.1
   0abd   bd                phi CALL_REG
                            
   0abe   f8 00             ldi FCALL.0
   0ac0   ae                plo FCALL_REG
   0ac1   de                sep FCALL_REG
                            
   0ac2   30 e0             br HEXVIEWER_NEXT_STR
                            
   0ac4                 HEXVIEWER_PRINT_STR_DOT
   0ac4   f8 2e             ldi 46
   0ac6   b4                phi R4
                            
   0ac7   f8 13             ldi SERIAL_SEND_START.0         ;prepare to call SERIAL_SEND_START to send one char
   0ac9   ad                plo CALL_REG
   0aca   f8 01             ldi SERIAL_SEND_START.1
   0acc   bd                phi CALL_REG
                            
   0acd   f8 00             ldi FCALL.0
   0acf   ae                plo FCALL_REG
   0ad0   de                sep FCALL_REG
                            
   0ad1   30 e0             br HEXVIEWER_NEXT_STR
                        
   0ad3                 HEXVIEWER_PRINT_STR_SPACE
   0ad3   f8 20             ldi 32
   0ad5   b4                phi R4
                            
   0ad6   f8 13             ldi SERIAL_SEND_START.0         ;prepare to call SERIAL_SEND_START to send one char
   0ad8   ad                plo CALL_REG
   0ad9   f8 01             ldi SERIAL_SEND_START.1
   0adb   bd                phi CALL_REG
                            
   0adc   f8 00             ldi FCALL.0
   0ade   ae                plo FCALL_REG
   0adf   de                sep FCALL_REG
                            
   0ae0                 HEXVIEWER_NEXT_STR
   0ae0   8f                glo STACK_REG       ;set R4 pointer to current address
   0ae1   fc 11             adi 17
   0ae3   a4                plo R4
   0ae4   9f                ghi STACK_REG
   0ae5   7c 00             adci 0
   0ae7   b4                phi R4
                            
   0ae8   e4                sex R4
   0ae9   f8 01             ldi 1
   0aeb   f4                add
   0aec   54                str R4
   0aed   60                irx
                            
   0aee   f8 00             ldi 0
   0af0   74                adc
   0af1   54                str R4
   0af2   60                irx
                            
   0af3   f8 00             ldi 0
   0af5   74                adc
   0af6   54                str R4
   0af7   60                irx
                            
   0af8   f8 00             ldi 0
   0afa   74                adc
   0afb   54                str R4
                            
   0afc   28                dec R8
   0afd   88                glo R8
   0afe   3a 82             bnz HEXVIEWER_PRINT_STR_LOOP
                            
   0b00   f8 f3             ldi NEW_LINE.0     ;prepare to print a space
   0b02   a6                plo R6
   0b03   f8 0c             ldi NEW_LINE.1
   0b05   b6                phi R6
                        	
   0b06   f8 52             ldi PRINT.0         ;prepare to call PRINT
   0b08   ad                plo CALL_REG
   0b09   f8 01             ldi PRINT.1
   0b0b   bd                phi CALL_REG
                            
   0b0c   f8 00             ldi FCALL.0
   0b0e   ae                plo FCALL_REG
   0b0f   de                sep FCALL_REG
                            
   0b10   8f                glo STACK_REG       ;set R4 pointer to current address
   0b11   fc 11             adi 17
   0b13   a4                plo R4
   0b14   9f                ghi STACK_REG
   0b15   7c 00             adci 0
   0b17   b4                phi R4
                            
   0b18   8f                glo STACK_REG       ;set R5 pointer to last address
   0b19   fc 09             adi 9
   0b1b   a5                plo R5
   0b1c   9f                ghi STACK_REG
   0b1d   7c 00             adci 0
   0b1f   b5                phi R5
                        
   0b20   e4                sex R4          ;check if current address is >= last address
                            
   0b21   45                lda R5
   0b22   f5                sd
   0b23   60                irx
                            
   0b24   45                lda R5
   0b25   75                sdb
   0b26   60                irx
                            
   0b27   45                lda R5
   0b28   75                sdb
   0b29   60                irx
                            
   0b2a   05                ldn R5
   0b2b   75                sdb
                            
   0b2c   33 69             bpz HEXVIEWER_END
                            
   0b2e   8f                glo STACK_REG       ;set R4 pointer to line counter
   0b2f   fc 05             adi 5
   0b31   a4                plo R4
   0b32   9f                ghi STACK_REG
   0b33   7c 00             adci 0
   0b35   b4                phi R4
                            
   0b36   e4                sex R4
                            
   0b37   f8 10             ldi 16
   0b39   f4                add
   0b3a   54                str R4
   0b3b   60                irx
                            
   0b3c   f8 00             ldi 0
   0b3e   74                adc
   0b3f   54                str R4
   0b40   60                irx
                            
   0b41   f8 00             ldi 0
   0b43   74                adc
   0b44   54                str R4
   0b45   60                irx
                            
   0b46   f8 00             ldi 0
   0b48   74                adc
   0b49   54                str R4
                            
   0b4a   8f                glo STACK_REG       ;set R4 pointer to current address
   0b4b   fc 11             adi 17
   0b4d   a4                plo R4
   0b4e   9f                ghi STACK_REG
   0b4f   7c 00             adci 0
   0b51   b4                phi R4
                            
   0b52   8f                glo STACK_REG       ;set R5 pointer to start address
   0b53   fc 0d             adi 13
   0b55   a5                plo R5
   0b56   9f                ghi STACK_REG
   0b57   7c 00             adci 0
   0b59   b5                phi R5
                            
   0b5a   e4                sex R4
                            
   0b5b   72                ldxa
   0b5c   55                str R5
   0b5d   15                inc R5
                            
   0b5e   72                ldxa
   0b5f   55                str R5
   0b60   15                inc R5
                            
   0b61   72                ldxa
   0b62   55                str R5
   0b63   15                inc R5
                            
   0b64   72                ldxa
   0b65   55                str R5
                            
   0b66   c0 09 a6          lbr HEXVIEWER_MAINLOOP
                        
   0b69                 HEXVIEWER_END
   0b69   8f                glo STACK_REG
   0b6a   fc 14             adi 20
   0b6c   af                plo STACK_REG
   0b6d   9f                ghi STACK_REG
   0b6e   7c 00             adci 0
   0b70   bf                phi STACK_REG
                            
   0b71   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-HEXVIEW_CALLER-------------------------------
   0b72                 HEXVIEW_CALLER
   0b72   ef                sex STACK_REG
                            
   0b73   f8 00             ldi 0
   0b75   73                stxd
   0b76   73                stxd
   0b77   73                stxd
   0b78   73                stxd    ;+5 first arg
                            
   0b79   73                stxd
   0b7a   73                stxd
   0b7b   f8 01             ldi 1
   0b7d   73                stxd
   0b7e   f8 00             ldi 0
   0b80   73                stxd    ;+1 second arg
                            
   0b81   8f                glo STACK_REG
   0b82   fc 05             adi 5
   0b84   a5                plo R5
   0b85   9f                ghi STACK_REG
   0b86   7c 00             adci 0
   0b88   b5                phi R5
                            
   0b89   f8 8b             ldi EXPRESSION.0
   0b8b   ad                plo CALL_REG
   0b8c   f8 07             ldi EXPRESSION.1
   0b8e   bd                phi CALL_REG
                            
   0b8f   f8 00             ldi FCALL.0
   0b91   ae                plo FCALL_REG
   0b92   de                sep FCALL_REG
                            
   0b93   44                lda R4
   0b94   fb 2c             xri 44
   0b96   32 ab             bz HEXVIEW_CALLER_NEXTARG
   0b98   24                dec R4
   0b99   44                lda R4
   0b9a   32 ba             bz HEXVIEW_CALLER_EXEC
   0b9c   24                dec R4
                            
   0b9d   04                ldn R4
   0b9e   b4                phi R4
                            
   0b9f   f8 13             ldi SERIAL_SEND_START.0
   0ba1   ad                plo CALL_REG
   0ba2   f8 01             ldi SERIAL_SEND_START.1
   0ba4   bd                phi CALL_REG
                            
   0ba5   f8 00             ldi FCALL.0
   0ba7   ae                plo FCALL_REG
   0ba8   de                sep FCALL_REG
                            
   0ba9   30 d9             br HEXVIEW_CALLER_END
                            
   0bab                 HEXVIEW_CALLER_NEXTARG
   0bab   8f                glo STACK_REG
   0bac   a5                plo R5
   0bad   9f                ghi STACK_REG
   0bae   b5                phi R5
   0baf   15                inc R5
                            
   0bb0   f8 8b             ldi EXPRESSION.0
   0bb2   ad                plo CALL_REG
   0bb3   f8 07             ldi EXPRESSION.1
   0bb5   bd                phi CALL_REG
                            
   0bb6   f8 00             ldi FCALL.0
   0bb8   ae                plo FCALL_REG
   0bb9   de                sep FCALL_REG
                            
   0bba                 HEXVIEW_CALLER_EXEC
   0bba   8f                glo STACK_REG
   0bbb   fc 05             adi 5
   0bbd   a5                plo R5
   0bbe   9f                ghi STACK_REG
   0bbf   7c 00             adci 0
   0bc1   b5                phi R5
                            
   0bc2   45                lda R5
   0bc3   a4                plo R4
   0bc4   45                lda R5
   0bc5   b4                phi R4
                            
   0bc6   8f                glo STACK_REG
   0bc7   a6                plo R6
   0bc8   9f                ghi STACK_REG
   0bc9   b6                phi R6
   0bca   16                inc R6
                            
   0bcb   46                lda R6
   0bcc   a5                plo R5
   0bcd   46                lda R6
   0bce   b5                phi R5
                            
   0bcf   f8 2f             ldi HEXVIEWER.0
   0bd1   ad                plo CALL_REG
   0bd2   f8 09             ldi HEXVIEWER.1
   0bd4   bd                phi CALL_REG
                            
   0bd5   f8 00             ldi FCALL.0
   0bd7   ae                plo FCALL_REG
   0bd8   de                sep FCALL_REG
                            
   0bd9                 HEXVIEW_CALLER_END
   0bd9   8f                glo STACK_REG
   0bda   fc 08             adi 8
   0bdc   af                plo STACK_REG
   0bdd   9f                ghi STACK_REG
   0bde   7c 00             adci 0
   0be0   bf                phi STACK_REG
                            
   0be1   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-TEST FUNCTION--------------------------------
   0be2                 TEST_STR1
   0be2   52 65 73 75       db "Result: ",0
   0be6   6c 74 3a 20   
   0bea   00            
                        
   0beb                 FUNC_TEST
   0beb   ef                sex STACK_REG
                            
   0bec   f8 00             ldi 0
   0bee   73                stxd
   0bef   73                stxd
   0bf0   73                stxd
   0bf1   73                stxd    ;+1 result
                            
   0bf2   8f                glo STACK_REG
   0bf3   a5                plo R5
   0bf4   9f                ghi STACK_REG
   0bf5   b5                phi R5
   0bf6   15                inc R5
                            
   0bf7   f8 8b             ldi EXPRESSION.0
   0bf9   ad                plo CALL_REG
   0bfa   f8 07             ldi EXPRESSION.1
   0bfc   bd                phi CALL_REG
                            
   0bfd   f8 00             ldi FCALL.0
   0bff   ae                plo FCALL_REG
   0c00   de                sep FCALL_REG
                            
   0c01   8f                glo STACK_REG
   0c02   a4                plo R4
   0c03   9f                ghi STACK_REG
   0c04   b4                phi R4
   0c05   14                inc R4
                        
   0c06   f8 00             ldi 0
   0c08   a5                plo R5
                            
   0c09   f8 ae             ldi PRINT_DEC.0     ;prepare to print the Decimal result.
   0c0b   ad                plo CALL_REG
   0c0c   f8 04             ldi PRINT_DEC.1
   0c0e   bd                phi CALL_REG
                            
   0c0f   f8 00             ldi FCALL.0
   0c11   ae                plo FCALL_REG
   0c12   de                sep FCALL_REG
                            
   0c13   f8 f3             ldi NEW_LINE.0  ;print newline
   0c15   a6                plo R6
   0c16   f8 0c             ldi NEW_LINE.1
   0c18   b6                phi R6
                        	
   0c19   f8 52             ldi PRINT.0     ;prepare to call PRINT
   0c1b   ad                plo CALL_REG
   0c1c   f8 01             ldi PRINT.1
   0c1e   bd                phi CALL_REG
                            
   0c1f   f8 00             ldi FCALL.0
   0c21   ae                plo FCALL_REG
   0c22   de                sep FCALL_REG
                            
   0c23   8f                glo STACK_REG
   0c24   fc 04             adi 4
   0c26   af                plo STACK_REG
   0c27   9f                ghi STACK_REG
   0c28   7c 00             adci 0
   0c2a   bf                phi STACK_REG
                            
   0c2b   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-COMMAND-CHECK--------------------------------
                        ;-R4-input string------------------------------
   0c2c                 COMMAND_CHECK
   0c2c   f8 06             ldi COMMAND_FUNC_LIST.0
   0c2e   a5                plo R5
   0c2f   f8 0d             ldi COMMAND_FUNC_LIST.1
   0c31   b5                phi R5
                            
   0c32   f8 f6             ldi COMMAND_LIST.0
   0c34   a9                plo R9
   0c35   f8 0c             ldi COMMAND_LIST.1
   0c37   b9                phi R9
                            
   0c38   84                glo R4
   0c39   a6                plo R6
   0c3a   94                ghi R4
   0c3b   b6                phi R6
                            
   0c3c                 COMMAND_CHECK_GOTOSPACE
   0c3c   46                lda R6
   0c3d   c2 0c 48          lbz COMMAND_CHECK_INSERTZERO
   0c40   fb 20             xri 32
   0c42   c2 0c 49          lbz COMMAND_CHECK_REPLACESPACE
   0c45   c0 0c 3c          lbr COMMAND_CHECK_GOTOSPACE
                            
   0c48                 COMMAND_CHECK_INSERTZERO
   0c48   56                str R6
   0c49                 COMMAND_CHECK_REPLACESPACE
   0c49   26                dec R6
   0c4a   56                str R6
   0c4b   16                inc R6
                            
   0c4c                 COMMAND_CHECK_LOOP
   0c4c   84                glo R4
   0c4d   a8                plo R8
   0c4e   94                ghi R4
   0c4f   b8                phi R8
                            
   0c50   09                ldn R9
   0c51   c2 0c 78          lbz COMMAND_CHECK_END
                        
   0c54   f8 c0             ldi STR_COMPARATOR.0
   0c56   ad                plo CALL_REG
   0c57   f8 01             ldi STR_COMPARATOR.1
   0c59   bd                phi CALL_REG
                            
   0c5a   f8 00             ldi FCALL.0
   0c5c   ae                plo FCALL_REG
   0c5d   de                sep FCALL_REG
                            
   0c5e   8a                glo R10
   0c5f   ca 0c 6b          lbnz COMMAND_CHECK_EXEC
                            
   0c62                 COMMAND_CHECK_STR_END
   0c62   09                ldn R9
   0c63   19                inc R9
   0c64   3a 62             bnz COMMAND_CHECK_STR_END
                            
   0c66   15                inc R5
   0c67   15                inc R5
   0c68   c0 0c 4c          lbr COMMAND_CHECK_LOOP
                            
   0c6b                 COMMAND_CHECK_EXEC
   0c6b   86                glo R6
   0c6c   a4                plo R4
   0c6d   96                ghi R6
   0c6e   b4                phi R4
                            
   0c6f   45                lda R5
   0c70   ad                plo CALL_REG
   0c71   05                ldn R5
   0c72   bd                phi CALL_REG
                            
   0c73   f8 00             ldi FCALL.0
   0c75   ae                plo FCALL_REG
   0c76   de                sep FCALL_REG
                            
   0c77   de                sep RETURN
                            
   0c78                 COMMAND_CHECK_END
   0c78   f8 0a             ldi UNKNOWN_COMMAND.0  ;set the address of the boot msg in R6
   0c7a   a6                plo R6
   0c7b   f8 0d             ldi UNKNOWN_COMMAND.1
   0c7d   b6                phi R6
                        	
   0c7e   f8 52             ldi PRINT.0     ;prepare to call PRINT
   0c80   ad                plo CALL_REG
   0c81   f8 01             ldi PRINT.1
   0c83   bd                phi CALL_REG
                            
   0c84   f8 00             ldi FCALL.0
   0c86   ae                plo FCALL_REG
   0c87   de                sep FCALL_REG   ;call PRINT
                            
   0c88   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-MAIN-----------------------------------------
   0c89                 MAIN_PROGRAM
   0c89   f8 cc             ldi BOOT_MSG.0  ;set the address of the boot msg in R6
   0c8b   a6                plo R6
   0c8c   f8 0c             ldi BOOT_MSG.1
   0c8e   b6                phi R6
                        	
   0c8f   f8 52             ldi PRINT.0     ;prepare to call PRINT
   0c91   ad                plo CALL_REG
   0c92   f8 01             ldi PRINT.1
   0c94   bd                phi CALL_REG
                            
   0c95   f8 00             ldi FCALL.0
   0c97   ae                plo FCALL_REG
   0c98   de                sep FCALL_REG   ;call PRINT
                        
   0c99                 ASK_INPUT
   0c99   f8 00             ldi INPUT_BUFF.0    ;load the address of the buffer to R7
   0c9b   a7                plo R7
   0c9c   f8 20             ldi INPUT_BUFF.1
   0c9e   b7                phi R7
                            
   0c9f   f8 68             ldi READLINE.0      ;prepare to call READLINE
   0ca1   ad                plo CALL_REG
   0ca2   f8 01             ldi READLINE.1
   0ca4   bd                phi CALL_REG
                            
   0ca5   f8 00             ldi FCALL.0
   0ca7   ae                plo FCALL_REG
   0ca8   de                sep FCALL_REG       ;call READLINE
                            
                            ;Program goes here
   0ca9   f8 00             ldi INPUT_BUFF.0
   0cab   a4                plo R4
   0cac   f8 20             ldi INPUT_BUFF.1
   0cae   b4                phi R4
                            
   0caf   f8 2c             ldi COMMAND_CHECK.0      ;prepare to call COMMAND_CHECK
   0cb1   ad                plo CALL_REG
   0cb2   f8 0c             ldi COMMAND_CHECK.1
   0cb4   bd                phi CALL_REG
                            
   0cb5   f8 00             ldi FCALL.0
   0cb7   ae                plo FCALL_REG
   0cb8   de                sep FCALL_REG
                            ;Program ends here
                            
   0cb9   f8 ef             ldi ASK_IN.0        ;load the ASK_IN string's address to R6
   0cbb   a6                plo R6
   0cbc   f8 0c             ldi ASK_IN.1
   0cbe   b6                phi R6
                            
   0cbf   f8 52             ldi PRINT.0         ;prepare to call PRINT
   0cc1   ad                plo CALL_REG
   0cc2   f8 01             ldi PRINT.1
   0cc4   bd                phi CALL_REG
                            
   0cc5   f8 00             ldi FCALL.0
   0cc7   ae                plo FCALL_REG
   0cc8   de                sep FCALL_REG       ;call PRINT
                        	
   0cc9   c0 0c 99          lbr ASK_INPUT
                        ;----------------------------------------------
                        
                        ;-CONSTANT DATA--------------------------------
   0ccc                 BOOT_MSG
   0ccc   5a 4c 45 44       db "ZLED - CDP1802 Terminal.\r\n\r\nREADY\r\n"
   0cd0   20 2d 20 43   
   0cd4   44 50 31 38   
   0cd8   30 32 20 54   
   0cdc   65 72 6d 69   
   0ce0   6e 61 6c 2e   
   0ce4   0d 0a 0d 0a   
   0ce8   52 45 41 44   
   0cec   59 0d 0a      
   0cef                 ASK_IN
   0cef   0d 0a 3e 00       db "\r\n>",0
   0cf3                 NEW_LINE
   0cf3   0d 0a 00          db "\r\n",0
   0cf6                 COMMAND_LIST
   0cf6   70 72 69 6e       db "print",0,"mem_view",0,0
   0cfa   74 00 6d 65   
   0cfe   6d 5f 76 69   
   0d02   65 77 00 00   
   0d06                 COMMAND_FUNC_LIST
   0d06   eb 0b             db FUNC_TEST.0,FUNC_TEST.1
   0d08   72 0b             db HEXVIEW_CALLER.0,HEXVIEW_CALLER.1
   0d0a                 UNKNOWN_COMMAND
   0d0a   55 6e 6b 6e       db "Unknown command.\r\n",0
   0d0e   6f 77 6e 20   
   0d12   63 6f 6d 6d   
   0d16   61 6e 64 2e   
   0d1a   0d 0a 00      
   0d1d                 TEST_RESP
   0d1d   45 76 65 72       db "Everything is ok!",0
   0d21   79 74 68 69   
   0d25   6e 67 20 69   
   0d29   73 20 6f 6b   
   0d2d   21 00         
                        
   0d2f                     end
0cef  ASK_IN        0c99  ASK_INPUT     0164  BACKSPACE_ACTION    0ccc  BOOT_MSG  
000d  CALL_REG      0283  CARRY_SHIFTING    0c2c  COMMAND_CHECK    0c78  COMMAND_CHECK_END
0c6b  COMMAND_CHECK_EXEC    0c3c  COMMAND_CHECK_GOTOSPACE    0c48  COMMAND_CHECK_INSERTZERO    0c4c  COMMAND_CHECK_LOOP
0c49  COMMAND_CHECK_REPLACESPACE    0c62  COMMAND_CHECK_STR_END    0d06  COMMAND_FUNC_LIST    0cf6  COMMAND_LIST
028d  DIVISION_LOOP    3000  DMA_ADDRESS    0013  DMA_INIT      0000  DMA_REG   
017a  END_LINE      078b  EXPRESSION    07c0  EXPRESSION_ADD    07fa  EXPRESSION_ADD_LOOP
0875  EXPRESSION_END    07ac  EXPRESSION_MAIN    0871  EXPRESSION_NEXT_CYCLE    079c  EXPRESSION_SKIPSPACES
0819  EXPRESSION_SUB    0853  EXPRESSION_SUB_LOOP    0601  FACTOR        0665  FACTOR_END
068b  FACTOR_FINAL    0680  FACTOR_INVERTING    060d  FACTOR_MAIN    0656  FACTOR_NEGATE
0661  FACTOR_NEXT_CYCLE    063d  FACTOR_PARENTHESIS    0648  FACTOR_PARENTHESIS_SKIPSPACES    0100  FCALL     
000e  FCALL_REG     031f  FINAL_CHECK    0343  FINAL_CHECK2    010a  FRETURN   
0beb  FUNC_TEST     092f  HEXVIEWER     0b69  HEXVIEWER_END    09a6  HEXVIEWER_MAINLOOP
0a22  HEXVIEWER_NEXT_HEX    0ae0  HEXVIEWER_NEXT_STR    09ce  HEXVIEWER_PRINT_HEX_LOOP    0a12  HEXVIEWER_PRINT_HEX_SPACES
0ac4  HEXVIEWER_PRINT_STR_DOT    0a82  HEXVIEWER_PRINT_STR_LOOP    0ad3  HEXVIEWER_PRINT_STR_SPACE    0b72  HEXVIEW_CALLER
0bd9  HEXVIEW_CALLER_END    0bba  HEXVIEW_CALLER_EXEC    0bab  HEXVIEW_CALLER_NEXTARG    0886  HEX_BASE_SRT
0412  HEX_CHARS     0899  HEX_HEADER_STR    092a  HEX_LINECNT_SEPARATOR    2000  INPUT_BUFF
01d4  INTEGER_DIV    0224  INTEGER_DIV_INVERT_LOOP1    0234  INTEGER_DIV_NEXT_CHECK    0372  INTEGER_MUL
03d3  INTEGER_MUL_ADD    0409  INTEGER_MUL_END    039f  INTEGER_MUL_LOOP    03dc  INTEGER_MUL_SHIFT
03fd  INTEGER_MUL_SHMULTIPLICAND    03e9  INTEGER_MUL_SHMULTIPLIER    0262  INTEGER_SHIFT_DR    0001  INTP_REG  
0002  INTX_REG      0253  INVERT_LOOP2    0337  INVERT_LOOP3    035e  INVERT_LOOP4
0c89  MAIN_PROGRAM    0cf3  NEW_LINE      0307  NEXT_BIT      0003  PC_REG    
0152  PRINT         045e  PRINT_CHECK_DIGIT    04ae  PRINT_DEC     0540  PRINT_DEC_END
0549  PRINT_DEC_FINAL    04ed  PRINT_DEC_INVER_LOOP    04f8  PRINT_DEC_MAIN_LOOP    0461  PRINT_DIGIT_LOOP
0422  PRINT_HEX     048f  PRINT_HEX_END    0473  PRINT_HEX_SHIFT_LOOP1    0449  PRINT_UNTIL_R
000a  R10           000b  R11           000c  R12           0004  R4        
0005  R5            0006  R6            0007  R7            0008  R8        
0009  R9            0168  READLINE      018e  READLINE_BACKSPACE    016b  READLINE_LOOP
0561  READ_DEC      05ef  READ_DEC_END    057b  READ_DEC_MAIN_LOOP    000e  RETURN    
013f  SERIAL_NULL_BIT    012d  SERIAL_READ_START    0139  SERIAL_SAMPLE_BIT    0143  SERIAL_SAVE_BIT
011b  SERIAL_SEND_BIT    0113  SERIAL_SEND_START    0131  SERIAL_WAIT_START    02a5  SHIFTING_Q
0276  SHIFT_DR      0314  SHIFT_SUBTRACTOR    ffff  STACK_ADDRESS    000f  STACK_REG 
0000  START         01aa  STORE_CHAR    01c3  STR_CHARCHECK    01c0  STR_COMPARATOR
01c9  STR_EQUAL     01d0  STR_INC       02fd  SUBTRACT_FOR_REAL    0694  TERM      
06bb  TERM_DIVIDE    0779  TERM_END      06a7  TERM_MAIN     0720  TERM_MULTIPLY
0775  TERM_NEXT_CYCLE    0d1d  TEST_RESP     0be2  TEST_STR1     0369  THE_END   
02c7  TRY_SUBTRACTING    0d0a  UNKNOWN_COMMAND    
