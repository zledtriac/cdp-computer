                        
   0000                 DMA_REG EQU 0
   0001                 INTP_REG EQU 1
   0002                 INTX_REG EQU 2
   0003                 PC_REG EQU 3
   0004                 R4 EQU 4
   0005                 R5 EQU 5
   0006                 R6 EQU 6
   0007                 R7 EQU 7
   0008                 R8 EQU 8
   0009                 R9 EQU 9
   000a                 R10 EQU 10
   000b                 R11 EQU 11
   000c                 R12 EQU 12
   000d                 CALL_REG EQU 13
   000e                 FCALL_REG EQU 14
   000e                 RETURN EQU 14
   000f                 STACK_REG EQU 15
                        
   ffff                 STACK_ADDRESS EQU 0FFFFh
   3000                 DMA_ADDRESS EQU 03000h
                        
   2000                 INPUT_BUFF EQU 02000h
                        
   2100                 HEAP_LASTADDRESS EQU 02100h
   2110                 HEAP_START EQU 02110h
   fc00                 HEAP_END EQU 0FC00h
                        
                        
   0000                     org 00h
                        
   0000                 START
   0000   71                dis
   0001   00                idl
                            
   0002   7b                seq     ;set Q output to high
                            
   0003   f8 ff             ldi STACK_ADDRESS.0 ;setup the STACK pointer
   0005   af                plo STACK_REG
   0006   f8 ff             ldi STACK_ADDRESS.1
   0008   bf                phi STACK_REG
                            
   0009   f8 01             ldi FCALL.1         ;setup FCALL
   000b   be                phi FCALL_REG
                            
   000c   f8 13             ldi DMA_INIT.0      ;switch PC to R3 and init DMA
   000e   a3                plo PC_REG
   000f   f8 00             ldi DMA_INIT.1
   0011   b3                phi PC_REG
                            
   0012   d3                sep PC_REG
                            
   0013                 DMA_INIT
   0013   f8 00             ldi DMA_ADDRESS.0   ;setup DMA address
   0015   a0                plo DMA_REG
   0016   f8 30             ldi DMA_ADDRESS.1
   0018   b0                phi DMA_REG
                            
   0019   c0 13 09          lbr MAIN_PROGRAM
                            
                        ;-FUNCTION CALL HELPER-------------------------
                        ;-WHERE TO JUMP-(CALL_REG)---------------------
   0100                     org 0100h
                            
   0100                 FCALL
   0100   ef                sex STACK_REG   ;set STACK as X register
   0101   93                ghi PC_REG      ;saving the PC value to stack
   0102   73                stxd
   0103   83                glo PC_REG
   0104   73                stxd
                            
   0105   8d                glo CALL_REG    ;put the new address in the PC
   0106   a3                plo PC_REG
   0107   9d                ghi CALL_REG
   0108   b3                phi PC_REG
   0109   d3                sep PC_REG      ;jumping to PC
                            
   010a                 FRETURN
   010a   1f                inc STACK_REG   ;increment the STACK register
   010b   ef                sex STACK_REG   ;set STACK as X register
   010c   72                ldxa            ;restoring PC from STACK
   010d   a3                plo PC_REG
   010e   f0                ldx
   010f   b3                phi PC_REG
   0110   d3                sep PC_REG      ;jumping to PC
   0111   30 0a             br FRETURN
                        ;----------------------------------------------
                        
                        ;-SERIAL SEND BYTE-----------------------------
                        ;-DATA-R4.1------------------------------------
   0113                 SERIAL_SEND_START
   0113   94                ghi R4      ;R4 high is the data, load it into the D reg
   0114   fb ff             xri 0FFh    ;invert it
   0116   b4                phi R4      ;put it back
   0117   f8 85             ldi 085h    ;load 0x85 to the D reg
   0119   fe                shl         ;shift it left so we get 0x0A and set the flag bit
   011a   a4                plo R4      ;put the 0x10 to R4 low, this will be our bit counter
                        
   011b                 SERIAL_SEND_BIT
   011b   c7                lsnf        ;24 - long skip if the flag is not set
   011c   7a                req         ;16 - reset Q if the flag is set
   011d   c8                lskp        ;24
   011e   7b                seq         ;16 - set Q if the flag is not set
   011f   c4                nop         ;24
                            
   0120   24                dec R4      ;16 - decrement R4, this will only affect the R4 lower 8bit
   0121   84                glo R4      ;16
   0122   c6                lsnz        ;24 - if R4 lower is not 0 then long skip
   0123   de                sep RETURN  ;--
   0124   c4                nop         ;--
   0125   94                ghi R4      ;16 - get R4 high
   0126   f6                shr         ;16 - shift it right to get LSB in the flag
   0127   b4                phi R4      ;16 - put it back
   0128   c4                nop         ;24
   0129   c4                nop         ;24
   012a   c4                nop         ;24
   012b   30 1b             br SERIAL_SEND_BIT ;16
                        ;----------------------------------------------
                        
                        ;-SERIAL READ BYTE-----------------------------
                        ;-RETURN R5.1----------------------------------
   012d                 SERIAL_READ_START
   012d   f8 00             ldi 00h     ;set input data register to 0
   012f   a5                plo R5
   0130   b5                phi R5
                            
   0131                 SERIAL_WAIT_START
   0131   3c 31             bn1 SERIAL_WAIT_START ;16 - loop until EF1 goes low
   0133   c4                nop         ;24
   0134   c4                nop         ;24
   0135   c4                nop         ;24
   0136   c4                nop         ;24
   0137   f9 00             ori 00h     ;16 - do nothing for 16 clock cycles
                        
   0139                 SERIAL_SAMPLE_BIT
   0139   34 3f             b1 SERIAL_NULL_BIT  ;16 - checking the EF1
   013b   f9 80             ori 080h            ;16 - if EF1 is high then set MSB to 1 in D register
   013d   30 43             br SERIAL_SAVE_BIT  ;16
                        
   013f                 SERIAL_NULL_BIT
   013f   f9 00             ori 00h         ;16 - of EF1 is low we do nothing
   0141   f9 00             ori 00h         ;16
                        
   0143                 SERIAL_SAVE_BIT
   0143   b5                phi R5          ;16 - put D in R5 high
   0144   15                inc R5          ;16 - increment R5, this will only affect R5 low 8bit
   0145   85                glo R5          ;16 - get R5 low to D register
   0146   fb 09             xri 09h         ;16 - D = D ^ 0x09
   0148   c6                lsnz            ;24 
   0149   de                sep RETURN      ;--
   014a   c4                nop             ;--
   014b   95                ghi R5          ;16 - get R5 high
   014c   f6                shr             ;16 - shift it righ
   014d   c4                nop             ;24
   014e   c4                nop             ;24
   014f   c4                nop             ;24
   0150   30 39             br SERIAL_SAMPLE_BIT ;16
                        ;----------------------------------------------
                        
                        ;-PRINT----------------------------------------
                        ;-FIRST CHAR-R6--------------------------------
   0152                 PRINT
   0152   e6                sex R6          ;set X register to R6
   0153   72                ldxa            ;load data to D and increment R6
   0154   c6                lsnz            ;if it is not zero then long skip
   0155   de                sep RETURN
   0156   c4                nop
                            
   0157   b4                phi R4          ;put D register to R4 to send it
                            
   0158   f8 13             ldi SERIAL_SEND_START.0     ;prepare to call SERIAL_SEND
   015a   ad                plo CALL_REG
   015b   f8 01             ldi SERIAL_SEND_START.1
   015d   bd                phi CALL_REG
                            
   015e   f8 00             ldi FCALL.0
   0160   ae                plo FCALL_REG
   0161   de                sep FCALL_REG   ;call SERIAL_SEND
   0162   30 52             br PRINT
                        ;----------------------------------------------
                        
   0164                 BACKSPACE_ACTION
   0164   08 20 08 00       db 8, 32, 8, 0
                        ;-READ LINE------------------------------------
                        ;-WHERE TO READ-R7-----------------------------
                        ;-R8.1-Character counter-------------------------
   0168                 READLINE
   0168   f8 00             ldi 0
   016a   a8                plo R8
                            
   016b                 READLINE_LOOP
   016b   f8 2d             ldi SERIAL_READ_START.0     ;prepare calling SERIAL_READ
   016d   ad                plo CALL_REG
   016e   f8 01             ldi SERIAL_READ_START.1
   0170   bd                phi CALL_REG
                            
   0171   f8 00             ldi FCALL.0
   0173   ae                plo FCALL_REG
   0174   de                sep FCALL_REG       ;call SERIAL_READ
                            
   0175   95                ghi R5              ;get the result of SERIAL_READ
   0176   fb 0d             xri 13              ;check if it is 13 (ENTER KEY)
   0178   3a 8e             bnz READLINE_BACKSPACE      ;if not jump to READLINE_BACKSPACE
                            
   017a                 END_LINE
   017a   f8 00             ldi 00h             ;put 0 to the endof the string
   017c   57                str R7
                            
   017d   f8 7d             ldi NEW_LINE.0      ;load the address of CRLF string
   017f   a6                plo R6
   0180   f8 13             ldi NEW_LINE.1
   0182   b6                phi R6
                            
   0183   f8 52             ldi PRINT.0         ;prepare to call PRINT
   0185   ad                plo CALL_REG
   0186   f8 01             ldi PRINT.1
   0188   bd                phi CALL_REG
                            
   0189   f8 00             ldi FCALL.0
   018b   ae                plo FCALL_REG
   018c   de                sep FCALL_REG       ;call PRINT
                            
   018d   de                sep RETURN          ;RETURN from READLINE
                            
   018e                 READLINE_BACKSPACE
   018e   95                ghi R5              ;get the result of SERIAL_READ
   018f   fb 7f             xri 127             ;check if it is 127 (DEL)
   0191   3a aa             bnz STORE_CHAR      ;if not jump to STORE_CHAR
                            
   0193   88                glo R8
   0194   32 6b             bz READLINE_LOOP
                            
   0196   f8 64             ldi BACKSPACE_ACTION.0      ;load the address of the backspace action
   0198   a6                plo R6
   0199   f8 01             ldi BACKSPACE_ACTION.1
   019b   b6                phi R6
                            
   019c   f8 52             ldi PRINT.0                 ;prepare to call PRINT
   019e   ad                plo CALL_REG
   019f   f8 01             ldi PRINT.1
   01a1   bd                phi CALL_REG
                            
   01a2   f8 00             ldi FCALL.0
   01a4   ae                plo FCALL_REG
   01a5   de                sep FCALL_REG               ;call PRINT
                            
   01a6   27                dec R7
   01a7   28                dec R8
                            
   01a8   30 6b             br READLINE_LOOP
                            
   01aa                 STORE_CHAR
   01aa   88                glo R8
   01ab   fb ff             xri 0FFh
   01ad   32 6b             bz READLINE_LOOP
                            
   01af   95                ghi R5              ;get the result of the SERIAL_READ again
   01b0   57                str R7              ;store it where R7 pointing
   01b1   17                inc R7              ;increment R7
   01b2   18                inc R8
                            
   01b3   b4                phi R4              ;load the result to R4 to Echo it back
                            
   01b4   f8 13             ldi SERIAL_SEND_START.0     ;prepare to call SERIAL_SEND
   01b6   ad                plo CALL_REG
   01b7   f8 01             ldi SERIAL_SEND_START.1
   01b9   bd                phi CALL_REG
                            
   01ba   f8 00             ldi FCALL.0
   01bc   ae                plo FCALL_REG
   01bd   de                sep FCALL_REG       ;call SERIAL_SEND
   01be   30 6b             br READLINE_LOOP
                        ;----------------------------------------------
                        
                        ;-STR COMPARATOR-------------------------------
                        ;-R8 stringA-R9 stringB------------------------
                        ;-RETURN R10.0---------------------------------
   01c0                 STR_COMPARATOR
   01c0   f8 00             ldi 0           ;R10 low is the result, set it to 0
   01c2   aa                plo R10
                        	
   01c3                 STR_CHARCHECK
   01c3   08                ldn R8          ;load value from RAM[R8] to D register
   01c4   e9                sex R9          ;set X pointer to R9
   01c5   f3                xor             ;D = D ^ RAM[R9]
                            
   01c6   32 c9             bz STR_EQUAL    ;if D == 0 jump to STR_EQUAL
   01c8   de                sep RETURN      ;RETURN
                            
   01c9                 STR_EQUAL 
   01c9   08            	ldn R8          ;load value from RAM[R8] to D register again
   01ca   3a d0         	bnz STR_INC     ;if D != 0 jump to STR_INC
   01cc   f8 01         	ldi 1           ;set R10 to 1 and return
   01ce   aa            	plo R10
   01cf   de            	sep RETURN
                        	
   01d0                 STR_INC
   01d0   18            	inc R8          ;increment both address by 1
   01d1   19            	inc R9
   01d2   30 c3         	br STR_CHARCHECK
                        ;----------------------------------------------
                        
                        ;-INTEGER DIV----------------------------------
                        ;-R4 pointing to divident----------------------
                        ;-R5 pointing to divider-----------------------
                        ;-R6 pointing to quotient----------------------
                        ;-R7 pointing to remainder---------------------
                        ;-R8.0 bitcnt, R8.1 flags----------------------
                        ;-R9 general counter---------------------------
   01d4                 INTEGER_DIV
   01d4   ef                sex STACK_REG   ;set STACK_REG as data pointer to store variables in STACK
   01d5   f8 00             ldi 0           ;set bitcnt and flags to 0
   01d7   a8                plo R8
   01d8   b8                phi R8
                            
   01d9   15                inc R5          ;increment R5 to the MSB because we want to store the divider it in little-endian format
   01da   15                inc R5
   01db   15                inc R5
                            
   01dc   05                ldn R5          ;copying starts here
   01dd   73                stxd
   01de   25                dec R5
                            
   01df   05                ldn R5
   01e0   73                stxd
   01e1   25                dec R5
                            
   01e2   05                ldn R5
   01e3   73                stxd
   01e4   25                dec R5
                            
   01e5   05                ldn R5
   01e6   73                stxd            ;+11 divider, +11 shows the start of the data from the STACK pointer
                            
   01e7   f8 00             ldi 0           ;storing 0 for the subtractor
   01e9   73                stxd
   01ea   73                stxd
   01eb   73                stxd
   01ec   73                stxd            ;+7 subtractor
                            
   01ed   96                ghi R6          ;saving the quotient pointer
   01ee   73                stxd
   01ef   86                glo R6
   01f0   73                stxd            ;+5 quotient pointer
                        
   01f1   97                ghi R7          ;saving the remainder
   01f2   73                stxd
   01f3   87                glo R7
   01f4   73                stxd            ;+3 remainder pointer
                            
   01f5   94                ghi R4          ;saving the dividend pointer
   01f6   73                stxd
   01f7   84                glo R4
   01f8   73                stxd            ;+1 dividend pointer
                            
   01f9   e4                sex R4
                            
   01fa   72                ldxa            ;copy dividend to remainder
   01fb   57                str R7
   01fc   17                inc R7
                            
   01fd   72                ldxa
   01fe   57                str R7
   01ff   17                inc R7
                            
   0200   72                ldxa
   0201   57                str R7
   0202   17                inc R7
                            
   0203   f0                ldx
   0204   57                str R7
                            
   0205   f8 00             ldi 0
   0207   56                str R6
   0208   16                inc R6
   0209   56                str R6
   020a   16                inc R6
   020b   56                str R6
   020c   16                inc R6
   020d   56                str R6
                        
   020e   8f                glo STACK_REG   ;get the STACK_REG pointer to position it to the divider MSB
   020f   fc 0e             adi 14          ;add 14 to it
   0211   a5                plo R5          ;store the new pointer to R5
   0212   9f                ghi STACK_REG   ;get the STACK_REG high part to add the carry to it
   0213   7c 00             adci 0          ;adding the carry
   0215   b5                phi R5          ;store the new high part to R5
                            
   0216   e5                sex R5          ;set X data pointer to R5
   0217   f0                ldx             ;load data from RAM[R5]
   0218   25                dec R5          ;decrement R5 to set it back to the divider's LSB
   0219   25                dec R5
   021a   25                dec R5
   021b   fa 80             ani 080h        ;check if sign bit is set
                            
   021d   c2 02 34          lbz INTEGER_DIV_NEXT_CHECK
                            
   0220   f8 82             ldi 082h        ;load 0x82 to the D register
   0222   fe                shl             ;shit it left so it will set the carry flag and the D registre will be 4
   0223   a9                plo R9          ;store it to R9 low
                            
   0224                 INTEGER_DIV_INVERT_LOOP1
   0224   f0                ldx             ;load data from RAM[R5]
   0225   fb ff             xri 0FFh        ;xor D with 0xFF to invert it
   0227   7c 00             adci 0          ;add the carry for to the result (inver+1)
   0229   55                str R5          ;store the result to RAM[R5]
   022a   60                irx             ;increment R5
                        
   022b   29                dec R9          ;decrement R8
   022c   89                glo R9          ;get R8 low, and if it's not 0 then do the loop
   022d   ca 02 24          lbnz INTEGER_DIV_INVERT_LOOP1
                            
   0230   98                ghi R8          ;set the flag
   0231   f9 01             ori 1
   0233   b8                phi R8
                            
   0234                 INTEGER_DIV_NEXT_CHECK
   0234   8f                glo STACK_REG
   0235   fc 03             adi 3
   0237   a9                plo R9
   0238   9f                ghi STACK_REG
   0239   7c 00             adci 0
   023b   b9                phi R9
                            
   023c   09                ldn R9              ;restore and get remainder MSB
   023d   fc 03             adi 3
   023f   a4                plo R4
   0240   19                inc R9
   0241   09                ldn R9
   0242   7c 00             adci 0
   0244   b4                phi R4
                            
   0245   e4                sex R4
   0246   f0                ldx
   0247   24                dec R4
   0248   24                dec R4
   0249   24                dec R4
   024a   fa 80             ani 080h            ;check if sign bit is set
                            
   024c   c2 02 62          lbz INTEGER_SHIFT_DR
                            
   024f   f8 82             ldi 082h
   0251   fe                shl
   0252   a9                plo R9
                            
   0253                 INVERT_LOOP2
   0253   f0                ldx         ;invert byte 3
   0254   fb ff             xri 0FFh
   0256   7c 00             adci 0
   0258   54                str R4
   0259   60                irx
                        
   025a   29                dec R9
   025b   89                glo R9
   025c   3a 53             bnz INVERT_LOOP2
                            
   025e   98                ghi R8      ;set the flag
   025f   f9 02             ori 2
   0261   b8                phi R8
                            
   0262                 INTEGER_SHIFT_DR
   0262   8f                glo STACK_REG ;get divider MSB
   0263   fc 0b             adi 11
   0265   a5                plo R5
   0266   9f                ghi STACK_REG
   0267   7c 00             adci 0
   0269   b5                phi R5
                            
   026a   f8 00             ldi 0
   026c   e5                sex R5
   026d   f1                or
   026e   60                irx
   026f   f1                or
   0270   60                irx
   0271   f1                or
   0272   60                irx
   0273   f1                or
   0274   32 8d             bz DIVISION_LOOP
                            
   0276                 SHIFT_DR
   0276   8f                glo STACK_REG ;get divider MSB
   0277   fc 0e             adi 14
   0279   a5                plo R5
   027a   9f                ghi STACK_REG
   027b   7c 00             adci 0
   027d   b5                phi R5
                            
   027e   e5                sex R5
                            
   027f   f8 04             ldi 4
   0281   fe                shl
   0282   a9                plo R9
                            
   0283                 CARRY_SHIFTING
   0283   f0                ldx
   0284   76                shrc
   0285   73                stxd
                            
   0286   29                dec R9
   0287   89                glo R9
   0288   3a 83             bnz CARRY_SHIFTING
                            
   028a   18                inc R8
                            
   028b   30 62             br INTEGER_SHIFT_DR
                            
   028d                 DIVISION_LOOP
   028d   88                glo R8              ;get R8 low
   028e   fd 20             sdi 32              ;if larger than 32 then finish the loop
   0290   cb 03 1f          lbnf FINAL_CHECK
                        
   0293   8f                glo STACK_REG       ;restore quotient pointer to R6
   0294   fc 05             adi 5
   0296   a9                plo R9
   0297   9f                ghi STACK_REG
   0298   7c 00             adci 0
   029a   b9                phi R9
                            
   029b   09                ldn R9
   029c   a6                plo R6
   029d   19                inc R9
   029e   09                ldn R9
   029f   b6                phi R6
                            
   02a0   e6                sex R6
                            
   02a1   f8 02             ldi 2
   02a3   fe                shl
   02a4   a9                plo R9
                            
   02a5                 SHIFTING_Q
   02a5   f0                ldx                 ;shifting quotient to left
   02a6   7e                shlc
   02a7   56                str R6
   02a8   60                irx
                        
   02a9   29                dec R9
   02aa   89                glo R9
   02ab   3a a5             bnz SHIFTING_Q
                            
   02ad   8f                glo STACK_REG    ;restore remainder pointer to R4
   02ae   fc 03             adi 3
   02b0   a9                plo R9
   02b1   9f                ghi STACK_REG
   02b2   7c 00             adci 0
   02b4   b9                phi R9
                            
   02b5   09                ldn R9
   02b6   a4                plo R4
   02b7   19                inc R9
   02b8   09                ldn R9
   02b9   b4                phi R4
                            
   02ba   8f                glo STACK_REG    ;restore subtractor pointer to R5
   02bb   fc 07             adi 7
   02bd   a5                plo R5
   02be   9f                ghi STACK_REG
   02bf   7c 00             adci 0
   02c1   b5                phi R5
                            
   02c2   e4                sex R4
   02c3   f8 82             ldi 082h
   02c5   fe                shl
   02c6   a9                plo R9
                            
   02c7                 TRY_SUBTRACTING         ;try subtracting
   02c7   05                ldn R5
   02c8   75                sdb
   02c9   60                irx
   02ca   15                inc R5
                            
   02cb   29                dec R9
   02cc   89                glo R9
   02cd   3a c7             bnz TRY_SUBTRACTING
                            
   02cf   cb 03 07          lbnf NEXT_BIT        ;if subtracting unsuccesful, jump to NEXT_BIT
                            
   02d2   8f                glo STACK_REG
   02d3   fc 05             adi 5
   02d5   a9                plo R9
   02d6   9f                ghi STACK_REG
   02d7   7c 00             adci 0
   02d9   b9                phi R9
                            
   02da   09                ldn R9
   02db   a6                plo R6
   02dc   19                inc R9
   02dd   09                ldn R9
   02de   b6                phi R6
                            
   02df   06                ldn R6
   02e0   f9 01             ori 1
   02e2   56                str R6
                            
   02e3   8f                glo STACK_REG    ;restore remainder pointer
   02e4   fc 03             adi 3
   02e6   a9                plo R9
   02e7   9f                ghi STACK_REG
   02e8   7c 00             adci 0
   02ea   b9                phi R9
                            
   02eb   09                ldn R9
   02ec   a4                plo R4
   02ed   19                inc R9
   02ee   09                ldn R9
   02ef   b4                phi R4
                            
   02f0   8f                glo STACK_REG    ;restore subtractor's pointer to R5
   02f1   fc 07             adi 7
   02f3   a5                plo R5
   02f4   9f                ghi STACK_REG
   02f5   7c 00             adci 0
   02f7   b5                phi R5
                            
   02f8   e4                sex R4
                            
   02f9   f8 82             ldi 082h
   02fb   fe                shl
   02fc   a9                plo R9
                            
   02fd                 SUBTRACT_FOR_REAL
   02fd   05                ldn R5          ;subtract the subtractor from the remainder and store it
   02fe   75                sdb
   02ff   54                str R4
   0300   60                irx
   0301   15                inc R5
                            
   0302   29                dec R9
   0303   89                glo R9
   0304   ca 02 fd          lbnz SUBTRACT_FOR_REAL
                            
   0307                 NEXT_BIT
   0307   8f                glo STACK_REG    ;restore subtractor pointer to R5 and set it to MSB
   0308   fc 0a             adi 10
   030a   a5                plo R5
   030b   9f                ghi STACK_REG
   030c   7c 00             adci 0
   030e   b5                phi R5
                            
   030f   e5                sex R5
   0310   f8 02             ldi 2
   0312   fe                shl
   0313   a9                plo R9
                            
   0314                 SHIFT_SUBTRACTOR
   0314   f0                ldx
   0315   76                shrc
   0316   73                stxd
                            
   0317   29                dec R9
   0318   89                glo R9
   0319   3a 14             bnz SHIFT_SUBTRACTOR
                            
   031b   18                inc R8
   031c   c0 02 8d          lbr DIVISION_LOOP
                            
   031f                 FINAL_CHECK
   031f   98                ghi R8
   0320   fa 02             ani 2
   0322   c2 03 43          lbz FINAL_CHECK2
                            
   0325   8f                glo STACK_REG    ;restore remainder pointer to R4
   0326   fc 03             adi 3
   0328   a9                plo R9
   0329   9f                ghi STACK_REG
   032a   7c 00             adci 0
   032c   b9                phi R9
                            
   032d   09                ldn R9
   032e   a4                plo R4
   032f   19                inc R9
   0330   09                ldn R9
   0331   b4                phi R4
                            
   0332   e4                sex R4
                            
   0333   f8 82             ldi 082h
   0335   fe                shl
   0336   a9                plo R9
                            
   0337                 INVERT_LOOP3
   0337   f0                ldx
   0338   fb ff             xri 0FFh
   033a   7c 00             adci 0
   033c   54                str R4
   033d   60                irx
                            
   033e   29                dec R9
   033f   89                glo R9
   0340   ca 03 37          lbnz INVERT_LOOP3
                            
   0343                 FINAL_CHECK2
   0343   98                ghi R8
   0344   c2 03 69          lbz THE_END
   0347   fb 03             xri 3
   0349   c2 03 69          lbz THE_END
                            
   034c   8f                glo STACK_REG    ;restore quotient pointer to R6
   034d   fc 05             adi 5
   034f   a9                plo R9
   0350   9f                ghi STACK_REG
   0351   7c 00             adci 0
   0353   b9                phi R9
                            
   0354   09                ldn R9
   0355   a6                plo R6
   0356   19                inc R9
   0357   09                ldn R9
   0358   b6                phi R6
                            
   0359   e6                sex R6
                            
   035a   f8 82             ldi 082h
   035c   fe                shl
   035d   a9                plo R9
                            
   035e                 INVERT_LOOP4
   035e   f0                ldx
   035f   fb ff             xri 0FFh
   0361   7c 00             adci 0
   0363   56                str R6
   0364   60                irx
                            
   0365   29                dec R9
   0366   89                glo R9
   0367   3a 5e             bnz INVERT_LOOP4
                        
   0369                 THE_END
   0369   8f                glo STACK_REG       ;setting back the STACK_REG for return
   036a   fc 0e             adi 14
   036c   af                plo STACK_REG
   036d   9f                ghi STACK_REG
   036e   7c 00             adci 0
   0370   bf                phi STACK_REG
                            
   0371   de                sep RETURN          ;RETURN
                        ;----------------------------------------------
                        
                        ;-INTEGER MUL----------------------------------
                        ;-R4-multiplicand pointer----------------------
                        ;-R5-multiplier pointer------------------------
                        ;-R6-result pointer----------------------------
                        ;-R7-general register--------------------------
   0372                 INTEGER_MUL
   0372   ef                sex STACK_REG
                            
   0373   14                inc R4      ;increment R4 and R5 pointer to MSB
   0374   14                inc R4      ;to copy the values to the local variables
   0375   14                inc R4
                            
   0376   15                inc R5
   0377   15                inc R5
   0378   15                inc R5
                            
   0379   04                ldn R4      ;copying starts here
   037a   73                stxd
   037b   24                dec R4
                            
   037c   04                ldn R4
   037d   73                stxd
   037e   24                dec R4
                            
   037f   04                ldn R4
   0380   73                stxd
   0381   24                dec R4
                            
   0382   04                ldn R4
   0383   73                stxd        ;+7 multiplicand
                            
   0384   05                ldn R5
   0385   73                stxd
   0386   25                dec R5
                            
   0387   05                ldn R5
   0388   73                stxd
   0389   25                dec R5
                            
   038a   05                ldn R5
   038b   73                stxd
   038c   25                dec R5
                            
   038d   05                ldn R5
   038e   73                stxd        ;+3 multiplier
                            
   038f   96                ghi R6
   0390   73                stxd
   0391   86                glo R6
   0392   73                stxd        ;+1 result pointer
                        
   0393   f8 00             ldi 0       ;zeroing the result
                            
   0395   56                str R6
   0396   16                inc R6
                            
   0397   56                str R6
   0398   16                inc R6
                            
   0399   56                str R6
   039a   16                inc R6
                            
   039b   56                str R6
                            
   039c   26                dec R6
   039d   26                dec R6
   039e   26                dec R6
                        
   039f                 INTEGER_MUL_LOOP
   039f   8f                glo STACK_REG   ;restore multiplier pointer
   03a0   fc 03             adi 3
   03a2   a5                plo R5
   03a3   9f                ghi STACK_REG
   03a4   7c 00             adci 0
   03a6   b5                phi R5
                            
   03a7   e5                sex R5          ;check if multiplier is 0
   03a8   f8 00             ldi 0
   03aa   f1                or
   03ab   60                irx
   03ac   f1                or
   03ad   60                irx
   03ae   f1                or
   03af   60                irx
   03b0   f1                or
                            
   03b1   25                dec R5
   03b2   25                dec R5
   03b3   25                dec R5
                            
   03b4   c2 04 09          lbz INTEGER_MUL_END      ;if 0 then jump to the end
                            
   03b7   05                ldn R5                  ;load the multiplier's LSB
   03b8   fa 01             ani 1                   ;filter for the LSb
   03ba   32 dc             bz INTEGER_MUL_SHIFT    ;if zero, skip the addition
                            
   03bc   8f                glo STACK_REG           ;restore multiplicand pointer
   03bd   fc 07             adi 7
   03bf   a4                plo R4
   03c0   9f                ghi STACK_REG
   03c1   7c 00             adci 0
   03c3   b4                phi R4
                            
   03c4   8f                glo STACK_REG           ;restore result pointer
   03c5   a7                plo R7
   03c6   9f                ghi STACK_REG
   03c7   b7                phi R7
   03c8   17                inc R7
                            
   03c9   07                ldn R7
   03ca   a5                plo R5
   03cb   17                inc R7
   03cc   07                ldn R7
   03cd   b5                phi R5
                            
   03ce   e5                sex R5
                            
   03cf   f8 02             ldi 2                   ;prepare addition
   03d1   fe                shl
   03d2   a7                plo R7
                            
   03d3                 INTEGER_MUL_ADD
   03d3   04                ldn R4
   03d4   74                adc
   03d5   55                str R5
   03d6   60                irx
   03d7   14                inc R4
                            
   03d8   27                dec R7
   03d9   87                glo R7
   03da   3a d3             bnz INTEGER_MUL_ADD
                        
   03dc                 INTEGER_MUL_SHIFT
                        
   03dc   8f                glo STACK_REG           ;set multiplier's pointer to MSB
   03dd   fc 06             adi 6                   ;to shift it right
   03df   a5                plo R5
   03e0   9f                ghi STACK_REG
   03e1   7c 00             adci 0
   03e3   b5                phi R5
                            
   03e4   e5                sex R5
                            
   03e5   f8 02             ldi 2
   03e7   fe                shl
   03e8   a7                plo R7
                            
   03e9                 INTEGER_MUL_SHMULTIPLIER
   03e9   f0                ldx                     ;shifting right the multiplier
   03ea   76                shrc
   03eb   73                stxd
                            
   03ec   27                dec R7
   03ed   87                glo R7
   03ee   3a e9             bnz INTEGER_MUL_SHMULTIPLIER
                            
   03f0   8f                glo STACK_REG           ;restore multiplicand pointer
   03f1   fc 07             adi 7                   ;to shift it left
   03f3   a4                plo R4
   03f4   9f                ghi STACK_REG
   03f5   7c 00             adci 0
   03f7   b4                phi R4
                            
   03f8   e4                sex R4
                            
   03f9   f8 02             ldi 2
   03fb   fe                shl
   03fc   a7                plo R7
                            
   03fd                 INTEGER_MUL_SHMULTIPLICAND
   03fd   f0                ldx                     ;shifting the multiplicand left
   03fe   7e                shlc
   03ff   54                str R4
   0400   60                irx
                        
   0401   27                dec R7
   0402   87                glo R7
   0403   ca 03 fd          lbnz INTEGER_MUL_SHMULTIPLICAND
                            
   0406   c0 03 9f          lbr INTEGER_MUL_LOOP
                            
   0409                 INTEGER_MUL_END
   0409   8f                glo STACK_REG
   040a   fc 0a             adi 10
   040c   af                plo STACK_REG
   040d   9f                ghi STACK_REG
   040e   7c 00             adci 0
   0410   bf                phi STACK_REG
                            
   0411   de                sep RETURN          ;RETURN    
                        ;----------------------------------------------
                        
                        ;-PRINT HEX------------------------------------
                        ;-R4-int pointer-------------------------------
                        ;-R5.0-number of digits------------------------
                        ;-Local registers------------------------------
                        ;-R5.1-flag, R6--------------------------------
   0412                 HEX_CHARS
   0412   30 31 32 33       db "0123456789ABCDEF"
   0416   34 35 36 37   
   041a   38 39 41 42   
   041e   43 44 45 46   
                        ;----------------------------------------------
   0422                 PRINT_HEX
   0422   ef                sex STACK_REG
                            
   0423   95                ghi R5  ;saving the state of the local registers
   0424   73                stxd
                            
   0425   96                ghi R6
   0426   73                stxd
   0427   86                glo R6
   0428   73                stxd
                            
   0429   14                inc R4  ;making a copy of the Integer
   042a   14                inc R4
   042b   14                inc R4
                            
   042c   04                ldn R4
   042d   73                stxd
   042e   24                dec R4
   042f   04                ldn R4
   0430   73                stxd
   0431   24                dec R4
   0432   04                ldn R4
   0433   73                stxd
   0434   24                dec R4
   0435   04                ldn R4
   0436   73                stxd    ;+2 the integer
                            
   0437   f8 00             ldi 0   ;+1 
   0439   73                stxd
                            
   043a   8f                glo STACK_REG   ;set R4 to point to the Integer
   043b   a4                plo R4
   043c   9f                ghi STACK_REG
   043d   b4                phi R4
   043e   14                inc R4
   043f   14                inc R4
                            
   0440   f8 00             ldi 0           ;set R5 flags to 0
   0442   b5                phi R5
   0443   85                glo R5              
   0444   3a 49             bnz PRINT_UNTIL_R
   0446   f8 01             ldi 1           ;if R5 low, the number of digits, is zero, then set R5 flag
   0448   b5                phi R5
                        
   0449                 PRINT_UNTIL_R
   0449   95                ghi R5                  ;check the flag if set or not
   044a   32 5e             bz PRINT_CHECK_DIGIT    
   044c   e4                sex R4              ;checking the integer if it's zero
   044d   f8 00             ldi 0
   044f   f1                or
   0450   60                irx
   0451   f1                or
   0452   60                irx
   0453   f1                or
   0454   60                irx
   0455   f1                or
                            
   0456   24                dec R4
   0457   24                dec R4
   0458   24                dec R4
                            
   0459   ef                sex STACK_REG    
   045a   3a 61             bnz PRINT_DIGIT_LOOP
   045c   30 8f             br PRINT_HEX_END
                            
   045e                 PRINT_CHECK_DIGIT
   045e   85                glo R5
   045f   32 8f             bz PRINT_HEX_END
                        
   0461                 PRINT_DIGIT_LOOP
   0461   04                ldn R4
   0462   fa 0f             ani 0Fh
   0464   5f                str STACK_REG
   0465   f8 12             ldi HEX_CHARS.0
   0467   f4                add
   0468   a6                plo R6
   0469   f8 04             ldi HEX_CHARS.1
   046b   7c 00             adci 0
   046d   b6                phi R6
                            
   046e   06                ldn R6
   046f   73                stxd
                            
   0470   f8 04             ldi 4
   0472   a6                plo R6
                            
   0473                 PRINT_HEX_SHIFT_LOOP1
   0473   14                inc R4
   0474   14                inc R4
   0475   14                inc R4
                            
   0476   04                ldn R4
   0477   f6                shr
   0478   54                str R4
   0479   24                dec R4
                            
   047a   04                ldn R4
   047b   76                shrc
   047c   54                str R4
   047d   24                dec R4
                            
   047e   04                ldn R4
   047f   76                shrc
   0480   54                str R4
   0481   24                dec R4
                            
   0482   04                ldn R4
   0483   76                shrc
   0484   54                str R4
                            
   0485   26                dec R6
   0486   86                glo R6
   0487   3a 73             bnz PRINT_HEX_SHIFT_LOOP1
                            
   0489   95                ghi R5      ;check if R5 flag is set, if set then skip decrementing.
   048a   c6                lsnz
   048b   25                dec R5
   048c   c4                nop
   048d   30 49             br PRINT_UNTIL_R
                        
   048f                 PRINT_HEX_END
   048f   8f                glo STACK_REG
   0490   a6                plo R6
   0491   9f                ghi STACK_REG
   0492   b6                phi R6
   0493   16                inc R6
                            
   0494   f8 52             ldi PRINT.0     ;prepare to call PRINT
   0496   ad                plo CALL_REG
   0497   f8 01             ldi PRINT.1
   0499   bd                phi CALL_REG
                            
   049a   f8 00             ldi FCALL.0
   049c   ae                plo FCALL_REG
   049d   de                sep FCALL_REG
                            
   049e   86                glo R6
   049f   fc 04             adi 4
   04a1   af                plo STACK_REG
   04a2   96                ghi R6
   04a3   7c 00             adci 0
   04a5   bf                phi STACK_REG
                            
   04a6   ef                sex STACK_REG   ;restore local registers
   04a7   72                ldxa
   04a8   a6                plo R6
   04a9   72                ldxa
   04aa   b6                phi R6
   04ab   f0                ldx
   04ac   b5                phi R5
                            
   04ad   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-PRINT DEC------------------------------------
                        ;-R4-int pointer-------------------------------
                        ;-Local registers------------------------------
                        ;-R5-R6-R7-R10-R12-----------------------------
                        ;-R10-flags------------------------------------
   04ae                 PRINT_DEC
   04ae   ef                sex STACK_REG
                            
   04af   95                ghi R5          ;saving local registers
   04b0   73                stxd
   04b1   85                glo R5
   04b2   73                stxd
                            
   04b3   96                ghi R6
   04b4   73                stxd
   04b5   86                glo R6
   04b6   73                stxd
                            
   04b7   97                ghi R7
   04b8   73                stxd
   04b9   87                glo R7
   04ba   73                stxd
                        
   04bb   9a                ghi R10
   04bc   73                stxd
   04bd   8a                glo R10
   04be   73                stxd
                            
   04bf   9c                ghi R12
   04c0   73                stxd
   04c1   8c                glo R12
   04c2   73                stxd
                            
   04c3   f8 00             ldi 0
   04c5   aa                plo R10
   04c6   ba                phi R10
                            
   04c7   14                inc R4
   04c8   14                inc R4
   04c9   14                inc R4
                            
   04ca   04                ldn R4
   04cb   73                stxd
   04cc   24                dec R4
   04cd   04                ldn R4
   04ce   73                stxd
   04cf   24                dec R4
   04d0   04                ldn R4
   04d1   73                stxd
   04d2   24                dec R4
   04d3   04                ldn R4
   04d4   73                stxd        ;+10 the integer
                            
   04d5   f8 00             ldi 0
   04d7   73                stxd
   04d8   73                stxd
   04d9   73                stxd
   04da   f8 0a             ldi 0Ah
   04dc   73                stxd        ;+6 divider
                            
   04dd   f8 00             ldi 0
   04df   73                stxd
   04e0   73                stxd
   04e1   73                stxd
   04e2   73                stxd        ;+2 remainder
                            
   04e3   73                stxd        ;+1 output string buffer end
                            
   04e4   8f                glo STACK_REG
   04e5   ac                plo R12
   04e6   9f                ghi STACK_REG
   04e7   bc                phi R12
                            
   04e8   8c                glo R12
   04e9   fc 0d             adi 13
   04eb   a4                plo R4
   04ec   9c                ghi R12
   04ed   7c 00             adci 0
   04ef   b4                phi R4
                            
   04f0   e4                sex R4
   04f1   f0                ldx
   04f2   fa 80             ani 080h
   04f4   c2 05 0d          lbz PRINT_DEC_MAIN_LOOP
                            
   04f7   8a                glo R10
   04f8   f9 01             ori 1
   04fa   aa                plo R10
                            
   04fb   24                dec R4
   04fc   24                dec R4
   04fd   24                dec R4
                            
   04fe   f8 82             ldi 082h
   0500   fe                shl
   0501   a6                plo R6
                            
   0502                 PRINT_DEC_INVER_LOOP
   0502   f0                ldx
   0503   fb ff             xri 0FFh
   0505   7c 00             adci 0
   0507   54                str R4
   0508   14                inc R4
                            
   0509   26                dec R6
   050a   86                glo R6
   050b   3a 02             bnz PRINT_DEC_INVER_LOOP
                            
   050d                 PRINT_DEC_MAIN_LOOP    
   050d   8c                glo R12
   050e   fc 0a             adi 10
   0510   a4                plo R4
   0511   a6                plo R6
   0512   9c                ghi R12
   0513   7c 00             adci 0
   0515   b4                phi R4
   0516   b6                phi R6
                            
   0517   8c                glo R12
   0518   fc 06             adi 6
   051a   a5                plo R5
   051b   9c                ghi R12
   051c   7c 00             adci 0
   051e   b5                phi R5
                            
   051f   8c                glo R12
   0520   fc 02             adi 2
   0522   a7                plo R7
   0523   9c                ghi R12
   0524   7c 00             adci 0
   0526   b7                phi R7
                            
   0527   f8 d4             ldi INTEGER_DIV.0
   0529   ad                plo CALL_REG
   052a   f8 01             ldi INTEGER_DIV.1
   052c   bd                phi CALL_REG
                            
   052d   f8 00             ldi FCALL.0
   052f   ae                plo FCALL_REG
   0530   de                sep FCALL_REG
                            
   0531   ef                sex STACK_REG
                            
   0532   8c                glo R12
   0533   fc 02             adi 2
   0535   a7                plo R7
   0536   9c                ghi R12
   0537   7c 00             adci 0
   0539   b7                phi R7
                            
   053a   07                ldn R7
   053b   fc 30             adi 48
   053d   73                stxd
                            
   053e   8c                glo R12
   053f   fc 0a             adi 10
   0541   a4                plo R4
   0542   9c                ghi R12
   0543   7c 00             adci 0
   0545   b4                phi R4
                            
   0546   e4                sex R4
                            
   0547   f8 00             ldi 0
   0549   f1                or
   054a   60                irx
   054b   f1                or
   054c   60                irx
   054d   f1                or
   054e   60                irx
   054f   f1                or
                            
   0550   32 55             bz PRINT_DEC_END
   0552   c0 05 0d          lbr PRINT_DEC_MAIN_LOOP
                        
   0555                 PRINT_DEC_END
   0555   8a                glo R10
   0556   fa 01             ani 1
   0558   32 5e             bz PRINT_DEC_FINAL
                            
   055a   ef                sex STACK_REG
   055b   f8 2d             ldi 45
   055d   73                stxd
                        
   055e                 PRINT_DEC_FINAL
   055e   8f                glo STACK_REG
   055f   a6                plo R6
   0560   9f                ghi STACK_REG
   0561   b6                phi R6
   0562   16                inc R6
                            
   0563   f8 52             ldi PRINT.0
   0565   ad                plo CALL_REG
   0566   f8 01             ldi PRINT.1
   0568   bd                phi CALL_REG
                            
   0569   f8 00             ldi FCALL.0
   056b   ae                plo FCALL_REG
   056c   de                sep FCALL_REG
                            
   056d   8c                glo R12
   056e   fc 0e             adi 14
   0570   af                plo STACK_REG
   0571   9c                ghi R12
   0572   7c 00             adci 0
   0574   bf                phi STACK_REG
                            
   0575   ef                sex STACK_REG
                            
   0576   72                ldxa
   0577   ac                plo R12
   0578   72                ldxa
   0579   bc                phi R12
                            
   057a   72                ldxa
   057b   aa                plo R10
   057c   72                ldxa
   057d   ba                phi R10
                            
   057e   72                ldxa
   057f   a7                plo R7
   0580   72                ldxa
   0581   b7                phi R7
                            
   0582   72                ldxa
   0583   a6                plo R6
   0584   72                ldxa
   0585   b6                phi R6
                            
   0586   72                ldxa
   0587   a5                plo R5
   0588   f0                ldx
   0589   b5                phi R5
                            
   058a   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-READ DEC-------------------------------------
                        ;-R4-string pointer----------------------------
                        ;-R5-result pointer----------------------------
   058b                 READ_DEC
   058b   ef                sex STACK_REG
                            
   058c   94                ghi R4
   058d   73                stxd
   058e   84                glo R4
   058f   73                stxd        ;+7 string pointer
                            
   0590   95                ghi R5
   0591   73                stxd
   0592   85                glo R5
   0593   73                stxd        ;+5 result pointer
                            
   0594   f8 00             ldi 0
   0596   73                stxd
   0597   73                stxd
   0598   73                stxd
   0599   f8 0a             ldi 0Ah
   059b   73                stxd        ;+1 multiplier
                            
   059c   f8 00             ldi 0       ;set result to 0
   059e   55                str R5
   059f   15                inc R5
   05a0   55                str R5
   05a1   15                inc R5
   05a2   55                str R5
   05a3   15                inc R5
   05a4   55                str R5
                            
   05a5                 READ_DEC_MAIN_LOOP
   05a5   8f                glo STACK_REG
   05a6   fc 07             adi 7
   05a8   a6                plo R6
   05a9   9f                ghi STACK_REG
   05aa   7c 00             adci 0
   05ac   b6                phi R6
                            
   05ad   06                ldn R6
   05ae   a4                plo R4
   05af   16                inc R6
   05b0   06                ldn R6
   05b1   b4                phi R4
                            
   05b2   04                ldn R4
   05b3   ff 30             smi 48
   05b5   cb 06 1c          lbnf READ_DEC_END
   05b8   ff 0a             smi 10
   05ba   c3 06 1c          lbdf READ_DEC_END
                            
   05bd   8f                glo STACK_REG
   05be   fc 05             adi 5
   05c0   a6                plo R6
   05c1   9f                ghi STACK_REG
   05c2   7c 00             adci 0
   05c4   b6                phi R6
                            
   05c5   06                ldn R6
   05c6   a4                plo R4
   05c7   16                inc R6
   05c8   06                ldn R6
   05c9   b4                phi R4
                            
   05ca   b6                phi R6
   05cb   84                glo R4
   05cc   a6                plo R6
                            
   05cd   8f                glo STACK_REG
   05ce   a5                plo R5
   05cf   9f                ghi STACK_REG
   05d0   b5                phi R5
   05d1   15                inc R5
                            
   05d2   f8 72             ldi INTEGER_MUL.0     ;prepare to call INTEGER_MUL
   05d4   ad                plo CALL_REG
   05d5   f8 03             ldi INTEGER_MUL.1       
   05d7   bd                phi CALL_REG
                            
   05d8   f8 00             ldi FCALL.0
   05da   ae                plo FCALL_REG
   05db   de                sep FCALL_REG
                            
   05dc   8f                glo STACK_REG
   05dd   fc 07             adi 7
   05df   a6                plo R6
   05e0   9f                ghi STACK_REG
   05e1   7c 00             adci 0
   05e3   b6                phi R6
                            
   05e4   06                ldn R6
   05e5   a4                plo R4
   05e6   16                inc R6
   05e7   06                ldn R6
   05e8   b4                phi R4
                            
   05e9   8f                glo STACK_REG
   05ea   fc 05             adi 5
   05ec   a6                plo R6
   05ed   9f                ghi STACK_REG
   05ee   7c 00             adci 0
   05f0   b6                phi R6
                            
   05f1   06                ldn R6
   05f2   a5                plo R5
   05f3   16                inc R6
   05f4   06                ldn R6
   05f5   b5                phi R5
                            
   05f6   e5                sex R5
                            
   05f7   04                ldn R4
   05f8   ff 30             smi 48
                            
   05fa   f4                add
   05fb   55                str R5
   05fc   15                inc R5
                            
   05fd   f8 00             ldi 0
   05ff   74                adc
   0600   55                str R5
   0601   15                inc R5
                            
   0602   f8 00             ldi 0
   0604   74                adc
   0605   55                str R5
   0606   15                inc R5
                            
   0607   f8 00             ldi 0
   0609   74                adc
   060a   55                str R5
                        
   060b   14                inc R4
                            
   060c   8f                glo STACK_REG
   060d   fc 07             adi 7
   060f   a6                plo R6
   0610   9f                ghi STACK_REG
   0611   7c 00             adci 0
   0613   b6                phi R6
                            
   0614   84                glo R4
   0615   56                str R6
   0616   16                inc R6
   0617   94                ghi R4
   0618   56                str R6
                            
   0619   c0 05 a5          lbr READ_DEC_MAIN_LOOP
                           
   061c                 READ_DEC_END
   061c   8f                glo STACK_REG
   061d   fc 05             adi 5
   061f   af                plo STACK_REG
   0620   9f                ghi STACK_REG
   0621   7c 00             adci 0
   0623   bf                phi STACK_REG
                            
   0624   ef                sex STACK_REG
                            
   0625   72                ldxa            ;restore R4 and R5
   0626   a5                plo R5
   0627   72                ldxa
   0628   b5                phi R5
   0629   72                ldxa
   062a   a4                plo R4
   062b   f0                ldx
   062c   b4                phi R4
                            
   062d   de                sep RETURN      ;RETURN    
                        ;----------------------------------------------
                        
                        ;-READ HEX-------------------------------------
                        ;-R4-string pointer----------------------------
                        ;-R5-result pointer----------------------------
   062e                 READ_HEX
   062e   ef                sex STACK_REG
                            
   062f   96                ghi R6
   0630   73                stxd
   0631   86                glo R6
   0632   73                stxd
                            
   0633   97                ghi R7
   0634   73                stxd
   0635   87                glo R7
   0636   73                stxd
                            
   0637   94                ghi R4
   0638   73                stxd
   0639   84                glo R4
   063a   73                stxd        ;+3 string pointer
                            
   063b   95                ghi R5
   063c   73                stxd
   063d   85                glo R5
   063e   73                stxd        ;+1 result pointer
                            
   063f   f8 00             ldi 0       ;set result to 0
   0641   55                str R5
   0642   15                inc R5
   0643   55                str R5
   0644   15                inc R5
   0645   55                str R5
   0646   15                inc R5
   0647   55                str R5
                            
   0648   25                dec R5
   0649   25                dec R5
   064a   25                dec R5
                            
   064b                 READ_HEX_MAINLOOP
   064b   f8 00             ldi 0
   064d   a7                plo R7
                            
   064e   04                ldn R4
   064f   ff 30             smi 48
   0651   3b 9e             bm READ_HEX_END
   0653   17                inc R7
   0654   ff 0a             smi 10
   0656   3b 6a             bm READ_HEX_CONTINUE
   0658   ff 07             smi 7
   065a   3b 9e             bm READ_HEX_END
   065c   17                inc R7
   065d   ff 06             smi 6
   065f   3b 6a             bm READ_HEX_CONTINUE
   0661   ff 1a             smi 26
   0663   3b 9e             bm READ_HEX_END
   0665   17                inc R7
   0666   ff 06             smi 6
   0668   33 9e             bpz READ_HEX_END
                            
   066a                 READ_HEX_CONTINUE
   066a   f8 04             ldi 4
   066c   a6                plo R6
                        
   066d                 READ_HEX_SHIFTLOOP      ;result = result << 4
   066d   05                ldn R5
   066e   fe                shl
   066f   55                str R5
   0670   15                inc R5
                            
   0671   05                ldn R5
   0672   7e                shlc
   0673   55                str R5
   0674   15                inc R5
                            
   0675   05                ldn R5
   0676   7e                shlc
   0677   55                str R5
   0678   15                inc R5
                            
   0679   05                ldn R5
   067a   7e                shlc
   067b   55                str R5
                            
   067c   25                dec R5
   067d   25                dec R5
   067e   25                dec R5
                            
   067f   26                dec R6
   0680   86                glo R6
   0681   3a 6d             bnz READ_HEX_SHIFTLOOP
                            
   0683   e5                sex R5
                            
   0684   27                dec R7
   0685   87                glo R7
   0686   3a 8d             bnz READ_HEX_HEXDIGIT
   0688   04                ldn R4
   0689   ff 30             smi 48
   068b   30 99             br READ_HEX_NEXTCHAR
                        
   068d                 READ_HEX_HEXDIGIT   
   068d   27                dec R7
   068e   87                glo R7
   068f   3a 96             bnz READ_HEX_HEXDIGITLOWER
   0691   04                ldn R4
   0692   ff 37             smi 55
   0694   30 99             br READ_HEX_NEXTCHAR
                            
   0696                 READ_HEX_HEXDIGITLOWER
   0696   04                ldn R4
   0697   ff 57             smi 87
                            
   0699                 READ_HEX_NEXTCHAR
   0699   f4                add
   069a   55                str R5
   069b   14                inc R4
   069c   30 4b             br READ_HEX_MAINLOOP
                        
   069e                 READ_HEX_END
   069e   8f                glo STACK_REG
   069f   fc 05             adi 5
   06a1   af                plo STACK_REG
   06a2   9f                ghi STACK_REG
   06a3   7c 00             adci 0
   06a5   bf                phi STACK_REG
                            
   06a6   ef                sex STACK_REG
                            
   06a7   72                ldxa
   06a8   a7                plo R7
   06a9   72                ldxa
   06aa   b7                phi R7
                            
   06ab   72                ldxa
   06ac   a6                plo R6
   06ad   f0                ldx
   06ae   b6                phi R6
                            
   06af   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-FACTOR---------------------------------------
                        ;-R4-string pointer----------------------------
                        ;-R5-result pointer----------------------------
                        ;-R10-result code------------------------------
   06b0                 FACTOR
   06b0   ef                sex STACK_REG
                            
   06b1   94                ghi R4
   06b2   73                stxd
   06b3   84                glo R4
   06b4   73                stxd    ;+4 string pt
                            
   06b5   95                ghi R5
   06b6   73                stxd
   06b7   85                glo R5
   06b8   73                stxd    ;+2 result pt
                            
   06b9   f8 00             ldi 0
   06bb   73                stxd    ;+1 flag, indicates if the factor needs to be negated
                            
                            
   06bc                 FACTOR_MAIN
   06bc   04                ldn R4
   06bd   fb 20             xri 32
   06bf   c2 07 2b          lbz FACTOR_NEXT_CYCLE       ;if ' '
   06c2   04                ldn R4
   06c3   fb 2b             xri 43
   06c5   c2 07 2b          lbz FACTOR_NEXT_CYCLE       ;if '+'
   06c8   04                ldn R4
   06c9   fb 2d             xri 45
   06cb   c2 07 20          lbz FACTOR_NEGATE           ;if '-'
   06ce   04                ldn R4
   06cf   fb 28             xri 40
   06d1   c2 07 06          lbz FACTOR_PARENTHESIS      ;if '('
   06d4   04                ldn R4
   06d5   ff 30             smi 48
   06d7   cb 07 2f          lbnf FACTOR_END             ;if *R4 < '0'
   06da   ff 0a             smi 10
   06dc   c3 07 2f          lbdf FACTOR_END             ;if *R4 > '9'
                        
   06df   04                ldn R4
   06e0   fb 30             xri 48
   06e2   3a eb             bnz FACTOR_READ_DEC         ;if *R4 != '0'
                            
   06e4   14                inc R4                      ;increment R4 to get the next char
   06e5   04                ldn R4
   06e6   fb 78             xri 120
   06e8   32 f8             bz FACTOR_READ_HEX          ;if *R4 == 'x'
                            
   06ea   24                dec R4                      ;decrement R4 to step back
                        
   06eb                 FACTOR_READ_DEC    
   06eb   f8 8b             ldi READ_DEC.0
   06ed   ad                plo CALL_REG
   06ee   f8 05             ldi READ_DEC.1
   06f0   bd                phi CALL_REG
                            
   06f1   f8 00             ldi FCALL.0
   06f3   ae                plo FCALL_REG
   06f4   de                sep FCALL_REG
                            
   06f5   c0 07 2f          lbr FACTOR_END
                            
   06f8                 FACTOR_READ_HEX
   06f8   14                inc R4
                            
   06f9   f8 2e             ldi READ_HEX.0
   06fb   ad                plo CALL_REG
   06fc   f8 06             ldi READ_HEX.1
   06fe   bd                phi CALL_REG
                            
   06ff   f8 00             ldi FCALL.0
   0701   ae                plo FCALL_REG
   0702   de                sep FCALL_REG
                            
   0703   c0 07 2f          lbr FACTOR_END
                            
   0706                 FACTOR_PARENTHESIS
   0706   14                inc R4
                            
   0707   f8 55             ldi EXPRESSION.0
   0709   ad                plo CALL_REG
   070a   f8 08             ldi EXPRESSION.1
   070c   bd                phi CALL_REG
                            
   070d   f8 00             ldi FCALL.0
   070f   ae                plo FCALL_REG
   0710   de                sep FCALL_REG
                        
   0711                 FACTOR_PARENTHESIS_SKIPSPACES
   0711   44                lda R4
   0712   fb 20             xri 32
   0714   32 11             bz FACTOR_PARENTHESIS_SKIPSPACES
   0716   24                dec R4
                            
   0717   44                lda R4
   0718   fb 29             xri 41
   071a   c2 07 2f          lbz FACTOR_END
                            
   071d   c0 06 bc          lbr FACTOR_MAIN
                            
   0720                 FACTOR_NEGATE
   0720   8f                glo STACK_REG
   0721   a6                plo R6
   0722   9f                ghi STACK_REG
   0723   b6                phi R6
   0724   16                inc R6
                            
   0725   06                ldn R6
   0726   fb ff             xri 0FFh
   0728   fa 01             ani 1
   072a   56                str R6
                            
   072b                 FACTOR_NEXT_CYCLE
   072b   14                inc R4
   072c   c0 06 bc          lbr FACTOR_MAIN
                            
   072f                 FACTOR_END
   072f   8f                glo STACK_REG
   0730   a6                plo R6
   0731   9f                ghi STACK_REG
   0732   b6                phi R6
   0733   16                inc R6
                            
   0734   06                ldn R6
   0735   c2 07 55          lbz FACTOR_FINAL
                            
   0738   8f                glo STACK_REG
   0739   fc 02             adi 2
   073b   a6                plo R6
   073c   9f                ghi STACK_REG
   073d   7c 00             adci 0
   073f   b6                phi R6
                            
   0740   06                ldn R6
   0741   a5                plo R5
   0742   16                inc R6
   0743   06                ldn R6
   0744   b5                phi R5
                            
   0745   e5                sex R5
                            
   0746   f8 82             ldi 082h
   0748   fe                shl
   0749   a6                plo R6
                            
   074a                 FACTOR_INVERTING
   074a   f0                ldx
   074b   fb ff             xri 0FFh
   074d   7c 00             adci 0
   074f   55                str R5
   0750   60                irx
                            
   0751   26                dec R6
   0752   86                glo R6
   0753   3a 4a             bnz FACTOR_INVERTING
                            
   0755                 FACTOR_FINAL
   0755   8f                glo STACK_REG
   0756   fc 05             adi 5
   0758   af                plo STACK_REG
   0759   9f                ghi STACK_REG
   075a   7c 00             adci 0
   075c   bf                phi STACK_REG
                            
   075d   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-TERM-----------------------------------------
                        ;-R4-string pointer----------------------------
                        ;-R5-result------------------------------------
   075e                 TERM
   075e   ef                sex STACK_REG
                            
   075f   94                ghi R4
   0760   73                stxd
   0761   84                glo R4
   0762   73                stxd
                            
   0763   95                ghi R5
   0764   73                stxd
   0765   85                glo R5
   0766   73                stxd
                            
   0767   f8 b0             ldi FACTOR.0
   0769   ad                plo CALL_REG
   076a   f8 06             ldi FACTOR.1
   076c   bd                phi CALL_REG
                            
   076d   f8 00             ldi FCALL.0
   076f   ae                plo FCALL_REG
   0770   de                sep FCALL_REG
                            
   0771                 TERM_MAIN
   0771   04                ldn R4
   0772   fb 20             xri 32
   0774   c2 08 3f          lbz TERM_NEXT_CYCLE
   0777   04                ldn R4
   0778   fb 2a             xri 42
   077a   c2 07 ea          lbz TERM_MULTIPLY       ;if '*'
   077d   04                ldn R4
   077e   fb 2f             xri 47
   0780   32 85             bz TERM_DIVIDE          ;if '/'
                            
   0782   c0 08 43          lbr TERM_END
                            
   0785                 TERM_DIVIDE
   0785   14                inc R4
                            
   0786   f8 00             ldi 0
   0788   73                stxd
   0789   73                stxd
   078a   73                stxd
   078b   73                stxd    ;+5 remainder
                            
   078c   73                stxd
   078d   73                stxd
   078e   73                stxd
   078f   73                stxd    ;+1 divider
                            
   0790   8f                glo STACK_REG
   0791   a5                plo R5
   0792   9f                ghi STACK_REG
   0793   b5                phi R5
   0794   15                inc R5
                            
   0795   f8 b0             ldi FACTOR.0
   0797   ad                plo CALL_REG
   0798   f8 06             ldi FACTOR.1
   079a   bd                phi CALL_REG
                            
   079b   f8 00             ldi FCALL.0
   079d   ae                plo FCALL_REG
   079e   de                sep FCALL_REG
                            
   079f   8f                glo STACK_REG ;save R4 pointer
   07a0   fc 0b             adi 11
   07a2   a6                plo R6
   07a3   9f                ghi STACK_REG
   07a4   7c 00             adci 0
   07a6   b6                phi R6
                            
   07a7   84                glo R4
   07a8   56                str R6
   07a9   16                inc R6
   07aa   94                ghi R4
   07ab   56                str R6
                            
   07ac   8f                glo STACK_REG
   07ad   fc 09             adi 9
   07af   a8                plo R8
   07b0   9f                ghi STACK_REG
   07b1   7c 00             adci 0
   07b3   b8                phi R8
                            
   07b4   08                ldn R8
   07b5   a4                plo R4
   07b6   a6                plo R6
   07b7   18                inc R8
   07b8   08                ldn R8
   07b9   b4                phi R4
   07ba   b6                phi R6
                            
   07bb   8f                glo STACK_REG
   07bc   a5                plo R5
   07bd   9f                ghi STACK_REG
   07be   b5                phi R5
   07bf   15                inc R5
                            
   07c0   8f                glo STACK_REG
   07c1   fc 05             adi 5
   07c3   a7                plo R7
   07c4   9f                ghi STACK_REG
   07c5   7c 00             adci 0
   07c7   b7                phi R7
                            
   07c8   f8 d4             ldi INTEGER_DIV.0
   07ca   ad                plo CALL_REG
   07cb   f8 01             ldi INTEGER_DIV.1
   07cd   bd                phi CALL_REG
                            
   07ce   f8 00             ldi FCALL.0
   07d0   ae                plo FCALL_REG
   07d1   de                sep FCALL_REG
                            
   07d2   8f                glo STACK_REG
   07d3   fc 0b             adi 11
   07d5   a6                plo R6
   07d6   9f                ghi STACK_REG
   07d7   7c 00             adci 0
   07d9   b6                phi R6
                            
   07da   06                ldn R6
   07db   a4                plo R4
   07dc   16                inc R6
   07dd   06                ldn R6
   07de   b4                phi R4
                            
   07df   8f                glo STACK_REG
   07e0   fc 08             adi 8
   07e2   af                plo STACK_REG
   07e3   9f                ghi STACK_REG
   07e4   7c 00             adci 0
   07e6   bf                phi STACK_REG
                        
   07e7   c0 07 71          lbr TERM_MAIN
                            
   07ea                 TERM_MULTIPLY
   07ea   14                inc R4
                            
   07eb   f8 00             ldi 0
   07ed   73                stxd
   07ee   73                stxd
   07ef   73                stxd
   07f0   73                stxd
                            
   07f1   8f                glo STACK_REG
   07f2   a5                plo R5
   07f3   9f                ghi STACK_REG
   07f4   b5                phi R5
   07f5   15                inc R5
                            
   07f6   f8 b0             ldi FACTOR.0
   07f8   ad                plo CALL_REG
   07f9   f8 06             ldi FACTOR.1
   07fb   bd                phi CALL_REG
                            
   07fc   f8 00             ldi FCALL.0
   07fe   ae                plo FCALL_REG
   07ff   de                sep FCALL_REG
                            
   0800   8f                glo STACK_REG
   0801   fc 07             adi 7
   0803   a6                plo R6
   0804   9f                ghi STACK_REG
   0805   7c 00             adci 0
   0807   b6                phi R6
                            
   0808   84                glo R4
   0809   56                str R6
   080a   16                inc R6
   080b   94                ghi R4
   080c   56                str R6
                            
   080d   8f                glo STACK_REG
   080e   fc 05             adi 5
   0810   a8                plo R8
   0811   9f                ghi STACK_REG
   0812   7c 00             adci 0
   0814   b8                phi R8
                            
   0815   08                ldn R8
   0816   a4                plo R4
   0817   a6                plo R6
   0818   18                inc R8
   0819   08                ldn R8
   081a   b4                phi R4
   081b   b6                phi R6
                            
   081c   8f                glo STACK_REG
   081d   a5                plo R5
   081e   9f                ghi STACK_REG
   081f   b5                phi R5
   0820   15                inc R5
                            
   0821   f8 72             ldi INTEGER_MUL.0
   0823   ad                plo CALL_REG
   0824   f8 03             ldi INTEGER_MUL.1
   0826   bd                phi CALL_REG
                            
   0827   f8 00             ldi FCALL.0
   0829   ae                plo FCALL_REG
   082a   de                sep FCALL_REG
                            
   082b   8f                glo STACK_REG
   082c   fc 07             adi 7
   082e   a6                plo R6
   082f   9f                ghi STACK_REG
   0830   7c 00             adci 0
   0832   b6                phi R6
                            
   0833   06                ldn R6
   0834   a4                plo R4
   0835   16                inc R6
   0836   06                ldn R6
   0837   b4                phi R4
                            
   0838   1f                inc STACK_REG
   0839   1f                inc STACK_REG
   083a   1f                inc STACK_REG
   083b   1f                inc STACK_REG
                        
   083c   c0 07 71          lbr TERM_MAIN
                            
   083f                 TERM_NEXT_CYCLE
   083f   14                inc R4
   0840   c0 07 71          lbr TERM_MAIN
                            
   0843                 TERM_END
   0843   8f                glo STACK_REG
   0844   a6                plo R6
   0845   9f                ghi STACK_REG
   0846   b6                phi R6
   0847   16                inc R6
                            
   0848   46                lda R6
   0849   a5                plo R5
   084a   46                lda R6
   084b   b5                phi R5
                            
   084c   8f                glo STACK_REG
   084d   fc 04             adi 4
   084f   af                plo STACK_REG
   0850   9f                ghi STACK_REG
   0851   7c 00             adci 0
   0853   bf                phi STACK_REG
                            
   0854   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-EXPRESSION-----------------------------------
                        ;-R4-string pointer----------------------------
                        ;-R5-result pointer----------------------------
                        ;-Local registers------------------------------
                        ;-R6-R7----------------------------------------
   0855                 EXPRESSION
   0855   ef                sex STACK_REG
                            
   0856   97                ghi R7      ;saving local registers
   0857   73                stxd
   0858   87                glo R7
   0859   73                stxd
                            
   085a   96                ghi R6
   085b   73                stxd
   085c   86                glo R6
   085d   73                stxd
                            
   085e   94                ghi R4      ;R4 pointer to input string 
   085f   73                stxd
   0860   84                glo R4
   0861   73                stxd        ;+3 input string pointer
                            
   0862   95                ghi R5      ;R5 pointer to result
   0863   73                stxd
   0864   85                glo R5
   0865   73                stxd        ;+1 result pointer
                            
   0866                 EXPRESSION_SKIPSPACES           ;skip spaces
   0866   44                lda R4
   0867   fb 20             xri 32
   0869   32 66             bz EXPRESSION_SKIPSPACES
   086b   24                dec R4
                            
   086c   f8 5e             ldi TERM.0                  ;read TERM
   086e   ad                plo CALL_REG
   086f   f8 07             ldi TERM.1
   0871   bd                phi CALL_REG
                            
   0872   f8 00             ldi FCALL.0
   0874   ae                plo FCALL_REG
   0875   de                sep FCALL_REG
                            
   0876                 EXPRESSION_MAIN
   0876   04                ldn R4
   0877   fb 20             xri 32                      ;if ' '
   0879   c2 09 3b          lbz EXPRESSION_NEXT_CYCLE
   087c   04                ldn R4
   087d   fb 2b             xri 43                      ;if '+'
   087f   32 8a             bz EXPRESSION_ADD
   0881   04                ldn R4
   0882   fb 2d             xri 45                      ;if '-'
   0884   c2 08 e3          lbz EXPRESSION_SUB
                            
                            
   0887   c0 09 3f          lbr EXPRESSION_END
                            
   088a                 EXPRESSION_ADD
   088a   14                inc R4
                            
   088b   f8 00             ldi 0               ;new result
   088d   73                stxd
   088e   73                stxd
   088f   73                stxd
   0890   73                stxd
                            
   0891   8f                glo STACK_REG       ;set R5 pointer to new result
   0892   a5                plo R5
   0893   9f                ghi STACK_REG
   0894   b5                phi R5
   0895   15                inc R5
                            
   0896   f8 5e             ldi TERM.0          ;read TERM
   0898   ad                plo CALL_REG
   0899   f8 07             ldi TERM.1
   089b   bd                phi CALL_REG
                            
   089c   f8 00             ldi FCALL.0
   089e   ae                plo FCALL_REG
   089f   de                sep FCALL_REG
                            
   08a0   8f                glo STACK_REG       ; set R6 register to point to the input string pointer
   08a1   fc 07             adi 7
   08a3   a6                plo R6
   08a4   9f                ghi STACK_REG
   08a5   7c 00             adci 0
   08a7   b6                phi R6
                            
   08a8   84                glo R4              ;input string pointer = R4
   08a9   56                str R6
   08aa   16                inc R6
   08ab   94                ghi R4
   08ac   56                str R6
                            
   08ad   8f                glo STACK_REG       ;set R5 register to point to result
   08ae   a5                plo R5
   08af   9f                ghi STACK_REG
   08b0   b5                phi R5
   08b1   15                inc R5
                            
   08b2   8f                glo STACK_REG       ;set R6 register to point to the result pointer
   08b3   fc 05             adi 5
   08b5   a6                plo R6
   08b6   9f                ghi STACK_REG
   08b7   7c 00             adci 0
   08b9   b6                phi R6
                            
   08ba   06                ldn R6              ;R4 = result pointer
   08bb   a4                plo R4
   08bc   16                inc R6
   08bd   06                ldn R6
   08be   b4                phi R4
                            
   08bf   e4                sex R4
                            
   08c0   f8 02             ldi 2
   08c2   fe                shl
   08c3   a7                plo R7
                            
   08c4                 EXPRESSION_ADD_LOOP     ;*result pointer += result;
   08c4   05                ldn R5
   08c5   74                adc
   08c6   54                str R4
   08c7   15                inc R5
   08c8   60                irx
                            
   08c9   27                dec R7
   08ca   87                glo R7
   08cb   ca 08 c4          lbnz EXPRESSION_ADD_LOOP
                            
   08ce   ef                sex STACK_REG
                            
   08cf   8f                glo STACK_REG       
   08d0   fc 07             adi 7
   08d2   a6                plo R6
   08d3   9f                ghi STACK_REG
   08d4   7c 00             adci 0
   08d6   b6                phi R6
                            
   08d7   06                ldn R6              ;R4 = input string pointer
   08d8   a4                plo R4
   08d9   16                inc R6
   08da   06                ldn R6
   08db   b4                phi R4
                            
   08dc   1f                inc STACK_REG
   08dd   1f                inc STACK_REG
   08de   1f                inc STACK_REG
   08df   1f                inc STACK_REG
                        
   08e0   c0 08 76          lbr EXPRESSION_MAIN
                        
   08e3                 EXPRESSION_SUB
   08e3   14                inc R4
                            
   08e4   f8 00             ldi 0
   08e6   73                stxd
   08e7   73                stxd
   08e8   73                stxd
   08e9   73                stxd
                            
   08ea   8f                glo STACK_REG
   08eb   a5                plo R5
   08ec   9f                ghi STACK_REG
   08ed   b5                phi R5
   08ee   15                inc R5
                            
   08ef   f8 5e             ldi TERM.0
   08f1   ad                plo CALL_REG
   08f2   f8 07             ldi TERM.1
   08f4   bd                phi CALL_REG
                            
   08f5   f8 00             ldi FCALL.0
   08f7   ae                plo FCALL_REG
   08f8   de                sep FCALL_REG
                            
   08f9   8f                glo STACK_REG
   08fa   fc 07             adi 7
   08fc   a6                plo R6
   08fd   9f                ghi STACK_REG
   08fe   7c 00             adci 0
   0900   b6                phi R6
                            
   0901   84                glo R4
   0902   56                str R6
   0903   16                inc R6
   0904   94                ghi R4
   0905   56                str R6
                            
   0906   8f                glo STACK_REG
   0907   a5                plo R5
   0908   9f                ghi STACK_REG
   0909   b5                phi R5
   090a   15                inc R5
                            
   090b   8f                glo STACK_REG
   090c   fc 05             adi 5
   090e   a6                plo R6
   090f   9f                ghi STACK_REG
   0910   7c 00             adci 0
   0912   b6                phi R6
                            
   0913   06                ldn R6
   0914   a4                plo R4
   0915   16                inc R6
   0916   06                ldn R6
   0917   b4                phi R4
                            
   0918   e4                sex R4
                            
   0919   f8 82             ldi 082h
   091b   fe                shl
   091c   a7                plo R7
                            
   091d                 EXPRESSION_SUB_LOOP
   091d   05                ldn R5
   091e   75                sdb
   091f   54                str R4
   0920   15                inc R5
   0921   60                irx
                            
   0922   27                dec R7
   0923   87                glo R7
   0924   3a 1d             bnz EXPRESSION_SUB_LOOP
                            
   0926   ef                sex STACK_REG
                            
   0927   8f                glo STACK_REG
   0928   fc 07             adi 7
   092a   a6                plo R6
   092b   9f                ghi STACK_REG
   092c   7c 00             adci 0
   092e   b6                phi R6
                            
   092f   06                ldn R6
   0930   a4                plo R4
   0931   16                inc R6
   0932   06                ldn R6
   0933   b4                phi R4
                            
   0934   1f                inc STACK_REG
   0935   1f                inc STACK_REG
   0936   1f                inc STACK_REG
   0937   1f                inc STACK_REG
                        
   0938   c0 08 76          lbr EXPRESSION_MAIN
                        
   093b                 EXPRESSION_NEXT_CYCLE    
   093b   14                inc R4
   093c   c0 08 76          lbr EXPRESSION_MAIN
                            
   093f                 EXPRESSION_END
   093f   ef                sex STACK_REG
   0940   60                irx
                            
   0941   72                ldxa            ;restoring registers
   0942   a5                plo R5
   0943   72                ldxa
   0944   b5                phi R5
   0945   60                irx
   0946   60                irx
   0947   72                ldxa
   0948   a6                plo R6
   0949   72                ldxa
   094a   b6                phi R6
   094b   72                ldxa
   094c   a7                plo R7
   094d   f0                ldx
   094e   b7                phi R7
                            
   094f   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-DYN MEMORY INIT------------------------------
   0950                 DYN_MEMORY_INIT
   0950   f8 00             ldi HEAP_LASTADDRESS.0
   0952   a4                plo R4
   0953   f8 21             ldi HEAP_LASTADDRESS.1
   0955   b4                phi R4
                            
   0956   f8 10             ldi HEAP_START.0
   0958   54                str R4
   0959   14                inc R4
   095a   f8 21             ldi HEAP_START.1
   095c   54                str R4
                            
   095d   f8 10             ldi HEAP_START.0
   095f   a4                plo R4
   0960   f8 21             ldi HEAP_START.1
   0962   b4                phi R4
                            
   0963   f8 eb             ldi (HEAP_END - HEAP_START - 5).0
   0965   54                str R4
   0966   14                inc R4
   0967   f8 da             ldi (HEAP_END - HEAP_START - 5).1
   0969   54                str R4
   096a   14                inc R4
                            
   096b   f8 00             ldi 0
   096d   54                str R4
   096e   14                inc R4
   096f   54                str R4
   0970   14                inc R4
   0971   54                str R4
                            
   0972   de                sep RETURN
                        ;----------------------------------------------
                        
   0973                 DYN_MEMORY_DEBUG_STR
   0973   20 2d 3e 20       db " -> size: ",0,", address: ",0,", previous: ",0,", ",0
   0977   73 69 7a 65   
   097b   3a 20 00 2c   
   097f   20 61 64 64   
   0983   72 65 73 73   
   0987   3a 20 00 2c   
   098b   20 70 72 65   
   098f   76 69 6f 75   
   0993   73 3a 20 00   
   0997   2c 20 00      
   099a                 DYN_MEMORY_DEBUG_STR_FREE
   099a   46 52 45 45       db "FREE\r\n",0
   099e   0d 0a 00      
   09a1                 DYN_MEMORY_DEBUG_STR_USED
   09a1   55 53 45 44       db "USED\r\n",0
   09a5   0d 0a 00      
                        ;-DYN MEMORY DEBUG-----------------------------
   09a8                 DYN_MEMORY_DEBUG
   09a8   ef                sex STACK_REG
                            
   09a9   f8 00             ldi 0
   09ab   73                stxd
   09ac   73                stxd
   09ad   73                stxd
   09ae   73                stxd                    ;+14 address + 5
                            
   09af   73                stxd
   09b0   73                stxd
   09b1   f8 21             ldi HEAP_START.1
   09b3   73                stxd
   09b4   f8 10             ldi HEAP_START.0
   09b6   73                stxd                    ;+10 address
                            
   09b7   f8 00             ldi 0
   09b9   73                stxd                    ;+9 used
                            
   09ba   73                stxd
   09bb   73                stxd
   09bc   73                stxd
   09bd   73                stxd                    ;+5 previous
                            
   09be   73                stxd
   09bf   73                stxd
   09c0   73                stxd
   09c1   73                stxd                    ;+1 size
                            
   09c2                 DYN_MEMORY_DEBUG_MAINLOOP
   09c2   8f                glo STACK_REG
   09c3   fc 0a             adi 10
   09c5   a4                plo R4
   09c6   9f                ghi STACK_REG
   09c7   7c 00             adci 0
   09c9   b4                phi R4
                            
   09ca   e4                sex R4
                            
   09cb   f8 00             ldi HEAP_END.0
   09cd   f5                sd
   09ce   14                inc R4
   09cf   f8 fc             ldi HEAP_END.1
   09d1   75                sdb
                            
   09d2   c3 0a de          lbdf DYN_MEMORY_DEBUG_END    ;if address >= HEAP_END
                            
   09d5   8f                glo STACK_REG
   09d6   fc 0a             adi 10
   09d8   a4                plo R4
   09d9   9f                ghi STACK_REG
   09da   7c 00             adci 0
   09dc   b4                phi R4
                            
   09dd   44                lda R4                      ;R5 = address
   09de   a5                plo R5
   09df   44                lda R4
   09e0   b5                phi R5
                            
   09e1   8f                glo STACK_REG
   09e2   a4                plo R4
   09e3   9f                ghi STACK_REG
   09e4   b4                phi R4
   09e5   14                inc R4
                            
   09e6   45                lda R5
   09e7   54                str R4
   09e8   14                inc R4
                            
   09e9   45                lda R5
   09ea   54                str R4
   09eb   14                inc R4
                            
   09ec   14                inc R4
   09ed   14                inc R4
                            
   09ee   45                lda R5
   09ef   54                str R4
   09f0   14                inc R4
                            
   09f1   45                lda R5
   09f2   54                str R4
   09f3   14                inc R4
                            
   09f4   14                inc R4
   09f5   14                inc R4
                            
   09f6   45                lda R5
   09f7   54                str R4
                            
   09f8   8f                glo STACK_REG
   09f9   fc 0e             adi 14
   09fb   a4                plo R4
   09fc   9f                ghi STACK_REG
   09fd   7c 00             adci 0
   09ff   b4                phi R4
                            
   0a00   85                glo R5
   0a01   54                str R4
   0a02   14                inc R4
                            
   0a03   95                ghi R5
   0a04   54                str R4
                            
   0a05                 DYN_MEMORY_DEBUG_PRINT
   0a05   8f                glo STACK_REG               ;set R4 to address
   0a06   fc 0a             adi 10
   0a08   a4                plo R4
   0a09   9f                ghi STACK_REG
   0a0a   7c 00             adci 0
   0a0c   b4                phi R4
                        
   0a0d   f8 ae             ldi PRINT_DEC.0             ;print address in decimal
   0a0f   ad                plo CALL_REG
   0a10   f8 04             ldi PRINT_DEC.1
   0a12   bd                phi CALL_REG
                            
   0a13   f8 00             ldi FCALL.0
   0a15   ae                plo FCALL_REG
   0a16   de                sep FCALL_REG
                            
   0a17   f8 73             ldi DYN_MEMORY_DEBUG_STR.0      ;print the debug string
   0a19   a6                plo R6
   0a1a   f8 09             ldi DYN_MEMORY_DEBUG_STR.1
   0a1c   b6                phi R6
                            
   0a1d   f8 52             ldi PRINT.0         ;prepare to call PRINT
   0a1f   ad                plo CALL_REG
   0a20   f8 01             ldi PRINT.1
   0a22   bd                phi CALL_REG
                            
   0a23   f8 00             ldi FCALL.0
   0a25   ae                plo FCALL_REG
   0a26   de                sep FCALL_REG       ;call PRINT
                            
   0a27   86                glo R6                  ;save R6 value
   0a28   a7                plo R7
   0a29   96                ghi R6
   0a2a   b7                phi R7
                            
   0a2b   8f                glo STACK_REG           ;set R4 to size
   0a2c   a4                plo R4
   0a2d   9f                ghi STACK_REG
   0a2e   b4                phi R4
   0a2f   14                inc R4
                        
   0a30   f8 ae             ldi PRINT_DEC.0         ;print size in decimal
   0a32   ad                plo CALL_REG
   0a33   f8 04             ldi PRINT_DEC.1
   0a35   bd                phi CALL_REG
                            
   0a36   f8 00             ldi FCALL.0
   0a38   ae                plo FCALL_REG
   0a39   de                sep FCALL_REG
                            
   0a3a   87                glo R7                  ;continue printing the debug string
   0a3b   a6                plo R6
   0a3c   97                ghi R7
   0a3d   b6                phi R6
                            
   0a3e   f8 52             ldi PRINT.0             ;prepare to call PRINT
   0a40   ad                plo CALL_REG
   0a41   f8 01             ldi PRINT.1
   0a43   bd                phi CALL_REG
                            
   0a44   f8 00             ldi FCALL.0
   0a46   ae                plo FCALL_REG
   0a47   de                sep FCALL_REG           ;call PRINT
                            
   0a48   86                glo R6                  ;save R6 value
   0a49   a7                plo R7
   0a4a   96                ghi R6
   0a4b   b7                phi R7
                            
   0a4c   8f                glo STACK_REG           ;set R4 to address+5
   0a4d   fc 0e             adi 14
   0a4f   a4                plo R4
   0a50   9f                ghi STACK_REG
   0a51   7c 00             adci 0
   0a53   b4                phi R4
                            
   0a54   f8 ae             ldi PRINT_DEC.0         ;print address+5 in decimal
   0a56   ad                plo CALL_REG
   0a57   f8 04             ldi PRINT_DEC.1
   0a59   bd                phi CALL_REG
                            
   0a5a   f8 00             ldi FCALL.0
   0a5c   ae                plo FCALL_REG
   0a5d   de                sep FCALL_REG
                            
   0a5e   87                glo R7                  ;continue printing the debug string
   0a5f   a6                plo R6
   0a60   97                ghi R7
   0a61   b6                phi R6
                            
   0a62   f8 52             ldi PRINT.0             ;prepare to call PRINT
   0a64   ad                plo CALL_REG
   0a65   f8 01             ldi PRINT.1
   0a67   bd                phi CALL_REG
                            
   0a68   f8 00             ldi FCALL.0
   0a6a   ae                plo FCALL_REG
   0a6b   de                sep FCALL_REG           ;call PRINT
                            
   0a6c   86                glo R6                  ;save R6 value
   0a6d   a7                plo R7
   0a6e   96                ghi R6
   0a6f   b7                phi R7
                            
   0a70   8f                glo STACK_REG           ;set R4 to previous
   0a71   fc 05             adi 5
   0a73   a4                plo R4
   0a74   9f                ghi STACK_REG
   0a75   7c 00             adci 0
   0a77   b4                phi R4
                            
   0a78   f8 ae             ldi PRINT_DEC.0         ;print previous in decimal
   0a7a   ad                plo CALL_REG
   0a7b   f8 04             ldi PRINT_DEC.1
   0a7d   bd                phi CALL_REG
                            
   0a7e   f8 00             ldi FCALL.0
   0a80   ae                plo FCALL_REG
   0a81   de                sep FCALL_REG
                            
   0a82   87                glo R7                  ;continue printing the debug string
   0a83   a6                plo R6
   0a84   97                ghi R7
   0a85   b6                phi R6
                            
   0a86   f8 52             ldi PRINT.0             ;prepare to call PRINT
   0a88   ad                plo CALL_REG
   0a89   f8 01             ldi PRINT.1
   0a8b   bd                phi CALL_REG
                            
   0a8c   f8 00             ldi FCALL.0
   0a8e   ae                plo FCALL_REG
   0a8f   de                sep FCALL_REG           ;call PRINT
                            
   0a90   8f                glo STACK_REG           ;set R4 to previous
   0a91   fc 09             adi 9
   0a93   a4                plo R4
   0a94   9f                ghi STACK_REG
   0a95   7c 00             adci 0
   0a97   b4                phi R4
                            
   0a98   04                ldn R4
   0a99   32 a3             bz DYN_MEMORY_DEBUG_FREE
                            
   0a9b   f8 a1             ldi DYN_MEMORY_DEBUG_STR_USED.0
   0a9d   a6                plo R6
   0a9e   f8 09             ldi DYN_MEMORY_DEBUG_STR_USED.1
   0aa0   b6                phi R6
                            
   0aa1   30 a9             br DYN_MEMORY_DEBUG_NEXTADDRESS
                            
   0aa3                 DYN_MEMORY_DEBUG_FREE
   0aa3   f8 9a             ldi DYN_MEMORY_DEBUG_STR_FREE.0
   0aa5   a6                plo R6
   0aa6   f8 09             ldi DYN_MEMORY_DEBUG_STR_FREE.1
   0aa8   b6                phi R6
                            
   0aa9                 DYN_MEMORY_DEBUG_NEXTADDRESS
   0aa9   f8 52             ldi PRINT.0             ;prepare to call PRINT
   0aab   ad                plo CALL_REG
   0aac   f8 01             ldi PRINT.1
   0aae   bd                phi CALL_REG
                            
   0aaf   f8 00             ldi FCALL.0
   0ab1   ae                plo FCALL_REG
   0ab2   de                sep FCALL_REG           ;call PRINT
                            
   0ab3   8f                glo STACK_REG           ;set R4 to address
   0ab4   fc 0a             adi 10
   0ab6   a4                plo R4
   0ab7   9f                ghi STACK_REG
   0ab8   7c 00             adci 0
   0aba   b4                phi R4
                            
   0abb   8f                glo STACK_REG           ;set R5 to address+5
   0abc   fc 0e             adi 14
   0abe   a5                plo R5
   0abf   9f                ghi STACK_REG
   0ac0   7c 00             adci 0
   0ac2   b5                phi R5
                            
   0ac3   8f                glo STACK_REG           ;set R6 to size
   0ac4   a6                plo R6
   0ac5   9f                ghi STACK_REG
   0ac6   b6                phi R6
   0ac7   16                inc R6
                            
   0ac8   e6                sex R6
                            
   0ac9   45                lda R5
   0aca   f4                add
   0acb   60                irx
   0acc   54                str R4
   0acd   14                inc R4
                            
   0ace   45                lda R5
   0acf   74                adc
   0ad0   60                irx
   0ad1   54                str R4
   0ad2   14                inc R4
                            
   0ad3   45                lda R5
   0ad4   74                adc
   0ad5   60                irx
   0ad6   54                str R4
   0ad7   14                inc R4
                            
   0ad8   45                lda R5
   0ad9   74                adc
   0ada   54                str R4
                            
   0adb   c0 09 c2          lbr DYN_MEMORY_DEBUG_MAINLOOP
                        
   0ade                 DYN_MEMORY_DEBUG_END
   0ade   8f                glo STACK_REG           ;set R6 to size
   0adf   fc 11             adi 17
   0ae1   af                plo STACK_REG
   0ae2   9f                ghi STACK_REG
   0ae3   7c 00             adci 0
   0ae5   bf                phi STACK_REG
                            
   0ae6   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-DYN MEMORY ALLOCATION------------------------
                        ;-R4-Size--------------------------------------
                        ;-R10-return address---------------------------
                        ;-Local registers------------------------------
                        ;-R5-R6-R7-R8----------------------------------
   0ae7                 DYN_MEMORY_ALLOC
   0ae7   ef                sex STACK_REG
                            
   0ae8   98                ghi R8
   0ae9   73                stxd
   0aea   88                glo R8
   0aeb   73                stxd
                            
   0aec   97                ghi R7
   0aed   73                stxd
   0aee   87                glo R7
   0aef   73                stxd
                            
   0af0   96                ghi R6
   0af1   73                stxd
   0af2   86                glo R6
   0af3   73                stxd
                            
   0af4   95                ghi R5
   0af5   73                stxd
   0af6   85                glo R5
   0af7   73                stxd
                            
   0af8   f8 00             ldi 0
   0afa   73                stxd
   0afb   73                stxd                ;+7 currentSize
                            
   0afc   94                ghi R4
   0afd   73                stxd
   0afe   84                glo R4
   0aff   73                stxd                ;+5 size
                            
   0b00   84                glo R4              ;R4 += 5
   0b01   fc 05             adi 5
   0b03   a4                plo R4
   0b04   94                ghi R4
   0b05   7c 00             adci 0
   0b07   b4                phi R4
                            
   0b08   94                ghi R4
   0b09   73                stxd
   0b0a   84                glo R4              ;newSize is initialized to size+5 for further calculation
   0b0b   73                stxd                ;+3 newSize
                        
   0b0c   f8 fc             ldi HEAP_END.1
   0b0e   73                stxd
   0b0f   f8 00             ldi HEAP_END.0
   0b11   73                stxd                ;+1 endAddress = HEAP_END
                            
   0b12   f8 00             ldi HEAP_LASTADDRESS.0
   0b14   a4                plo R4
   0b15   f8 21             ldi HEAP_LASTADDRESS.1
   0b17   b4                phi R4
                            
   0b18   44                lda R4
   0b19   a5                plo R5
   0b1a   44                lda R4
   0b1b   b5                phi R5              ;R5 = lastAddress
                            
   0b1c   f8 00             ldi 0               ;R10 = 0
   0b1e   aa                plo R10
   0b1f   ba                phi R10
                            
   0b20   f8 02             ldi 2               ;R8 = 2
   0b22   a8                plo R8
                            
   0b23                 DYN_MEMORY_ALLOC_MAINLOOP
   0b23   8f                glo STACK_REG       ;set R4 pointer to endAddress
   0b24   a4                plo R4
   0b25   9f                ghi STACK_REG
   0b26   b4                phi R4
   0b27   14                inc R4
                            
   0b28   e4                sex R4
                            
   0b29   85                glo R5              ;currentAddress - endAddress
   0b2a   f7                sm
   0b2b   60                irx
   0b2c   95                ghi R5
   0b2d   77                smb
                            
   0b2e   c3 0c 16          lbdf DYN_MEMORY_ALLOC_NEXTPASS      ;if currentAddress >= endAddress
                            
   0b31   8f                glo STACK_REG                       ;set R4 pointer to currentSize
   0b32   fc 07             adi 7
   0b34   a4                plo R4
   0b35   9f                ghi STACK_REG
   0b36   7c 00             adci 0
   0b38   b4                phi R4
                            
   0b39   85                glo R5                              ;R6 = R5 (currentAddress)
   0b3a   a6                plo R6
   0b3b   95                ghi R5
   0b3c   b6                phi R6
                            
   0b3d   46                lda R6                              ;currentSize = block size
   0b3e   54                str R4
   0b3f   14                inc R4
                            
   0b40   46                lda R6
   0b41   54                str R4
                            
   0b42   16                inc R6
   0b43   16                inc R6
                                
   0b44   06                ldn R6
   0b45   ca 0b fc          lbnz DYN_MEMORY_ALLOC_NEXTADDRESS   ;if the current block is USED
                            
   0b48   24                dec R4
                            
   0b49   8f                glo STACK_REG                   ;R6 pointer set to size
   0b4a   fc 05             adi 5
   0b4c   a6                plo R6
   0b4d   9f                ghi STACK_REG
   0b4e   7c 00             adci 0
   0b50   b6                phi R6
                            
   0b51   06                ldn R6                          ;currentSize == size
   0b52   f5                sd
   0b53   3a 71             bnz DYN_MEMORY_ALLOC_SIZEBIGGER
   0b55   60                irx
   0b56   16                inc R6
   0b57   06                ldn R6
   0b58   75                sdb
                        
   0b59   26                dec R6                              ;set back R6
   0b5a   24                dec R4                              ;set back R4
                            
   0b5b   ca 0b 71          lbnz DYN_MEMORY_ALLOC_SIZEBIGGER    ;if currentSize != size
                        
   0b5e                 DYN_MEMORY_ALLOC_SIZEEQ
   0b5e   85                glo R5                              ;R6 = currentAddress + 4
   0b5f   fc 04             adi 4
   0b61   a6                plo R6
   0b62   95                ghi R5
   0b63   7c 00             adci 0
   0b65   b6                phi R6
                            
   0b66   f8 01             ldi 1
   0b68   56                str R6                              ;used = 1
                            
   0b69   16                inc R6                              ;R6++
   0b6a   86                glo R6
   0b6b   aa                plo R10                             ;R10 = R6
   0b6c   96                ghi R6
   0b6d   ba                phi R10
                            
   0b6e   c0 0c 31          lbr DYN_MEMORY_ALLOC_END            ;RETURN
                        
   0b71                 DYN_MEMORY_ALLOC_SIZEBIGGER
   0b71   8f                glo STACK_REG                   ;R6 pinter set to newSize (size+5)
   0b72   fc 03             adi 3
   0b74   a6                plo R6
   0b75   9f                ghi STACK_REG
   0b76   7c 00             adci 0
   0b78   b6                phi R6
                            
   0b79   46                lda R6                          ;currentSize - newSize (size+5)
   0b7a   f5                sd
   0b7b   60                irx
   0b7c   46                lda R6
   0b7d   75                sdb
                            
   0b7e   26                dec R6                              ;set back R6
   0b7f   26                dec R6
                               
   0b80   cb 0b fc          lbnf DYN_MEMORY_ALLOC_NEXTADDRESS   ;if currentSize < newSize (size+5)
                            
   0b83   24                dec R4                              ;R4 pointer to size
   0b84   24                dec R4
   0b85   24                dec R4
                            
   0b86   85                glo R5                              ;R6 = R5 (currentAddress)
   0b87   a6                plo R6
   0b88   95                ghi R5
   0b89   b6                phi R6
                            
   0b8a   44                lda R4                              ;set current block size to size
   0b8b   56                str R6
   0b8c   16                inc R6
                            
   0b8d   44                lda R4
   0b8e   56                str R6
   0b8f   16                inc R6
                            
   0b90   16                inc R6                              ;R6 += 2
   0b91   16                inc R6
                            
   0b92   f8 01             ldi 1                               ;set used to 1
   0b94   56                str R6
                            
   0b95   16                inc R6                              ;R6++
   0b96   86                glo R6
   0b97   aa                plo R10                             ;R10 = R6
   0b98   96                ghi R6                              ;R10 is set for return
   0b99   ba                phi R10
                            
   0b9a   8f                glo STACK_REG                   ;R4 pinter set to newSize (size+5)
   0b9b   fc 03             adi 3
   0b9d   a4                plo R4
   0b9e   9f                ghi STACK_REG
   0b9f   7c 00             adci 0
   0ba1   b4                phi R4
                            
   0ba2   85                glo R5                          ;R7 = currentAddress + size + 5
   0ba3   f4                add
   0ba4   60                irx
   0ba5   a7                plo R7
   0ba6   95                ghi R5
   0ba7   74                adc
   0ba8   b7                phi R7                          ;R7 is the newAddress
                            
   0ba9   f8 00             ldi HEAP_LASTADDRESS.0
   0bab   a4                plo R4
   0bac   f8 21             ldi HEAP_LASTADDRESS.1
   0bae   b4                phi R4
                            
   0baf   87                glo R7                          ;lastAddress = R7
   0bb0   54                str R4
   0bb1   14                inc R4
                            
   0bb2   97                ghi R7
   0bb3   54                str R4
                        
   0bb4   8f                glo STACK_REG                   ;R4 pinter set to newSize
   0bb5   fc 03             adi 3
   0bb7   a4                plo R4
   0bb8   9f                ghi STACK_REG
   0bb9   7c 00             adci 0
   0bbb   b4                phi R4
                            
   0bbc   8f                glo STACK_REG                   ;R4 pinter set to currentSize
   0bbd   fc 07             adi 7
   0bbf   a6                plo R6
   0bc0   9f                ghi STACK_REG
   0bc1   7c 00             adci 0
   0bc3   b6                phi R6
                            
   0bc4   46                lda R6                          ;newSize = currentSize - (size + 5)
   0bc5   f7                sm
   0bc6   54                str R4
   0bc7   60                irx
                            
   0bc8   46                lda R6
   0bc9   77                smb
   0bca   54                str R4
                            
   0bcb   24                dec R4                          ;set back R4 to newSize
                            
   0bcc   87                glo R7                          ;R6 = R7 (newAddress)
   0bcd   a6                plo R6
   0bce   97                ghi R7
   0bcf   b6                phi R6
                            
   0bd0   44                lda R4                          ;new block size = newSize
   0bd1   56                str R6
   0bd2   16                inc R6
                            
   0bd3   44                lda R4
   0bd4   56                str R6
   0bd5   16                inc R6
                            
   0bd6   85                glo R5                          ;new block previous address = currentAddress
   0bd7   56                str R6
   0bd8   16                inc R6
                            
   0bd9   95                ghi R5
   0bda   56                str R6
   0bdb   16                inc R6
                            
   0bdc   f8 00             ldi 0                           ;new block used = 0
   0bde   56                str R6
   0bdf   16                inc R6
                            
   0be0   24                dec R4
   0be1   24                dec R4
                            
   0be2   86                glo R6                          ;R6 = R6 + newSize
   0be3   f4                add
   0be4   60                irx
   0be5   a6                plo R6
   0be6   96                ghi R6
   0be7   74                adc
   0be8   b6                phi R6
                            
   0be9   16                inc R6                          ;R6 += 2
   0bea   16                inc R6
                            
   0beb   86                glo R6
   0bec   ff 00             smi HEAP_END.0
   0bee   96                ghi R6
   0bef   7f fc             smbi HEAP_END.1
                            
   0bf1   c3 0c 31          lbdf DYN_MEMORY_ALLOC_END
                            
   0bf4   87                glo R7                          ;next block previous address = R7
   0bf5   56                str R6
   0bf6   16                inc R6
                            
   0bf7   97                ghi R7
   0bf8   56                str R6
                            
   0bf9   c0 0c 31          lbr DYN_MEMORY_ALLOC_END
                            
   0bfc                 DYN_MEMORY_ALLOC_NEXTADDRESS
   0bfc   8f                glo STACK_REG               ;set R4 pointer to currentSize
   0bfd   fc 07             adi 7
   0bff   a4                plo R4
   0c00   9f                ghi STACK_REG
   0c01   7c 00             adci 0
   0c03   b4                phi R4
                            
   0c04   85                glo R5
   0c05   f4                add
   0c06   60                irx
   0c07   a5                plo R5
   0c08   95                ghi R5
   0c09   74                adc
   0c0a   b5                phi R5                          ;currentAddress += size
                            
   0c0b   85                glo R5
   0c0c   fc 05             adi 5
   0c0e   a5                plo R5
   0c0f   95                ghi R5
   0c10   7c 00             adci 0
   0c12   b5                phi R5                          ;currentAddress += 5
                            
   0c13   c0 0b 23          lbr DYN_MEMORY_ALLOC_MAINLOOP
                            
   0c16                 DYN_MEMORY_ALLOC_NEXTPASS
   0c16   f8 10             ldi HEAP_START.0
   0c18   a5                plo R5
   0c19   f8 21             ldi HEAP_START.1
   0c1b   b5                phi R5
                            
   0c1c   8f                glo STACK_REG                       ;set R4 pointer to endAddress
   0c1d   a4                plo R4
   0c1e   9f                ghi STACK_REG
   0c1f   b4                phi R4
   0c20   14                inc R4
                            
   0c21   f8 00             ldi HEAP_LASTADDRESS.0
   0c23   a6                plo R6
   0c24   f8 21             ldi HEAP_LASTADDRESS.1
   0c26   b6                phi R6
                            
   0c27   46                lda R6
   0c28   54                str R4
   0c29   14                inc R4
                            
   0c2a   46                lda R6
   0c2b   54                str R4
                        
   0c2c   28                dec R8
   0c2d   88                glo R8
   0c2e   ca 0b 23          lbnz DYN_MEMORY_ALLOC_MAINLOOP
                            
   0c31                 DYN_MEMORY_ALLOC_END
   0c31   8f                glo STACK_REG
   0c32   fc 09             adi 9
   0c34   af                plo STACK_REG
   0c35   9f                ghi STACK_REG
   0c36   7c 00             adci 0
   0c38   bf                phi STACK_REG
                            
   0c39   ef                sex STACK_REG
                            
   0c3a   72                ldxa
   0c3b   a5                plo R5
   0c3c   72                ldxa
   0c3d   b5                phi R5
                            
   0c3e   72                ldxa
   0c3f   a6                plo R6
   0c40   72                ldxa
   0c41   b6                phi R6
                            
   0c42   72                ldxa
   0c43   a7                plo R7
   0c44   72                ldxa
   0c45   b7                phi R7
                            
   0c46   72                ldxa
   0c47   a8                plo R8
   0c48   f0                ldx
   0c49   b8                phi R8
                            
   0c4a   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-DYN MEMORY FREE------------------------------
                        ;-R4-address-----------------------------------
                        ;-Local registers------------------------------
                        ;-R5-R6----------------------------------------
   0c4b                 DYN_MEMORY_FREE
   0c4b   ef                sex STACK_REG
                            
   0c4c   95                ghi R5      ;saving local registers
   0c4d   73                stxd
   0c4e   85                glo R5
   0c4f   73                stxd
                            
   0c50   96                ghi R6
   0c51   73                stxd
   0c52   86                glo R6
   0c53   73                stxd
                            
   0c54   f8 00             ldi 0
   0c56   73                stxd
   0c57   73                stxd
   0c58   73                stxd
   0c59   73                stxd        ;+5 size
                            
   0c5a   73                stxd
   0c5b   73                stxd
   0c5c   73                stxd
   0c5d   73                stxd        ;+1 nextSize
                            
   0c5e   24                dec R4      ;R4-- (address--)
   0c5f   54                str R4      ;set current block to free
                            
   0c60   24                dec R4
   0c61   24                dec R4
                            
   0c62   44                lda R4      ;R6 = previous block address
   0c63   a6                plo R6
   0c64   44                lda R4
   0c65   b6                phi R6
                            
   0c66   24                dec R4      ;set R4 to the beginning of the current block
   0c67   24                dec R4
   0c68   24                dec R4
   0c69   24                dec R4
                            
   0c6a   86                glo R6
   0c6b   ca 0c 74          lbnz DYN_MEMORY_FREE_NEXTCHECK
   0c6e   96                ghi R6
   0c6f   ca 0c 74          lbnz DYN_MEMORY_FREE_NEXTCHECK      ;if previousAddress != 0
                            
   0c72   30 83             br DYN_MEMORY_FREE_MERGE
                        
   0c74                 DYN_MEMORY_FREE_NEXTCHECK
   0c74   86                glo R6                              ;set R5 pointer to previous block used
   0c75   fc 04             adi 4
   0c77   a5                plo R5
   0c78   96                ghi R6
   0c79   7c 00             adci 0
   0c7b   b5                phi R5
                            
   0c7c   05                ldn R5
   0c7d   3a 83             bnz DYN_MEMORY_FREE_MERGE           ;if used != 0
                            
   0c7f   86                glo R6                              ;set R4 to previous block
   0c80   a4                plo R4
   0c81   96                ghi R6
   0c82   b4                phi R4
                            
   0c83                 DYN_MEMORY_FREE_MERGE
   0c83   8f                glo STACK_REG                       ;set R5 pointer to size
   0c84   fc 05             adi 5
   0c86   a5                plo R5
   0c87   9f                ghi STACK_REG
   0c88   7c 00             adci 0
   0c8a   b5                phi R5
                            
   0c8b   e5                sex R5                              ;set R5 to pointer
                            
   0c8c   44                lda R4                              ;load block size to size
   0c8d   55                str R5
   0c8e   15                inc R5
                            
   0c8f   44                lda R4
   0c90   55                str R5
                            
   0c91   24                dec R4
   0c92   24                dec R4                              ;set back R4 and R5
   0c93   25                dec R5
                            
   0c94   84                glo R4                              ;R6 (nextAddress) = address + 5 
   0c95   fc 05             adi 5
   0c97   a6                plo R6
   0c98   94                ghi R4
   0c99   7c 00             adci 0
   0c9b   b6                phi R6
                            
   0c9c   86                glo R6                              ;R6 += size
   0c9d   f4                add
   0c9e   60                irx
   0c9f   a6                plo R6
   0ca0   96                ghi R6
   0ca1   74                adc
   0ca2   b6                phi R6
                            
   0ca3                 DYN_MEMORY_FREE_MERGELOOP
   0ca3   86                glo R6
   0ca4   ff 00             smi HEAP_END.0
   0ca6   96                ghi R6
   0ca7   7f fc             smbi HEAP_END.1
                            
   0ca9   c3 0c e2          lbdf DYN_MEMORY_FREE_END            ;if nextAddress - HEAP_END >= 0
                            
   0cac   86                glo R6                              ;set R5 to nextAddress used
   0cad   fc 04             adi 4
   0caf   a5                plo R5
   0cb0   96                ghi R6
   0cb1   7c 00             adci 0
   0cb3   b5                phi R5
                            
   0cb4   05                ldn R5
   0cb5   ca 0c db          lbnz DYN_MEMORY_FREE_SETPREVIOUS    ;if used != 0
                            
   0cb8   8f                glo STACK_REG                       ;set R5 pointer to nextSize
   0cb9   a5                plo R5
   0cba   9f                ghi STACK_REG
   0cbb   b5                phi R5
   0cbc   15                inc R5
                            
   0cbd   46                lda R6                              ;load size + 5 to nextSize 
   0cbe   fc 05             adi 5
   0cc0   55                str R5
   0cc1   60                irx
                            
   0cc2   06                ldn R6
   0cc3   7c 00             adci 0
   0cc5   55                str R5
                            
   0cc6   25                dec R5                              ;set back R5 and R6
   0cc7   26                dec R6
                            
   0cc8   04                ldn R4                              ;current block size += nextSize
   0cc9   f4                add
   0cca   54                str R4
   0ccb   60                irx
   0ccc   14                inc R4
                            
   0ccd   04                ldn R4
   0cce   74                adc
   0ccf   54                str R4
                            
   0cd0   25                dec R5                              ;set back R4 and R5
   0cd1   24                dec R4
                            
   0cd2   86                glo R6                              ;R6 (nextAddress) += nextSize
   0cd3   f4                add
   0cd4   a6                plo R6
   0cd5   60                irx
   0cd6   96                ghi R6
   0cd7   74                adc
   0cd8   b6                phi R6
                            
   0cd9   30 a3             br DYN_MEMORY_FREE_MERGELOOP
                        
   0cdb                 DYN_MEMORY_FREE_SETPREVIOUS    
   0cdb   16                inc R6                              ;increment nextAddress to previous address section
   0cdc   16                inc R6
                            
   0cdd   84                glo R4                              ;set previous address to R4 value
   0cde   56                str R6
   0cdf   16                inc R6
   0ce0   94                ghi R4
   0ce1   56                str R6
                        
   0ce2                 DYN_MEMORY_FREE_END
   0ce2   8f                glo STACK_REG
   0ce3   fc 09             adi 9
   0ce5   af                plo STACK_REG
   0ce6   9f                ghi STACK_REG
   0ce7   7c 00             adci 0
   0ce9   bf                phi STACK_REG
                            
   0cea   ef                sex STACK_REG
                            
   0ceb   f8 00             ldi HEAP_LASTADDRESS.0
   0ced   a5                plo R5
   0cee   f8 21             ldi HEAP_LASTADDRESS.1
   0cf0   b5                phi R5
                            
   0cf1   84                glo R4
   0cf2   55                str R5
   0cf3   15                inc R5
                            
   0cf4   94                ghi R4
   0cf5   55                str R5
                            
   0cf6   72                ldxa            ;restoring local registers
   0cf7   a6                plo R6
   0cf8   72                ldxa
   0cf9   b6                phi R6
                            
   0cfa   72                ldxa
   0cfb   a5                plo R5
   0cfc   f0                ldx
   0cfd   b5                phi R5
                            
   0cfe   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-HEXVIEWER------------------------------------
                        ;-R4-Start address-----------------------------
                        ;-R5-Count-------------------------------------
   0cff                 HEX_BASE_SRT
   0cff   0d 0a 42 61       db "\r\nBase address: 0x",0
   0d03   73 65 20 61   
   0d07   64 64 72 65   
   0d0b   73 73 3a 20   
   0d0f   30 78 00      
   0d12                 HEX_HEADER_STR
   0d12   0d 0a 0d 0a       db "\r\n\r\nOffset  00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F  String\r\n"
   0d16   4f 66 66 73   
   0d1a   65 74 20 20   
   0d1e   30 30 20 30   
   0d22   31 20 30 32   
   0d26   20 30 33 20   
   0d2a   30 34 20 30   
   0d2e   35 20 30 36   
   0d32   20 30 37 20   
   0d36   30 38 20 30   
   0d3a   39 20 30 41   
   0d3e   20 30 42 20   
   0d42   30 43 20 30   
   0d46   44 20 30 45   
   0d4a   20 30 46 20   
   0d4e   20 53 74 72   
   0d52   69 6e 67 0d   
   0d56   0a            
   0d57   2d 2d 2d 2d       db         "-------------------------------------------------------------------------\r\n",0
   0d5b   2d 2d 2d 2d   
   0d5f   2d 2d 2d 2d   
   0d63   2d 2d 2d 2d   
   0d67   2d 2d 2d 2d   
   0d6b   2d 2d 2d 2d   
   0d6f   2d 2d 2d 2d   
   0d73   2d 2d 2d 2d   
   0d77   2d 2d 2d 2d   
   0d7b   2d 2d 2d 2d   
   0d7f   2d 2d 2d 2d   
   0d83   2d 2d 2d 2d   
   0d87   2d 2d 2d 2d   
   0d8b   2d 2d 2d 2d   
   0d8f   2d 2d 2d 2d   
   0d93   2d 2d 2d 2d   
   0d97   2d 2d 2d 2d   
   0d9b   2d 2d 2d 2d   
   0d9f   2d 0d 0a 00   
                        ;              "0000:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................"
   0da3                 HEX_LINECNT_SEPARATOR
   0da3   3a 20 20 20       db ":   ",0
   0da7   00            
                            
   0da8                 HEXVIEWER
   0da8   ef                sex STACK_REG
                            
   0da9   f8 00             ldi 0
   0dab   73                stxd
   0dac   73                stxd
   0dad   94                ghi R4
   0dae   73                stxd
   0daf   84                glo R4
   0db0   73                stxd    ;+17 current address
                            
   0db1   f8 00             ldi 0
   0db3   73                stxd
   0db4   73                stxd
   0db5   94                ghi R4
   0db6   73                stxd
   0db7   84                glo R4
   0db8   73                stxd    ;+13 start address
                            
   0db9   f8 00             ldi 0
   0dbb   73                stxd
   0dbc   73                stxd
   0dbd   95                ghi R5
   0dbe   73                stxd
   0dbf   85                glo R5
   0dc0   73                stxd    ;+9 last address
                            
   0dc1   f8 00             ldi 0
   0dc3   73                stxd
   0dc4   73                stxd
   0dc5   73                stxd
   0dc6   73                stxd    ;+5 line counter
                            
   0dc7   73                stxd
   0dc8   73                stxd
   0dc9   73                stxd
   0dca   73                stxd    ;+1 temp for hex digits
                            
   0dcb   8f                glo STACK_REG
   0dcc   fc 0d             adi 13
   0dce   a4                plo R4
   0dcf   9f                ghi STACK_REG
   0dd0   7c 00             adci 0
   0dd2   b4                phi R4
                            
   0dd3   8f                glo STACK_REG
   0dd4   fc 09             adi 9
   0dd6   a6                plo R6
   0dd7   9f                ghi STACK_REG
   0dd8   7c 00             adci 0
   0dda   b6                phi R6
                            
   0ddb   e4                sex R4
                            
   0ddc   85                glo R5      ;adding R5 value to start address and store it to last address
   0ddd   f4                add
   0dde   56                str R6
   0ddf   60                irx
   0de0   16                inc R6
   0de1   95                ghi R5
   0de2   74                adc
   0de3   56                str R6
   0de4   60                irx
   0de5   16                inc R6
   0de6   f8 00             ldi 0
   0de8   74                adc
   0de9   56                str R6
                            
   0dea   f8 ff             ldi HEX_BASE_SRT.0     ;prepare to print base address
   0dec   a6                plo R6
   0ded   f8 0c             ldi HEX_BASE_SRT.1
   0def   b6                phi R6
                        	
   0df0   f8 52             ldi PRINT.0         ;prepare to call PRINT
   0df2   ad                plo CALL_REG
   0df3   f8 01             ldi PRINT.1
   0df5   bd                phi CALL_REG
                            
   0df6   f8 00             ldi FCALL.0
   0df8   ae                plo FCALL_REG
   0df9   de                sep FCALL_REG
                            
   0dfa   8f                glo STACK_REG       ;prepare to print the address in hex
   0dfb   fc 0d             adi 13
   0dfd   a4                plo R4
   0dfe   9f                ghi STACK_REG
   0dff   7c 00             adci 0
   0e01   b4                phi R4
                            
   0e02   f8 04             ldi 4               ;with 4 digits
   0e04   a5                plo R5
                            
   0e05   f8 22             ldi PRINT_HEX.0     ;prepare to call PRINT_HEX
   0e07   ad                plo CALL_REG
   0e08   f8 04             ldi PRINT_HEX.1
   0e0a   bd                phi CALL_REG
                            
   0e0b   f8 00             ldi FCALL.0
   0e0d   ae                plo FCALL_REG
   0e0e   de                sep FCALL_REG
                            
   0e0f   f8 12             ldi HEX_HEADER_STR.0     ;prepare to print the header
   0e11   a6                plo R6
   0e12   f8 0d             ldi HEX_HEADER_STR.1
   0e14   b6                phi R6
                        	
   0e15   f8 52             ldi PRINT.0         ;prepare to call PRINT
   0e17   ad                plo CALL_REG
   0e18   f8 01             ldi PRINT.1
   0e1a   bd                phi CALL_REG
                            
   0e1b   f8 00             ldi FCALL.0
   0e1d   ae                plo FCALL_REG
   0e1e   de                sep FCALL_REG
                        
   0e1f                 HEXVIEWER_MAINLOOP
   0e1f   8f                glo STACK_REG       ;prepare to print the first address in hex
   0e20   fc 05             adi 5
   0e22   a4                plo R4
   0e23   9f                ghi STACK_REG
   0e24   7c 00             adci 0
   0e26   b4                phi R4
                            
   0e27   f8 04             ldi 4               ;with 4 digits
   0e29   a5                plo R5
                            
   0e2a   f8 22             ldi PRINT_HEX.0     ;prepare to call PRINT_HEX
   0e2c   ad                plo CALL_REG
   0e2d   f8 04             ldi PRINT_HEX.1
   0e2f   bd                phi CALL_REG
                            
   0e30   f8 00             ldi FCALL.0
   0e32   ae                plo FCALL_REG
   0e33   de                sep FCALL_REG
                            
   0e34   f8 a3             ldi HEX_LINECNT_SEPARATOR.0     ;prepare to print address separator
   0e36   a6                plo R6
   0e37   f8 0d             ldi HEX_LINECNT_SEPARATOR.1
   0e39   b6                phi R6
                        	
   0e3a   f8 52             ldi PRINT.0         ;prepare to call PRINT
   0e3c   ad                plo CALL_REG
   0e3d   f8 01             ldi PRINT.1
   0e3f   bd                phi CALL_REG
                            
   0e40   f8 00             ldi FCALL.0
   0e42   ae                plo FCALL_REG
   0e43   de                sep FCALL_REG
                            
   0e44   f8 10             ldi 16      ;set R8 low to 16 for counting the bytes
   0e46   a8                plo R8
                           
   0e47                 HEXVIEWER_PRINT_HEX_LOOP
   0e47   8f                glo STACK_REG       ;set R4 pointer to current address
   0e48   fc 11             adi 17
   0e4a   a4                plo R4
   0e4b   9f                ghi STACK_REG
   0e4c   7c 00             adci 0
   0e4e   b4                phi R4
                            
   0e4f   8f                glo STACK_REG       ;set R5 pointer to last address
   0e50   fc 09             adi 9
   0e52   a5                plo R5
   0e53   9f                ghi STACK_REG
   0e54   7c 00             adci 0
   0e56   b5                phi R5
                        
   0e57   e4                sex R4          ;check if current address is >= last address
                            
   0e58   45                lda R5
   0e59   f5                sd
   0e5a   60                irx
                            
   0e5b   45                lda R5
   0e5c   75                sdb
   0e5d   60                irx
                            
   0e5e   45                lda R5
   0e5f   75                sdb
   0e60   60                irx
                            
   0e61   05                ldn R5
   0e62   75                sdb
                            
   0e63   c3 0e 8b          lbdf HEXVIEWER_PRINT_HEX_SPACES   ;if current address >= last address then 
                        
   0e66   8f                glo STACK_REG       ;set R4 pointer to current address
   0e67   fc 11             adi 17
   0e69   a4                plo R4
   0e6a   9f                ghi STACK_REG
   0e6b   7c 00             adci 0
   0e6d   b4                phi R4
                            
   0e6e   44                lda R4              ;get current address and load it in R5
   0e6f   a5                plo R5
   0e70   44                lda R4
   0e71   b5                phi R5
                            
   0e72   05                ldn R5              ;get data from R5 address
   0e73   a5                plo R5              ;store data in R5 low
                            
   0e74   8f                glo STACK_REG       ;set R4 pointer to temp
   0e75   a4                plo R4
   0e76   9f                ghi STACK_REG
   0e77   b4                phi R4
   0e78   14                inc R4
                            
   0e79   85                glo R5              ;get data from R5 low
   0e7a   54                str R4              ;store data to temp
                           
   0e7b   f8 02             ldi 2
   0e7d   a5                plo R5              ;set R5 low to 2 digits
                            
   0e7e   f8 22             ldi PRINT_HEX.0     ;prepare to call PRINT_HEX
   0e80   ad                plo CALL_REG
   0e81   f8 04             ldi PRINT_HEX.1
   0e83   bd                phi CALL_REG
                            
   0e84   f8 00             ldi FCALL.0
   0e86   ae                plo FCALL_REG
   0e87   de                sep FCALL_REG
                            
   0e88   c0 0e 9b          lbr HEXVIEWER_NEXT_HEX
                            
   0e8b                 HEXVIEWER_PRINT_HEX_SPACES
   0e8b   f8 a5             ldi HEX_LINECNT_SEPARATOR+2.0     ;prepare to print two space
   0e8d   a6                plo R6
   0e8e   f8 0d             ldi HEX_LINECNT_SEPARATOR+2.1
   0e90   b6                phi R6
                        	
   0e91   f8 52             ldi PRINT.0         ;prepare to call PRINT
   0e93   ad                plo CALL_REG
   0e94   f8 01             ldi PRINT.1
   0e96   bd                phi CALL_REG
                            
   0e97   f8 00             ldi FCALL.0
   0e99   ae                plo FCALL_REG
   0e9a   de                sep FCALL_REG
                        
   0e9b                 HEXVIEWER_NEXT_HEX
   0e9b   f8 a6             ldi HEX_LINECNT_SEPARATOR+3.0     ;prepare to print a space
   0e9d   a6                plo R6
   0e9e   f8 0d             ldi HEX_LINECNT_SEPARATOR+3.1
   0ea0   b6                phi R6
                        	
   0ea1   f8 52             ldi PRINT.0         ;prepare to call PRINT
   0ea3   ad                plo CALL_REG
   0ea4   f8 01             ldi PRINT.1
   0ea6   bd                phi CALL_REG
                            
   0ea7   f8 00             ldi FCALL.0
   0ea9   ae                plo FCALL_REG
   0eaa   de                sep FCALL_REG
                            
   0eab   8f                glo STACK_REG       ;set R4 pointer to current address
   0eac   fc 11             adi 17
   0eae   a4                plo R4
   0eaf   9f                ghi STACK_REG
   0eb0   7c 00             adci 0
   0eb2   b4                phi R4
                            
   0eb3   e4                sex R4
   0eb4   f8 01             ldi 1
   0eb6   f4                add
   0eb7   54                str R4
   0eb8   60                irx
                            
   0eb9   f8 00             ldi 0
   0ebb   74                adc
   0ebc   54                str R4
   0ebd   60                irx
                            
   0ebe   f8 00             ldi 0
   0ec0   74                adc
   0ec1   54                str R4
   0ec2   60                irx
                            
   0ec3   f8 00             ldi 0
   0ec5   74                adc
   0ec6   54                str R4
                            
   0ec7   28                dec R8
   0ec8   88                glo R8
   0ec9   ca 0e 47          lbnz HEXVIEWER_PRINT_HEX_LOOP
                            
   0ecc   f8 a6             ldi HEX_LINECNT_SEPARATOR+3.0     ;prepare to print a space
   0ece   a6                plo R6
   0ecf   f8 0d             ldi HEX_LINECNT_SEPARATOR+3.1
   0ed1   b6                phi R6
                        	
   0ed2   f8 52             ldi PRINT.0         ;prepare to call PRINT
   0ed4   ad                plo CALL_REG
   0ed5   f8 01             ldi PRINT.1
   0ed7   bd                phi CALL_REG
                            
   0ed8   f8 00             ldi FCALL.0
   0eda   ae                plo FCALL_REG
   0edb   de                sep FCALL_REG
                            
   0edc   8f                glo STACK_REG       ;set R4 pointer to current address
   0edd   fc 11             adi 17
   0edf   a4                plo R4
   0ee0   9f                ghi STACK_REG
   0ee1   7c 00             adci 0
   0ee3   b4                phi R4
                            
   0ee4   8f                glo STACK_REG       ;set R5 pointer to start address
   0ee5   fc 0d             adi 13
   0ee7   a5                plo R5
   0ee8   9f                ghi STACK_REG
   0ee9   7c 00             adci 0
   0eeb   b5                phi R5
                            
   0eec   e5                sex R5
                            
   0eed   72                ldxa
   0eee   54                str R4
   0eef   14                inc R4
                            
   0ef0   72                ldxa
   0ef1   54                str R4
   0ef2   14                inc R4
                            
   0ef3   72                ldxa
   0ef4   54                str R4
   0ef5   14                inc R4
                            
   0ef6   72                ldxa
   0ef7   54                str R4
                            
   0ef8   f8 10             ldi 16      ;set R8 low to 16 for counting the bytes
   0efa   a8                plo R8
                        
   0efb                 HEXVIEWER_PRINT_STR_LOOP
   0efb   8f                glo STACK_REG       ;set R4 pointer to current address
   0efc   fc 11             adi 17
   0efe   a4                plo R4
   0eff   9f                ghi STACK_REG
   0f00   7c 00             adci 0
   0f02   b4                phi R4
                            
   0f03   8f                glo STACK_REG       ;set R5 pointer to last address
   0f04   fc 09             adi 9
   0f06   a5                plo R5
   0f07   9f                ghi STACK_REG
   0f08   7c 00             adci 0
   0f0a   b5                phi R5
                        
   0f0b   e4                sex R4          ;check if current address is <= last address
                            
   0f0c   45                lda R5
   0f0d   f5                sd
   0f0e   60                irx
                            
   0f0f   45                lda R5
   0f10   75                sdb
   0f11   60                irx
                            
   0f12   45                lda R5
   0f13   75                sdb
   0f14   60                irx
                            
   0f15   05                ldn R5
   0f16   75                sdb
                            
   0f17   c3 0f 4d          lbdf HEXVIEWER_PRINT_STR_SPACE   ;if current address >= last address then 
                            
   0f1a   8f                glo STACK_REG       ;set R4 pointer to current address
   0f1b   fc 11             adi 17
   0f1d   a4                plo R4
   0f1e   9f                ghi STACK_REG
   0f1f   7c 00             adci 0
   0f21   b4                phi R4
                            
   0f22   44                lda R4              ;get current address and load it in R5
   0f23   a5                plo R5
   0f24   44                lda R4
   0f25   b5                phi R5
                            
   0f26   05                ldn R5              ;get data from R5 address
   0f27   a5                plo R5              ;store data in R5 low
                            
   0f28   ff 20             smi 32
   0f2a   3b 3e             bm HEXVIEWER_PRINT_STR_DOT
   0f2c   ff 5f             smi 95
   0f2e   33 3e             bpz HEXVIEWER_PRINT_STR_DOT
                            
   0f30   85                glo R5
   0f31   b4                phi R4
                            
   0f32   f8 13             ldi SERIAL_SEND_START.0         ;prepare to call SERIAL_SEND_START to send one char
   0f34   ad                plo CALL_REG
   0f35   f8 01             ldi SERIAL_SEND_START.1
   0f37   bd                phi CALL_REG
                            
   0f38   f8 00             ldi FCALL.0
   0f3a   ae                plo FCALL_REG
   0f3b   de                sep FCALL_REG
                            
   0f3c   30 5a             br HEXVIEWER_NEXT_STR
                            
   0f3e                 HEXVIEWER_PRINT_STR_DOT
   0f3e   f8 2e             ldi 46
   0f40   b4                phi R4
                            
   0f41   f8 13             ldi SERIAL_SEND_START.0         ;prepare to call SERIAL_SEND_START to send one char
   0f43   ad                plo CALL_REG
   0f44   f8 01             ldi SERIAL_SEND_START.1
   0f46   bd                phi CALL_REG
                            
   0f47   f8 00             ldi FCALL.0
   0f49   ae                plo FCALL_REG
   0f4a   de                sep FCALL_REG
                            
   0f4b   30 5a             br HEXVIEWER_NEXT_STR
                        
   0f4d                 HEXVIEWER_PRINT_STR_SPACE
   0f4d   f8 20             ldi 32
   0f4f   b4                phi R4
                            
   0f50   f8 13             ldi SERIAL_SEND_START.0         ;prepare to call SERIAL_SEND_START to send one char
   0f52   ad                plo CALL_REG
   0f53   f8 01             ldi SERIAL_SEND_START.1
   0f55   bd                phi CALL_REG
                            
   0f56   f8 00             ldi FCALL.0
   0f58   ae                plo FCALL_REG
   0f59   de                sep FCALL_REG
                            
   0f5a                 HEXVIEWER_NEXT_STR
   0f5a   8f                glo STACK_REG       ;set R4 pointer to current address
   0f5b   fc 11             adi 17
   0f5d   a4                plo R4
   0f5e   9f                ghi STACK_REG
   0f5f   7c 00             adci 0
   0f61   b4                phi R4
                            
   0f62   e4                sex R4
   0f63   f8 01             ldi 1
   0f65   f4                add
   0f66   54                str R4
   0f67   60                irx
                            
   0f68   f8 00             ldi 0
   0f6a   74                adc
   0f6b   54                str R4
   0f6c   60                irx
                            
   0f6d   f8 00             ldi 0
   0f6f   74                adc
   0f70   54                str R4
   0f71   60                irx
                            
   0f72   f8 00             ldi 0
   0f74   74                adc
   0f75   54                str R4
                            
   0f76   28                dec R8
   0f77   88                glo R8
   0f78   ca 0e fb          lbnz HEXVIEWER_PRINT_STR_LOOP
                            
   0f7b   f8 7d             ldi NEW_LINE.0     ;prepare to print a space
   0f7d   a6                plo R6
   0f7e   f8 13             ldi NEW_LINE.1
   0f80   b6                phi R6
                        	
   0f81   f8 52             ldi PRINT.0         ;prepare to call PRINT
   0f83   ad                plo CALL_REG
   0f84   f8 01             ldi PRINT.1
   0f86   bd                phi CALL_REG
                            
   0f87   f8 00             ldi FCALL.0
   0f89   ae                plo FCALL_REG
   0f8a   de                sep FCALL_REG
                            
   0f8b   8f                glo STACK_REG       ;set R4 pointer to current address
   0f8c   fc 11             adi 17
   0f8e   a4                plo R4
   0f8f   9f                ghi STACK_REG
   0f90   7c 00             adci 0
   0f92   b4                phi R4
                            
   0f93   8f                glo STACK_REG       ;set R5 pointer to last address
   0f94   fc 09             adi 9
   0f96   a5                plo R5
   0f97   9f                ghi STACK_REG
   0f98   7c 00             adci 0
   0f9a   b5                phi R5
                        
   0f9b   e4                sex R4          ;check if current address is >= last address
                            
   0f9c   45                lda R5
   0f9d   f5                sd
   0f9e   60                irx
                            
   0f9f   45                lda R5
   0fa0   75                sdb
   0fa1   60                irx
                            
   0fa2   45                lda R5
   0fa3   75                sdb
   0fa4   60                irx
                            
   0fa5   05                ldn R5
   0fa6   75                sdb
                            
   0fa7   c3 0f e5          lbdf HEXVIEWER_END
                            
   0faa   8f                glo STACK_REG       ;set R4 pointer to line counter
   0fab   fc 05             adi 5
   0fad   a4                plo R4
   0fae   9f                ghi STACK_REG
   0faf   7c 00             adci 0
   0fb1   b4                phi R4
                            
   0fb2   e4                sex R4
                            
   0fb3   f8 10             ldi 16
   0fb5   f4                add
   0fb6   54                str R4
   0fb7   60                irx
                            
   0fb8   f8 00             ldi 0
   0fba   74                adc
   0fbb   54                str R4
   0fbc   60                irx
                            
   0fbd   f8 00             ldi 0
   0fbf   74                adc
   0fc0   54                str R4
   0fc1   60                irx
                            
   0fc2   f8 00             ldi 0
   0fc4   74                adc
   0fc5   54                str R4
                            
   0fc6   8f                glo STACK_REG       ;set R4 pointer to current address
   0fc7   fc 11             adi 17
   0fc9   a4                plo R4
   0fca   9f                ghi STACK_REG
   0fcb   7c 00             adci 0
   0fcd   b4                phi R4
                            
   0fce   8f                glo STACK_REG       ;set R5 pointer to start address
   0fcf   fc 0d             adi 13
   0fd1   a5                plo R5
   0fd2   9f                ghi STACK_REG
   0fd3   7c 00             adci 0
   0fd5   b5                phi R5
                            
   0fd6   e4                sex R4
                            
   0fd7   72                ldxa
   0fd8   55                str R5
   0fd9   15                inc R5
                            
   0fda   72                ldxa
   0fdb   55                str R5
   0fdc   15                inc R5
                            
   0fdd   72                ldxa
   0fde   55                str R5
   0fdf   15                inc R5
                            
   0fe0   72                ldxa
   0fe1   55                str R5
                            
   0fe2   c0 0e 1f          lbr HEXVIEWER_MAINLOOP
                        
   0fe5                 HEXVIEWER_END
   0fe5   8f                glo STACK_REG
   0fe6   fc 14             adi 20
   0fe8   af                plo STACK_REG
   0fe9   9f                ghi STACK_REG
   0fea   7c 00             adci 0
   0fec   bf                phi STACK_REG
                            
   0fed   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-DYN MEMORY ALLOC CALLER----------------------
   0fee                 DYN_MEMORY_ALLOC_CALLER_STR1
   0fee   20 62 79 74       db " bytes of memory allocated at memory address ",0," (0x",0,")\r\n",0
   0ff2   65 73 20 6f   
   0ff6   66 20 6d 65   
   0ffa   6d 6f 72 79   
   0ffe   20 61 6c 6c   
   1002   6f 63 61 74   
   1006   65 64 20 61   
   100a   74 20 6d 65   
   100e   6d 6f 72 79   
   1012   20 61 64 64   
   1016   72 65 73 73   
   101a   20 00 20 28   
   101e   30 78 00 29   
   1022   0d 0a 00      
   1025                 DYN_MEMORY_ALLOC_CALLER_STR2
   1025   4f 75 74 20       db "Out of memory!\r\n",0
   1029   6f 66 20 6d   
   102d   65 6d 6f 72   
   1031   79 21 0d 0a   
   1035   00            
                        
   1036                 DYN_MEMORY_ALLOC_CALLER
   1036   ef                sex STACK_REG
                            
   1037   f8 00             ldi 0
   1039   73                stxd
   103a   73                stxd
   103b   73                stxd
   103c   73                stxd                        ;+5 address
                            
   103d   73                stxd
   103e   73                stxd
   103f   73                stxd
   1040   73                stxd                        ;+1 size
                            
   1041   8f                glo STACK_REG               ;set R5 pointer to size
   1042   a5                plo R5
   1043   9f                ghi STACK_REG
   1044   b5                phi R5
   1045   15                inc R5
                            
   1046   f8 55             ldi EXPRESSION.0            ;evaluate expression
   1048   ad                plo CALL_REG
   1049   f8 08             ldi EXPRESSION.1
   104b   bd                phi CALL_REG
                            
   104c   f8 00             ldi FCALL.0
   104e   ae                plo FCALL_REG
   104f   de                sep FCALL_REG
                            
   1050   8f                glo STACK_REG               ;set R5 pointer to size
   1051   a5                plo R5
   1052   9f                ghi STACK_REG
   1053   b5                phi R5
   1054   15                inc R5
                            
   1055   45                lda R5                      ;R4 = size
   1056   a4                plo R4
   1057   45                lda R5
   1058   b4                phi R4
                            
   1059   f8 e7             ldi DYN_MEMORY_ALLOC.0      ;call memory allocation
   105b   ad                plo CALL_REG
   105c   f8 0a             ldi DYN_MEMORY_ALLOC.1
   105e   bd                phi CALL_REG
                            
   105f   f8 00             ldi FCALL.0
   1061   ae                plo FCALL_REG
   1062   de                sep FCALL_REG
                            
   1063   8a                glo R10                                 ;check if R10 has a value, if it is 0 then it failed
   1064   3a 7c             bnz DYN_MEMORY_ALLOC_CALLER_SUCCESS
   1066   9a                ghi R10
   1067   3a 7c             bnz DYN_MEMORY_ALLOC_CALLER_SUCCESS
                            
   1069                 DYN_MEMORY_ALLOC_CALLER_FAIL
   1069   f8 25             ldi DYN_MEMORY_ALLOC_CALLER_STR2.0      ;print out of memory
   106b   a6                plo R6
   106c   f8 10             ldi DYN_MEMORY_ALLOC_CALLER_STR2.1
   106e   b6                phi R6
                            
   106f   f8 52             ldi PRINT.0                             ;prepare to call PRINT
   1071   ad                plo CALL_REG
   1072   f8 01             ldi PRINT.1
   1074   bd                phi CALL_REG
                            
   1075   f8 00             ldi FCALL.0
   1077   ae                plo FCALL_REG
   1078   de                sep FCALL_REG                           ;call PRINT
                        	
   1079   c0 10 e6          lbr DYN_MEMORY_ALLOC_CALLER_END         ;return
                        
   107c                 DYN_MEMORY_ALLOC_CALLER_SUCCESS
   107c   8f                glo STACK_REG                           ;set R5 pointer to address
   107d   fc 05             adi 5
   107f   a4                plo R4
   1080   9f                ghi STACK_REG
   1081   7c 00             adci 0
   1083   b4                phi R4
                            
   1084   8a                glo R10                                 ;copy R10 value to address
   1085   54                str R4
   1086   14                inc R4
                            
   1087   9a                ghi R10
   1088   54                str R4
                            
   1089   8f                glo STACK_REG                           ;set R4 pointor to size
   108a   a4                plo R4
   108b   9f                ghi STACK_REG
   108c   b4                phi R4
   108d   14                inc R4
                            
   108e   f8 ae             ldi PRINT_DEC.0                         ;print size in decimal
   1090   ad                plo CALL_REG
   1091   f8 04             ldi PRINT_DEC.1
   1093   bd                phi CALL_REG
                            
   1094   f8 00             ldi FCALL.0
   1096   ae                plo FCALL_REG
   1097   de                sep FCALL_REG
                            
   1098   f8 ee             ldi DYN_MEMORY_ALLOC_CALLER_STR1.0      ;print the first part of the allocation message
   109a   a6                plo R6
   109b   f8 0f             ldi DYN_MEMORY_ALLOC_CALLER_STR1.1
   109d   b6                phi R6
                            
   109e   f8 52             ldi PRINT.0                             ;prepare to call PRINT
   10a0   ad                plo CALL_REG    
   10a1   f8 01             ldi PRINT.1
   10a3   bd                phi CALL_REG
                            
   10a4   f8 00             ldi FCALL.0
   10a6   ae                plo FCALL_REG
   10a7   de                sep FCALL_REG                           ;call PRINT
                            
   10a8   8f                glo STACK_REG                           ;set R4 pointer to address
   10a9   fc 05             adi 5
   10ab   a4                plo R4
   10ac   9f                ghi STACK_REG
   10ad   7c 00             adci 0
   10af   b4                phi R4
                            
   10b0   f8 ae             ldi PRINT_DEC.0                         ;print address in decimal
   10b2   ad                plo CALL_REG
   10b3   f8 04             ldi PRINT_DEC.1
   10b5   bd                phi CALL_REG
                            
   10b6   f8 00             ldi FCALL.0
   10b8   ae                plo FCALL_REG
   10b9   de                sep FCALL_REG
                            
   10ba   f8 52             ldi PRINT.0                             ;print the second part of the allocation message
   10bc   ad                plo CALL_REG
   10bd   f8 01             ldi PRINT.1
   10bf   bd                phi CALL_REG
                            
   10c0   f8 00             ldi FCALL.0
   10c2   ae                plo FCALL_REG
   10c3   de                sep FCALL_REG                           ;call PRINT
                            
   10c4   8f                glo STACK_REG                           ;reset R4 pointer to address
   10c5   fc 05             adi 5
   10c7   a4                plo R4
   10c8   9f                ghi STACK_REG
   10c9   7c 00             adci 0
   10cb   b4                phi R4
                            
   10cc   f8 04             ldi 4                                   ;set number of digits to 4
   10ce   a5                plo R5
   10cf   f8 00             ldi 0
   10d1   b5                phi R5
                            
   10d2   f8 22             ldi PRINT_HEX.0                         ;print address in hexadecimal
   10d4   ad                plo CALL_REG
   10d5   f8 04             ldi PRINT_HEX.1
   10d7   bd                phi CALL_REG
                            
   10d8   f8 00             ldi FCALL.0
   10da   ae                plo FCALL_REG
   10db   de                sep FCALL_REG
                            
   10dc   f8 52             ldi PRINT.0                             ;print the last part of the allocation message
   10de   ad                plo CALL_REG
   10df   f8 01             ldi PRINT.1
   10e1   bd                phi CALL_REG
                            
   10e2   f8 00             ldi FCALL.0
   10e4   ae                plo FCALL_REG
   10e5   de                sep FCALL_REG                           ;call PRINT
                        
   10e6                 DYN_MEMORY_ALLOC_CALLER_END
   10e6   8f                glo STACK_REG
   10e7   fc 08             adi 8
   10e9   af                plo STACK_REG
   10ea   9f                ghi STACK_REG
   10eb   7c 00             adci 0
   10ed   bf                phi STACK_REG
                            
   10ee   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-DYN MEMORY FREE CALLER-----------------------
   10ef                 DYN_MEMORY_FREE_CALLER_STR1
   10ef   41 6c 6c 6f       db "Allocated memory has been freed at address ",0," (0x",0,")\r\n",0
   10f3   63 61 74 65   
   10f7   64 20 6d 65   
   10fb   6d 6f 72 79   
   10ff   20 68 61 73   
   1103   20 62 65 65   
   1107   6e 20 66 72   
   110b   65 65 64 20   
   110f   61 74 20 61   
   1113   64 64 72 65   
   1117   73 73 20 00   
   111b   20 28 30 78   
   111f   00 29 0d 0a   
   1123   00            
   1124                 DYN_MEMORY_FREE_CALLER_STR2
   1124   4d 65 6d 6f       db "Memory address is out of the heap range!\r\n",0
   1128   72 79 20 61   
   112c   64 64 72 65   
   1130   73 73 20 69   
   1134   73 20 6f 75   
   1138   74 20 6f 66   
   113c   20 74 68 65   
   1140   20 68 65 61   
   1144   70 20 72 61   
   1148   6e 67 65 21   
   114c   0d 0a 00      
                            
   114f                 DYN_MEMORY_FREE_CALLER
   114f   ef                sex STACK_REG
                            
   1150   f8 00             ldi 0
   1152   73                stxd
   1153   73                stxd
   1154   73                stxd
   1155   73                stxd                    ;+1 address
                            
   1156   8f                glo STACK_REG
   1157   a5                plo R5
   1158   9f                ghi STACK_REG
   1159   b5                phi R5
   115a   15                inc R5
                            
   115b   f8 55             ldi EXPRESSION.0
   115d   ad                plo CALL_REG
   115e   f8 08             ldi EXPRESSION.1
   1160   bd                phi CALL_REG
                            
   1161   f8 00             ldi FCALL.0
   1163   ae                plo FCALL_REG
   1164   de                sep FCALL_REG
                            
   1165   8f                glo STACK_REG
   1166   a5                plo R5
   1167   9f                ghi STACK_REG
   1168   b5                phi R5
   1169   15                inc R5
                            
   116a   e5                sex R5
                            
   116b   f8 10             ldi HEAP_START.0
   116d   f5                sd
   116e   60                irx
   116f   f8 21             ldi HEAP_START.1
   1171   75                sdb
                            
   1172   25                dec R5
                            
   1173   3b d6             bm DYN_MEMORY_FREE_CALLER_OUTOFRANGE
                            
   1175   f8 00             ldi HEAP_END.0
   1177   f5                sd
   1178   60                irx
   1179   f8 fc             ldi HEAP_END.1
   117b   75                sdb
                            
   117c   25                dec R5
                            
   117d   33 d6             bpz DYN_MEMORY_FREE_CALLER_OUTOFRANGE
                            
   117f   72                ldxa
   1180   a4                plo R4
   1181   f0                ldx
   1182   b4                phi R4
                            
   1183   25                dec R5
                            
   1184   f8 4b             ldi DYN_MEMORY_FREE.0                 ;call free
   1186   ad                plo CALL_REG
   1187   f8 0c             ldi DYN_MEMORY_FREE.1
   1189   bd                phi CALL_REG
                            
   118a   f8 00             ldi FCALL.0
   118c   ae                plo FCALL_REG
   118d   de                sep FCALL_REG
                            
   118e   f8 ef             ldi DYN_MEMORY_FREE_CALLER_STR1.0
   1190   a6                plo R6
   1191   f8 10             ldi DYN_MEMORY_FREE_CALLER_STR1.1
   1193   b6                phi R6
                            
   1194   f8 52             ldi PRINT.0                             ;print the success message 1st part
   1196   ad                plo CALL_REG
   1197   f8 01             ldi PRINT.1
   1199   bd                phi CALL_REG
                            
   119a   f8 00             ldi FCALL.0
   119c   ae                plo FCALL_REG
   119d   de                sep FCALL_REG
                            
   119e   85                glo R5
   119f   a4                plo R4
   11a0   95                ghi R5
   11a1   b4                phi R4
                            
   11a2   f8 ae             ldi PRINT_DEC.0                         ;print address in decimal
   11a4   ad                plo CALL_REG
   11a5   f8 04             ldi PRINT_DEC.1
   11a7   bd                phi CALL_REG
                            
   11a8   f8 00             ldi FCALL.0
   11aa   ae                plo FCALL_REG
   11ab   de                sep FCALL_REG
                            
   11ac   f8 52             ldi PRINT.0                             ;print the success message 2nd part
   11ae   ad                plo CALL_REG
   11af   f8 01             ldi PRINT.1
   11b1   bd                phi CALL_REG
                            
   11b2   f8 00             ldi FCALL.0
   11b4   ae                plo FCALL_REG
   11b5   de                sep FCALL_REG
                            
   11b6   85                glo R5
   11b7   a4                plo R4
   11b8   95                ghi R5
   11b9   b4                phi R4
                            
   11ba   f8 04             ldi 4
   11bc   a5                plo R5
   11bd   f8 00             ldi 0
   11bf   b5                phi R5
                            
   11c0   f8 22             ldi PRINT_HEX.0                         ;print address in hexadecimal
   11c2   ad                plo CALL_REG
   11c3   f8 04             ldi PRINT_HEX.1
   11c5   bd                phi CALL_REG
                            
   11c6   f8 00             ldi FCALL.0
   11c8   ae                plo FCALL_REG
   11c9   de                sep FCALL_REG
                            
   11ca   f8 52             ldi PRINT.0                             ;print the success message 2nd part
   11cc   ad                plo CALL_REG
   11cd   f8 01             ldi PRINT.1
   11cf   bd                phi CALL_REG
                            
   11d0   f8 00             ldi FCALL.0
   11d2   ae                plo FCALL_REG
   11d3   de                sep FCALL_REG
                            
   11d4   30 e6             br DYN_MEMORY_FREE_CALLER_END
                            
   11d6                 DYN_MEMORY_FREE_CALLER_OUTOFRANGE
   11d6   f8 24             ldi DYN_MEMORY_FREE_CALLER_STR2.0
   11d8   a6                plo R6
   11d9   f8 11             ldi DYN_MEMORY_FREE_CALLER_STR2.1
   11db   b6                phi R6
                            
   11dc   f8 52             ldi PRINT.0                             ;print the out of range message
   11de   ad                plo CALL_REG
   11df   f8 01             ldi PRINT.1
   11e1   bd                phi CALL_REG
                            
   11e2   f8 00             ldi FCALL.0
   11e4   ae                plo FCALL_REG
   11e5   de                sep FCALL_REG                           ;call PRINT
                            
   11e6                 DYN_MEMORY_FREE_CALLER_END
   11e6   8f                glo STACK_REG
   11e7   fc 04             adi 4
   11e9   af                plo STACK_REG
   11ea   9f                ghi STACK_REG
   11eb   7c 00             adci 0
   11ed   bf                phi STACK_REG
                            
   11ee   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-HEXVIEW_CALLER-------------------------------
   11ef                 HEXVIEW_CALLER
   11ef   ef                sex STACK_REG
                            
   11f0   f8 00             ldi 0
   11f2   73                stxd
   11f3   73                stxd
   11f4   73                stxd
   11f5   73                stxd    ;+5 first arg
                            
   11f6   73                stxd
   11f7   73                stxd
   11f8   f8 01             ldi 1
   11fa   73                stxd
   11fb   f8 00             ldi 0
   11fd   73                stxd    ;+1 second arg
                            
   11fe   8f                glo STACK_REG
   11ff   fc 05             adi 5
   1201   a5                plo R5
   1202   9f                ghi STACK_REG
   1203   7c 00             adci 0
   1205   b5                phi R5
                            
   1206   f8 55             ldi EXPRESSION.0
   1208   ad                plo CALL_REG
   1209   f8 08             ldi EXPRESSION.1
   120b   bd                phi CALL_REG
                            
   120c   f8 00             ldi FCALL.0
   120e   ae                plo FCALL_REG
   120f   de                sep FCALL_REG
                            
   1210   44                lda R4
   1211   fb 2c             xri 44
   1213   c2 12 2a          lbz HEXVIEW_CALLER_NEXTARG
   1216   24                dec R4
   1217   44                lda R4
   1218   c2 12 39          lbz HEXVIEW_CALLER_EXEC
   121b   24                dec R4
                            
   121c   04                ldn R4
   121d   b4                phi R4
                            
   121e   f8 13             ldi SERIAL_SEND_START.0
   1220   ad                plo CALL_REG
   1221   f8 01             ldi SERIAL_SEND_START.1
   1223   bd                phi CALL_REG
                            
   1224   f8 00             ldi FCALL.0
   1226   ae                plo FCALL_REG
   1227   de                sep FCALL_REG
                            
   1228   30 58             br HEXVIEW_CALLER_END
                            
   122a                 HEXVIEW_CALLER_NEXTARG
   122a   8f                glo STACK_REG
   122b   a5                plo R5
   122c   9f                ghi STACK_REG
   122d   b5                phi R5
   122e   15                inc R5
                            
   122f   f8 55             ldi EXPRESSION.0
   1231   ad                plo CALL_REG
   1232   f8 08             ldi EXPRESSION.1
   1234   bd                phi CALL_REG
                            
   1235   f8 00             ldi FCALL.0
   1237   ae                plo FCALL_REG
   1238   de                sep FCALL_REG
                            
   1239                 HEXVIEW_CALLER_EXEC
   1239   8f                glo STACK_REG
   123a   fc 05             adi 5
   123c   a5                plo R5
   123d   9f                ghi STACK_REG
   123e   7c 00             adci 0
   1240   b5                phi R5
                            
   1241   45                lda R5
   1242   a4                plo R4
   1243   45                lda R5
   1244   b4                phi R4
                            
   1245   8f                glo STACK_REG
   1246   a6                plo R6
   1247   9f                ghi STACK_REG
   1248   b6                phi R6
   1249   16                inc R6
                            
   124a   46                lda R6
   124b   a5                plo R5
   124c   46                lda R6
   124d   b5                phi R5
                            
   124e   f8 a8             ldi HEXVIEWER.0
   1250   ad                plo CALL_REG
   1251   f8 0d             ldi HEXVIEWER.1
   1253   bd                phi CALL_REG
                            
   1254   f8 00             ldi FCALL.0
   1256   ae                plo FCALL_REG
   1257   de                sep FCALL_REG
                            
   1258                 HEXVIEW_CALLER_END
   1258   8f                glo STACK_REG
   1259   fc 08             adi 8
   125b   af                plo STACK_REG
   125c   9f                ghi STACK_REG
   125d   7c 00             adci 0
   125f   bf                phi STACK_REG
                            
   1260   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-TEST FUNCTION--------------------------------
   1261                 TEST_STR1
   1261   52 65 73 75       db "Result: ",0
   1265   6c 74 3a 20   
   1269   00            
                        
   126a                 FUNC_TEST
   126a   ef                sex STACK_REG
                            
   126b   f8 00             ldi 0
   126d   73                stxd
   126e   73                stxd
   126f   73                stxd
   1270   73                stxd    ;+1 result
                            
   1271   8f                glo STACK_REG
   1272   a5                plo R5
   1273   9f                ghi STACK_REG
   1274   b5                phi R5
   1275   15                inc R5
                            
   1276   f8 55             ldi EXPRESSION.0
   1278   ad                plo CALL_REG
   1279   f8 08             ldi EXPRESSION.1
   127b   bd                phi CALL_REG
                            
   127c   f8 00             ldi FCALL.0
   127e   ae                plo FCALL_REG
   127f   de                sep FCALL_REG
                            
   1280   8f                glo STACK_REG
   1281   a4                plo R4
   1282   9f                ghi STACK_REG
   1283   b4                phi R4
   1284   14                inc R4
                        
   1285   f8 00             ldi 0
   1287   a5                plo R5
                            
   1288   f8 ae             ldi PRINT_DEC.0     ;prepare to print the Decimal result.
   128a   ad                plo CALL_REG
   128b   f8 04             ldi PRINT_DEC.1
   128d   bd                phi CALL_REG
                            
   128e   f8 00             ldi FCALL.0
   1290   ae                plo FCALL_REG
   1291   de                sep FCALL_REG
                            
   1292   f8 7d             ldi NEW_LINE.0  ;print newline
   1294   a6                plo R6
   1295   f8 13             ldi NEW_LINE.1
   1297   b6                phi R6
                        	
   1298   f8 52             ldi PRINT.0     ;prepare to call PRINT
   129a   ad                plo CALL_REG
   129b   f8 01             ldi PRINT.1
   129d   bd                phi CALL_REG
                            
   129e   f8 00             ldi FCALL.0
   12a0   ae                plo FCALL_REG
   12a1   de                sep FCALL_REG
                            
   12a2   8f                glo STACK_REG
   12a3   fc 04             adi 4
   12a5   af                plo STACK_REG
   12a6   9f                ghi STACK_REG
   12a7   7c 00             adci 0
   12a9   bf                phi STACK_REG
                            
   12aa   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-COMMAND-CHECK--------------------------------
                        ;-R4-input string------------------------------
   12ab                 COMMAND_CHECK
   12ab   f8 ad             ldi COMMAND_FUNC_LIST.0
   12ad   a5                plo R5
   12ae   f8 13             ldi COMMAND_FUNC_LIST.1
   12b0   b5                phi R5
                            
   12b1   f8 80             ldi COMMAND_LIST.0
   12b3   a9                plo R9
   12b4   f8 13             ldi COMMAND_LIST.1
   12b6   b9                phi R9
                            
   12b7   84                glo R4
   12b8   a6                plo R6
   12b9   94                ghi R4
   12ba   b6                phi R6
                            
   12bb                 COMMAND_CHECK_GOTOSPACE
   12bb   46                lda R6
   12bc   c2 12 c7          lbz COMMAND_CHECK_INSERTZERO
   12bf   fb 20             xri 32
   12c1   c2 12 c8          lbz COMMAND_CHECK_REPLACESPACE
   12c4   c0 12 bb          lbr COMMAND_CHECK_GOTOSPACE
                            
   12c7                 COMMAND_CHECK_INSERTZERO
   12c7   56                str R6
   12c8                 COMMAND_CHECK_REPLACESPACE
   12c8   26                dec R6
   12c9   56                str R6
   12ca   16                inc R6
                            
   12cb                 COMMAND_CHECK_LOOP
   12cb   84                glo R4
   12cc   a8                plo R8
   12cd   94                ghi R4
   12ce   b8                phi R8
                            
   12cf   09                ldn R9
   12d0   c2 12 f8          lbz COMMAND_CHECK_END
                        
   12d3   f8 c0             ldi STR_COMPARATOR.0
   12d5   ad                plo CALL_REG
   12d6   f8 01             ldi STR_COMPARATOR.1
   12d8   bd                phi CALL_REG
                            
   12d9   f8 00             ldi FCALL.0
   12db   ae                plo FCALL_REG
   12dc   de                sep FCALL_REG
                            
   12dd   8a                glo R10
   12de   ca 12 eb          lbnz COMMAND_CHECK_EXEC
                            
   12e1                 COMMAND_CHECK_STR_END
   12e1   09                ldn R9
   12e2   19                inc R9
   12e3   ca 12 e1          lbnz COMMAND_CHECK_STR_END
                            
   12e6   15                inc R5
   12e7   15                inc R5
   12e8   c0 12 cb          lbr COMMAND_CHECK_LOOP
                            
   12eb                 COMMAND_CHECK_EXEC
   12eb   86                glo R6
   12ec   a4                plo R4
   12ed   96                ghi R6
   12ee   b4                phi R4
                            
   12ef   45                lda R5
   12f0   ad                plo CALL_REG
   12f1   05                ldn R5
   12f2   bd                phi CALL_REG
                            
   12f3   f8 00             ldi FCALL.0
   12f5   ae                plo FCALL_REG
   12f6   de                sep FCALL_REG
                            
   12f7   de                sep RETURN
                            
   12f8                 COMMAND_CHECK_END
   12f8   f8 b7             ldi UNKNOWN_COMMAND.0  ;set the address of the boot msg in R6
   12fa   a6                plo R6
   12fb   f8 13             ldi UNKNOWN_COMMAND.1
   12fd   b6                phi R6
                        	
   12fe   f8 52             ldi PRINT.0     ;prepare to call PRINT
   1300   ad                plo CALL_REG
   1301   f8 01             ldi PRINT.1
   1303   bd                phi CALL_REG
                            
   1304   f8 00             ldi FCALL.0
   1306   ae                plo FCALL_REG
   1307   de                sep FCALL_REG   ;call PRINT
                            
   1308   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-MAIN-----------------------------------------
   1309                 MAIN_PROGRAM
   1309   f8 50             ldi DYN_MEMORY_INIT.0     ;heap init
   130b   ad                plo CALL_REG
   130c   f8 09             ldi DYN_MEMORY_INIT.1
   130e   bd                phi CALL_REG
                            
   130f   f8 00             ldi FCALL.0
   1311   ae                plo FCALL_REG
   1312   de                sep FCALL_REG   ;call heap init
                            
   1313   f8 56             ldi BOOT_MSG.0  ;set the address of the boot msg in R6
   1315   a6                plo R6
   1316   f8 13             ldi BOOT_MSG.1
   1318   b6                phi R6
                        	
   1319   f8 52             ldi PRINT.0     ;prepare to call PRINT
   131b   ad                plo CALL_REG
   131c   f8 01             ldi PRINT.1
   131e   bd                phi CALL_REG
                            
   131f   f8 00             ldi FCALL.0
   1321   ae                plo FCALL_REG
   1322   de                sep FCALL_REG   ;call PRINT
                        
   1323                 ASK_INPUT
   1323   f8 00             ldi INPUT_BUFF.0    ;load the address of the buffer to R7
   1325   a7                plo R7
   1326   f8 20             ldi INPUT_BUFF.1
   1328   b7                phi R7
                            
   1329   f8 68             ldi READLINE.0      ;prepare to call READLINE
   132b   ad                plo CALL_REG
   132c   f8 01             ldi READLINE.1
   132e   bd                phi CALL_REG
                            
   132f   f8 00             ldi FCALL.0
   1331   ae                plo FCALL_REG
   1332   de                sep FCALL_REG       ;call READLINE
                            
                            ;Program goes here
   1333   f8 00             ldi INPUT_BUFF.0
   1335   a4                plo R4
   1336   f8 20             ldi INPUT_BUFF.1
   1338   b4                phi R4
                            
   1339   f8 ab             ldi COMMAND_CHECK.0      ;prepare to call COMMAND_CHECK
   133b   ad                plo CALL_REG
   133c   f8 12             ldi COMMAND_CHECK.1
   133e   bd                phi CALL_REG
                            
   133f   f8 00             ldi FCALL.0
   1341   ae                plo FCALL_REG
   1342   de                sep FCALL_REG
                            ;Program ends here
                            
   1343   f8 79             ldi ASK_IN.0        ;load the ASK_IN string's address to R6
   1345   a6                plo R6
   1346   f8 13             ldi ASK_IN.1
   1348   b6                phi R6
                            
   1349   f8 52             ldi PRINT.0         ;prepare to call PRINT
   134b   ad                plo CALL_REG
   134c   f8 01             ldi PRINT.1
   134e   bd                phi CALL_REG
                            
   134f   f8 00             ldi FCALL.0
   1351   ae                plo FCALL_REG
   1352   de                sep FCALL_REG       ;call PRINT
                        	
   1353   c0 13 23          lbr ASK_INPUT
                        ;----------------------------------------------
                        
                        ;-CONSTANT DATA--------------------------------
   1356                 BOOT_MSG
   1356   5a 4c 45 44       db "ZLED - CDP1802 Terminal.\r\n\r\nREADY\r\n"
   135a   20 2d 20 43   
   135e   44 50 31 38   
   1362   30 32 20 54   
   1366   65 72 6d 69   
   136a   6e 61 6c 2e   
   136e   0d 0a 0d 0a   
   1372   52 45 41 44   
   1376   59 0d 0a      
   1379                 ASK_IN
   1379   0d 0a 3e 00       db "\r\n>",0
   137d                 NEW_LINE
   137d   0d 0a 00          db "\r\n",0
   1380                 COMMAND_LIST
   1380   70 72 69 6e       db "print",0,"mem_view",0,"mem_debug",0,"mem_alloc",0,"mem_free",0,0
   1384   74 00 6d 65   
   1388   6d 5f 76 69   
   138c   65 77 00 6d   
   1390   65 6d 5f 64   
   1394   65 62 75 67   
   1398   00 6d 65 6d   
   139c   5f 61 6c 6c   
   13a0   6f 63 00 6d   
   13a4   65 6d 5f 66   
   13a8   72 65 65 00   
   13ac   00            
   13ad                 COMMAND_FUNC_LIST
   13ad   6a 12             db FUNC_TEST.0,FUNC_TEST.1
   13af   ef 11             db HEXVIEW_CALLER.0,HEXVIEW_CALLER.1
   13b1   a8 09             db DYN_MEMORY_DEBUG.0,DYN_MEMORY_DEBUG.1
   13b3   36 10             db DYN_MEMORY_ALLOC_CALLER.0,DYN_MEMORY_ALLOC_CALLER.1
   13b5   4f 11             db DYN_MEMORY_FREE_CALLER.0,DYN_MEMORY_FREE_CALLER.1
   13b7                 UNKNOWN_COMMAND
   13b7   55 6e 6b 6e       db "Unknown command.\r\n",0
   13bb   6f 77 6e 20   
   13bf   63 6f 6d 6d   
   13c3   61 6e 64 2e   
   13c7   0d 0a 00      
   13ca                 TEST_RESP
   13ca   45 76 65 72       db "Everything is ok!",0
   13ce   79 74 68 69   
   13d2   6e 67 20 69   
   13d6   73 20 6f 6b   
   13da   21 00         
                        
   13dc                     end
1379  ASK_IN        1323  ASK_INPUT     0164  BACKSPACE_ACTION    1356  BOOT_MSG  
000d  CALL_REG      0283  CARRY_SHIFTING    12ab  COMMAND_CHECK    12f8  COMMAND_CHECK_END
12eb  COMMAND_CHECK_EXEC    12bb  COMMAND_CHECK_GOTOSPACE    12c7  COMMAND_CHECK_INSERTZERO    12cb  COMMAND_CHECK_LOOP
12c8  COMMAND_CHECK_REPLACESPACE    12e1  COMMAND_CHECK_STR_END    13ad  COMMAND_FUNC_LIST    1380  COMMAND_LIST
028d  DIVISION_LOOP    3000  DMA_ADDRESS    0013  DMA_INIT      0000  DMA_REG   
0ae7  DYN_MEMORY_ALLOC    1036  DYN_MEMORY_ALLOC_CALLER    10e6  DYN_MEMORY_ALLOC_CALLER_END    1069  DYN_MEMORY_ALLOC_CALLER_FAIL
0fee  DYN_MEMORY_ALLOC_CALLER_STR1    1025  DYN_MEMORY_ALLOC_CALLER_STR2    107c  DYN_MEMORY_ALLOC_CALLER_SUCCESS    0c31  DYN_MEMORY_ALLOC_END
0b23  DYN_MEMORY_ALLOC_MAINLOOP    0bfc  DYN_MEMORY_ALLOC_NEXTADDRESS    0c16  DYN_MEMORY_ALLOC_NEXTPASS    0b71  DYN_MEMORY_ALLOC_SIZEBIGGER
0b5e  DYN_MEMORY_ALLOC_SIZEEQ    09a8  DYN_MEMORY_DEBUG    0ade  DYN_MEMORY_DEBUG_END    0aa3  DYN_MEMORY_DEBUG_FREE
09c2  DYN_MEMORY_DEBUG_MAINLOOP    0aa9  DYN_MEMORY_DEBUG_NEXTADDRESS    0a05  DYN_MEMORY_DEBUG_PRINT    0973  DYN_MEMORY_DEBUG_STR
099a  DYN_MEMORY_DEBUG_STR_FREE    09a1  DYN_MEMORY_DEBUG_STR_USED    0c4b  DYN_MEMORY_FREE    114f  DYN_MEMORY_FREE_CALLER
11e6  DYN_MEMORY_FREE_CALLER_END    11d6  DYN_MEMORY_FREE_CALLER_OUTOFRANGE    10ef  DYN_MEMORY_FREE_CALLER_STR1    1124  DYN_MEMORY_FREE_CALLER_STR2
0ce2  DYN_MEMORY_FREE_END    0c83  DYN_MEMORY_FREE_MERGE    0ca3  DYN_MEMORY_FREE_MERGELOOP    0c74  DYN_MEMORY_FREE_NEXTCHECK
0cdb  DYN_MEMORY_FREE_SETPREVIOUS    0950  DYN_MEMORY_INIT    017a  END_LINE      0855  EXPRESSION
088a  EXPRESSION_ADD    08c4  EXPRESSION_ADD_LOOP    093f  EXPRESSION_END    0876  EXPRESSION_MAIN
093b  EXPRESSION_NEXT_CYCLE    0866  EXPRESSION_SKIPSPACES    08e3  EXPRESSION_SUB    091d  EXPRESSION_SUB_LOOP
06b0  FACTOR        072f  FACTOR_END    0755  FACTOR_FINAL    074a  FACTOR_INVERTING
06bc  FACTOR_MAIN    0720  FACTOR_NEGATE    072b  FACTOR_NEXT_CYCLE    0706  FACTOR_PARENTHESIS
0711  FACTOR_PARENTHESIS_SKIPSPACES    06eb  FACTOR_READ_DEC    06f8  FACTOR_READ_HEX    0100  FCALL     
000e  FCALL_REG     031f  FINAL_CHECK    0343  FINAL_CHECK2    010a  FRETURN   
126a  FUNC_TEST     fc00  HEAP_END      2100  HEAP_LASTADDRESS    2110  HEAP_START
0da8  HEXVIEWER     0fe5  HEXVIEWER_END    0e1f  HEXVIEWER_MAINLOOP    0e9b  HEXVIEWER_NEXT_HEX
0f5a  HEXVIEWER_NEXT_STR    0e47  HEXVIEWER_PRINT_HEX_LOOP    0e8b  HEXVIEWER_PRINT_HEX_SPACES    0f3e  HEXVIEWER_PRINT_STR_DOT
0efb  HEXVIEWER_PRINT_STR_LOOP    0f4d  HEXVIEWER_PRINT_STR_SPACE    11ef  HEXVIEW_CALLER    1258  HEXVIEW_CALLER_END
1239  HEXVIEW_CALLER_EXEC    122a  HEXVIEW_CALLER_NEXTARG    0cff  HEX_BASE_SRT    0412  HEX_CHARS 
0d12  HEX_HEADER_STR    0da3  HEX_LINECNT_SEPARATOR    2000  INPUT_BUFF    01d4  INTEGER_DIV
0224  INTEGER_DIV_INVERT_LOOP1    0234  INTEGER_DIV_NEXT_CHECK    0372  INTEGER_MUL    03d3  INTEGER_MUL_ADD
0409  INTEGER_MUL_END    039f  INTEGER_MUL_LOOP    03dc  INTEGER_MUL_SHIFT    03fd  INTEGER_MUL_SHMULTIPLICAND
03e9  INTEGER_MUL_SHMULTIPLIER    0262  INTEGER_SHIFT_DR    0001  INTP_REG      0002  INTX_REG  
0253  INVERT_LOOP2    0337  INVERT_LOOP3    035e  INVERT_LOOP4    1309  MAIN_PROGRAM
137d  NEW_LINE      0307  NEXT_BIT      0003  PC_REG        0152  PRINT     
045e  PRINT_CHECK_DIGIT    04ae  PRINT_DEC     0555  PRINT_DEC_END    055e  PRINT_DEC_FINAL
0502  PRINT_DEC_INVER_LOOP    050d  PRINT_DEC_MAIN_LOOP    0461  PRINT_DIGIT_LOOP    0422  PRINT_HEX 
048f  PRINT_HEX_END    0473  PRINT_HEX_SHIFT_LOOP1    0449  PRINT_UNTIL_R    000a  R10       
000b  R11           000c  R12           0004  R4            0005  R5        
0006  R6            0007  R7            0008  R8            0009  R9        
0168  READLINE      018e  READLINE_BACKSPACE    016b  READLINE_LOOP    058b  READ_DEC  
061c  READ_DEC_END    05a5  READ_DEC_MAIN_LOOP    062e  READ_HEX      066a  READ_HEX_CONTINUE
069e  READ_HEX_END    068d  READ_HEX_HEXDIGIT    0696  READ_HEX_HEXDIGITLOWER    064b  READ_HEX_MAINLOOP
0699  READ_HEX_NEXTCHAR    066d  READ_HEX_SHIFTLOOP    000e  RETURN        013f  SERIAL_NULL_BIT
012d  SERIAL_READ_START    0139  SERIAL_SAMPLE_BIT    0143  SERIAL_SAVE_BIT    011b  SERIAL_SEND_BIT
0113  SERIAL_SEND_START    0131  SERIAL_WAIT_START    02a5  SHIFTING_Q    0276  SHIFT_DR  
0314  SHIFT_SUBTRACTOR    ffff  STACK_ADDRESS    000f  STACK_REG     0000  START     
01aa  STORE_CHAR    01c3  STR_CHARCHECK    01c0  STR_COMPARATOR    01c9  STR_EQUAL 
01d0  STR_INC       02fd  SUBTRACT_FOR_REAL    075e  TERM          0785  TERM_DIVIDE
0843  TERM_END      0771  TERM_MAIN     07ea  TERM_MULTIPLY    083f  TERM_NEXT_CYCLE
13ca  TEST_RESP     1261  TEST_STR1     0369  THE_END       02c7  TRY_SUBTRACTING
13b7  UNKNOWN_COMMAND    
