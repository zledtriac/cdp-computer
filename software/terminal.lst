                        
   0000                 DMA_REG EQU 0
   0001                 INTP_REG EQU 1
   0002                 INTX_REG EQU 2
   0003                 PC_REG EQU 3
   0004                 R4 EQU 4
   0005                 R5 EQU 5
   0006                 R6 EQU 6
   0007                 R7 EQU 7
   0008                 R8 EQU 8
   0009                 R9 EQU 9
   000a                 R10 EQU 10
   000b                 R11 EQU 11
   000c                 R12 EQU 12
   000d                 CALL_REG EQU 13
   000e                 FCALL_REG EQU 14
   000e                 RETURN EQU 14
   000f                 STACK_REG EQU 15
                        
   ffff                 STACK_ADDRESS EQU 0FFFFh
   3000                 DMA_ADDRESS EQU 03000h
                        
   2000                 INPUT_BUFF EQU 02000h
                        
   0000                     org 00h
                        
   0000                 START
   0000   71                dis
   0001   00                idl
                            
   0002   7b                seq     ;set Q output to high
                            
   0003   f8 ff             ldi STACK_ADDRESS.0 ;setup the STACK pointer
   0005   af                plo STACK_REG
   0006   f8 ff             ldi STACK_ADDRESS.1
   0008   bf                phi STACK_REG
                            
   0009   f8 01             ldi FCALL.1         ;setup FCALL
   000b   be                phi FCALL_REG
                            
   000c   f8 13             ldi DMA_INIT.0      ;switch PC to R3 and init DMA
   000e   a3                plo PC_REG
   000f   f8 00             ldi DMA_INIT.1
   0011   b3                phi PC_REG
                            
   0012   d3                sep PC_REG
                            
   0013                 DMA_INIT
   0013   f8 00             ldi DMA_ADDRESS.0   ;setup DMA address
   0015   a0                plo DMA_REG
   0016   f8 30             ldi DMA_ADDRESS.1
   0018   b0                phi DMA_REG
                            
   0019   c0 0c 40          lbr MAIN_PROGRAM
                            
                        ;-FUNCTION CALL HELPER-------------------------
                        ;-WHERE TO JUMP-(CALL_REG)---------------------
   0100                     org 0100h
                            
   0100                 FCALL
   0100   ef                sex STACK_REG   ;set STACK as X register
   0101   93                ghi PC_REG      ;saving the PC value to stack
   0102   73                stxd
   0103   83                glo PC_REG
   0104   73                stxd
                            
   0105   8d                glo CALL_REG    ;put the new address in the PC
   0106   a3                plo PC_REG
   0107   9d                ghi CALL_REG
   0108   b3                phi PC_REG
   0109   d3                sep PC_REG      ;jumping to PC
                            
   010a                 FRETURN
   010a   1f                inc STACK_REG   ;increment the STACK register
   010b   ef                sex STACK_REG   ;set STACK as X register
   010c   72                ldxa            ;restoring PC from STACK
   010d   a3                plo PC_REG
   010e   f0                ldx
   010f   b3                phi PC_REG
   0110   d3                sep PC_REG      ;jumping to PC
   0111   30 0a             br FRETURN
                        ;----------------------------------------------
                        
                        ;-SERIAL SEND BYTE-----------------------------
                        ;-DATA-R4.1------------------------------------
   0113                 SERIAL_SEND_START
   0113   94                ghi R4      ;R4 high is the data, load it into the D reg
   0114   fb ff             xri 0FFh    ;invert it
   0116   b4                phi R4      ;put it back
   0117   f8 85             ldi 085h    ;load 0x85 to the D reg
   0119   fe                shl         ;shift it left so we get 0x0A and set the flag bit
   011a   a4                plo R4      ;put the 0x10 to R4 low, this will be our bit counter
                        
   011b                 SERIAL_SEND_BIT
   011b   c7                lsnf        ;24 - long skip if the flag is not set
   011c   7a                req         ;16 - reset Q if the flag is set
   011d   c8                lskp        ;24
   011e   7b                seq         ;16 - set Q if the flag is not set
   011f   c4                nop         ;24
                            
   0120   24                dec R4      ;16 - decrement R4, this will only affect the R4 lower 8bit
   0121   84                glo R4      ;16
   0122   c6                lsnz        ;24 - if R4 lower is not 0 then long skip
   0123   de                sep RETURN  ;--
   0124   c4                nop         ;--
   0125   94                ghi R4      ;16 - get R4 high
   0126   f6                shr         ;16 - shift it right to get LSB in the flag
   0127   b4                phi R4      ;16 - put it back
   0128   c4                nop         ;24
   0129   c4                nop         ;24
   012a   c4                nop         ;24
   012b   30 1b             br SERIAL_SEND_BIT ;16
                        ;----------------------------------------------
                        
                        ;-SERIAL READ BYTE-----------------------------
                        ;-RETURN R5.1----------------------------------
   012d                 SERIAL_READ_START
   012d   f8 00             ldi 00h     ;set input data register to 0
   012f   a5                plo R5
   0130   b5                phi R5
                            
   0131                 SERIAL_WAIT_START
   0131   3c 31             bn1 SERIAL_WAIT_START ;16 - loop until EF1 goes low
   0133   c4                nop         ;24
   0134   c4                nop         ;24
   0135   c4                nop         ;24
   0136   c4                nop         ;24
   0137   f9 00             ori 00h     ;16 - do nothing for 16 clock cycles
                        
   0139                 SERIAL_SAMPLE_BIT
   0139   34 3f             b1 SERIAL_NULL_BIT  ;16 - checking the EF1
   013b   f9 80             ori 080h            ;16 - if EF1 is high then set MSB to 1 in D register
   013d   30 43             br SERIAL_SAVE_BIT  ;16
                        
   013f                 SERIAL_NULL_BIT
   013f   f9 00             ori 00h         ;16 - of EF1 is low we do nothing
   0141   f9 00             ori 00h         ;16
                        
   0143                 SERIAL_SAVE_BIT
   0143   b5                phi R5          ;16 - put D in R5 high
   0144   15                inc R5          ;16 - increment R5, this will only affect R5 low 8bit
   0145   85                glo R5          ;16 - get R5 low to D register
   0146   fb 09             xri 09h         ;16 - D = D ^ 0x09
   0148   c6                lsnz            ;24 
   0149   de                sep RETURN      ;--
   014a   c4                nop             ;--
   014b   95                ghi R5          ;16 - get R5 high
   014c   f6                shr             ;16 - shift it righ
   014d   c4                nop             ;24
   014e   c4                nop             ;24
   014f   c4                nop             ;24
   0150   30 39             br SERIAL_SAMPLE_BIT ;16
                        ;----------------------------------------------
                        
                        ;-PRINT----------------------------------------
                        ;-FIRST CHAR-R6--------------------------------
   0152                 PRINT
   0152   e6                sex R6          ;set X register to R6
   0153   72                ldxa            ;load data to D and increment R6
   0154   c6                lsnz            ;if it is not zero then long skip
   0155   de                sep RETURN
   0156   c4                nop
                            
   0157   b4                phi R4          ;put D register to R4 to send it
                            
   0158   f8 13             ldi SERIAL_SEND_START.0     ;prepare to call SERIAL_SEND
   015a   ad                plo CALL_REG
   015b   f8 01             ldi SERIAL_SEND_START.1
   015d   bd                phi CALL_REG
                            
   015e   f8 00             ldi FCALL.0
   0160   ae                plo FCALL_REG
   0161   de                sep FCALL_REG   ;call SERIAL_SEND
   0162   30 52             br PRINT
                        ;----------------------------------------------
                        
   0164                 BACKSPACE_ACTION
   0164   08 20 08 00       db 8, 32, 8, 0
                        ;-READ LINE------------------------------------
                        ;-WHERE TO READ-R7-----------------------------
                        ;-R8.1-Character counter-------------------------
   0168                 READLINE
   0168   f8 00             ldi 0
   016a   a8                plo R8
                            
   016b                 READLINE_LOOP
   016b   f8 2d             ldi SERIAL_READ_START.0     ;prepare calling SERIAL_READ
   016d   ad                plo CALL_REG
   016e   f8 01             ldi SERIAL_READ_START.1
   0170   bd                phi CALL_REG
                            
   0171   f8 00             ldi FCALL.0
   0173   ae                plo FCALL_REG
   0174   de                sep FCALL_REG       ;call SERIAL_READ
                            
   0175   95                ghi R5              ;get the result of SERIAL_READ
   0176   fb 0d             xri 13              ;check if it is 13 (ENTER KEY)
   0178   3a 8e             bnz READLINE_BACKSPACE      ;if not jump to READLINE_BACKSPACE
                            
   017a                 END_LINE
   017a   f8 00             ldi 00h             ;put 0 to the endof the string
   017c   57                str R7
                            
   017d   f8 aa             ldi NEW_LINE.0      ;load the address of CRLF string
   017f   a6                plo R6
   0180   f8 0c             ldi NEW_LINE.1
   0182   b6                phi R6
                            
   0183   f8 52             ldi PRINT.0         ;prepare to call PRINT
   0185   ad                plo CALL_REG
   0186   f8 01             ldi PRINT.1
   0188   bd                phi CALL_REG
                            
   0189   f8 00             ldi FCALL.0
   018b   ae                plo FCALL_REG
   018c   de                sep FCALL_REG       ;call PRINT
                            
   018d   de                sep RETURN          ;RETURN from READLINE
                            
   018e                 READLINE_BACKSPACE
   018e   95                ghi R5              ;get the result of SERIAL_READ
   018f   fb 7f             xri 127             ;check if it is 127 (DEL)
   0191   3a aa             bnz STORE_CHAR      ;if not jump to STORE_CHAR
                            
   0193   88                glo R8
   0194   32 6b             bz READLINE_LOOP
                            
   0196   f8 64             ldi BACKSPACE_ACTION.0      ;load the address of the backspace action
   0198   a6                plo R6
   0199   f8 01             ldi BACKSPACE_ACTION.1
   019b   b6                phi R6
                            
   019c   f8 52             ldi PRINT.0                 ;prepare to call PRINT
   019e   ad                plo CALL_REG
   019f   f8 01             ldi PRINT.1
   01a1   bd                phi CALL_REG
                            
   01a2   f8 00             ldi FCALL.0
   01a4   ae                plo FCALL_REG
   01a5   de                sep FCALL_REG               ;call PRINT
                            
   01a6   27                dec R7
   01a7   28                dec R8
                            
   01a8   30 6b             br READLINE_LOOP
                            
   01aa                 STORE_CHAR
   01aa   88                glo R8
   01ab   fb ff             xri 0FFh
   01ad   32 6b             bz READLINE_LOOP
                            
   01af   95                ghi R5              ;get the result of the SERIAL_READ again
   01b0   57                str R7              ;store it where R7 pointing
   01b1   17                inc R7              ;increment R7
   01b2   18                inc R8
                            
   01b3   b4                phi R4              ;load the result to R4 to Echo it back
                            
   01b4   f8 13             ldi SERIAL_SEND_START.0     ;prepare to call SERIAL_SEND
   01b6   ad                plo CALL_REG
   01b7   f8 01             ldi SERIAL_SEND_START.1
   01b9   bd                phi CALL_REG
                            
   01ba   f8 00             ldi FCALL.0
   01bc   ae                plo FCALL_REG
   01bd   de                sep FCALL_REG       ;call SERIAL_SEND
   01be   30 6b             br READLINE_LOOP
                        ;----------------------------------------------
                        
                        ;-STR COMPARATOR-------------------------------
                        ;-R8 stringA-R9 stringB------------------------
                        ;-RETURN R10.0---------------------------------
   01c0                 STR_COMPARATOR
   01c0   f8 00             ldi 0           ;R10 low is the result, set it to 0
   01c2   aa                plo R10
                        	
   01c3                 STR_CHARCHECK
   01c3   08                ldn R8          ;load value from RAM[R8] to D register
   01c4   e9                sex R9          ;set X pointer to R9
   01c5   f3                xor             ;D = D ^ RAM[R9]
                            
   01c6   32 c9             bz STR_EQUAL    ;if D == 0 jump to STR_EQUAL
   01c8   de                sep RETURN      ;RETURN
                            
   01c9                 STR_EQUAL 
   01c9   08            	ldn R8          ;load value from RAM[R8] to D register again
   01ca   3a d0         	bnz STR_INC     ;if D != 0 jump to STR_INC
   01cc   f8 01         	ldi 1           ;set R10 to 1 and return
   01ce   aa            	plo R10
   01cf   de            	sep RETURN
                        	
   01d0                 STR_INC
   01d0   18            	inc R8          ;increment both address by 1
   01d1   19            	inc R9
   01d2   30 c3         	br STR_CHARCHECK
                        ;----------------------------------------------
                        
                        ;-INTEGER DIV----------------------------------
                        ;-R4 pointing to divident----------------------
                        ;-R5 pointing to divider-----------------------
                        ;-R6 pointing to quotient----------------------
                        ;-R7 pointing to remainder---------------------
                        ;-R8.0 bitcnt, R8.1 flags----------------------
                        ;-R9 general counter---------------------------
   01d4                 INTEGER_DIV
   01d4   ef                sex STACK_REG   ;set STACK_REG as data pointer to store variables in STACK
   01d5   f8 00             ldi 0           ;set bitcnt and flags to 0
   01d7   a8                plo R8
   01d8   b8                phi R8
                            
   01d9   15                inc R5          ;increment R5 to the MSB because we want to store the divider it in little-endian format
   01da   15                inc R5
   01db   15                inc R5
                            
   01dc   05                ldn R5          ;copying starts here
   01dd   73                stxd
   01de   25                dec R5
                            
   01df   05                ldn R5
   01e0   73                stxd
   01e1   25                dec R5
                            
   01e2   05                ldn R5
   01e3   73                stxd
   01e4   25                dec R5
                            
   01e5   05                ldn R5
   01e6   73                stxd            ;+11 divider, +11 shows the start of the data from the STACK pointer
                            
   01e7   f8 00             ldi 0           ;storing 0 for the subtractor
   01e9   73                stxd
   01ea   73                stxd
   01eb   73                stxd
   01ec   73                stxd            ;+7 subtractor
                            
   01ed   96                ghi R6          ;saving the quotient pointer
   01ee   73                stxd
   01ef   86                glo R6
   01f0   73                stxd            ;+5 quotient pointer
                        
   01f1   97                ghi R7          ;saving the remainder
   01f2   73                stxd
   01f3   87                glo R7
   01f4   73                stxd            ;+3 remainder pointer
                            
   01f5   94                ghi R4          ;saving the dividend pointer
   01f6   73                stxd
   01f7   84                glo R4
   01f8   73                stxd            ;+1 dividend pointer
                            
   01f9   e4                sex R4
                            
   01fa   72                ldxa            ;copy dividend to remainder
   01fb   57                str R7
   01fc   17                inc R7
                            
   01fd   72                ldxa
   01fe   57                str R7
   01ff   17                inc R7
                            
   0200   72                ldxa
   0201   57                str R7
   0202   17                inc R7
                            
   0203   f0                ldx
   0204   57                str R7
                            
   0205   f8 00             ldi 0
   0207   56                str R6
   0208   16                inc R6
   0209   56                str R6
   020a   16                inc R6
   020b   56                str R6
   020c   16                inc R6
   020d   56                str R6
                        
   020e   8f                glo STACK_REG   ;get the STACK_REG pointer to position it to the divider MSB
   020f   fc 0e             adi 14          ;add 14 to it
   0211   a5                plo R5          ;store the new pointer to R5
   0212   9f                ghi STACK_REG   ;get the STACK_REG high part to add the carry to it
   0213   7c 00             adci 0          ;adding the carry
   0215   b5                phi R5          ;store the new high part to R5
                            
   0216   e5                sex R5          ;set X data pointer to R5
   0217   f0                ldx             ;load data from RAM[R5]
   0218   25                dec R5          ;decrement R5 to set it back to the divider's LSB
   0219   25                dec R5
   021a   25                dec R5
   021b   fa 80             ani 080h        ;check if sign bit is set
                            
   021d   c2 02 34          lbz INTEGER_DIV_NEXT_CHECK
                            
   0220   f8 82             ldi 082h        ;load 0x82 to the D register
   0222   fe                shl             ;shit it left so it will set the carry flag and the D registre will be 4
   0223   a9                plo R9          ;store it to R9 low
                            
   0224                 INTEGER_DIV_INVERT_LOOP1
   0224   f0                ldx             ;load data from RAM[R5]
   0225   fb ff             xri 0FFh        ;xor D with 0xFF to invert it
   0227   7c 00             adci 0          ;add the carry for to the result (inver+1)
   0229   55                str R5          ;store the result to RAM[R5]
   022a   60                irx             ;increment R5
                        
   022b   29                dec R9          ;decrement R8
   022c   89                glo R9          ;get R8 low, and if it's not 0 then do the loop
   022d   ca 02 24          lbnz INTEGER_DIV_INVERT_LOOP1
                            
   0230   98                ghi R8          ;set the flag
   0231   f9 01             ori 1
   0233   b8                phi R8
                            
   0234                 INTEGER_DIV_NEXT_CHECK
   0234   8f                glo STACK_REG
   0235   fc 03             adi 3
   0237   a9                plo R9
   0238   9f                ghi STACK_REG
   0239   7c 00             adci 0
   023b   b9                phi R9
                            
   023c   09                ldn R9              ;restore and get remainder MSB
   023d   fc 03             adi 3
   023f   a4                plo R4
   0240   19                inc R9
   0241   09                ldn R9
   0242   7c 00             adci 0
   0244   b4                phi R4
                            
   0245   e4                sex R4
   0246   f0                ldx
   0247   24                dec R4
   0248   24                dec R4
   0249   24                dec R4
   024a   fa 80             ani 080h            ;check if sign bit is set
                            
   024c   c2 02 62          lbz INTEGER_SHIFT_DR
                            
   024f   f8 82             ldi 082h
   0251   fe                shl
   0252   a9                plo R9
                            
   0253                 INVERT_LOOP2
   0253   f0                ldx         ;invert byte 3
   0254   fb ff             xri 0FFh
   0256   7c 00             adci 0
   0258   54                str R4
   0259   60                irx
                        
   025a   29                dec R9
   025b   89                glo R9
   025c   3a 53             bnz INVERT_LOOP2
                            
   025e   98                ghi R8      ;set the flag
   025f   f9 02             ori 2
   0261   b8                phi R8
                            
   0262                 INTEGER_SHIFT_DR
   0262   8f                glo STACK_REG ;get divider MSB
   0263   fc 0b             adi 11
   0265   a5                plo R5
   0266   9f                ghi STACK_REG
   0267   7c 00             adci 0
   0269   b5                phi R5
                            
   026a   f8 00             ldi 0
   026c   e5                sex R5
   026d   f1                or
   026e   60                irx
   026f   f1                or
   0270   60                irx
   0271   f1                or
   0272   60                irx
   0273   f1                or
   0274   32 8d             bz DIVISION_LOOP
                            
   0276                 SHIFT_DR
   0276   8f                glo STACK_REG ;get divider MSB
   0277   fc 0e             adi 14
   0279   a5                plo R5
   027a   9f                ghi STACK_REG
   027b   7c 00             adci 0
   027d   b5                phi R5
                            
   027e   e5                sex R5
                            
   027f   f8 04             ldi 4
   0281   fe                shl
   0282   a9                plo R9
                            
   0283                 CARRY_SHIFTING
   0283   f0                ldx
   0284   76                shrc
   0285   73                stxd
                            
   0286   29                dec R9
   0287   89                glo R9
   0288   3a 83             bnz CARRY_SHIFTING
                            
   028a   18                inc R8
                            
   028b   30 62             br INTEGER_SHIFT_DR
                            
   028d                 DIVISION_LOOP
   028d   88                glo R8              ;get R8 low
   028e   fd 20             sdi 32              ;if larger than 32 then finish the loop
   0290   cb 03 1f          lbnf FINAL_CHECK
                        
   0293   8f                glo STACK_REG       ;restore quotient pointer to R6
   0294   fc 05             adi 5
   0296   a9                plo R9
   0297   9f                ghi STACK_REG
   0298   7c 00             adci 0
   029a   b9                phi R9
                            
   029b   09                ldn R9
   029c   a6                plo R6
   029d   19                inc R9
   029e   09                ldn R9
   029f   b6                phi R6
                            
   02a0   e6                sex R6
                            
   02a1   f8 02             ldi 2
   02a3   fe                shl
   02a4   a9                plo R9
                            
   02a5                 SHIFTING_Q
   02a5   f0                ldx                 ;shifting quotient to left
   02a6   7e                shlc
   02a7   56                str R6
   02a8   60                irx
                        
   02a9   29                dec R9
   02aa   89                glo R9
   02ab   3a a5             bnz SHIFTING_Q
                            
   02ad   8f                glo STACK_REG    ;restore remainder pointer to R4
   02ae   fc 03             adi 3
   02b0   a9                plo R9
   02b1   9f                ghi STACK_REG
   02b2   7c 00             adci 0
   02b4   b9                phi R9
                            
   02b5   09                ldn R9
   02b6   a4                plo R4
   02b7   19                inc R9
   02b8   09                ldn R9
   02b9   b4                phi R4
                            
   02ba   8f                glo STACK_REG    ;restore subtractor pointer to R5
   02bb   fc 07             adi 7
   02bd   a5                plo R5
   02be   9f                ghi STACK_REG
   02bf   7c 00             adci 0
   02c1   b5                phi R5
                            
   02c2   e4                sex R4
   02c3   f8 82             ldi 082h
   02c5   fe                shl
   02c6   a9                plo R9
                            
   02c7                 TRY_SUBTRACTING         ;try subtracting
   02c7   05                ldn R5
   02c8   75                sdb
   02c9   60                irx
   02ca   15                inc R5
                            
   02cb   29                dec R9
   02cc   89                glo R9
   02cd   3a c7             bnz TRY_SUBTRACTING
                            
   02cf   cb 03 07          lbnf NEXT_BIT        ;if subtracting unsuccesful, jump to NEXT_BIT
                            
   02d2   8f                glo STACK_REG
   02d3   fc 05             adi 5
   02d5   a9                plo R9
   02d6   9f                ghi STACK_REG
   02d7   7c 00             adci 0
   02d9   b9                phi R9
                            
   02da   09                ldn R9
   02db   a6                plo R6
   02dc   19                inc R9
   02dd   09                ldn R9
   02de   b6                phi R6
                            
   02df   06                ldn R6
   02e0   f9 01             ori 1
   02e2   56                str R6
                            
   02e3   8f                glo STACK_REG    ;restore remainder pointer
   02e4   fc 03             adi 3
   02e6   a9                plo R9
   02e7   9f                ghi STACK_REG
   02e8   7c 00             adci 0
   02ea   b9                phi R9
                            
   02eb   09                ldn R9
   02ec   a4                plo R4
   02ed   19                inc R9
   02ee   09                ldn R9
   02ef   b4                phi R4
                            
   02f0   8f                glo STACK_REG    ;restore subtractor's pointer to R5
   02f1   fc 07             adi 7
   02f3   a5                plo R5
   02f4   9f                ghi STACK_REG
   02f5   7c 00             adci 0
   02f7   b5                phi R5
                            
   02f8   e4                sex R4
                            
   02f9   f8 82             ldi 082h
   02fb   fe                shl
   02fc   a9                plo R9
                            
   02fd                 SUBTRACT_FOR_REAL
   02fd   05                ldn R5          ;subtract the subtractor from the remainder and store it
   02fe   75                sdb
   02ff   54                str R4
   0300   60                irx
   0301   15                inc R5
                            
   0302   29                dec R9
   0303   89                glo R9
   0304   ca 02 fd          lbnz SUBTRACT_FOR_REAL
                            
   0307                 NEXT_BIT
   0307   8f                glo STACK_REG    ;restore subtractor pointer to R5 and set it to MSB
   0308   fc 0a             adi 10
   030a   a5                plo R5
   030b   9f                ghi STACK_REG
   030c   7c 00             adci 0
   030e   b5                phi R5
                            
   030f   e5                sex R5
   0310   f8 02             ldi 2
   0312   fe                shl
   0313   a9                plo R9
                            
   0314                 SHIFT_SUBTRACTOR
   0314   f0                ldx
   0315   76                shrc
   0316   73                stxd
                            
   0317   29                dec R9
   0318   89                glo R9
   0319   3a 14             bnz SHIFT_SUBTRACTOR
                            
   031b   18                inc R8
   031c   c0 02 8d          lbr DIVISION_LOOP
                            
   031f                 FINAL_CHECK
   031f   98                ghi R8
   0320   fa 02             ani 2
   0322   c2 03 43          lbz FINAL_CHECK2
                            
   0325   8f                glo STACK_REG    ;restore remainder pointer to R4
   0326   fc 03             adi 3
   0328   a9                plo R9
   0329   9f                ghi STACK_REG
   032a   7c 00             adci 0
   032c   b9                phi R9
                            
   032d   09                ldn R9
   032e   a4                plo R4
   032f   19                inc R9
   0330   09                ldn R9
   0331   b4                phi R4
                            
   0332   e4                sex R4
                            
   0333   f8 82             ldi 082h
   0335   fe                shl
   0336   a9                plo R9
                            
   0337                 INVERT_LOOP3
   0337   f0                ldx
   0338   fb ff             xri 0FFh
   033a   7c 00             adci 0
   033c   54                str R4
   033d   60                irx
                            
   033e   29                dec R9
   033f   89                glo R9
   0340   ca 03 37          lbnz INVERT_LOOP3
                            
   0343                 FINAL_CHECK2
   0343   98                ghi R8
   0344   c2 03 69          lbz THE_END
   0347   fb 03             xri 3
   0349   c2 03 69          lbz THE_END
                            
   034c   8f                glo STACK_REG    ;restore quotient pointer to R6
   034d   fc 05             adi 5
   034f   a9                plo R9
   0350   9f                ghi STACK_REG
   0351   7c 00             adci 0
   0353   b9                phi R9
                            
   0354   09                ldn R9
   0355   a6                plo R6
   0356   19                inc R9
   0357   09                ldn R9
   0358   b6                phi R6
                            
   0359   e6                sex R6
                            
   035a   f8 82             ldi 082h
   035c   fe                shl
   035d   a9                plo R9
                            
   035e                 INVERT_LOOP4
   035e   f0                ldx
   035f   fb ff             xri 0FFh
   0361   7c 00             adci 0
   0363   56                str R6
   0364   60                irx
                            
   0365   29                dec R9
   0366   89                glo R9
   0367   3a 5e             bnz INVERT_LOOP4
                        
   0369                 THE_END
   0369   8f                glo STACK_REG       ;setting back the STACK_REG for return
   036a   fc 0e             adi 14
   036c   af                plo STACK_REG
   036d   9f                ghi STACK_REG
   036e   7c 00             adci 0
   0370   bf                phi STACK_REG
                            
   0371   de                sep RETURN          ;RETURN
                        ;----------------------------------------------
                        
                        ;-INTEGER MUL----------------------------------
                        ;-R4-multiplicand pointer----------------------
                        ;-R5-multiplier pointer------------------------
                        ;-R6-result pointer----------------------------
                        ;-R7-general register--------------------------
   0372                 INTEGER_MUL
   0372   ef                sex STACK_REG
                            
   0373   14                inc R4      ;increment R4 and R5 pointer to MSB
   0374   14                inc R4      ;to copy the values to the local variables
   0375   14                inc R4
                            
   0376   15                inc R5
   0377   15                inc R5
   0378   15                inc R5
                            
   0379   04                ldn R4      ;copying starts here
   037a   73                stxd
   037b   24                dec R4
                            
   037c   04                ldn R4
   037d   73                stxd
   037e   24                dec R4
                            
   037f   04                ldn R4
   0380   73                stxd
   0381   24                dec R4
                            
   0382   04                ldn R4
   0383   73                stxd        ;+7 multiplicand
                            
   0384   05                ldn R5
   0385   73                stxd
   0386   25                dec R5
                            
   0387   05                ldn R5
   0388   73                stxd
   0389   25                dec R5
                            
   038a   05                ldn R5
   038b   73                stxd
   038c   25                dec R5
                            
   038d   05                ldn R5
   038e   73                stxd        ;+3 multiplier
                            
   038f   96                ghi R6
   0390   73                stxd
   0391   86                glo R6
   0392   73                stxd        ;+1 result pointer
                        
   0393   f8 00             ldi 0       ;zeroing the result
                            
   0395   56                str R6
   0396   16                inc R6
                            
   0397   56                str R6
   0398   16                inc R6
                            
   0399   56                str R6
   039a   16                inc R6
                            
   039b   56                str R6
                            
   039c   26                dec R6
   039d   26                dec R6
   039e   26                dec R6
                        
   039f                 INTEGER_MUL_LOOP
   039f   8f                glo STACK_REG   ;restore multiplier pointer
   03a0   fc 03             adi 3
   03a2   a5                plo R5
   03a3   9f                ghi STACK_REG
   03a4   7c 00             adci 0
   03a6   b5                phi R5
                            
   03a7   e5                sex R5          ;check if multiplier is 0
   03a8   f8 00             ldi 0
   03aa   f1                or
   03ab   60                irx
   03ac   f1                or
   03ad   60                irx
   03ae   f1                or
   03af   60                irx
   03b0   f1                or
                            
   03b1   25                dec R5
   03b2   25                dec R5
   03b3   25                dec R5
                            
   03b4   c2 04 09          lbz INTEGER_MUL_END      ;if 0 then jump to the end
                            
   03b7   05                ldn R5                  ;load the multiplier's LSB
   03b8   fa 01             ani 1                   ;filter for the LSb
   03ba   32 dc             bz INTEGER_MUL_SHIFT    ;if zero, skip the addition
                            
   03bc   8f                glo STACK_REG           ;restore multiplicand pointer
   03bd   fc 07             adi 7
   03bf   a4                plo R4
   03c0   9f                ghi STACK_REG
   03c1   7c 00             adci 0
   03c3   b4                phi R4
                            
   03c4   8f                glo STACK_REG           ;restore result pointer
   03c5   a7                plo R7
   03c6   9f                ghi STACK_REG
   03c7   b7                phi R7
   03c8   17                inc R7
                            
   03c9   07                ldn R7
   03ca   a5                plo R5
   03cb   17                inc R7
   03cc   07                ldn R7
   03cd   b5                phi R5
                            
   03ce   e5                sex R5
                            
   03cf   f8 02             ldi 2                   ;prepare addition
   03d1   fe                shl
   03d2   a7                plo R7
                            
   03d3                 INTEGER_MUL_ADD
   03d3   04                ldn R4
   03d4   74                adc
   03d5   55                str R5
   03d6   60                irx
   03d7   14                inc R4
                            
   03d8   27                dec R7
   03d9   87                glo R7
   03da   3a d3             bnz INTEGER_MUL_ADD
                        
   03dc                 INTEGER_MUL_SHIFT
                        
   03dc   8f                glo STACK_REG           ;set multiplier's pointer to MSB
   03dd   fc 06             adi 6                   ;to shift it right
   03df   a5                plo R5
   03e0   9f                ghi STACK_REG
   03e1   7c 00             adci 0
   03e3   b5                phi R5
                            
   03e4   e5                sex R5
                            
   03e5   f8 02             ldi 2
   03e7   fe                shl
   03e8   a7                plo R7
                            
   03e9                 INTEGER_MUL_SHMULTIPLIER
   03e9   f0                ldx                     ;shifting right the multiplier
   03ea   76                shrc
   03eb   73                stxd
                            
   03ec   27                dec R7
   03ed   87                glo R7
   03ee   3a e9             bnz INTEGER_MUL_SHMULTIPLIER
                            
   03f0   8f                glo STACK_REG           ;restore multiplicand pointer
   03f1   fc 07             adi 7                   ;to shift it left
   03f3   a4                plo R4
   03f4   9f                ghi STACK_REG
   03f5   7c 00             adci 0
   03f7   b4                phi R4
                            
   03f8   e4                sex R4
                            
   03f9   f8 02             ldi 2
   03fb   fe                shl
   03fc   a7                plo R7
                            
   03fd                 INTEGER_MUL_SHMULTIPLICAND
   03fd   f0                ldx                     ;shifting the multiplicand left
   03fe   7e                shlc
   03ff   54                str R4
   0400   60                irx
                        
   0401   27                dec R7
   0402   87                glo R7
   0403   ca 03 fd          lbnz INTEGER_MUL_SHMULTIPLICAND
                            
   0406   c0 03 9f          lbr INTEGER_MUL_LOOP
                            
   0409                 INTEGER_MUL_END
   0409   8f                glo STACK_REG
   040a   fc 0a             adi 10
   040c   af                plo STACK_REG
   040d   9f                ghi STACK_REG
   040e   7c 00             adci 0
   0410   bf                phi STACK_REG
                            
   0411   de                sep RETURN          ;RETURN    
                        ;----------------------------------------------
                        
                        ;-PRINT HEX------------------------------------
                        ;-R4-int pointer-------------------------------
                        ;-R5.0-number of digits------------------------
                        ;-Local registers------------------------------
                        ;-R5.1-flag, R6--------------------------------
   0412                 HEX_CHARS
   0412   30 31 32 33       db "0123456789ABCDEF"
   0416   34 35 36 37   
   041a   38 39 41 42   
   041e   43 44 45 46   
                        ;----------------------------------------------
   0422                 PRINT_HEX
   0422   ef                sex STACK_REG
                            
   0423   95                ghi R5  ;saving the state of the local registers
   0424   73                stxd
                            
   0425   96                ghi R6
   0426   73                stxd
   0427   86                glo R6
   0428   73                stxd
                            
   0429   14                inc R4  ;making a copy of the Integer
   042a   14                inc R4
   042b   14                inc R4
                            
   042c   04                ldn R4
   042d   73                stxd
   042e   24                dec R4
   042f   04                ldn R4
   0430   73                stxd
   0431   24                dec R4
   0432   04                ldn R4
   0433   73                stxd
   0434   24                dec R4
   0435   04                ldn R4
   0436   73                stxd    ;+2 the integer
                            
   0437   f8 00             ldi 0   ;+1 
   0439   73                stxd
                            
   043a   8f                glo STACK_REG   ;set R4 to point to the Integer
   043b   a4                plo R4
   043c   9f                ghi STACK_REG
   043d   b4                phi R4
   043e   14                inc R4
   043f   14                inc R4
                            
   0440   f8 00             ldi 0           ;set R5 flags to 0
   0442   b5                phi R5
   0443   85                glo R5              
   0444   3a 49             bnz PRINT_UNTIL_R
   0446   f8 01             ldi 1           ;if R5 low, the number of digits, is zero, then set R5 flag
   0448   b5                phi R5
                        
   0449                 PRINT_UNTIL_R
   0449   95                ghi R5                  ;check the flag if set or not
   044a   32 5e             bz PRINT_CHECK_DIGIT    
   044c   e4                sex R4              ;checking the integer if it's zero
   044d   f8 00             ldi 0
   044f   f1                or
   0450   60                irx
   0451   f1                or
   0452   60                irx
   0453   f1                or
   0454   60                irx
   0455   f1                or
                            
   0456   24                dec R4
   0457   24                dec R4
   0458   24                dec R4
                            
   0459   ef                sex STACK_REG    
   045a   3a 61             bnz PRINT_DIGIT_LOOP
   045c   30 8f             br PRINT_HEX_END
                            
   045e                 PRINT_CHECK_DIGIT
   045e   85                glo R5
   045f   32 8f             bz PRINT_HEX_END
                        
   0461                 PRINT_DIGIT_LOOP
   0461   04                ldn R4
   0462   fa 0f             ani 0Fh
   0464   5f                str STACK_REG
   0465   f8 12             ldi HEX_CHARS.0
   0467   f4                add
   0468   a6                plo R6
   0469   f8 04             ldi HEX_CHARS.1
   046b   7c 00             adci 0
   046d   b6                phi R6
                            
   046e   06                ldn R6
   046f   73                stxd
                            
   0470   f8 04             ldi 4
   0472   a6                plo R6
                            
   0473                 PRINT_HEX_SHIFT_LOOP1
   0473   14                inc R4
   0474   14                inc R4
   0475   14                inc R4
                            
   0476   04                ldn R4
   0477   f6                shr
   0478   54                str R4
   0479   24                dec R4
                            
   047a   04                ldn R4
   047b   76                shrc
   047c   54                str R4
   047d   24                dec R4
                            
   047e   04                ldn R4
   047f   76                shrc
   0480   54                str R4
   0481   24                dec R4
                            
   0482   04                ldn R4
   0483   76                shrc
   0484   54                str R4
                            
   0485   26                dec R6
   0486   86                glo R6
   0487   3a 73             bnz PRINT_HEX_SHIFT_LOOP1
                            
   0489   95                ghi R5      ;check if R5 flag is set, if set then skip decrementing.
   048a   c6                lsnz
   048b   25                dec R5
   048c   c4                nop
   048d   30 49             br PRINT_UNTIL_R
                        
   048f                 PRINT_HEX_END
   048f   8f                glo STACK_REG
   0490   a6                plo R6
   0491   9f                ghi STACK_REG
   0492   b6                phi R6
   0493   16                inc R6
                            
   0494   f8 52             ldi PRINT.0     ;prepare to call PRINT
   0496   ad                plo CALL_REG
   0497   f8 01             ldi PRINT.1
   0499   bd                phi CALL_REG
                            
   049a   f8 00             ldi FCALL.0
   049c   ae                plo FCALL_REG
   049d   de                sep FCALL_REG
                            
   049e   86                glo R6
   049f   fc 04             adi 4
   04a1   af                plo STACK_REG
   04a2   96                ghi R6
   04a3   7c 00             adci 0
   04a5   bf                phi STACK_REG
                            
   04a6   ef                sex STACK_REG   ;restore local registers
   04a7   72                ldxa
   04a8   a6                plo R6
   04a9   72                ldxa
   04aa   b6                phi R6
   04ab   f0                ldx
   04ac   b5                phi R5
                            
   04ad   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-PRINT DEC------------------------------------
                        ;-R4-int pointer-------------------------------
                        ;-R10-flags-------------------------------------
   04ae                 PRINT_DEC
   04ae   ef                sex STACK_REG
                            
   04af   f8 00             ldi 0
   04b1   aa                plo R10
   04b2   ba                phi R10
                            
   04b3   14                inc R4
   04b4   14                inc R4
   04b5   14                inc R4
                            
   04b6   04                ldn R4
   04b7   73                stxd
   04b8   24                dec R4
   04b9   04                ldn R4
   04ba   73                stxd
   04bb   24                dec R4
   04bc   04                ldn R4
   04bd   73                stxd
   04be   24                dec R4
   04bf   04                ldn R4
   04c0   73                stxd        ;+10 the integer
                            
   04c1   f8 00             ldi 0
   04c3   73                stxd
   04c4   73                stxd
   04c5   73                stxd
   04c6   f8 0a             ldi 0Ah
   04c8   73                stxd        ;+6 divider
                            
   04c9   f8 00             ldi 0
   04cb   73                stxd
   04cc   73                stxd
   04cd   73                stxd
   04ce   73                stxd        ;+2 remainder
                            
   04cf   73                stxd        ;+1 output string buffer end
                            
   04d0   8f                glo STACK_REG
   04d1   ac                plo R12
   04d2   9f                ghi STACK_REG
   04d3   bc                phi R12
                            
   04d4   8c                glo R12
   04d5   fc 0d             adi 13
   04d7   a4                plo R4
   04d8   9c                ghi R12
   04d9   7c 00             adci 0
   04db   b4                phi R4
                            
   04dc   e4                sex R4
   04dd   f0                ldx
   04de   fa 80             ani 080h
   04e0   32 f8             bz PRINT_DEC_MAIN_LOOP
                            
   04e2   8a                glo R10
   04e3   f9 01             ori 1
   04e5   aa                plo R10
                            
   04e6   24                dec R4
   04e7   24                dec R4
   04e8   24                dec R4
                            
   04e9   f8 82             ldi 082h
   04eb   fe                shl
   04ec   a6                plo R6
                            
   04ed                 PRINT_DEC_INVER_LOOP
   04ed   f0                ldx
   04ee   fb ff             xri 0FFh
   04f0   7c 00             adci 0
   04f2   54                str R4
   04f3   14                inc R4
                            
   04f4   26                dec R6
   04f5   86                glo R6
   04f6   3a ed             bnz PRINT_DEC_INVER_LOOP
                            
   04f8                 PRINT_DEC_MAIN_LOOP    
   04f8   8c                glo R12
   04f9   fc 0a             adi 10
   04fb   a4                plo R4
   04fc   a6                plo R6
   04fd   9c                ghi R12
   04fe   7c 00             adci 0
   0500   b4                phi R4
   0501   b6                phi R6
                            
   0502   8c                glo R12
   0503   fc 06             adi 6
   0505   a5                plo R5
   0506   9c                ghi R12
   0507   7c 00             adci 0
   0509   b5                phi R5
                            
   050a   8c                glo R12
   050b   fc 02             adi 2
   050d   a7                plo R7
   050e   9c                ghi R12
   050f   7c 00             adci 0
   0511   b7                phi R7
                            
   0512   f8 d4             ldi INTEGER_DIV.0
   0514   ad                plo CALL_REG
   0515   f8 01             ldi INTEGER_DIV.1
   0517   bd                phi CALL_REG
                            
   0518   f8 00             ldi FCALL.0
   051a   ae                plo FCALL_REG
   051b   de                sep FCALL_REG
                            
   051c   ef                sex STACK_REG
                            
   051d   8c                glo R12
   051e   fc 02             adi 2
   0520   a7                plo R7
   0521   9c                ghi R12
   0522   7c 00             adci 0
   0524   b7                phi R7
                            
   0525   07                ldn R7
   0526   fc 30             adi 48
   0528   73                stxd
                            
   0529   8c                glo R12
   052a   fc 0a             adi 10
   052c   a4                plo R4
   052d   9c                ghi R12
   052e   7c 00             adci 0
   0530   b4                phi R4
                            
   0531   e4                sex R4
                            
   0532   f8 00             ldi 0
   0534   f1                or
   0535   60                irx
   0536   f1                or
   0537   60                irx
   0538   f1                or
   0539   60                irx
   053a   f1                or
                            
   053b   32 40             bz PRINT_DEC_END
   053d   c0 04 f8          lbr PRINT_DEC_MAIN_LOOP
                        
   0540                 PRINT_DEC_END
   0540   8a                glo R10
   0541   fa 01             ani 1
   0543   32 49             bz PRINT_DEC_FINAL
                            
   0545   ef                sex STACK_REG
   0546   f8 2d             ldi 45
   0548   73                stxd
                        
   0549                 PRINT_DEC_FINAL
   0549   8f                glo STACK_REG
   054a   a6                plo R6
   054b   9f                ghi STACK_REG
   054c   b6                phi R6
   054d   16                inc R6
                            
   054e   f8 52             ldi PRINT.0
   0550   ad                plo CALL_REG
   0551   f8 01             ldi PRINT.1
   0553   bd                phi CALL_REG
                            
   0554   f8 00             ldi FCALL.0
   0556   ae                plo FCALL_REG
   0557   de                sep FCALL_REG
                            
   0558   8c                glo R12
   0559   fc 0d             adi 13
   055b   af                plo STACK_REG
   055c   9c                ghi R12
   055d   7c 00             adci 0
   055f   bf                phi STACK_REG
                            
   0560   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-READ DEC-------------------------------------
                        ;-R4-string pointer----------------------------
                        ;-R5-result pointer----------------------------
   0561                 READ_DEC
   0561   ef                sex STACK_REG
                            
   0562   94                ghi R4
   0563   73                stxd
   0564   84                glo R4
   0565   73                stxd        ;+7 string pointer
                            
   0566   95                ghi R5
   0567   73                stxd
   0568   85                glo R5
   0569   73                stxd        ;+5 result pointer
                            
   056a   f8 00             ldi 0
   056c   73                stxd
   056d   73                stxd
   056e   73                stxd
   056f   f8 0a             ldi 0Ah
   0571   73                stxd        ;+1 multiplier
                            
   0572                 READ_DEC_MAIN_LOOP
   0572   8f                glo STACK_REG
   0573   fc 07             adi 7
   0575   a6                plo R6
   0576   9f                ghi STACK_REG
   0577   7c 00             adci 0
   0579   b6                phi R6
                            
   057a   06                ldn R6
   057b   a4                plo R4
   057c   16                inc R6
   057d   06                ldn R6
   057e   b4                phi R4
                            
   057f   04                ldn R4
   0580   ff 30             smi 48
   0582   3b e6             bnf READ_DEC_END
   0584   ff 0a             smi 10
   0586   33 e6             bdf READ_DEC_END
                            
   0588   8f                glo STACK_REG
   0589   fc 05             adi 5
   058b   a6                plo R6
   058c   9f                ghi STACK_REG
   058d   7c 00             adci 0
   058f   b6                phi R6
                            
   0590   06                ldn R6
   0591   a4                plo R4
   0592   16                inc R6
   0593   06                ldn R6
   0594   b4                phi R4
                            
   0595   b6                phi R6
   0596   84                glo R4
   0597   a6                plo R6
                            
   0598   8f                glo STACK_REG
   0599   a5                plo R5
   059a   9f                ghi STACK_REG
   059b   b5                phi R5
   059c   15                inc R5
                            
   059d   f8 72             ldi INTEGER_MUL.0     ;prepare to call INTEGER_MUL
   059f   ad                plo CALL_REG
   05a0   f8 03             ldi INTEGER_MUL.1       
   05a2   bd                phi CALL_REG
                            
   05a3   f8 00             ldi FCALL.0
   05a5   ae                plo FCALL_REG
   05a6   de                sep FCALL_REG
                            
   05a7   8f                glo STACK_REG
   05a8   fc 07             adi 7
   05aa   a6                plo R6
   05ab   9f                ghi STACK_REG
   05ac   7c 00             adci 0
   05ae   b6                phi R6
                            
   05af   06                ldn R6
   05b0   a4                plo R4
   05b1   16                inc R6
   05b2   06                ldn R6
   05b3   b4                phi R4
                            
   05b4   8f                glo STACK_REG
   05b5   fc 05             adi 5
   05b7   a6                plo R6
   05b8   9f                ghi STACK_REG
   05b9   7c 00             adci 0
   05bb   b6                phi R6
                            
   05bc   06                ldn R6
   05bd   a5                plo R5
   05be   16                inc R6
   05bf   06                ldn R6
   05c0   b5                phi R5
                            
   05c1   e5                sex R5
                            
   05c2   04                ldn R4
   05c3   ff 30             smi 48
                            
   05c5   f4                add
   05c6   55                str R5
   05c7   15                inc R5
                            
   05c8   f8 00             ldi 0
   05ca   74                adc
   05cb   55                str R5
   05cc   15                inc R5
                            
   05cd   f8 00             ldi 0
   05cf   74                adc
   05d0   55                str R5
   05d1   15                inc R5
                            
   05d2   f8 00             ldi 0
   05d4   74                adc
   05d5   55                str R5
                        
   05d6   14                inc R4
                            
   05d7   8f                glo STACK_REG
   05d8   fc 07             adi 7
   05da   a6                plo R6
   05db   9f                ghi STACK_REG
   05dc   7c 00             adci 0
   05de   b6                phi R6
                            
   05df   84                glo R4
   05e0   56                str R6
   05e1   16                inc R6
   05e2   94                ghi R4
   05e3   56                str R6
                            
   05e4   30 72             br READ_DEC_MAIN_LOOP
                           
   05e6                 READ_DEC_END
   05e6   8f                glo STACK_REG
   05e7   fc 05             adi 5
   05e9   af                plo STACK_REG
   05ea   9f                ghi STACK_REG
   05eb   7c 00             adci 0
   05ed   bf                phi STACK_REG
                            
   05ee   ef                sex STACK_REG
                            
   05ef   72                ldxa
   05f0   a5                plo R5
   05f1   72                ldxa
   05f2   b5                phi R5
   05f3   72                ldxa
   05f4   a4                plo R4
   05f5   f0                ldx
   05f6   b4                phi R4
                            
   05f7   de                sep RETURN      ;RETURN    
                        ;----------------------------------------------
                        
                        ;-FACTOR---------------------------------------
                        ;-R4-string pointer----------------------------
                        ;-R5-result pointer----------------------------
                        ;-R10-result code------------------------------
   05f8                 FACTOR
   05f8   ef                sex STACK_REG
                            
   05f9   94                ghi R4
   05fa   73                stxd
   05fb   84                glo R4
   05fc   73                stxd    ;+4 string pt
                            
   05fd   95                ghi R5
   05fe   73                stxd
   05ff   85                glo R5
   0600   73                stxd    ;+2 result pt
                            
   0601   f8 00             ldi 0
   0603   73                stxd    ;+1 flag, indicates if the factor needs to be negated
                            
                            
   0604                 FACTOR_MAIN
   0604   04                ldn R4
   0605   fb 20             xri 32
   0607   c2 06 58          lbz FACTOR_NEXT_CYCLE       ;if ' '
   060a   04                ldn R4
   060b   fb 2b             xri 43
   060d   c2 06 58          lbz FACTOR_NEXT_CYCLE       ;if '+'
   0610   04                ldn R4
   0611   fb 2d             xri 45
   0613   c2 06 4d          lbz FACTOR_NEGATE           ;if '-'
   0616   04                ldn R4
   0617   fb 28             xri 40
   0619   c2 06 34          lbz FACTOR_PARENTHESIS      ;if '('
   061c   04                ldn R4
   061d   ff 30             smi 48
   061f   cb 06 5c          lbnf FACTOR_END
   0622   ff 0a             smi 10
   0624   c3 06 5c          lbdf FACTOR_END
                            
   0627   f8 61             ldi READ_DEC.0
   0629   ad                plo CALL_REG
   062a   f8 05             ldi READ_DEC.1
   062c   bd                phi CALL_REG
                            
   062d   f8 00             ldi FCALL.0
   062f   ae                plo FCALL_REG
   0630   de                sep FCALL_REG
                            
   0631   c0 06 5c          lbr FACTOR_END
                            
   0634                 FACTOR_PARENTHESIS
   0634   14                inc R4
                            
   0635   f8 82             ldi EXPRESSION.0
   0637   ad                plo CALL_REG
   0638   f8 07             ldi EXPRESSION.1
   063a   bd                phi CALL_REG
                            
   063b   f8 00             ldi FCALL.0
   063d   ae                plo FCALL_REG
   063e   de                sep FCALL_REG
                        
   063f                 FACTOR_PARENTHESIS_SKIPSPACES
   063f   44                lda R4
   0640   fb 20             xri 32
   0642   32 3f             bz FACTOR_PARENTHESIS_SKIPSPACES
   0644   24                dec R4
                            
   0645   44                lda R4
   0646   fb 29             xri 41
   0648   32 5c             bz FACTOR_END
                            
   064a   c0 06 04          lbr FACTOR_MAIN
                            
   064d                 FACTOR_NEGATE
   064d   8f                glo STACK_REG
   064e   a6                plo R6
   064f   9f                ghi STACK_REG
   0650   b6                phi R6
   0651   16                inc R6
                            
   0652   06                ldn R6
   0653   fb ff             xri 0FFh
   0655   fa 01             ani 1
   0657   56                str R6
                            
   0658                 FACTOR_NEXT_CYCLE
   0658   14                inc R4
   0659   c0 06 04          lbr FACTOR_MAIN
                            
   065c                 FACTOR_END
   065c   8f                glo STACK_REG
   065d   a6                plo R6
   065e   9f                ghi STACK_REG
   065f   86                glo R6
   0660   16                inc R6
                            
   0661   06                ldn R6
   0662   c2 06 82          lbz FACTOR_FINAL
                            
   0665   8f                glo STACK_REG
   0666   fc 02             adi 2
   0668   a6                plo R6
   0669   9f                ghi STACK_REG
   066a   7c 00             adci 0
   066c   b6                phi R6
                            
   066d   06                ldn R6
   066e   a5                plo R5
   066f   16                inc R6
   0670   06                ldn R6
   0671   b5                phi R5
                            
   0672   e5                sex R5
                            
   0673   f8 82             ldi 082h
   0675   fe                shl
   0676   a6                plo R6
                            
   0677                 FACTOR_INVERTING
   0677   f0                ldx
   0678   fb ff             xri 0FFh
   067a   7c 00             adci 0
   067c   55                str R5
   067d   60                irx
                            
   067e   26                dec R6
   067f   86                glo R6
   0680   3a 77             bnz FACTOR_INVERTING
                            
   0682                 FACTOR_FINAL
   0682   8f                glo STACK_REG
   0683   fc 05             adi 5
   0685   af                plo STACK_REG
   0686   9f                ghi STACK_REG
   0687   7c 00             adci 0
   0689   bf                phi STACK_REG
                            
   068a   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-TERM-----------------------------------------
                        ;-R4-string pointer----------------------------
                        ;-R5-result------------------------------------
   068b                 TERM
   068b   ef                sex STACK_REG
                            
   068c   94                ghi R4
   068d   73                stxd
   068e   84                glo R4
   068f   73                stxd
                            
   0690   95                ghi R5
   0691   73                stxd
   0692   85                glo R5
   0693   73                stxd
                            
   0694   f8 f8             ldi FACTOR.0
   0696   ad                plo CALL_REG
   0697   f8 05             ldi FACTOR.1
   0699   bd                phi CALL_REG
                            
   069a   f8 00             ldi FCALL.0
   069c   ae                plo FCALL_REG
   069d   de                sep FCALL_REG
                            
   069e                 TERM_MAIN
   069e   04                ldn R4
   069f   fb 20             xri 32
   06a1   c2 07 6c          lbz TERM_NEXT_CYCLE
   06a4   04                ldn R4
   06a5   fb 2a             xri 42
   06a7   c2 07 17          lbz TERM_MULTIPLY       ;if '*'
   06aa   04                ldn R4
   06ab   fb 2f             xri 47
   06ad   32 b2             bz TERM_DIVIDE          ;if '/'
                            
   06af   c0 07 70          lbr TERM_END
                            
   06b2                 TERM_DIVIDE
   06b2   14                inc R4
                            
   06b3   f8 00             ldi 0
   06b5   73                stxd
   06b6   73                stxd
   06b7   73                stxd
   06b8   73                stxd    ;+5 remainder
                            
   06b9   73                stxd
   06ba   73                stxd
   06bb   73                stxd
   06bc   73                stxd    ;+1 divider
                            
   06bd   8f                glo STACK_REG
   06be   a5                plo R5
   06bf   9f                ghi STACK_REG
   06c0   b5                phi R5
   06c1   15                inc R5
                            
   06c2   f8 f8             ldi FACTOR.0
   06c4   ad                plo CALL_REG
   06c5   f8 05             ldi FACTOR.1
   06c7   bd                phi CALL_REG
                            
   06c8   f8 00             ldi FCALL.0
   06ca   ae                plo FCALL_REG
   06cb   de                sep FCALL_REG
                            
   06cc   8f                glo STACK_REG ;save R4 pointer
   06cd   fc 0b             adi 11
   06cf   a6                plo R6
   06d0   9f                ghi STACK_REG
   06d1   7c 00             adci 0
   06d3   b6                phi R6
                            
   06d4   84                glo R4
   06d5   56                str R6
   06d6   16                inc R6
   06d7   94                ghi R4
   06d8   56                str R6
                            
   06d9   8f                glo STACK_REG
   06da   fc 09             adi 9
   06dc   a8                plo R8
   06dd   9f                ghi STACK_REG
   06de   7c 00             adci 0
   06e0   b8                phi R8
                            
   06e1   08                ldn R8
   06e2   a4                plo R4
   06e3   a6                plo R6
   06e4   18                inc R8
   06e5   08                ldn R8
   06e6   b4                phi R4
   06e7   b6                phi R6
                            
   06e8   8f                glo STACK_REG
   06e9   a5                plo R5
   06ea   9f                ghi STACK_REG
   06eb   b5                phi R5
   06ec   15                inc R5
                            
   06ed   8f                glo STACK_REG
   06ee   fc 05             adi 5
   06f0   a7                plo R7
   06f1   9f                ghi STACK_REG
   06f2   7c 00             adci 0
   06f4   b7                phi R7
                            
   06f5   f8 d4             ldi INTEGER_DIV.0
   06f7   ad                plo CALL_REG
   06f8   f8 01             ldi INTEGER_DIV.1
   06fa   bd                phi CALL_REG
                            
   06fb   f8 00             ldi FCALL.0
   06fd   ae                plo FCALL_REG
   06fe   de                sep FCALL_REG
                            
   06ff   8f                glo STACK_REG
   0700   fc 0b             adi 11
   0702   a6                plo R6
   0703   9f                ghi STACK_REG
   0704   7c 00             adci 0
   0706   b6                phi R6
                            
   0707   06                ldn R6
   0708   a4                plo R4
   0709   16                inc R6
   070a   06                ldn R6
   070b   b4                phi R4
                            
   070c   8f                glo STACK_REG
   070d   fc 08             adi 8
   070f   af                plo STACK_REG
   0710   9f                ghi STACK_REG
   0711   7c 00             adci 0
   0713   bf                phi STACK_REG
                        
   0714   c0 06 9e          lbr TERM_MAIN
                            
   0717                 TERM_MULTIPLY
   0717   14                inc R4
                            
   0718   f8 00             ldi 0
   071a   73                stxd
   071b   73                stxd
   071c   73                stxd
   071d   73                stxd
                            
   071e   8f                glo STACK_REG
   071f   a5                plo R5
   0720   9f                ghi STACK_REG
   0721   b5                phi R5
   0722   15                inc R5
                            
   0723   f8 f8             ldi FACTOR.0
   0725   ad                plo CALL_REG
   0726   f8 05             ldi FACTOR.1
   0728   bd                phi CALL_REG
                            
   0729   f8 00             ldi FCALL.0
   072b   ae                plo FCALL_REG
   072c   de                sep FCALL_REG
                            
   072d   8f                glo STACK_REG
   072e   fc 07             adi 7
   0730   a6                plo R6
   0731   9f                ghi STACK_REG
   0732   7c 00             adci 0
   0734   b6                phi R6
                            
   0735   84                glo R4
   0736   56                str R6
   0737   16                inc R6
   0738   94                ghi R4
   0739   56                str R6
                            
   073a   8f                glo STACK_REG
   073b   fc 05             adi 5
   073d   a8                plo R8
   073e   9f                ghi STACK_REG
   073f   7c 00             adci 0
   0741   b8                phi R8
                            
   0742   08                ldn R8
   0743   a4                plo R4
   0744   a6                plo R6
   0745   18                inc R8
   0746   08                ldn R8
   0747   b4                phi R4
   0748   b6                phi R6
                            
   0749   8f                glo STACK_REG
   074a   a5                plo R5
   074b   9f                ghi STACK_REG
   074c   b5                phi R5
   074d   15                inc R5
                            
   074e   f8 72             ldi INTEGER_MUL.0
   0750   ad                plo CALL_REG
   0751   f8 03             ldi INTEGER_MUL.1
   0753   bd                phi CALL_REG
                            
   0754   f8 00             ldi FCALL.0
   0756   ae                plo FCALL_REG
   0757   de                sep FCALL_REG
                            
   0758   8f                glo STACK_REG
   0759   fc 07             adi 7
   075b   a6                plo R6
   075c   9f                ghi STACK_REG
   075d   7c 00             adci 0
   075f   b6                phi R6
                            
   0760   06                ldn R6
   0761   a4                plo R4
   0762   16                inc R6
   0763   06                ldn R6
   0764   b4                phi R4
                            
   0765   1f                inc STACK_REG
   0766   1f                inc STACK_REG
   0767   1f                inc STACK_REG
   0768   1f                inc STACK_REG
                        
   0769   c0 06 9e          lbr TERM_MAIN
                            
   076c                 TERM_NEXT_CYCLE
   076c   14                inc R4
   076d   c0 06 9e          lbr TERM_MAIN
                            
   0770                 TERM_END
   0770   8f                glo STACK_REG
   0771   a6                plo R6
   0772   9f                ghi STACK_REG
   0773   b6                phi R6
   0774   16                inc R6
                            
   0775   46                lda R6
   0776   a5                plo R5
   0777   46                lda R6
   0778   b5                phi R5
                            
   0779   8f                glo STACK_REG
   077a   fc 04             adi 4
   077c   af                plo STACK_REG
   077d   9f                ghi STACK_REG
   077e   7c 00             adci 0
   0780   bf                phi STACK_REG
                            
   0781   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-EXPRESSION-----------------------------------
                        ;-R4-string pointer----------------------------
                        ;-R5-result pointer----------------------------
   0782                 EXPRESSION
   0782   ef                sex STACK_REG
                            
   0783   94                ghi R4      ;R4 pointer to input string 
   0784   73                stxd
   0785   84                glo R4
   0786   73                stxd        ;+3 input string pointer
                            
   0787   95                ghi R5      ;R5 pointer to result
   0788   73                stxd
   0789   85                glo R5
   078a   73                stxd        ;+1 result pointer
                            
   078b                 EXPRESSION_SKIPSPACES           ;skip spaces
   078b   44                lda R4
   078c   fb 20             xri 32
   078e   32 8b             bz EXPRESSION_SKIPSPACES
   0790   24                dec R4
                            
   0791   f8 8b             ldi TERM.0                  ;read TERM
   0793   ad                plo CALL_REG
   0794   f8 06             ldi TERM.1
   0796   bd                phi CALL_REG
                            
   0797   f8 00             ldi FCALL.0
   0799   ae                plo FCALL_REG
   079a   de                sep FCALL_REG
                            
   079b                 EXPRESSION_MAIN
   079b   04                ldn R4
   079c   fb 20             xri 32                      ;if ' '
   079e   c2 08 5f          lbz EXPRESSION_NEXT_CYCLE
   07a1   04                ldn R4
   07a2   fb 2b             xri 43                      ;if '+'
   07a4   32 af             bz EXPRESSION_ADD
   07a6   04                ldn R4
   07a7   fb 2d             xri 45                      ;if '-'
   07a9   c2 08 07          lbz EXPRESSION_SUB
                            
   07ac   c0 08 63          lbr EXPRESSION_END
                            
   07af                 EXPRESSION_ADD
   07af   14                inc R4
                            
   07b0   f8 00             ldi 0               ;new result
   07b2   73                stxd
   07b3   73                stxd
   07b4   73                stxd
   07b5   73                stxd
                            
   07b6   8f                glo STACK_REG       ;set R5 pointer to new result
   07b7   a5                plo R5
   07b8   9f                ghi STACK_REG
   07b9   b5                phi R5
   07ba   15                inc R5
                            
   07bb   f8 8b             ldi TERM.0          ;read TERM
   07bd   ad                plo CALL_REG
   07be   f8 06             ldi TERM.1
   07c0   bd                phi CALL_REG
                            
   07c1   f8 00             ldi FCALL.0
   07c3   ae                plo FCALL_REG
   07c4   de                sep FCALL_REG
                            
   07c5   8f                glo STACK_REG       ; set R6 register to point to the input string pointer
   07c6   fc 07             adi 7
   07c8   a6                plo R6
   07c9   9f                ghi STACK_REG
   07ca   7c 00             adci 0
   07cc   b6                phi R6
                            
   07cd   84                glo R4              ;input string pointer = R4
   07ce   56                str R6
   07cf   16                inc R6
   07d0   94                ghi R4
   07d1   56                str R6
                            
   07d2   8f                glo STACK_REG       ;set R5 register to point to result
   07d3   a5                plo R5
   07d4   9f                ghi STACK_REG
   07d5   b5                phi R5
   07d6   15                inc R5
                            
   07d7   8f                glo STACK_REG       ;set R6 register to point to the result pointer
   07d8   fc 05             adi 5
   07da   a6                plo R6
   07db   9f                ghi STACK_REG
   07dc   7c 00             adci 0
   07de   b6                phi R6
                            
   07df   06                ldn R6              ;R4 = result pointer
   07e0   a4                plo R4
   07e1   16                inc R6
   07e2   06                ldn R6
   07e3   b4                phi R4
                            
   07e4   e4                sex R4
                            
   07e5   f8 02             ldi 2
   07e7   fe                shl
   07e8   a7                plo R7
                            
   07e9                 EXPRESSION_ADD_LOOP     ;*result pointer += result;
   07e9   05                ldn R5
   07ea   74                adc
   07eb   54                str R4
   07ec   15                inc R5
   07ed   60                irx
                            
   07ee   27                dec R7
   07ef   87                glo R7
   07f0   3a e9             bnz EXPRESSION_ADD_LOOP
                            
   07f2   ef                sex STACK_REG
                            
   07f3   8f                glo STACK_REG
   07f4   fc 07             adi 7
   07f6   a6                plo R6
   07f7   9f                ghi STACK_REG
   07f8   7c 00             adci 0
   07fa   b6                phi R6
                            
   07fb   06                ldn R6
   07fc   a4                plo R4
   07fd   16                inc R6
   07fe   06                ldn R6
   07ff   b4                phi R4
                            
   0800   1f                inc STACK_REG
   0801   1f                inc STACK_REG
   0802   1f                inc STACK_REG
   0803   1f                inc STACK_REG
                        
   0804   c0 07 9b          lbr EXPRESSION_MAIN
                        
   0807                 EXPRESSION_SUB
   0807   14                inc R4
                            
   0808   f8 00             ldi 0
   080a   73                stxd
   080b   73                stxd
   080c   73                stxd
   080d   73                stxd
                            
   080e   8f                glo STACK_REG
   080f   a5                plo R5
   0810   9f                ghi STACK_REG
   0811   b5                phi R5
   0812   15                inc R5
                            
   0813   f8 8b             ldi TERM.0
   0815   ad                plo CALL_REG
   0816   f8 06             ldi TERM.1
   0818   bd                phi CALL_REG
                            
   0819   f8 00             ldi FCALL.0
   081b   ae                plo FCALL_REG
   081c   de                sep FCALL_REG
                            
   081d   8f                glo STACK_REG
   081e   fc 07             adi 7
   0820   a6                plo R6
   0821   9f                ghi STACK_REG
   0822   7c 00             adci 0
   0824   b6                phi R6
                            
   0825   84                glo R4
   0826   56                str R6
   0827   16                inc R6
   0828   94                ghi R4
   0829   56                str R6
                            
   082a   8f                glo STACK_REG
   082b   a5                plo R5
   082c   9f                ghi STACK_REG
   082d   b5                phi R5
   082e   15                inc R5
                            
   082f   8f                glo STACK_REG
   0830   fc 05             adi 5
   0832   a6                plo R6
   0833   9f                ghi STACK_REG
   0834   7c 00             adci 0
   0836   b6                phi R6
                            
   0837   06                ldn R6
   0838   a4                plo R4
   0839   16                inc R6
   083a   06                ldn R6
   083b   b4                phi R4
                            
   083c   e4                sex R4
                            
   083d   f8 82             ldi 082h
   083f   fe                shl
   0840   a7                plo R7
                            
   0841                 EXPRESSION_SUB_LOOP
   0841   05                ldn R5
   0842   75                sdb
   0843   54                str R4
   0844   15                inc R5
   0845   60                irx
                            
   0846   27                dec R7
   0847   87                glo R7
   0848   3a 41             bnz EXPRESSION_SUB_LOOP
                            
   084a   ef                sex STACK_REG
                            
   084b   8f                glo STACK_REG
   084c   fc 07             adi 7
   084e   a6                plo R6
   084f   9f                ghi STACK_REG
   0850   7c 00             adci 0
   0852   b6                phi R6
                            
   0853   06                ldn R6
   0854   a4                plo R4
   0855   16                inc R6
   0856   06                ldn R6
   0857   b4                phi R4
                            
   0858   1f                inc STACK_REG
   0859   1f                inc STACK_REG
   085a   1f                inc STACK_REG
   085b   1f                inc STACK_REG
                        
   085c   c0 07 9b          lbr EXPRESSION_MAIN
                        
   085f                 EXPRESSION_NEXT_CYCLE    
   085f   14                inc R4
   0860   c0 07 9b          lbr EXPRESSION_MAIN
                            
   0863                 EXPRESSION_END
   0863   8f                glo STACK_REG
   0864   a6                plo R6
   0865   9f                ghi STACK_REG
   0866   b6                phi R6
   0867   16                inc R6
                            
   0868   46                lda R6
   0869   a5                plo R5
   086a   46                lda R6
   086b   b5                phi R5
                            
   086c   8f                glo STACK_REG
   086d   fc 04             adi 4
   086f   af                plo STACK_REG
   0870   9f                ghi STACK_REG
   0871   7c 00             adci 0
   0873   bf                phi STACK_REG
                            
   0874   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-HEXVIEWER------------------------------------
                        ;-R4-Start address-----------------------------
                        ;-R5-Count-------------------------------------
   0875                 HEX_BASE_SRT
   0875   0d 0a 42 61       db "\r\nBase address: 0x",0
   0879   73 65 20 61   
   087d   64 64 72 65   
   0881   73 73 3a 20   
   0885   30 78 00      
   0888                 HEX_HEADER_STR
   0888   0d 0a 0d 0a       db "\r\n\r\nOffset  00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F  String\r\n"
   088c   4f 66 66 73   
   0890   65 74 20 20   
   0894   30 30 20 30   
   0898   31 20 30 32   
   089c   20 30 33 20   
   08a0   30 34 20 30   
   08a4   35 20 30 36   
   08a8   20 30 37 20   
   08ac   30 38 20 30   
   08b0   39 20 30 41   
   08b4   20 30 42 20   
   08b8   30 43 20 30   
   08bc   44 20 30 45   
   08c0   20 30 46 20   
   08c4   20 53 74 72   
   08c8   69 6e 67 0d   
   08cc   0a            
   08cd   2d 2d 2d 2d       db         "-------------------------------------------------------------------------\r\n",0
   08d1   2d 2d 2d 2d   
   08d5   2d 2d 2d 2d   
   08d9   2d 2d 2d 2d   
   08dd   2d 2d 2d 2d   
   08e1   2d 2d 2d 2d   
   08e5   2d 2d 2d 2d   
   08e9   2d 2d 2d 2d   
   08ed   2d 2d 2d 2d   
   08f1   2d 2d 2d 2d   
   08f5   2d 2d 2d 2d   
   08f9   2d 2d 2d 2d   
   08fd   2d 2d 2d 2d   
   0901   2d 2d 2d 2d   
   0905   2d 2d 2d 2d   
   0909   2d 2d 2d 2d   
   090d   2d 2d 2d 2d   
   0911   2d 2d 2d 2d   
   0915   2d 0d 0a 00   
                        ;              "0000:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................"
   0919                 HEX_LINECNT_SEPARATOR
   0919   3a 20 20 20       db ":   ",0
   091d   00            
                            
   091e                 HEXVIEWER
   091e   ef                sex STACK_REG
                            
   091f   f8 00             ldi 0
   0921   73                stxd
   0922   73                stxd
   0923   94                ghi R4
   0924   73                stxd
   0925   84                glo R4
   0926   73                stxd    ;+17 current address
                            
   0927   f8 00             ldi 0
   0929   73                stxd
   092a   73                stxd
   092b   94                ghi R4
   092c   73                stxd
   092d   84                glo R4
   092e   73                stxd    ;+13 start address
                            
   092f   f8 00             ldi 0
   0931   73                stxd
   0932   73                stxd
   0933   95                ghi R5
   0934   73                stxd
   0935   85                glo R5
   0936   73                stxd    ;+9 last address
                            
   0937   f8 00             ldi 0
   0939   73                stxd
   093a   73                stxd
   093b   73                stxd
   093c   73                stxd    ;+5 line counter
                            
   093d   73                stxd
   093e   73                stxd
   093f   73                stxd
   0940   73                stxd    ;+1 temp for hex digits
                            
   0941   8f                glo STACK_REG
   0942   fc 0d             adi 13
   0944   a4                plo R4
   0945   9f                ghi STACK_REG
   0946   7c 00             adci 0
   0948   b4                phi R4
                            
   0949   8f                glo STACK_REG
   094a   fc 09             adi 9
   094c   a6                plo R6
   094d   9f                ghi STACK_REG
   094e   7c 00             adci 0
   0950   b6                phi R6
                            
   0951   e4                sex R4
                            
   0952   85                glo R5      ;adding R5 value to start address and store it to last address
   0953   f4                add
   0954   56                str R6
   0955   60                irx
   0956   16                inc R6
   0957   95                ghi R5
   0958   74                adc
   0959   56                str R6
   095a   60                irx
   095b   16                inc R6
   095c   f8 00             ldi 0
   095e   74                adc
   095f   56                str R6
                            
   0960   f8 75             ldi HEX_BASE_SRT.0     ;prepare to print base address
   0962   a6                plo R6
   0963   f8 08             ldi HEX_BASE_SRT.1
   0965   b6                phi R6
                        	
   0966   f8 52             ldi PRINT.0         ;prepare to call PRINT
   0968   ad                plo CALL_REG
   0969   f8 01             ldi PRINT.1
   096b   bd                phi CALL_REG
                            
   096c   f8 00             ldi FCALL.0
   096e   ae                plo FCALL_REG
   096f   de                sep FCALL_REG
                            
   0970   8f                glo STACK_REG       ;prepare to print the address in hex
   0971   fc 0d             adi 13
   0973   a4                plo R4
   0974   9f                ghi STACK_REG
   0975   7c 00             adci 0
   0977   b4                phi R4
                            
   0978   f8 04             ldi 4               ;with 4 digits
   097a   a5                plo R5
                            
   097b   f8 22             ldi PRINT_HEX.0     ;prepare to call PRINT_HEX
   097d   ad                plo CALL_REG
   097e   f8 04             ldi PRINT_HEX.1
   0980   bd                phi CALL_REG
                            
   0981   f8 00             ldi FCALL.0
   0983   ae                plo FCALL_REG
   0984   de                sep FCALL_REG
                            
   0985   f8 88             ldi HEX_HEADER_STR.0     ;prepare to print the header
   0987   a6                plo R6
   0988   f8 08             ldi HEX_HEADER_STR.1
   098a   b6                phi R6
                        	
   098b   f8 52             ldi PRINT.0         ;prepare to call PRINT
   098d   ad                plo CALL_REG
   098e   f8 01             ldi PRINT.1
   0990   bd                phi CALL_REG
                            
   0991   f8 00             ldi FCALL.0
   0993   ae                plo FCALL_REG
   0994   de                sep FCALL_REG
                        
   0995                 HEXVIEWER_MAINLOOP
   0995   8f                glo STACK_REG       ;prepare to print the first address in hex
   0996   fc 05             adi 5
   0998   a4                plo R4
   0999   9f                ghi STACK_REG
   099a   7c 00             adci 0
   099c   b4                phi R4
                            
   099d   f8 04             ldi 4               ;with 4 digits
   099f   a5                plo R5
                            
   09a0   f8 22             ldi PRINT_HEX.0     ;prepare to call PRINT_HEX
   09a2   ad                plo CALL_REG
   09a3   f8 04             ldi PRINT_HEX.1
   09a5   bd                phi CALL_REG
                            
   09a6   f8 00             ldi FCALL.0
   09a8   ae                plo FCALL_REG
   09a9   de                sep FCALL_REG
                            
   09aa   f8 19             ldi HEX_LINECNT_SEPARATOR.0     ;prepare to print address separator
   09ac   a6                plo R6
   09ad   f8 09             ldi HEX_LINECNT_SEPARATOR.1
   09af   b6                phi R6
                        	
   09b0   f8 52             ldi PRINT.0         ;prepare to call PRINT
   09b2   ad                plo CALL_REG
   09b3   f8 01             ldi PRINT.1
   09b5   bd                phi CALL_REG
                            
   09b6   f8 00             ldi FCALL.0
   09b8   ae                plo FCALL_REG
   09b9   de                sep FCALL_REG
                            
   09ba   f8 10             ldi 16      ;set R8 low to 16 for counting the bytes
   09bc   a8                plo R8
                           
   09bd                 HEXVIEWER_PRINT_HEX_LOOP
   09bd   8f                glo STACK_REG       ;set R4 pointer to current address
   09be   fc 11             adi 17
   09c0   a4                plo R4
   09c1   9f                ghi STACK_REG
   09c2   7c 00             adci 0
   09c4   b4                phi R4
                            
   09c5   8f                glo STACK_REG       ;set R5 pointer to last address
   09c6   fc 09             adi 9
   09c8   a5                plo R5
   09c9   9f                ghi STACK_REG
   09ca   7c 00             adci 0
   09cc   b5                phi R5
                        
   09cd   e4                sex R4          ;check if current address is >= last address
                            
   09ce   45                lda R5
   09cf   f5                sd
   09d0   60                irx
                            
   09d1   45                lda R5
   09d2   75                sdb
   09d3   60                irx
                            
   09d4   45                lda R5
   09d5   75                sdb
   09d6   60                irx
                            
   09d7   05                ldn R5
   09d8   75                sdb
                            
   09d9   c3 0a 01          lbdf HEXVIEWER_PRINT_HEX_SPACES   ;if current address >= last address then 
                        
   09dc   8f                glo STACK_REG       ;set R4 pointer to current address
   09dd   fc 11             adi 17
   09df   a4                plo R4
   09e0   9f                ghi STACK_REG
   09e1   7c 00             adci 0
   09e3   b4                phi R4
                            
   09e4   44                lda R4              ;get current address and load it in R5
   09e5   a5                plo R5
   09e6   44                lda R4
   09e7   b5                phi R5
                            
   09e8   05                ldn R5              ;get data from R5 address
   09e9   a5                plo R5              ;store data in R5 low
                            
   09ea   8f                glo STACK_REG       ;set R4 pointer to temp
   09eb   a4                plo R4
   09ec   9f                ghi STACK_REG
   09ed   b4                phi R4
   09ee   14                inc R4
                            
   09ef   85                glo R5              ;get data from R5 low
   09f0   54                str R4              ;store data to temp
                           
   09f1   f8 02             ldi 2
   09f3   a5                plo R5              ;set R5 low to 2 digits
                            
   09f4   f8 22             ldi PRINT_HEX.0     ;prepare to call PRINT_HEX
   09f6   ad                plo CALL_REG
   09f7   f8 04             ldi PRINT_HEX.1
   09f9   bd                phi CALL_REG
                            
   09fa   f8 00             ldi FCALL.0
   09fc   ae                plo FCALL_REG
   09fd   de                sep FCALL_REG
                            
   09fe   c0 0a 11          lbr HEXVIEWER_NEXT_HEX
                            
   0a01                 HEXVIEWER_PRINT_HEX_SPACES
   0a01   f8 1b             ldi HEX_LINECNT_SEPARATOR+2.0     ;prepare to print two space
   0a03   a6                plo R6
   0a04   f8 09             ldi HEX_LINECNT_SEPARATOR+2.1
   0a06   b6                phi R6
                        	
   0a07   f8 52             ldi PRINT.0         ;prepare to call PRINT
   0a09   ad                plo CALL_REG
   0a0a   f8 01             ldi PRINT.1
   0a0c   bd                phi CALL_REG
                            
   0a0d   f8 00             ldi FCALL.0
   0a0f   ae                plo FCALL_REG
   0a10   de                sep FCALL_REG
                        
   0a11                 HEXVIEWER_NEXT_HEX
   0a11   f8 1c             ldi HEX_LINECNT_SEPARATOR+3.0     ;prepare to print a space
   0a13   a6                plo R6
   0a14   f8 09             ldi HEX_LINECNT_SEPARATOR+3.1
   0a16   b6                phi R6
                        	
   0a17   f8 52             ldi PRINT.0         ;prepare to call PRINT
   0a19   ad                plo CALL_REG
   0a1a   f8 01             ldi PRINT.1
   0a1c   bd                phi CALL_REG
                            
   0a1d   f8 00             ldi FCALL.0
   0a1f   ae                plo FCALL_REG
   0a20   de                sep FCALL_REG
                            
   0a21   8f                glo STACK_REG       ;set R4 pointer to current address
   0a22   fc 11             adi 17
   0a24   a4                plo R4
   0a25   9f                ghi STACK_REG
   0a26   7c 00             adci 0
   0a28   b4                phi R4
                            
   0a29   e4                sex R4
   0a2a   f8 01             ldi 1
   0a2c   f4                add
   0a2d   54                str R4
   0a2e   60                irx
                            
   0a2f   f8 00             ldi 0
   0a31   74                adc
   0a32   54                str R4
   0a33   60                irx
                            
   0a34   f8 00             ldi 0
   0a36   74                adc
   0a37   54                str R4
   0a38   60                irx
                            
   0a39   f8 00             ldi 0
   0a3b   74                adc
   0a3c   54                str R4
                            
   0a3d   28                dec R8
   0a3e   88                glo R8
   0a3f   ca 09 bd          lbnz HEXVIEWER_PRINT_HEX_LOOP
                            
   0a42   f8 1c             ldi HEX_LINECNT_SEPARATOR+3.0     ;prepare to print a space
   0a44   a6                plo R6
   0a45   f8 09             ldi HEX_LINECNT_SEPARATOR+3.1
   0a47   b6                phi R6
                        	
   0a48   f8 52             ldi PRINT.0         ;prepare to call PRINT
   0a4a   ad                plo CALL_REG
   0a4b   f8 01             ldi PRINT.1
   0a4d   bd                phi CALL_REG
                            
   0a4e   f8 00             ldi FCALL.0
   0a50   ae                plo FCALL_REG
   0a51   de                sep FCALL_REG
                            
   0a52   8f                glo STACK_REG       ;set R4 pointer to current address
   0a53   fc 11             adi 17
   0a55   a4                plo R4
   0a56   9f                ghi STACK_REG
   0a57   7c 00             adci 0
   0a59   b4                phi R4
                            
   0a5a   8f                glo STACK_REG       ;set R5 pointer to start address
   0a5b   fc 0d             adi 13
   0a5d   a5                plo R5
   0a5e   9f                ghi STACK_REG
   0a5f   7c 00             adci 0
   0a61   b5                phi R5
                            
   0a62   e5                sex R5
                            
   0a63   72                ldxa
   0a64   54                str R4
   0a65   14                inc R4
                            
   0a66   72                ldxa
   0a67   54                str R4
   0a68   14                inc R4
                            
   0a69   72                ldxa
   0a6a   54                str R4
   0a6b   14                inc R4
                            
   0a6c   72                ldxa
   0a6d   54                str R4
                            
   0a6e   f8 10             ldi 16      ;set R8 low to 16 for counting the bytes
   0a70   a8                plo R8
                        
   0a71                 HEXVIEWER_PRINT_STR_LOOP
   0a71   8f                glo STACK_REG       ;set R4 pointer to current address
   0a72   fc 11             adi 17
   0a74   a4                plo R4
   0a75   9f                ghi STACK_REG
   0a76   7c 00             adci 0
   0a78   b4                phi R4
                            
   0a79   8f                glo STACK_REG       ;set R5 pointer to last address
   0a7a   fc 09             adi 9
   0a7c   a5                plo R5
   0a7d   9f                ghi STACK_REG
   0a7e   7c 00             adci 0
   0a80   b5                phi R5
                        
   0a81   e4                sex R4          ;check if current address is <= last address
                            
   0a82   45                lda R5
   0a83   f5                sd
   0a84   60                irx
                            
   0a85   45                lda R5
   0a86   75                sdb
   0a87   60                irx
                            
   0a88   45                lda R5
   0a89   75                sdb
   0a8a   60                irx
                            
   0a8b   05                ldn R5
   0a8c   75                sdb
                            
   0a8d   33 c2             bpz HEXVIEWER_PRINT_STR_SPACE   ;if current address >= last address then 
                            
   0a8f   8f                glo STACK_REG       ;set R4 pointer to current address
   0a90   fc 11             adi 17
   0a92   a4                plo R4
   0a93   9f                ghi STACK_REG
   0a94   7c 00             adci 0
   0a96   b4                phi R4
                            
   0a97   44                lda R4              ;get current address and load it in R5
   0a98   a5                plo R5
   0a99   44                lda R4
   0a9a   b5                phi R5
                            
   0a9b   05                ldn R5              ;get data from R5 address
   0a9c   a5                plo R5              ;store data in R5 low
                            
   0a9d   ff 20             smi 32
   0a9f   3b b3             bm HEXVIEWER_PRINT_STR_DOT
   0aa1   ff 5f             smi 95
   0aa3   33 b3             bpz HEXVIEWER_PRINT_STR_DOT
                            
   0aa5   85                glo R5
   0aa6   b4                phi R4
                            
   0aa7   f8 13             ldi SERIAL_SEND_START.0         ;prepare to call SERIAL_SEND_START to send one char
   0aa9   ad                plo CALL_REG
   0aaa   f8 01             ldi SERIAL_SEND_START.1
   0aac   bd                phi CALL_REG
                            
   0aad   f8 00             ldi FCALL.0
   0aaf   ae                plo FCALL_REG
   0ab0   de                sep FCALL_REG
                            
   0ab1   30 cf             br HEXVIEWER_NEXT_STR
                            
   0ab3                 HEXVIEWER_PRINT_STR_DOT
   0ab3   f8 2e             ldi 46
   0ab5   b4                phi R4
                            
   0ab6   f8 13             ldi SERIAL_SEND_START.0         ;prepare to call SERIAL_SEND_START to send one char
   0ab8   ad                plo CALL_REG
   0ab9   f8 01             ldi SERIAL_SEND_START.1
   0abb   bd                phi CALL_REG
                            
   0abc   f8 00             ldi FCALL.0
   0abe   ae                plo FCALL_REG
   0abf   de                sep FCALL_REG
                            
   0ac0   30 cf             br HEXVIEWER_NEXT_STR
                        
   0ac2                 HEXVIEWER_PRINT_STR_SPACE
   0ac2   f8 20             ldi 32
   0ac4   b4                phi R4
                            
   0ac5   f8 13             ldi SERIAL_SEND_START.0         ;prepare to call SERIAL_SEND_START to send one char
   0ac7   ad                plo CALL_REG
   0ac8   f8 01             ldi SERIAL_SEND_START.1
   0aca   bd                phi CALL_REG
                            
   0acb   f8 00             ldi FCALL.0
   0acd   ae                plo FCALL_REG
   0ace   de                sep FCALL_REG
                            
   0acf                 HEXVIEWER_NEXT_STR
   0acf   8f                glo STACK_REG       ;set R4 pointer to current address
   0ad0   fc 11             adi 17
   0ad2   a4                plo R4
   0ad3   9f                ghi STACK_REG
   0ad4   7c 00             adci 0
   0ad6   b4                phi R4
                            
   0ad7   e4                sex R4
   0ad8   f8 01             ldi 1
   0ada   f4                add
   0adb   54                str R4
   0adc   60                irx
                            
   0add   f8 00             ldi 0
   0adf   74                adc
   0ae0   54                str R4
   0ae1   60                irx
                            
   0ae2   f8 00             ldi 0
   0ae4   74                adc
   0ae5   54                str R4
   0ae6   60                irx
                            
   0ae7   f8 00             ldi 0
   0ae9   74                adc
   0aea   54                str R4
                            
   0aeb   28                dec R8
   0aec   88                glo R8
   0aed   3a 71             bnz HEXVIEWER_PRINT_STR_LOOP
                            
   0aef   f8 aa             ldi NEW_LINE.0     ;prepare to print a space
   0af1   a6                plo R6
   0af2   f8 0c             ldi NEW_LINE.1
   0af4   b6                phi R6
                        	
   0af5   f8 52             ldi PRINT.0         ;prepare to call PRINT
   0af7   ad                plo CALL_REG
   0af8   f8 01             ldi PRINT.1
   0afa   bd                phi CALL_REG
                            
   0afb   f8 00             ldi FCALL.0
   0afd   ae                plo FCALL_REG
   0afe   de                sep FCALL_REG
                            
   0aff   8f                glo STACK_REG       ;set R4 pointer to current address
   0b00   fc 11             adi 17
   0b02   a4                plo R4
   0b03   9f                ghi STACK_REG
   0b04   7c 00             adci 0
   0b06   b4                phi R4
                            
   0b07   8f                glo STACK_REG       ;set R5 pointer to last address
   0b08   fc 09             adi 9
   0b0a   a5                plo R5
   0b0b   9f                ghi STACK_REG
   0b0c   7c 00             adci 0
   0b0e   b5                phi R5
                        
   0b0f   e4                sex R4          ;check if current address is >= last address
                            
   0b10   45                lda R5
   0b11   f5                sd
   0b12   60                irx
                            
   0b13   45                lda R5
   0b14   75                sdb
   0b15   60                irx
                            
   0b16   45                lda R5
   0b17   75                sdb
   0b18   60                irx
                            
   0b19   05                ldn R5
   0b1a   75                sdb
                            
   0b1b   33 58             bpz HEXVIEWER_END
                            
   0b1d   8f                glo STACK_REG       ;set R4 pointer to line counter
   0b1e   fc 05             adi 5
   0b20   a4                plo R4
   0b21   9f                ghi STACK_REG
   0b22   7c 00             adci 0
   0b24   b4                phi R4
                            
   0b25   e4                sex R4
                            
   0b26   f8 10             ldi 16
   0b28   f4                add
   0b29   54                str R4
   0b2a   60                irx
                            
   0b2b   f8 00             ldi 0
   0b2d   74                adc
   0b2e   54                str R4
   0b2f   60                irx
                            
   0b30   f8 00             ldi 0
   0b32   74                adc
   0b33   54                str R4
   0b34   60                irx
                            
   0b35   f8 00             ldi 0
   0b37   74                adc
   0b38   54                str R4
                            
   0b39   8f                glo STACK_REG       ;set R4 pointer to current address
   0b3a   fc 11             adi 17
   0b3c   a4                plo R4
   0b3d   9f                ghi STACK_REG
   0b3e   7c 00             adci 0
   0b40   b4                phi R4
                            
   0b41   8f                glo STACK_REG       ;set R5 pointer to start address
   0b42   fc 0d             adi 13
   0b44   a5                plo R5
   0b45   9f                ghi STACK_REG
   0b46   7c 00             adci 0
   0b48   b5                phi R5
                            
   0b49   e4                sex R4
                            
   0b4a   72                ldxa
   0b4b   55                str R5
   0b4c   15                inc R5
                            
   0b4d   72                ldxa
   0b4e   55                str R5
   0b4f   15                inc R5
                            
   0b50   72                ldxa
   0b51   55                str R5
   0b52   15                inc R5
                            
   0b53   72                ldxa
   0b54   55                str R5
                            
   0b55   c0 09 95          lbr HEXVIEWER_MAINLOOP
                        
   0b58                 HEXVIEWER_END
   0b58   8f                glo STACK_REG
   0b59   fc 14             adi 20
   0b5b   af                plo STACK_REG
   0b5c   9f                ghi STACK_REG
   0b5d   7c 00             adci 0
   0b5f   bf                phi STACK_REG
                            
   0b60   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-HEXVIEW_CALLER-------------------------------
   0b61                 HEXVIEW_CALLER
   0b61   ef                sex STACK_REG
                            
   0b62   f8 00             ldi 0
   0b64   73                stxd
   0b65   73                stxd
   0b66   73                stxd
   0b67   73                stxd    ;+1 result
                            
   0b68   8f                glo STACK_REG
   0b69   a5                plo R5
   0b6a   9f                ghi STACK_REG
   0b6b   b5                phi R5
   0b6c   15                inc R5
                            
   0b6d   f8 82             ldi EXPRESSION.0
   0b6f   ad                plo CALL_REG
   0b70   f8 07             ldi EXPRESSION.1
   0b72   bd                phi CALL_REG
                            
   0b73   f8 00             ldi FCALL.0
   0b75   ae                plo FCALL_REG
   0b76   de                sep FCALL_REG
                            
   0b77   8f                glo STACK_REG
   0b78   a5                plo R5
   0b79   9f                ghi STACK_REG
   0b7a   b5                phi R5
   0b7b   15                inc R5
                            
   0b7c   45                lda R5
   0b7d   a4                plo R4
   0b7e   45                lda R5
   0b7f   b4                phi R4
                            
   0b80   f8 00             ldi 0
   0b82   a5                plo R5
   0b83   f8 01             ldi 1
   0b85   b5                phi R5
                            
   0b86   f8 1e             ldi HEXVIEWER.0
   0b88   ad                plo CALL_REG
   0b89   f8 09             ldi HEXVIEWER.1
   0b8b   bd                phi CALL_REG
                            
   0b8c   f8 00             ldi FCALL.0
   0b8e   ae                plo FCALL_REG
   0b8f   de                sep FCALL_REG
                            
   0b90   8f                glo STACK_REG
   0b91   fc 04             adi 4
   0b93   af                plo STACK_REG
   0b94   9f                ghi STACK_REG
   0b95   7c 00             adci 0
   0b97   bf                phi STACK_REG
                            
   0b98   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-TEST FUNCTION--------------------------------
   0b99                 TEST_STR1
   0b99   52 65 73 75       db "Result: ",0
   0b9d   6c 74 3a 20   
   0ba1   00            
                        
   0ba2                 FUNC_TEST
   0ba2   ef                sex STACK_REG
                            
   0ba3   f8 00             ldi 0
   0ba5   73                stxd
   0ba6   73                stxd
   0ba7   73                stxd
   0ba8   73                stxd    ;+1 result
                            
   0ba9   8f                glo STACK_REG
   0baa   a5                plo R5
   0bab   9f                ghi STACK_REG
   0bac   b5                phi R5
   0bad   15                inc R5
                            
   0bae   f8 82             ldi EXPRESSION.0
   0bb0   ad                plo CALL_REG
   0bb1   f8 07             ldi EXPRESSION.1
   0bb3   bd                phi CALL_REG
                            
   0bb4   f8 00             ldi FCALL.0
   0bb6   ae                plo FCALL_REG
   0bb7   de                sep FCALL_REG
                            
   0bb8   8f                glo STACK_REG
   0bb9   a4                plo R4
   0bba   9f                ghi STACK_REG
   0bbb   b4                phi R4
   0bbc   14                inc R4
                        
   0bbd   f8 00             ldi 0
   0bbf   a5                plo R5
                            
   0bc0   f8 ae             ldi PRINT_DEC.0     ;prepare to print the Decimal result.
   0bc2   ad                plo CALL_REG
   0bc3   f8 04             ldi PRINT_DEC.1
   0bc5   bd                phi CALL_REG
                            
   0bc6   f8 00             ldi FCALL.0
   0bc8   ae                plo FCALL_REG
   0bc9   de                sep FCALL_REG
                            
   0bca   f8 aa             ldi NEW_LINE.0  ;print newline
   0bcc   a6                plo R6
   0bcd   f8 0c             ldi NEW_LINE.1
   0bcf   b6                phi R6
                        	
   0bd0   f8 52             ldi PRINT.0     ;prepare to call PRINT
   0bd2   ad                plo CALL_REG
   0bd3   f8 01             ldi PRINT.1
   0bd5   bd                phi CALL_REG
                            
   0bd6   f8 00             ldi FCALL.0
   0bd8   ae                plo FCALL_REG
   0bd9   de                sep FCALL_REG
                            
   0bda   8f                glo STACK_REG
   0bdb   fc 04             adi 4
   0bdd   af                plo STACK_REG
   0bde   9f                ghi STACK_REG
   0bdf   7c 00             adci 0
   0be1   bf                phi STACK_REG
                            
   0be2   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-COMMAND-CHECK--------------------------------
                        ;-R4-input string------------------------------
   0be3                 COMMAND_CHECK
   0be3   f8 bd             ldi COMMAND_FUNC_LIST.0
   0be5   a5                plo R5
   0be6   f8 0c             ldi COMMAND_FUNC_LIST.1
   0be8   b5                phi R5
                            
   0be9   f8 ad             ldi COMMAND_LIST.0
   0beb   a9                plo R9
   0bec   f8 0c             ldi COMMAND_LIST.1
   0bee   b9                phi R9
                            
   0bef   84                glo R4
   0bf0   a6                plo R6
   0bf1   94                ghi R4
   0bf2   b6                phi R6
                            
   0bf3                 COMMAND_CHECK_GOTOSPACE
   0bf3   46                lda R6
   0bf4   c2 0b ff          lbz COMMAND_CHECK_INSERTZERO
   0bf7   fb 20             xri 32
   0bf9   c2 0c 00          lbz COMMAND_CHECK_REPLACESPACE
   0bfc   c0 0b f3          lbr COMMAND_CHECK_GOTOSPACE
                            
   0bff                 COMMAND_CHECK_INSERTZERO
   0bff   56                str R6
   0c00                 COMMAND_CHECK_REPLACESPACE
   0c00   26                dec R6
   0c01   56                str R6
   0c02   16                inc R6
                            
   0c03                 COMMAND_CHECK_LOOP
   0c03   84                glo R4
   0c04   a8                plo R8
   0c05   94                ghi R4
   0c06   b8                phi R8
                            
   0c07   09                ldn R9
   0c08   c2 0c 2f          lbz COMMAND_CHECK_END
                        
   0c0b   f8 c0             ldi STR_COMPARATOR.0
   0c0d   ad                plo CALL_REG
   0c0e   f8 01             ldi STR_COMPARATOR.1
   0c10   bd                phi CALL_REG
                            
   0c11   f8 00             ldi FCALL.0
   0c13   ae                plo FCALL_REG
   0c14   de                sep FCALL_REG
                            
   0c15   8a                glo R10
   0c16   ca 0c 22          lbnz COMMAND_CHECK_EXEC
                            
   0c19                 COMMAND_CHECK_STR_END
   0c19   09                ldn R9
   0c1a   19                inc R9
   0c1b   3a 19             bnz COMMAND_CHECK_STR_END
                            
   0c1d   15                inc R5
   0c1e   15                inc R5
   0c1f   c0 0c 03          lbr COMMAND_CHECK_LOOP
                            
   0c22                 COMMAND_CHECK_EXEC
   0c22   86                glo R6
   0c23   a4                plo R4
   0c24   96                ghi R6
   0c25   b4                phi R4
                            
   0c26   45                lda R5
   0c27   ad                plo CALL_REG
   0c28   05                ldn R5
   0c29   bd                phi CALL_REG
                            
   0c2a   f8 00             ldi FCALL.0
   0c2c   ae                plo FCALL_REG
   0c2d   de                sep FCALL_REG
                            
   0c2e   de                sep RETURN
                            
   0c2f                 COMMAND_CHECK_END
   0c2f   f8 c1             ldi UNKNOWN_COMMAND.0  ;set the address of the boot msg in R6
   0c31   a6                plo R6
   0c32   f8 0c             ldi UNKNOWN_COMMAND.1
   0c34   b6                phi R6
                        	
   0c35   f8 52             ldi PRINT.0     ;prepare to call PRINT
   0c37   ad                plo CALL_REG
   0c38   f8 01             ldi PRINT.1
   0c3a   bd                phi CALL_REG
                            
   0c3b   f8 00             ldi FCALL.0
   0c3d   ae                plo FCALL_REG
   0c3e   de                sep FCALL_REG   ;call PRINT
                            
   0c3f   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-MAIN-----------------------------------------
   0c40                 MAIN_PROGRAM
   0c40   f8 83             ldi BOOT_MSG.0  ;set the address of the boot msg in R6
   0c42   a6                plo R6
   0c43   f8 0c             ldi BOOT_MSG.1
   0c45   b6                phi R6
                        	
   0c46   f8 52             ldi PRINT.0     ;prepare to call PRINT
   0c48   ad                plo CALL_REG
   0c49   f8 01             ldi PRINT.1
   0c4b   bd                phi CALL_REG
                            
   0c4c   f8 00             ldi FCALL.0
   0c4e   ae                plo FCALL_REG
   0c4f   de                sep FCALL_REG   ;call PRINT
                        
   0c50                 ASK_INPUT
   0c50   f8 00             ldi INPUT_BUFF.0    ;load the address of the buffer to R7
   0c52   a7                plo R7
   0c53   f8 20             ldi INPUT_BUFF.1
   0c55   b7                phi R7
                            
   0c56   f8 68             ldi READLINE.0      ;prepare to call READLINE
   0c58   ad                plo CALL_REG
   0c59   f8 01             ldi READLINE.1
   0c5b   bd                phi CALL_REG
                            
   0c5c   f8 00             ldi FCALL.0
   0c5e   ae                plo FCALL_REG
   0c5f   de                sep FCALL_REG       ;call READLINE
                            
                            ;Program goes here
   0c60   f8 00             ldi INPUT_BUFF.0
   0c62   a4                plo R4
   0c63   f8 20             ldi INPUT_BUFF.1
   0c65   b4                phi R4
                            
   0c66   f8 e3             ldi COMMAND_CHECK.0      ;prepare to call COMMAND_CHECK
   0c68   ad                plo CALL_REG
   0c69   f8 0b             ldi COMMAND_CHECK.1
   0c6b   bd                phi CALL_REG
                            
   0c6c   f8 00             ldi FCALL.0
   0c6e   ae                plo FCALL_REG
   0c6f   de                sep FCALL_REG
                            ;Program ends here
                            
   0c70   f8 a6             ldi ASK_IN.0        ;load the ASK_IN string's address to R6
   0c72   a6                plo R6
   0c73   f8 0c             ldi ASK_IN.1
   0c75   b6                phi R6
                            
   0c76   f8 52             ldi PRINT.0         ;prepare to call PRINT
   0c78   ad                plo CALL_REG
   0c79   f8 01             ldi PRINT.1
   0c7b   bd                phi CALL_REG
                            
   0c7c   f8 00             ldi FCALL.0
   0c7e   ae                plo FCALL_REG
   0c7f   de                sep FCALL_REG       ;call PRINT
                        	
   0c80   c0 0c 50          lbr ASK_INPUT
                        ;----------------------------------------------
                        
                        ;-CONSTANT DATA--------------------------------
   0c83                 BOOT_MSG
   0c83   5a 4c 45 44       db "ZLED - CDP1802 Terminal.\r\n\r\nREADY\r\n"
   0c87   20 2d 20 43   
   0c8b   44 50 31 38   
   0c8f   30 32 20 54   
   0c93   65 72 6d 69   
   0c97   6e 61 6c 2e   
   0c9b   0d 0a 0d 0a   
   0c9f   52 45 41 44   
   0ca3   59 0d 0a      
   0ca6                 ASK_IN
   0ca6   0d 0a 3e 00       db "\r\n>",0
   0caa                 NEW_LINE
   0caa   0d 0a 00          db "\r\n",0
   0cad                 COMMAND_LIST
   0cad   70 72 69 6e       db "print",0,"mem_view",0,0
   0cb1   74 00 6d 65   
   0cb5   6d 5f 76 69   
   0cb9   65 77 00 00   
   0cbd                 COMMAND_FUNC_LIST
   0cbd   a2 0b             db FUNC_TEST.0,FUNC_TEST.1
   0cbf   61 0b             db HEXVIEW_CALLER.0,HEXVIEW_CALLER.1
   0cc1                 UNKNOWN_COMMAND
   0cc1   55 6e 6b 6e       db "Unknown command.\r\n",0
   0cc5   6f 77 6e 20   
   0cc9   63 6f 6d 6d   
   0ccd   61 6e 64 2e   
   0cd1   0d 0a 00      
   0cd4                 TEST_RESP
   0cd4   45 76 65 72       db "Everything is ok!",0
   0cd8   79 74 68 69   
   0cdc   6e 67 20 69   
   0ce0   73 20 6f 6b   
   0ce4   21 00         
                        
   0ce6                     end
0ca6  ASK_IN        0c50  ASK_INPUT     0164  BACKSPACE_ACTION    0c83  BOOT_MSG  
000d  CALL_REG      0283  CARRY_SHIFTING    0be3  COMMAND_CHECK    0c2f  COMMAND_CHECK_END
0c22  COMMAND_CHECK_EXEC    0bf3  COMMAND_CHECK_GOTOSPACE    0bff  COMMAND_CHECK_INSERTZERO    0c03  COMMAND_CHECK_LOOP
0c00  COMMAND_CHECK_REPLACESPACE    0c19  COMMAND_CHECK_STR_END    0cbd  COMMAND_FUNC_LIST    0cad  COMMAND_LIST
028d  DIVISION_LOOP    3000  DMA_ADDRESS    0013  DMA_INIT      0000  DMA_REG   
017a  END_LINE      0782  EXPRESSION    07af  EXPRESSION_ADD    07e9  EXPRESSION_ADD_LOOP
0863  EXPRESSION_END    079b  EXPRESSION_MAIN    085f  EXPRESSION_NEXT_CYCLE    078b  EXPRESSION_SKIPSPACES
0807  EXPRESSION_SUB    0841  EXPRESSION_SUB_LOOP    05f8  FACTOR        065c  FACTOR_END
0682  FACTOR_FINAL    0677  FACTOR_INVERTING    0604  FACTOR_MAIN    064d  FACTOR_NEGATE
0658  FACTOR_NEXT_CYCLE    0634  FACTOR_PARENTHESIS    063f  FACTOR_PARENTHESIS_SKIPSPACES    0100  FCALL     
000e  FCALL_REG     031f  FINAL_CHECK    0343  FINAL_CHECK2    010a  FRETURN   
0ba2  FUNC_TEST     091e  HEXVIEWER     0b58  HEXVIEWER_END    0995  HEXVIEWER_MAINLOOP
0a11  HEXVIEWER_NEXT_HEX    0acf  HEXVIEWER_NEXT_STR    09bd  HEXVIEWER_PRINT_HEX_LOOP    0a01  HEXVIEWER_PRINT_HEX_SPACES
0ab3  HEXVIEWER_PRINT_STR_DOT    0a71  HEXVIEWER_PRINT_STR_LOOP    0ac2  HEXVIEWER_PRINT_STR_SPACE    0b61  HEXVIEW_CALLER
0875  HEX_BASE_SRT    0412  HEX_CHARS     0888  HEX_HEADER_STR    0919  HEX_LINECNT_SEPARATOR
2000  INPUT_BUFF    01d4  INTEGER_DIV    0224  INTEGER_DIV_INVERT_LOOP1    0234  INTEGER_DIV_NEXT_CHECK
0372  INTEGER_MUL    03d3  INTEGER_MUL_ADD    0409  INTEGER_MUL_END    039f  INTEGER_MUL_LOOP
03dc  INTEGER_MUL_SHIFT    03fd  INTEGER_MUL_SHMULTIPLICAND    03e9  INTEGER_MUL_SHMULTIPLIER    0262  INTEGER_SHIFT_DR
0001  INTP_REG      0002  INTX_REG      0253  INVERT_LOOP2    0337  INVERT_LOOP3
035e  INVERT_LOOP4    0c40  MAIN_PROGRAM    0caa  NEW_LINE      0307  NEXT_BIT  
0003  PC_REG        0152  PRINT         045e  PRINT_CHECK_DIGIT    04ae  PRINT_DEC 
0540  PRINT_DEC_END    0549  PRINT_DEC_FINAL    04ed  PRINT_DEC_INVER_LOOP    04f8  PRINT_DEC_MAIN_LOOP
0461  PRINT_DIGIT_LOOP    0422  PRINT_HEX     048f  PRINT_HEX_END    0473  PRINT_HEX_SHIFT_LOOP1
0449  PRINT_UNTIL_R    000a  R10           000b  R11           000c  R12       
0004  R4            0005  R5            0006  R6            0007  R7        
0008  R8            0009  R9            0168  READLINE      018e  READLINE_BACKSPACE
016b  READLINE_LOOP    0561  READ_DEC      05e6  READ_DEC_END    0572  READ_DEC_MAIN_LOOP
000e  RETURN        013f  SERIAL_NULL_BIT    012d  SERIAL_READ_START    0139  SERIAL_SAMPLE_BIT
0143  SERIAL_SAVE_BIT    011b  SERIAL_SEND_BIT    0113  SERIAL_SEND_START    0131  SERIAL_WAIT_START
02a5  SHIFTING_Q    0276  SHIFT_DR      0314  SHIFT_SUBTRACTOR    ffff  STACK_ADDRESS
000f  STACK_REG     0000  START         01aa  STORE_CHAR    01c3  STR_CHARCHECK
01c0  STR_COMPARATOR    01c9  STR_EQUAL     01d0  STR_INC       02fd  SUBTRACT_FOR_REAL
068b  TERM          06b2  TERM_DIVIDE    0770  TERM_END      069e  TERM_MAIN 
0717  TERM_MULTIPLY    076c  TERM_NEXT_CYCLE    0cd4  TEST_RESP     0b99  TEST_STR1 
0369  THE_END       02c7  TRY_SUBTRACTING    0cc1  UNKNOWN_COMMAND    
