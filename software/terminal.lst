                        
   0000                 DMA_REG EQU 0
   0001                 INTP_REG EQU 1
   0002                 INTX_REG EQU 2
   0003                 PC_REG EQU 3
   0004                 R4 EQU 4
   0005                 R5 EQU 5
   0006                 R6 EQU 6
   0007                 R7 EQU 7
   0008                 R8 EQU 8
   0009                 R9 EQU 9
   000a                 R10 EQU 10
   000b                 R11 EQU 11
   000c                 R12 EQU 12
   000d                 CALL_REG EQU 13
   000e                 FCALL_REG EQU 14
   000e                 RETURN EQU 14
   000f                 STACK_REG EQU 15
                        
   ffff                 STACK_ADDRESS EQU 0FFFFh
   3000                 DMA_ADDRESS EQU 03000h
                        
   2000                 INPUT_BUFF EQU 02000h
                        
   2100                 VARLIST_COUNT EQU 02100h
   2102                 VARLIST_FIRSTNODE EQU 02102h
   2104                 VARLIST_LASTNODE EQU 02104h
                        
   2106                 HEAP_LASTADDRESS EQU 02106h
   2110                 HEAP_START EQU 02110h
   fc00                 HEAP_END EQU 0FC00h
                        
                        
   0000                     org 00h
                        
   0000                 START
   0000   71                dis
   0001   00                idl
                            
   0002   7b                seq     ;set Q output to high
                            
   0003   f8 ff             ldi STACK_ADDRESS.0 ;setup the STACK pointer
   0005   af                plo STACK_REG
   0006   f8 ff             ldi STACK_ADDRESS.1
   0008   bf                phi STACK_REG
                            
   0009   f8 01             ldi FCALL.1         ;setup FCALL
   000b   be                phi FCALL_REG
                            
   000c   f8 13             ldi DMA_INIT.0      ;switch PC to R3 and init DMA
   000e   a3                plo PC_REG
   000f   f8 00             ldi DMA_INIT.1
   0011   b3                phi PC_REG
                            
   0012   d3                sep PC_REG
                            
   0013                 DMA_INIT
   0013   f8 00             ldi DMA_ADDRESS.0   ;setup DMA address
   0015   a0                plo DMA_REG
   0016   f8 30             ldi DMA_ADDRESS.1
   0018   b0                phi DMA_REG
                            
   0019   c0 15 5e          lbr MAIN_PROGRAM
                            
                        ;-FUNCTION CALL HELPER-------------------------
                        ;-WHERE TO JUMP-(CALL_REG)---------------------
   0100                     org 0100h
                            
   0100                 FCALL
   0100   ef                sex STACK_REG   ;set STACK as X register
   0101   93                ghi PC_REG      ;saving the PC value to stack
   0102   73                stxd
   0103   83                glo PC_REG
   0104   73                stxd
                            
   0105   8d                glo CALL_REG    ;put the new address in the PC
   0106   a3                plo PC_REG
   0107   9d                ghi CALL_REG
   0108   b3                phi PC_REG
   0109   d3                sep PC_REG      ;jumping to PC
                            
   010a                 FRETURN
   010a   1f                inc STACK_REG   ;increment the STACK register
   010b   ef                sex STACK_REG   ;set STACK as X register
   010c   72                ldxa            ;restoring PC from STACK
   010d   a3                plo PC_REG
   010e   f0                ldx
   010f   b3                phi PC_REG
   0110   d3                sep PC_REG      ;jumping to PC
   0111   30 0a             br FRETURN
                        ;----------------------------------------------
                        
                        ;-SERIAL SEND BYTE-----------------------------
                        ;-DATA-R4.1------------------------------------
   0113                 SERIAL_SEND_START
   0113   94                ghi R4      ;R4 high is the data, load it into the D reg
   0114   fb ff             xri 0FFh    ;invert it
   0116   b4                phi R4      ;put it back
   0117   f8 85             ldi 085h    ;load 0x85 to the D reg
   0119   fe                shl         ;shift it left so we get 0x0A and set the flag bit
   011a   a4                plo R4      ;put the 0x10 to R4 low, this will be our bit counter
                        
   011b                 SERIAL_SEND_BIT
   011b   c7                lsnf        ;24 - long skip if the flag is not set
   011c   7a                req         ;16 - reset Q if the flag is set
   011d   c8                lskp        ;24
   011e   7b                seq         ;16 - set Q if the flag is not set
   011f   c4                nop         ;24
                            
   0120   24                dec R4      ;16 - decrement R4, this will only affect the R4 lower 8bit
   0121   84                glo R4      ;16
   0122   c6                lsnz        ;24 - if R4 lower is not 0 then long skip
   0123   de                sep RETURN  ;--
   0124   c4                nop         ;--
   0125   94                ghi R4      ;16 - get R4 high
   0126   f6                shr         ;16 - shift it right to get LSB in the flag
   0127   b4                phi R4      ;16 - put it back
   0128   c4                nop         ;24
   0129   c4                nop         ;24
   012a   c4                nop         ;24
   012b   30 1b             br SERIAL_SEND_BIT ;16
                        ;----------------------------------------------
                        
                        ;-SERIAL READ BYTE-----------------------------
                        ;-RETURN R5.1----------------------------------
   012d                 SERIAL_READ_START
   012d   f8 00             ldi 00h     ;set input data register to 0
   012f   a5                plo R5
   0130   b5                phi R5
                            
   0131                 SERIAL_WAIT_START
   0131   3c 31             bn1 SERIAL_WAIT_START ;16 - loop until EF1 goes low
   0133   c4                nop         ;24
   0134   c4                nop         ;24
   0135   c4                nop         ;24
   0136   c4                nop         ;24
   0137   f9 00             ori 00h     ;16 - do nothing for 16 clock cycles
                        
   0139                 SERIAL_SAMPLE_BIT
   0139   34 3f             b1 SERIAL_NULL_BIT  ;16 - checking the EF1
   013b   f9 80             ori 080h            ;16 - if EF1 is high then set MSB to 1 in D register
   013d   30 43             br SERIAL_SAVE_BIT  ;16
                        
   013f                 SERIAL_NULL_BIT
   013f   f9 00             ori 00h         ;16 - of EF1 is low we do nothing
   0141   f9 00             ori 00h         ;16
                        
   0143                 SERIAL_SAVE_BIT
   0143   b5                phi R5          ;16 - put D in R5 high
   0144   15                inc R5          ;16 - increment R5, this will only affect R5 low 8bit
   0145   85                glo R5          ;16 - get R5 low to D register
   0146   fb 09             xri 09h         ;16 - D = D ^ 0x09
   0148   c6                lsnz            ;24 
   0149   de                sep RETURN      ;--
   014a   c4                nop             ;--
   014b   95                ghi R5          ;16 - get R5 high
   014c   f6                shr             ;16 - shift it righ
   014d   c4                nop             ;24
   014e   c4                nop             ;24
   014f   c4                nop             ;24
   0150   30 39             br SERIAL_SAMPLE_BIT ;16
                        ;----------------------------------------------
                        
                        ;-PRINT----------------------------------------
                        ;-FIRST CHAR-R6--------------------------------
   0152                 PRINT
   0152   e6                sex R6          ;set X register to R6
   0153   72                ldxa            ;load data to D and increment R6
   0154   c6                lsnz            ;if it is not zero then long skip
   0155   de                sep RETURN
   0156   c4                nop
                            
   0157   b4                phi R4          ;put D register to R4 to send it
                            
   0158   f8 13             ldi SERIAL_SEND_START.0     ;prepare to call SERIAL_SEND
   015a   ad                plo CALL_REG
   015b   f8 01             ldi SERIAL_SEND_START.1
   015d   bd                phi CALL_REG
                            
   015e   f8 00             ldi FCALL.0
   0160   ae                plo FCALL_REG
   0161   de                sep FCALL_REG   ;call SERIAL_SEND
   0162   30 52             br PRINT
                        ;----------------------------------------------
                        
   0164                 BACKSPACE_ACTION
   0164   08 20 08 00       db 8, 32, 8, 0
                        ;-READ LINE------------------------------------
                        ;-WHERE TO READ-R7-----------------------------
                        ;-R8.1-Character counter-------------------------
   0168                 READLINE
   0168   f8 00             ldi 0
   016a   a8                plo R8
                            
   016b                 READLINE_LOOP
   016b   f8 2d             ldi SERIAL_READ_START.0     ;prepare calling SERIAL_READ
   016d   ad                plo CALL_REG
   016e   f8 01             ldi SERIAL_READ_START.1
   0170   bd                phi CALL_REG
                            
   0171   f8 00             ldi FCALL.0
   0173   ae                plo FCALL_REG
   0174   de                sep FCALL_REG       ;call SERIAL_READ
                            
   0175   95                ghi R5              ;get the result of SERIAL_READ
   0176   fb 0d             xri 13              ;check if it is 13 (ENTER KEY)
   0178   3a 8e             bnz READLINE_BACKSPACE      ;if not jump to READLINE_BACKSPACE
                            
   017a                 END_LINE
   017a   f8 00             ldi 00h             ;put 0 to the endof the string
   017c   57                str R7
                            
   017d   f8 dc             ldi NEW_LINE.0      ;load the address of CRLF string
   017f   a6                plo R6
   0180   f8 15             ldi NEW_LINE.1
   0182   b6                phi R6
                            
   0183   f8 52             ldi PRINT.0         ;prepare to call PRINT
   0185   ad                plo CALL_REG
   0186   f8 01             ldi PRINT.1
   0188   bd                phi CALL_REG
                            
   0189   f8 00             ldi FCALL.0
   018b   ae                plo FCALL_REG
   018c   de                sep FCALL_REG       ;call PRINT
                            
   018d   de                sep RETURN          ;RETURN from READLINE
                            
   018e                 READLINE_BACKSPACE
   018e   95                ghi R5              ;get the result of SERIAL_READ
   018f   fb 7f             xri 127             ;check if it is 127 (DEL)
   0191   3a aa             bnz STORE_CHAR      ;if not jump to STORE_CHAR
                            
   0193   88                glo R8
   0194   32 6b             bz READLINE_LOOP
                            
   0196   f8 64             ldi BACKSPACE_ACTION.0      ;load the address of the backspace action
   0198   a6                plo R6
   0199   f8 01             ldi BACKSPACE_ACTION.1
   019b   b6                phi R6
                            
   019c   f8 52             ldi PRINT.0                 ;prepare to call PRINT
   019e   ad                plo CALL_REG
   019f   f8 01             ldi PRINT.1
   01a1   bd                phi CALL_REG
                            
   01a2   f8 00             ldi FCALL.0
   01a4   ae                plo FCALL_REG
   01a5   de                sep FCALL_REG               ;call PRINT
                            
   01a6   27                dec R7
   01a7   28                dec R8
                            
   01a8   30 6b             br READLINE_LOOP
                            
   01aa                 STORE_CHAR
   01aa   88                glo R8
   01ab   fb ff             xri 0FFh
   01ad   32 6b             bz READLINE_LOOP
                            
   01af   95                ghi R5              ;get the result of the SERIAL_READ again
   01b0   57                str R7              ;store it where R7 pointing
   01b1   17                inc R7              ;increment R7
   01b2   18                inc R8
                            
   01b3   b4                phi R4              ;load the result to R4 to Echo it back
                            
   01b4   f8 13             ldi SERIAL_SEND_START.0     ;prepare to call SERIAL_SEND
   01b6   ad                plo CALL_REG
   01b7   f8 01             ldi SERIAL_SEND_START.1
   01b9   bd                phi CALL_REG
                            
   01ba   f8 00             ldi FCALL.0
   01bc   ae                plo FCALL_REG
   01bd   de                sep FCALL_REG       ;call SERIAL_SEND
   01be   30 6b             br READLINE_LOOP
                        ;----------------------------------------------
                        
                        ;-STR COMPARATOR-------------------------------
                        ;-R8 stringA-R9 stringB------------------------
                        ;-RETURN R10.0---------------------------------
   01c0                 STR_COMPARATOR
   01c0   f8 00             ldi 0           ;R10 low is the result, set it to 0
   01c2   aa                plo R10
                        	
   01c3                 STR_CHARCHECK
   01c3   08                ldn R8          ;load value from RAM[R8] to D register
   01c4   e9                sex R9          ;set X pointer to R9
   01c5   f3                xor             ;D = D ^ RAM[R9]
                            
   01c6   32 c9             bz STR_EQUAL    ;if D == 0 jump to STR_EQUAL
   01c8   de                sep RETURN      ;RETURN
                            
   01c9                 STR_EQUAL 
   01c9   08            	ldn R8          ;load value from RAM[R8] to D register again
   01ca   3a d0         	bnz STR_INC     ;if D != 0 jump to STR_INC
   01cc   f8 01         	ldi 1           ;set R10 to 1 and return
   01ce   aa            	plo R10
   01cf   de            	sep RETURN
                        	
   01d0                 STR_INC
   01d0   18            	inc R8          ;increment both address by 1
   01d1   19            	inc R9
   01d2   30 c3         	br STR_CHARCHECK
                        ;----------------------------------------------
                        
                        ;-INTEGER DIV----------------------------------
                        ;-R4 pointing to divident----------------------
                        ;-R5 pointing to divider-----------------------
                        ;-R6 pointing to quotient----------------------
                        ;-R7 pointing to remainder---------------------
                        ;-R8.0 bitcnt, R8.1 flags----------------------
                        ;-R9 general counter---------------------------
   01d4                 INTEGER_DIV
   01d4   ef                sex STACK_REG   ;set STACK_REG as data pointer to store variables in STACK
   01d5   f8 00             ldi 0           ;set bitcnt and flags to 0
   01d7   a8                plo R8
   01d8   b8                phi R8
                            
   01d9   15                inc R5          ;increment R5 to the MSB because we want to store the divider it in little-endian format
   01da   15                inc R5
   01db   15                inc R5
                            
   01dc   05                ldn R5          ;copying starts here
   01dd   73                stxd
   01de   25                dec R5
                            
   01df   05                ldn R5
   01e0   73                stxd
   01e1   25                dec R5
                            
   01e2   05                ldn R5
   01e3   73                stxd
   01e4   25                dec R5
                            
   01e5   05                ldn R5
   01e6   73                stxd            ;+11 divider, +11 shows the start of the data from the STACK pointer
                            
   01e7   f8 00             ldi 0           ;storing 0 for the subtractor
   01e9   73                stxd
   01ea   73                stxd
   01eb   73                stxd
   01ec   73                stxd            ;+7 subtractor
                            
   01ed   96                ghi R6          ;saving the quotient pointer
   01ee   73                stxd
   01ef   86                glo R6
   01f0   73                stxd            ;+5 quotient pointer
                        
   01f1   97                ghi R7          ;saving the remainder
   01f2   73                stxd
   01f3   87                glo R7
   01f4   73                stxd            ;+3 remainder pointer
                            
   01f5   94                ghi R4          ;saving the dividend pointer
   01f6   73                stxd
   01f7   84                glo R4
   01f8   73                stxd            ;+1 dividend pointer
                            
   01f9   e4                sex R4
                            
   01fa   72                ldxa            ;copy dividend to remainder
   01fb   57                str R7
   01fc   17                inc R7
                            
   01fd   72                ldxa
   01fe   57                str R7
   01ff   17                inc R7
                            
   0200   72                ldxa
   0201   57                str R7
   0202   17                inc R7
                            
   0203   f0                ldx
   0204   57                str R7
                            
   0205   f8 00             ldi 0
   0207   56                str R6
   0208   16                inc R6
   0209   56                str R6
   020a   16                inc R6
   020b   56                str R6
   020c   16                inc R6
   020d   56                str R6
                        
   020e   8f                glo STACK_REG   ;get the STACK_REG pointer to position it to the divider MSB
   020f   fc 0e             adi 14          ;add 14 to it
   0211   a5                plo R5          ;store the new pointer to R5
   0212   9f                ghi STACK_REG   ;get the STACK_REG high part to add the carry to it
   0213   7c 00             adci 0          ;adding the carry
   0215   b5                phi R5          ;store the new high part to R5
                            
   0216   e5                sex R5          ;set X data pointer to R5
   0217   f0                ldx             ;load data from RAM[R5]
   0218   25                dec R5          ;decrement R5 to set it back to the divider's LSB
   0219   25                dec R5
   021a   25                dec R5
   021b   fa 80             ani 080h        ;check if sign bit is set
                            
   021d   c2 02 34          lbz INTEGER_DIV_NEXT_CHECK
                            
   0220   f8 82             ldi 082h        ;load 0x82 to the D register
   0222   fe                shl             ;shit it left so it will set the carry flag and the D registre will be 4
   0223   a9                plo R9          ;store it to R9 low
                            
   0224                 INTEGER_DIV_INVERT_LOOP1
   0224   f0                ldx             ;load data from RAM[R5]
   0225   fb ff             xri 0FFh        ;xor D with 0xFF to invert it
   0227   7c 00             adci 0          ;add the carry for to the result (inver+1)
   0229   55                str R5          ;store the result to RAM[R5]
   022a   60                irx             ;increment R5
                        
   022b   29                dec R9          ;decrement R8
   022c   89                glo R9          ;get R8 low, and if it's not 0 then do the loop
   022d   ca 02 24          lbnz INTEGER_DIV_INVERT_LOOP1
                            
   0230   98                ghi R8          ;set the flag
   0231   f9 01             ori 1
   0233   b8                phi R8
                            
   0234                 INTEGER_DIV_NEXT_CHECK
   0234   8f                glo STACK_REG
   0235   fc 03             adi 3
   0237   a9                plo R9
   0238   9f                ghi STACK_REG
   0239   7c 00             adci 0
   023b   b9                phi R9
                            
   023c   09                ldn R9              ;restore and get remainder MSB
   023d   fc 03             adi 3
   023f   a4                plo R4
   0240   19                inc R9
   0241   09                ldn R9
   0242   7c 00             adci 0
   0244   b4                phi R4
                            
   0245   e4                sex R4
   0246   f0                ldx
   0247   24                dec R4
   0248   24                dec R4
   0249   24                dec R4
   024a   fa 80             ani 080h            ;check if sign bit is set
                            
   024c   c2 02 62          lbz INTEGER_SHIFT_DR
                            
   024f   f8 82             ldi 082h
   0251   fe                shl
   0252   a9                plo R9
                            
   0253                 INVERT_LOOP2
   0253   f0                ldx         ;invert byte 3
   0254   fb ff             xri 0FFh
   0256   7c 00             adci 0
   0258   54                str R4
   0259   60                irx
                        
   025a   29                dec R9
   025b   89                glo R9
   025c   3a 53             bnz INVERT_LOOP2
                            
   025e   98                ghi R8      ;set the flag
   025f   f9 02             ori 2
   0261   b8                phi R8
                            
   0262                 INTEGER_SHIFT_DR
   0262   8f                glo STACK_REG ;get divider MSB
   0263   fc 0b             adi 11
   0265   a5                plo R5
   0266   9f                ghi STACK_REG
   0267   7c 00             adci 0
   0269   b5                phi R5
                            
   026a   f8 00             ldi 0
   026c   e5                sex R5
   026d   f1                or
   026e   60                irx
   026f   f1                or
   0270   60                irx
   0271   f1                or
   0272   60                irx
   0273   f1                or
   0274   32 8d             bz DIVISION_LOOP
                            
   0276                 SHIFT_DR
   0276   8f                glo STACK_REG ;get divider MSB
   0277   fc 0e             adi 14
   0279   a5                plo R5
   027a   9f                ghi STACK_REG
   027b   7c 00             adci 0
   027d   b5                phi R5
                            
   027e   e5                sex R5
                            
   027f   f8 04             ldi 4
   0281   fe                shl
   0282   a9                plo R9
                            
   0283                 CARRY_SHIFTING
   0283   f0                ldx
   0284   76                shrc
   0285   73                stxd
                            
   0286   29                dec R9
   0287   89                glo R9
   0288   3a 83             bnz CARRY_SHIFTING
                            
   028a   18                inc R8
                            
   028b   30 62             br INTEGER_SHIFT_DR
                            
   028d                 DIVISION_LOOP
   028d   88                glo R8              ;get R8 low
   028e   fd 20             sdi 32              ;if larger than 32 then finish the loop
   0290   cb 03 1f          lbnf FINAL_CHECK
                        
   0293   8f                glo STACK_REG       ;restore quotient pointer to R6
   0294   fc 05             adi 5
   0296   a9                plo R9
   0297   9f                ghi STACK_REG
   0298   7c 00             adci 0
   029a   b9                phi R9
                            
   029b   09                ldn R9
   029c   a6                plo R6
   029d   19                inc R9
   029e   09                ldn R9
   029f   b6                phi R6
                            
   02a0   e6                sex R6
                            
   02a1   f8 02             ldi 2
   02a3   fe                shl
   02a4   a9                plo R9
                            
   02a5                 SHIFTING_Q
   02a5   f0                ldx                 ;shifting quotient to left
   02a6   7e                shlc
   02a7   56                str R6
   02a8   60                irx
                        
   02a9   29                dec R9
   02aa   89                glo R9
   02ab   3a a5             bnz SHIFTING_Q
                            
   02ad   8f                glo STACK_REG    ;restore remainder pointer to R4
   02ae   fc 03             adi 3
   02b0   a9                plo R9
   02b1   9f                ghi STACK_REG
   02b2   7c 00             adci 0
   02b4   b9                phi R9
                            
   02b5   09                ldn R9
   02b6   a4                plo R4
   02b7   19                inc R9
   02b8   09                ldn R9
   02b9   b4                phi R4
                            
   02ba   8f                glo STACK_REG    ;restore subtractor pointer to R5
   02bb   fc 07             adi 7
   02bd   a5                plo R5
   02be   9f                ghi STACK_REG
   02bf   7c 00             adci 0
   02c1   b5                phi R5
                            
   02c2   e4                sex R4
   02c3   f8 82             ldi 082h
   02c5   fe                shl
   02c6   a9                plo R9
                            
   02c7                 TRY_SUBTRACTING         ;try subtracting
   02c7   05                ldn R5
   02c8   75                sdb
   02c9   60                irx
   02ca   15                inc R5
                            
   02cb   29                dec R9
   02cc   89                glo R9
   02cd   3a c7             bnz TRY_SUBTRACTING
                            
   02cf   cb 03 07          lbnf NEXT_BIT        ;if subtracting unsuccesful, jump to NEXT_BIT
                            
   02d2   8f                glo STACK_REG
   02d3   fc 05             adi 5
   02d5   a9                plo R9
   02d6   9f                ghi STACK_REG
   02d7   7c 00             adci 0
   02d9   b9                phi R9
                            
   02da   09                ldn R9
   02db   a6                plo R6
   02dc   19                inc R9
   02dd   09                ldn R9
   02de   b6                phi R6
                            
   02df   06                ldn R6
   02e0   f9 01             ori 1
   02e2   56                str R6
                            
   02e3   8f                glo STACK_REG    ;restore remainder pointer
   02e4   fc 03             adi 3
   02e6   a9                plo R9
   02e7   9f                ghi STACK_REG
   02e8   7c 00             adci 0
   02ea   b9                phi R9
                            
   02eb   09                ldn R9
   02ec   a4                plo R4
   02ed   19                inc R9
   02ee   09                ldn R9
   02ef   b4                phi R4
                            
   02f0   8f                glo STACK_REG    ;restore subtractor's pointer to R5
   02f1   fc 07             adi 7
   02f3   a5                plo R5
   02f4   9f                ghi STACK_REG
   02f5   7c 00             adci 0
   02f7   b5                phi R5
                            
   02f8   e4                sex R4
                            
   02f9   f8 82             ldi 082h
   02fb   fe                shl
   02fc   a9                plo R9
                            
   02fd                 SUBTRACT_FOR_REAL
   02fd   05                ldn R5          ;subtract the subtractor from the remainder and store it
   02fe   75                sdb
   02ff   54                str R4
   0300   60                irx
   0301   15                inc R5
                            
   0302   29                dec R9
   0303   89                glo R9
   0304   ca 02 fd          lbnz SUBTRACT_FOR_REAL
                            
   0307                 NEXT_BIT
   0307   8f                glo STACK_REG    ;restore subtractor pointer to R5 and set it to MSB
   0308   fc 0a             adi 10
   030a   a5                plo R5
   030b   9f                ghi STACK_REG
   030c   7c 00             adci 0
   030e   b5                phi R5
                            
   030f   e5                sex R5
   0310   f8 02             ldi 2
   0312   fe                shl
   0313   a9                plo R9
                            
   0314                 SHIFT_SUBTRACTOR
   0314   f0                ldx
   0315   76                shrc
   0316   73                stxd
                            
   0317   29                dec R9
   0318   89                glo R9
   0319   3a 14             bnz SHIFT_SUBTRACTOR
                            
   031b   18                inc R8
   031c   c0 02 8d          lbr DIVISION_LOOP
                            
   031f                 FINAL_CHECK
   031f   98                ghi R8
   0320   fa 02             ani 2
   0322   c2 03 43          lbz FINAL_CHECK2
                            
   0325   8f                glo STACK_REG    ;restore remainder pointer to R4
   0326   fc 03             adi 3
   0328   a9                plo R9
   0329   9f                ghi STACK_REG
   032a   7c 00             adci 0
   032c   b9                phi R9
                            
   032d   09                ldn R9
   032e   a4                plo R4
   032f   19                inc R9
   0330   09                ldn R9
   0331   b4                phi R4
                            
   0332   e4                sex R4
                            
   0333   f8 82             ldi 082h
   0335   fe                shl
   0336   a9                plo R9
                            
   0337                 INVERT_LOOP3
   0337   f0                ldx
   0338   fb ff             xri 0FFh
   033a   7c 00             adci 0
   033c   54                str R4
   033d   60                irx
                            
   033e   29                dec R9
   033f   89                glo R9
   0340   ca 03 37          lbnz INVERT_LOOP3
                            
   0343                 FINAL_CHECK2
   0343   98                ghi R8
   0344   c2 03 69          lbz THE_END
   0347   fb 03             xri 3
   0349   c2 03 69          lbz THE_END
                            
   034c   8f                glo STACK_REG    ;restore quotient pointer to R6
   034d   fc 05             adi 5
   034f   a9                plo R9
   0350   9f                ghi STACK_REG
   0351   7c 00             adci 0
   0353   b9                phi R9
                            
   0354   09                ldn R9
   0355   a6                plo R6
   0356   19                inc R9
   0357   09                ldn R9
   0358   b6                phi R6
                            
   0359   e6                sex R6
                            
   035a   f8 82             ldi 082h
   035c   fe                shl
   035d   a9                plo R9
                            
   035e                 INVERT_LOOP4
   035e   f0                ldx
   035f   fb ff             xri 0FFh
   0361   7c 00             adci 0
   0363   56                str R6
   0364   60                irx
                            
   0365   29                dec R9
   0366   89                glo R9
   0367   3a 5e             bnz INVERT_LOOP4
                        
   0369                 THE_END
   0369   8f                glo STACK_REG       ;setting back the STACK_REG for return
   036a   fc 0e             adi 14
   036c   af                plo STACK_REG
   036d   9f                ghi STACK_REG
   036e   7c 00             adci 0
   0370   bf                phi STACK_REG
                            
   0371   de                sep RETURN          ;RETURN
                        ;----------------------------------------------
                        
                        ;-INTEGER MUL----------------------------------
                        ;-R4-multiplicand pointer----------------------
                        ;-R5-multiplier pointer------------------------
                        ;-R6-result pointer----------------------------
                        ;-R7-general register--------------------------
   0372                 INTEGER_MUL
   0372   ef                sex STACK_REG
                            
   0373   14                inc R4      ;increment R4 and R5 pointer to MSB
   0374   14                inc R4      ;to copy the values to the local variables
   0375   14                inc R4
                            
   0376   15                inc R5
   0377   15                inc R5
   0378   15                inc R5
                            
   0379   04                ldn R4      ;copying starts here
   037a   73                stxd
   037b   24                dec R4
                            
   037c   04                ldn R4
   037d   73                stxd
   037e   24                dec R4
                            
   037f   04                ldn R4
   0380   73                stxd
   0381   24                dec R4
                            
   0382   04                ldn R4
   0383   73                stxd        ;+7 multiplicand
                            
   0384   05                ldn R5
   0385   73                stxd
   0386   25                dec R5
                            
   0387   05                ldn R5
   0388   73                stxd
   0389   25                dec R5
                            
   038a   05                ldn R5
   038b   73                stxd
   038c   25                dec R5
                            
   038d   05                ldn R5
   038e   73                stxd        ;+3 multiplier
                            
   038f   96                ghi R6
   0390   73                stxd
   0391   86                glo R6
   0392   73                stxd        ;+1 result pointer
                        
   0393   f8 00             ldi 0       ;zeroing the result
                            
   0395   56                str R6
   0396   16                inc R6
                            
   0397   56                str R6
   0398   16                inc R6
                            
   0399   56                str R6
   039a   16                inc R6
                            
   039b   56                str R6
                            
   039c   26                dec R6
   039d   26                dec R6
   039e   26                dec R6
                        
   039f                 INTEGER_MUL_LOOP
   039f   8f                glo STACK_REG   ;restore multiplier pointer
   03a0   fc 03             adi 3
   03a2   a5                plo R5
   03a3   9f                ghi STACK_REG
   03a4   7c 00             adci 0
   03a6   b5                phi R5
                            
   03a7   e5                sex R5          ;check if multiplier is 0
   03a8   f8 00             ldi 0
   03aa   f1                or
   03ab   60                irx
   03ac   f1                or
   03ad   60                irx
   03ae   f1                or
   03af   60                irx
   03b0   f1                or
                            
   03b1   25                dec R5
   03b2   25                dec R5
   03b3   25                dec R5
                            
   03b4   c2 04 09          lbz INTEGER_MUL_END      ;if 0 then jump to the end
                            
   03b7   05                ldn R5                  ;load the multiplier's LSB
   03b8   fa 01             ani 1                   ;filter for the LSb
   03ba   32 dc             bz INTEGER_MUL_SHIFT    ;if zero, skip the addition
                            
   03bc   8f                glo STACK_REG           ;restore multiplicand pointer
   03bd   fc 07             adi 7
   03bf   a4                plo R4
   03c0   9f                ghi STACK_REG
   03c1   7c 00             adci 0
   03c3   b4                phi R4
                            
   03c4   8f                glo STACK_REG           ;restore result pointer
   03c5   a7                plo R7
   03c6   9f                ghi STACK_REG
   03c7   b7                phi R7
   03c8   17                inc R7
                            
   03c9   07                ldn R7
   03ca   a5                plo R5
   03cb   17                inc R7
   03cc   07                ldn R7
   03cd   b5                phi R5
                            
   03ce   e5                sex R5
                            
   03cf   f8 02             ldi 2                   ;prepare addition
   03d1   fe                shl
   03d2   a7                plo R7
                            
   03d3                 INTEGER_MUL_ADD
   03d3   04                ldn R4
   03d4   74                adc
   03d5   55                str R5
   03d6   60                irx
   03d7   14                inc R4
                            
   03d8   27                dec R7
   03d9   87                glo R7
   03da   3a d3             bnz INTEGER_MUL_ADD
                        
   03dc                 INTEGER_MUL_SHIFT
                        
   03dc   8f                glo STACK_REG           ;set multiplier's pointer to MSB
   03dd   fc 06             adi 6                   ;to shift it right
   03df   a5                plo R5
   03e0   9f                ghi STACK_REG
   03e1   7c 00             adci 0
   03e3   b5                phi R5
                            
   03e4   e5                sex R5
                            
   03e5   f8 02             ldi 2
   03e7   fe                shl
   03e8   a7                plo R7
                            
   03e9                 INTEGER_MUL_SHMULTIPLIER
   03e9   f0                ldx                     ;shifting right the multiplier
   03ea   76                shrc
   03eb   73                stxd
                            
   03ec   27                dec R7
   03ed   87                glo R7
   03ee   3a e9             bnz INTEGER_MUL_SHMULTIPLIER
                            
   03f0   8f                glo STACK_REG           ;restore multiplicand pointer
   03f1   fc 07             adi 7                   ;to shift it left
   03f3   a4                plo R4
   03f4   9f                ghi STACK_REG
   03f5   7c 00             adci 0
   03f7   b4                phi R4
                            
   03f8   e4                sex R4
                            
   03f9   f8 02             ldi 2
   03fb   fe                shl
   03fc   a7                plo R7
                            
   03fd                 INTEGER_MUL_SHMULTIPLICAND
   03fd   f0                ldx                     ;shifting the multiplicand left
   03fe   7e                shlc
   03ff   54                str R4
   0400   60                irx
                        
   0401   27                dec R7
   0402   87                glo R7
   0403   ca 03 fd          lbnz INTEGER_MUL_SHMULTIPLICAND
                            
   0406   c0 03 9f          lbr INTEGER_MUL_LOOP
                            
   0409                 INTEGER_MUL_END
   0409   8f                glo STACK_REG
   040a   fc 0a             adi 10
   040c   af                plo STACK_REG
   040d   9f                ghi STACK_REG
   040e   7c 00             adci 0
   0410   bf                phi STACK_REG
                            
   0411   de                sep RETURN          ;RETURN    
                        ;----------------------------------------------
                        
                        ;-PRINT HEX------------------------------------
                        ;-R4-int pointer-------------------------------
                        ;-R5.0-number of digits------------------------
                        ;-Local registers------------------------------
                        ;-R5.1-flag, R6--------------------------------
   0412                 HEX_CHARS
   0412   30 31 32 33       db "0123456789ABCDEF"
   0416   34 35 36 37   
   041a   38 39 41 42   
   041e   43 44 45 46   
                        ;----------------------------------------------
   0422                 PRINT_HEX
   0422   ef                sex STACK_REG
                            
   0423   95                ghi R5  ;saving the state of the local registers
   0424   73                stxd
                            
   0425   96                ghi R6
   0426   73                stxd
   0427   86                glo R6
   0428   73                stxd
                            
   0429   14                inc R4  ;making a copy of the Integer
   042a   14                inc R4
   042b   14                inc R4
                            
   042c   04                ldn R4
   042d   73                stxd
   042e   24                dec R4
   042f   04                ldn R4
   0430   73                stxd
   0431   24                dec R4
   0432   04                ldn R4
   0433   73                stxd
   0434   24                dec R4
   0435   04                ldn R4
   0436   73                stxd    ;+2 the integer
                            
   0437   f8 00             ldi 0   ;+1 
   0439   73                stxd
                            
   043a   8f                glo STACK_REG   ;set R4 to point to the Integer
   043b   a4                plo R4
   043c   9f                ghi STACK_REG
   043d   b4                phi R4
   043e   14                inc R4
   043f   14                inc R4
                            
   0440   f8 00             ldi 0           ;set R5 flags to 0
   0442   b5                phi R5
   0443   85                glo R5              
   0444   3a 49             bnz PRINT_UNTIL_R
   0446   f8 01             ldi 1           ;if R5 low, the number of digits, is zero, then set R5 flag
   0448   b5                phi R5
                        
   0449                 PRINT_UNTIL_R
   0449   95                ghi R5                  ;check the flag if set or not
   044a   32 5e             bz PRINT_CHECK_DIGIT    
   044c   e4                sex R4              ;checking the integer if it's zero
   044d   f8 00             ldi 0
   044f   f1                or
   0450   60                irx
   0451   f1                or
   0452   60                irx
   0453   f1                or
   0454   60                irx
   0455   f1                or
                            
   0456   24                dec R4
   0457   24                dec R4
   0458   24                dec R4
                            
   0459   ef                sex STACK_REG    
   045a   3a 61             bnz PRINT_DIGIT_LOOP
   045c   30 8f             br PRINT_HEX_END
                            
   045e                 PRINT_CHECK_DIGIT
   045e   85                glo R5
   045f   32 8f             bz PRINT_HEX_END
                        
   0461                 PRINT_DIGIT_LOOP
   0461   04                ldn R4
   0462   fa 0f             ani 0Fh
   0464   5f                str STACK_REG
   0465   f8 12             ldi HEX_CHARS.0
   0467   f4                add
   0468   a6                plo R6
   0469   f8 04             ldi HEX_CHARS.1
   046b   7c 00             adci 0
   046d   b6                phi R6
                            
   046e   06                ldn R6
   046f   73                stxd
                            
   0470   f8 04             ldi 4
   0472   a6                plo R6
                            
   0473                 PRINT_HEX_SHIFT_LOOP1
   0473   14                inc R4
   0474   14                inc R4
   0475   14                inc R4
                            
   0476   04                ldn R4
   0477   f6                shr
   0478   54                str R4
   0479   24                dec R4
                            
   047a   04                ldn R4
   047b   76                shrc
   047c   54                str R4
   047d   24                dec R4
                            
   047e   04                ldn R4
   047f   76                shrc
   0480   54                str R4
   0481   24                dec R4
                            
   0482   04                ldn R4
   0483   76                shrc
   0484   54                str R4
                            
   0485   26                dec R6
   0486   86                glo R6
   0487   3a 73             bnz PRINT_HEX_SHIFT_LOOP1
                            
   0489   95                ghi R5      ;check if R5 flag is set, if set then skip decrementing.
   048a   c6                lsnz
   048b   25                dec R5
   048c   c4                nop
   048d   30 49             br PRINT_UNTIL_R
                        
   048f                 PRINT_HEX_END
   048f   8f                glo STACK_REG
   0490   a6                plo R6
   0491   9f                ghi STACK_REG
   0492   b6                phi R6
   0493   16                inc R6
                            
   0494   f8 52             ldi PRINT.0     ;prepare to call PRINT
   0496   ad                plo CALL_REG
   0497   f8 01             ldi PRINT.1
   0499   bd                phi CALL_REG
                            
   049a   f8 00             ldi FCALL.0
   049c   ae                plo FCALL_REG
   049d   de                sep FCALL_REG
                            
   049e   86                glo R6
   049f   fc 04             adi 4
   04a1   af                plo STACK_REG
   04a2   96                ghi R6
   04a3   7c 00             adci 0
   04a5   bf                phi STACK_REG
                            
   04a6   ef                sex STACK_REG   ;restore local registers
   04a7   72                ldxa
   04a8   a6                plo R6
   04a9   72                ldxa
   04aa   b6                phi R6
   04ab   f0                ldx
   04ac   b5                phi R5
                            
   04ad   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-PRINT DEC------------------------------------
                        ;-R4-int pointer-------------------------------
                        ;-Local registers------------------------------
                        ;-R5-R6-R7-R10-R12-----------------------------
                        ;-R10-flags------------------------------------
   04ae                 PRINT_DEC
   04ae   ef                sex STACK_REG
                            
   04af   95                ghi R5          ;saving local registers
   04b0   73                stxd
   04b1   85                glo R5
   04b2   73                stxd
                            
   04b3   96                ghi R6
   04b4   73                stxd
   04b5   86                glo R6
   04b6   73                stxd
                            
   04b7   97                ghi R7
   04b8   73                stxd
   04b9   87                glo R7
   04ba   73                stxd
                        
   04bb   9a                ghi R10
   04bc   73                stxd
   04bd   8a                glo R10
   04be   73                stxd
                            
   04bf   9c                ghi R12
   04c0   73                stxd
   04c1   8c                glo R12
   04c2   73                stxd
                            
   04c3   f8 00             ldi 0
   04c5   aa                plo R10
   04c6   ba                phi R10
                            
   04c7   14                inc R4
   04c8   14                inc R4
   04c9   14                inc R4
                            
   04ca   04                ldn R4
   04cb   73                stxd
   04cc   24                dec R4
   04cd   04                ldn R4
   04ce   73                stxd
   04cf   24                dec R4
   04d0   04                ldn R4
   04d1   73                stxd
   04d2   24                dec R4
   04d3   04                ldn R4
   04d4   73                stxd        ;+10 the integer
                            
   04d5   f8 00             ldi 0
   04d7   73                stxd
   04d8   73                stxd
   04d9   73                stxd
   04da   f8 0a             ldi 0Ah
   04dc   73                stxd        ;+6 divider
                            
   04dd   f8 00             ldi 0
   04df   73                stxd
   04e0   73                stxd
   04e1   73                stxd
   04e2   73                stxd        ;+2 remainder
                            
   04e3   73                stxd        ;+1 output string buffer end
                            
   04e4   8f                glo STACK_REG
   04e5   ac                plo R12
   04e6   9f                ghi STACK_REG
   04e7   bc                phi R12
                            
   04e8   8c                glo R12
   04e9   fc 0d             adi 13
   04eb   a4                plo R4
   04ec   9c                ghi R12
   04ed   7c 00             adci 0
   04ef   b4                phi R4
                            
   04f0   e4                sex R4
   04f1   f0                ldx
   04f2   fa 80             ani 080h
   04f4   c2 05 0d          lbz PRINT_DEC_MAIN_LOOP
                            
   04f7   8a                glo R10
   04f8   f9 01             ori 1
   04fa   aa                plo R10
                            
   04fb   24                dec R4
   04fc   24                dec R4
   04fd   24                dec R4
                            
   04fe   f8 82             ldi 082h
   0500   fe                shl
   0501   a6                plo R6
                            
   0502                 PRINT_DEC_INVER_LOOP
   0502   f0                ldx
   0503   fb ff             xri 0FFh
   0505   7c 00             adci 0
   0507   54                str R4
   0508   14                inc R4
                            
   0509   26                dec R6
   050a   86                glo R6
   050b   3a 02             bnz PRINT_DEC_INVER_LOOP
                            
   050d                 PRINT_DEC_MAIN_LOOP    
   050d   8c                glo R12
   050e   fc 0a             adi 10
   0510   a4                plo R4
   0511   a6                plo R6
   0512   9c                ghi R12
   0513   7c 00             adci 0
   0515   b4                phi R4
   0516   b6                phi R6
                            
   0517   8c                glo R12
   0518   fc 06             adi 6
   051a   a5                plo R5
   051b   9c                ghi R12
   051c   7c 00             adci 0
   051e   b5                phi R5
                            
   051f   8c                glo R12
   0520   fc 02             adi 2
   0522   a7                plo R7
   0523   9c                ghi R12
   0524   7c 00             adci 0
   0526   b7                phi R7
                            
   0527   f8 d4             ldi INTEGER_DIV.0
   0529   ad                plo CALL_REG
   052a   f8 01             ldi INTEGER_DIV.1
   052c   bd                phi CALL_REG
                            
   052d   f8 00             ldi FCALL.0
   052f   ae                plo FCALL_REG
   0530   de                sep FCALL_REG
                            
   0531   ef                sex STACK_REG
                            
   0532   8c                glo R12
   0533   fc 02             adi 2
   0535   a7                plo R7
   0536   9c                ghi R12
   0537   7c 00             adci 0
   0539   b7                phi R7
                            
   053a   07                ldn R7
   053b   fc 30             adi 48
   053d   73                stxd
                            
   053e   8c                glo R12
   053f   fc 0a             adi 10
   0541   a4                plo R4
   0542   9c                ghi R12
   0543   7c 00             adci 0
   0545   b4                phi R4
                            
   0546   e4                sex R4
                            
   0547   f8 00             ldi 0
   0549   f1                or
   054a   60                irx
   054b   f1                or
   054c   60                irx
   054d   f1                or
   054e   60                irx
   054f   f1                or
                            
   0550   32 55             bz PRINT_DEC_END
   0552   c0 05 0d          lbr PRINT_DEC_MAIN_LOOP
                        
   0555                 PRINT_DEC_END
   0555   8a                glo R10
   0556   fa 01             ani 1
   0558   32 5e             bz PRINT_DEC_FINAL
                            
   055a   ef                sex STACK_REG
   055b   f8 2d             ldi 45
   055d   73                stxd
                        
   055e                 PRINT_DEC_FINAL
   055e   8f                glo STACK_REG
   055f   a6                plo R6
   0560   9f                ghi STACK_REG
   0561   b6                phi R6
   0562   16                inc R6
                            
   0563   f8 52             ldi PRINT.0
   0565   ad                plo CALL_REG
   0566   f8 01             ldi PRINT.1
   0568   bd                phi CALL_REG
                            
   0569   f8 00             ldi FCALL.0
   056b   ae                plo FCALL_REG
   056c   de                sep FCALL_REG
                            
   056d   8c                glo R12
   056e   fc 0e             adi 14
   0570   af                plo STACK_REG
   0571   9c                ghi R12
   0572   7c 00             adci 0
   0574   bf                phi STACK_REG
                            
   0575   ef                sex STACK_REG
                            
   0576   72                ldxa
   0577   ac                plo R12
   0578   72                ldxa
   0579   bc                phi R12
                            
   057a   72                ldxa
   057b   aa                plo R10
   057c   72                ldxa
   057d   ba                phi R10
                            
   057e   72                ldxa
   057f   a7                plo R7
   0580   72                ldxa
   0581   b7                phi R7
                            
   0582   72                ldxa
   0583   a6                plo R6
   0584   72                ldxa
   0585   b6                phi R6
                            
   0586   72                ldxa
   0587   a5                plo R5
   0588   f0                ldx
   0589   b5                phi R5
                            
   058a   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-READ DEC-------------------------------------
                        ;-R4-string pointer----------------------------
                        ;-R5-result pointer----------------------------
   058b                 READ_DEC
   058b   ef                sex STACK_REG
                            
   058c   94                ghi R4
   058d   73                stxd
   058e   84                glo R4
   058f   73                stxd        ;+7 string pointer
                            
   0590   95                ghi R5
   0591   73                stxd
   0592   85                glo R5
   0593   73                stxd        ;+5 result pointer
                            
   0594   f8 00             ldi 0
   0596   73                stxd
   0597   73                stxd
   0598   73                stxd
   0599   f8 0a             ldi 0Ah
   059b   73                stxd        ;+1 multiplier
                            
   059c   f8 00             ldi 0       ;set result to 0
   059e   55                str R5
   059f   15                inc R5
   05a0   55                str R5
   05a1   15                inc R5
   05a2   55                str R5
   05a3   15                inc R5
   05a4   55                str R5
                            
   05a5                 READ_DEC_MAIN_LOOP
   05a5   8f                glo STACK_REG
   05a6   fc 07             adi 7
   05a8   a6                plo R6
   05a9   9f                ghi STACK_REG
   05aa   7c 00             adci 0
   05ac   b6                phi R6
                            
   05ad   06                ldn R6
   05ae   a4                plo R4
   05af   16                inc R6
   05b0   06                ldn R6
   05b1   b4                phi R4
                            
   05b2   04                ldn R4
   05b3   ff 30             smi 48
   05b5   cb 06 1c          lbnf READ_DEC_END
   05b8   ff 0a             smi 10
   05ba   c3 06 1c          lbdf READ_DEC_END
                            
   05bd   8f                glo STACK_REG
   05be   fc 05             adi 5
   05c0   a6                plo R6
   05c1   9f                ghi STACK_REG
   05c2   7c 00             adci 0
   05c4   b6                phi R6
                            
   05c5   06                ldn R6
   05c6   a4                plo R4
   05c7   16                inc R6
   05c8   06                ldn R6
   05c9   b4                phi R4
                            
   05ca   b6                phi R6
   05cb   84                glo R4
   05cc   a6                plo R6
                            
   05cd   8f                glo STACK_REG
   05ce   a5                plo R5
   05cf   9f                ghi STACK_REG
   05d0   b5                phi R5
   05d1   15                inc R5
                            
   05d2   f8 72             ldi INTEGER_MUL.0     ;prepare to call INTEGER_MUL
   05d4   ad                plo CALL_REG
   05d5   f8 03             ldi INTEGER_MUL.1       
   05d7   bd                phi CALL_REG
                            
   05d8   f8 00             ldi FCALL.0
   05da   ae                plo FCALL_REG
   05db   de                sep FCALL_REG
                            
   05dc   8f                glo STACK_REG
   05dd   fc 07             adi 7
   05df   a6                plo R6
   05e0   9f                ghi STACK_REG
   05e1   7c 00             adci 0
   05e3   b6                phi R6
                            
   05e4   06                ldn R6
   05e5   a4                plo R4
   05e6   16                inc R6
   05e7   06                ldn R6
   05e8   b4                phi R4
                            
   05e9   8f                glo STACK_REG
   05ea   fc 05             adi 5
   05ec   a6                plo R6
   05ed   9f                ghi STACK_REG
   05ee   7c 00             adci 0
   05f0   b6                phi R6
                            
   05f1   06                ldn R6
   05f2   a5                plo R5
   05f3   16                inc R6
   05f4   06                ldn R6
   05f5   b5                phi R5
                            
   05f6   e5                sex R5
                            
   05f7   04                ldn R4
   05f8   ff 30             smi 48
                            
   05fa   f4                add
   05fb   55                str R5
   05fc   15                inc R5
                            
   05fd   f8 00             ldi 0
   05ff   74                adc
   0600   55                str R5
   0601   15                inc R5
                            
   0602   f8 00             ldi 0
   0604   74                adc
   0605   55                str R5
   0606   15                inc R5
                            
   0607   f8 00             ldi 0
   0609   74                adc
   060a   55                str R5
                        
   060b   14                inc R4
                            
   060c   8f                glo STACK_REG
   060d   fc 07             adi 7
   060f   a6                plo R6
   0610   9f                ghi STACK_REG
   0611   7c 00             adci 0
   0613   b6                phi R6
                            
   0614   84                glo R4
   0615   56                str R6
   0616   16                inc R6
   0617   94                ghi R4
   0618   56                str R6
                            
   0619   c0 05 a5          lbr READ_DEC_MAIN_LOOP
                           
   061c                 READ_DEC_END
   061c   8f                glo STACK_REG
   061d   fc 05             adi 5
   061f   af                plo STACK_REG
   0620   9f                ghi STACK_REG
   0621   7c 00             adci 0
   0623   bf                phi STACK_REG
                            
   0624   ef                sex STACK_REG
                            
   0625   72                ldxa            ;restore R4 and R5
   0626   a5                plo R5
   0627   72                ldxa
   0628   b5                phi R5
   0629   72                ldxa
   062a   a4                plo R4
   062b   f0                ldx
   062c   b4                phi R4
                            
   062d   de                sep RETURN      ;RETURN    
                        ;----------------------------------------------
                        
                        ;-READ HEX-------------------------------------
                        ;-R4-string pointer----------------------------
                        ;-R5-result pointer----------------------------
   062e                 READ_HEX
   062e   ef                sex STACK_REG
                            
   062f   96                ghi R6
   0630   73                stxd
   0631   86                glo R6
   0632   73                stxd
                            
   0633   97                ghi R7
   0634   73                stxd
   0635   87                glo R7
   0636   73                stxd
                            
   0637   94                ghi R4
   0638   73                stxd
   0639   84                glo R4
   063a   73                stxd        ;+3 string pointer
                            
   063b   95                ghi R5
   063c   73                stxd
   063d   85                glo R5
   063e   73                stxd        ;+1 result pointer
                            
   063f   f8 00             ldi 0       ;set result to 0
   0641   55                str R5
   0642   15                inc R5
   0643   55                str R5
   0644   15                inc R5
   0645   55                str R5
   0646   15                inc R5
   0647   55                str R5
                            
   0648   25                dec R5
   0649   25                dec R5
   064a   25                dec R5
                            
   064b                 READ_HEX_MAINLOOP
   064b   f8 00             ldi 0
   064d   a7                plo R7
                            
   064e   04                ldn R4
   064f   ff 30             smi 48
   0651   3b 9e             bm READ_HEX_END
   0653   17                inc R7
   0654   ff 0a             smi 10
   0656   3b 6a             bm READ_HEX_CONTINUE
   0658   ff 07             smi 7
   065a   3b 9e             bm READ_HEX_END
   065c   17                inc R7
   065d   ff 06             smi 6
   065f   3b 6a             bm READ_HEX_CONTINUE
   0661   ff 1a             smi 26
   0663   3b 9e             bm READ_HEX_END
   0665   17                inc R7
   0666   ff 06             smi 6
   0668   33 9e             bpz READ_HEX_END
                            
   066a                 READ_HEX_CONTINUE
   066a   f8 04             ldi 4
   066c   a6                plo R6
                        
   066d                 READ_HEX_SHIFTLOOP      ;result = result << 4
   066d   05                ldn R5
   066e   fe                shl
   066f   55                str R5
   0670   15                inc R5
                            
   0671   05                ldn R5
   0672   7e                shlc
   0673   55                str R5
   0674   15                inc R5
                            
   0675   05                ldn R5
   0676   7e                shlc
   0677   55                str R5
   0678   15                inc R5
                            
   0679   05                ldn R5
   067a   7e                shlc
   067b   55                str R5
                            
   067c   25                dec R5
   067d   25                dec R5
   067e   25                dec R5
                            
   067f   26                dec R6
   0680   86                glo R6
   0681   3a 6d             bnz READ_HEX_SHIFTLOOP
                            
   0683   e5                sex R5
                            
   0684   27                dec R7
   0685   87                glo R7
   0686   3a 8d             bnz READ_HEX_HEXDIGIT
   0688   04                ldn R4
   0689   ff 30             smi 48
   068b   30 99             br READ_HEX_NEXTCHAR
                        
   068d                 READ_HEX_HEXDIGIT   
   068d   27                dec R7
   068e   87                glo R7
   068f   3a 96             bnz READ_HEX_HEXDIGITLOWER
   0691   04                ldn R4
   0692   ff 37             smi 55
   0694   30 99             br READ_HEX_NEXTCHAR
                            
   0696                 READ_HEX_HEXDIGITLOWER
   0696   04                ldn R4
   0697   ff 57             smi 87
                            
   0699                 READ_HEX_NEXTCHAR
   0699   f4                add
   069a   55                str R5
   069b   14                inc R4
   069c   30 4b             br READ_HEX_MAINLOOP
                        
   069e                 READ_HEX_END
   069e   8f                glo STACK_REG
   069f   fc 05             adi 5
   06a1   af                plo STACK_REG
   06a2   9f                ghi STACK_REG
   06a3   7c 00             adci 0
   06a5   bf                phi STACK_REG
                            
   06a6   ef                sex STACK_REG
                            
   06a7   72                ldxa
   06a8   a7                plo R7
   06a9   72                ldxa
   06aa   b7                phi R7
                            
   06ab   72                ldxa
   06ac   a6                plo R6
   06ad   f0                ldx
   06ae   b6                phi R6
                            
   06af   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-READ-VAR-------------------------------------
   06b0                 READ_VAR
   06b0   ef                sex STACK_REG
                            
   06b1   95                ghi R5
   06b2   73                stxd
   06b3   85                glo R5
   06b4   73                stxd                            ;+5 result pointer
                            
   06b5   f8 00             ldi 0
   06b7   73                stxd
   06b8   73                stxd                            ;+3 variableName address
                            
   06b9   73                stxd
   06ba   73                stxd                            ;+1 string address
                            
   06bb   f8 b0             ldi GET_STRING.0                ;call GET_STRING
   06bd   ad                plo CALL_REG
   06be   f8 0d             ldi GET_STRING.1
   06c0   bd                phi CALL_REG
                            
   06c1   f8 00             ldi FCALL.0
   06c3   ae                plo FCALL_REG
   06c4   de                sep FCALL_REG
                            
   06c5   8a                glo R10                         ;if R10 == 0 then end, else continue
   06c6   3a cc             bnz READ_VAR_CONTINUE
   06c8   aa                plo R10
   06c9   c2 07 40          lbz READ_VAR_END
                            
   06cc                 READ_VAR_CONTINUE
   06cc   8f                glo STACK_REG                   ;set R5 pointer to string address
   06cd   a5                plo R5
   06ce   9f                ghi STACK_REG
   06cf   b5                phi R5
   06d0   15                inc R5
                            
   06d1   8a                glo R10                         ;store string address and set R9
   06d2   a9                plo R9
   06d3   55                str R5
   06d4   15                inc R5
                            
   06d5   9a                ghi R10
   06d6   b9                phi R9
   06d7   55                str R5
                            
   06d8   f8 02             ldi VARLIST_FIRSTNODE.0         ;load the first node address
   06da   a5                plo R5
   06db   f8 21             ldi VARLIST_FIRSTNODE.1
   06dd   b5                phi R5
                            
   06de                 READ_VAR_SEARCHLOOP
   06de   45                lda R5                              ;test if the address in R5 is zero or not.
   06df   3a e5             bnz READ_VAR_SEARCHLOOP_CONTINUE
   06e1   05                ldn R5
   06e2   c2 07 40          lbz READ_VAR_END
                            
   06e5                 READ_VAR_SEARCHLOOP_CONTINUE
   06e5   25                dec R5
                            
   06e6   45                lda R5                              ;set R6 pointer to node address
   06e7   a6                plo R6
   06e8   45                lda R5
   06e9   b6                phi R6
                            
   06ea   16                inc R6                              ;skip next node
   06eb   16                inc R6
                            
   06ec   46                lda R6                              ;load variableNode->name address to R8
   06ed   a8                plo R8                              ;for comparing the strings
   06ee   46                lda R6
   06ef   b8                phi R8
                            
   06f0   f8 c0             ldi STR_COMPARATOR.0                ;call STR_COMPARATOR
   06f2   ad                plo CALL_REG
   06f3   f8 01             ldi STR_COMPARATOR.1
   06f5   bd                phi CALL_REG
                            
   06f6   f8 00             ldi FCALL.0
   06f8   ae                plo FCALL_REG
   06f9   de                sep FCALL_REG
                            
   06fa   8a                glo R10                             ;if R10 == 1 then READ_VAR_FOUND
   06fb   ca 07 12          lbnz READ_VAR_FOUND
                        
   06fe                 READ_VAR_NEXTNODE
   06fe   26                dec R6                              ;set back R6 to the base of the node
   06ff   26                dec R6
   0700   26                dec R6
   0701   26                dec R6
                            
   0702   46                lda R6                              ;load next node address to R5
   0703   a5                plo R5
   0704   46                lda R6
   0705   b5                phi R5
                            
   0706   8f                glo STACK_REG                       ;set R6 pointer to string address
   0707   a6                plo R6
   0708   9f                ghi STACK_REG
   0709   b6                phi R6
   070a   16                inc R6
                            
   070b   46                lda R6                              ;load string address to R9
   070c   a9                plo R9
   070d   46                lda R6
   070e   b9                phi R9
                            
   070f   c0 06 de          lbr READ_VAR_SEARCHLOOP
                        
   0712                 READ_VAR_FOUND
   0712   8f                glo STACK_REG
   0713   fc 05             adi 5                               ;set R7 pointer to result pointer
   0715   a7                plo R7
   0716   9f                ghi STACK_REG
   0717   7c 00             adci 0
   0719   b7                phi R7
                            
   071a   47                lda R7
   071b   a5                plo R5
   071c   47                lda R7
   071d   b5                phi R5
                            
   071e   46                lda R6
   071f   55                str R5
   0720   15                inc R5
                            
   0721   46                lda R6
   0722   55                str R5
   0723   15                inc R5
                            
   0724   46                lda R6
   0725   55                str R5
   0726   15                inc R5
                            
   0727   46                lda R6
   0728   55                str R5
                            
   0729   30 40             br READ_VAR_END
                            
   072b                 READ_VAR_NOTFOUND
   072b   8f                glo STACK_REG
   072c   fc 05             adi 5                               ;set R7 pointer to result pointer
   072e   a7                plo R7
   072f   9f                ghi STACK_REG
   0730   7c 00             adci 0
   0732   b7                phi R7
                            
   0733   47                lda R7
   0734   a5                plo R5
   0735   47                lda R7
   0736   b5                phi R5
                            
   0737   f8 00             ldi 0
   0739   55                str R5
   073a   15                inc R5
                            
   073b   55                str R5
   073c   15                inc R5
                            
   073d   55                str R5
   073e   15                inc R5
                            
   073f   55                str R5
                        
   0740                 READ_VAR_END
   0740   8f                glo STACK_REG
   0741   fc 05             adi 5
   0743   af                plo STACK_REG
   0744   9f                ghi STACK_REG
   0745   7c 00             adci 0
   0747   bf                phi STACK_REG
                            
   0748   ef                sex STACK_REG
                            
   0749   72                ldxa
   074a   a5                plo R5
   074b   f0                ldx
   074c   b5                phi R5
                            
   074d   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-FACTOR---------------------------------------
                        ;-R4-string pointer----------------------------
                        ;-R5-result pointer----------------------------
                        ;-R10-result code------------------------------
   074e                 FACTOR
   074e   ef                sex STACK_REG
                            
   074f   94                ghi R4
   0750   73                stxd
   0751   84                glo R4
   0752   73                stxd    ;+4 string pt
                            
   0753   95                ghi R5
   0754   73                stxd
   0755   85                glo R5
   0756   73                stxd    ;+2 result pt
                            
   0757   f8 00             ldi 0
   0759   73                stxd    ;+1 flag, indicates if the factor needs to be negated
                            
                            
   075a                 FACTOR_MAIN
   075a   04                ldn R4
   075b   fb 20             xri 32
   075d   c2 07 c9          lbz FACTOR_NEXT_CYCLE       ;if ' '
   0760   04                ldn R4
   0761   fb 2b             xri 43
   0763   c2 07 c9          lbz FACTOR_NEXT_CYCLE       ;if '+'
   0766   04                ldn R4
   0767   fb 2d             xri 45
   0769   c2 07 be          lbz FACTOR_NEGATE           ;if '-'
   076c   04                ldn R4
   076d   fb 28             xri 40
   076f   c2 07 a4          lbz FACTOR_PARENTHESIS      ;if '('
   0772   04                ldn R4
   0773   ff 30             smi 48
   0775   cb 07 cd          lbnf FACTOR_END             ;if *R4 < '0'
   0778   ff 0a             smi 10
   077a   c3 07 cd          lbdf FACTOR_END             ;if *R4 > '9'
                        
   077d   04                ldn R4
   077e   fb 30             xri 48
   0780   3a 89             bnz FACTOR_READ_DEC         ;if *R4 != '0'
                            
   0782   14                inc R4                      ;increment R4 to get the next char
   0783   04                ldn R4
   0784   fb 78             xri 120
   0786   32 96             bz FACTOR_READ_HEX          ;if *R4 == 'x'
                            
   0788   24                dec R4                      ;decrement R4 to step back
                        
   0789                 FACTOR_READ_DEC    
   0789   f8 8b             ldi READ_DEC.0
   078b   ad                plo CALL_REG
   078c   f8 05             ldi READ_DEC.1
   078e   bd                phi CALL_REG
                            
   078f   f8 00             ldi FCALL.0
   0791   ae                plo FCALL_REG
   0792   de                sep FCALL_REG
                            
   0793   c0 07 cd          lbr FACTOR_END
                            
   0796                 FACTOR_READ_HEX
   0796   14                inc R4
                            
   0797   f8 2e             ldi READ_HEX.0
   0799   ad                plo CALL_REG
   079a   f8 06             ldi READ_HEX.1
   079c   bd                phi CALL_REG
                            
   079d   f8 00             ldi FCALL.0
   079f   ae                plo FCALL_REG
   07a0   de                sep FCALL_REG
                            
   07a1   c0 07 cd          lbr FACTOR_END
                            
   07a4                 FACTOR_PARENTHESIS
   07a4   14                inc R4
                            
   07a5   f8 f3             ldi EXPRESSION.0
   07a7   ad                plo CALL_REG
   07a8   f8 08             ldi EXPRESSION.1
   07aa   bd                phi CALL_REG
                            
   07ab   f8 00             ldi FCALL.0
   07ad   ae                plo FCALL_REG
   07ae   de                sep FCALL_REG
                        
   07af                 FACTOR_PARENTHESIS_SKIPSPACES
   07af   44                lda R4
   07b0   fb 20             xri 32
   07b2   32 af             bz FACTOR_PARENTHESIS_SKIPSPACES
   07b4   24                dec R4
                            
   07b5   44                lda R4
   07b6   fb 29             xri 41
   07b8   c2 07 cd          lbz FACTOR_END
                            
   07bb   c0 07 5a          lbr FACTOR_MAIN
                            
   07be                 FACTOR_NEGATE
   07be   8f                glo STACK_REG
   07bf   a6                plo R6
   07c0   9f                ghi STACK_REG
   07c1   b6                phi R6
   07c2   16                inc R6
                            
   07c3   06                ldn R6
   07c4   fb ff             xri 0FFh
   07c6   fa 01             ani 1
   07c8   56                str R6
                            
   07c9                 FACTOR_NEXT_CYCLE
   07c9   14                inc R4
   07ca   c0 07 5a          lbr FACTOR_MAIN
                            
   07cd                 FACTOR_END
   07cd   8f                glo STACK_REG
   07ce   a6                plo R6
   07cf   9f                ghi STACK_REG
   07d0   b6                phi R6
   07d1   16                inc R6
                            
   07d2   06                ldn R6
   07d3   c2 07 f3          lbz FACTOR_FINAL
                            
   07d6   8f                glo STACK_REG
   07d7   fc 02             adi 2
   07d9   a6                plo R6
   07da   9f                ghi STACK_REG
   07db   7c 00             adci 0
   07dd   b6                phi R6
                            
   07de   06                ldn R6
   07df   a5                plo R5
   07e0   16                inc R6
   07e1   06                ldn R6
   07e2   b5                phi R5
                            
   07e3   e5                sex R5
                            
   07e4   f8 82             ldi 082h
   07e6   fe                shl
   07e7   a6                plo R6
                            
   07e8                 FACTOR_INVERTING
   07e8   f0                ldx
   07e9   fb ff             xri 0FFh
   07eb   7c 00             adci 0
   07ed   55                str R5
   07ee   60                irx
                            
   07ef   26                dec R6
   07f0   86                glo R6
   07f1   3a e8             bnz FACTOR_INVERTING
                            
   07f3                 FACTOR_FINAL
   07f3   8f                glo STACK_REG
   07f4   fc 05             adi 5
   07f6   af                plo STACK_REG
   07f7   9f                ghi STACK_REG
   07f8   7c 00             adci 0
   07fa   bf                phi STACK_REG
                            
   07fb   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-TERM-----------------------------------------
                        ;-R4-string pointer----------------------------
                        ;-R5-result------------------------------------
   07fc                 TERM
   07fc   ef                sex STACK_REG
                            
   07fd   94                ghi R4
   07fe   73                stxd
   07ff   84                glo R4
   0800   73                stxd
                            
   0801   95                ghi R5
   0802   73                stxd
   0803   85                glo R5
   0804   73                stxd
                            
   0805   f8 4e             ldi FACTOR.0
   0807   ad                plo CALL_REG
   0808   f8 07             ldi FACTOR.1
   080a   bd                phi CALL_REG
                            
   080b   f8 00             ldi FCALL.0
   080d   ae                plo FCALL_REG
   080e   de                sep FCALL_REG
                            
   080f                 TERM_MAIN
   080f   04                ldn R4
   0810   fb 20             xri 32
   0812   c2 08 dd          lbz TERM_NEXT_CYCLE
   0815   04                ldn R4
   0816   fb 2a             xri 42
   0818   c2 08 88          lbz TERM_MULTIPLY       ;if '*'
   081b   04                ldn R4
   081c   fb 2f             xri 47
   081e   32 23             bz TERM_DIVIDE          ;if '/'
                            
   0820   c0 08 e1          lbr TERM_END
                            
   0823                 TERM_DIVIDE
   0823   14                inc R4
                            
   0824   f8 00             ldi 0
   0826   73                stxd
   0827   73                stxd
   0828   73                stxd
   0829   73                stxd    ;+5 remainder
                            
   082a   73                stxd
   082b   73                stxd
   082c   73                stxd
   082d   73                stxd    ;+1 divider
                            
   082e   8f                glo STACK_REG
   082f   a5                plo R5
   0830   9f                ghi STACK_REG
   0831   b5                phi R5
   0832   15                inc R5
                            
   0833   f8 4e             ldi FACTOR.0
   0835   ad                plo CALL_REG
   0836   f8 07             ldi FACTOR.1
   0838   bd                phi CALL_REG
                            
   0839   f8 00             ldi FCALL.0
   083b   ae                plo FCALL_REG
   083c   de                sep FCALL_REG
                            
   083d   8f                glo STACK_REG ;save R4 pointer
   083e   fc 0b             adi 11
   0840   a6                plo R6
   0841   9f                ghi STACK_REG
   0842   7c 00             adci 0
   0844   b6                phi R6
                            
   0845   84                glo R4
   0846   56                str R6
   0847   16                inc R6
   0848   94                ghi R4
   0849   56                str R6
                            
   084a   8f                glo STACK_REG
   084b   fc 09             adi 9
   084d   a8                plo R8
   084e   9f                ghi STACK_REG
   084f   7c 00             adci 0
   0851   b8                phi R8
                            
   0852   08                ldn R8
   0853   a4                plo R4
   0854   a6                plo R6
   0855   18                inc R8
   0856   08                ldn R8
   0857   b4                phi R4
   0858   b6                phi R6
                            
   0859   8f                glo STACK_REG
   085a   a5                plo R5
   085b   9f                ghi STACK_REG
   085c   b5                phi R5
   085d   15                inc R5
                            
   085e   8f                glo STACK_REG
   085f   fc 05             adi 5
   0861   a7                plo R7
   0862   9f                ghi STACK_REG
   0863   7c 00             adci 0
   0865   b7                phi R7
                            
   0866   f8 d4             ldi INTEGER_DIV.0
   0868   ad                plo CALL_REG
   0869   f8 01             ldi INTEGER_DIV.1
   086b   bd                phi CALL_REG
                            
   086c   f8 00             ldi FCALL.0
   086e   ae                plo FCALL_REG
   086f   de                sep FCALL_REG
                            
   0870   8f                glo STACK_REG
   0871   fc 0b             adi 11
   0873   a6                plo R6
   0874   9f                ghi STACK_REG
   0875   7c 00             adci 0
   0877   b6                phi R6
                            
   0878   06                ldn R6
   0879   a4                plo R4
   087a   16                inc R6
   087b   06                ldn R6
   087c   b4                phi R4
                            
   087d   8f                glo STACK_REG
   087e   fc 08             adi 8
   0880   af                plo STACK_REG
   0881   9f                ghi STACK_REG
   0882   7c 00             adci 0
   0884   bf                phi STACK_REG
                        
   0885   c0 08 0f          lbr TERM_MAIN
                            
   0888                 TERM_MULTIPLY
   0888   14                inc R4
                            
   0889   f8 00             ldi 0
   088b   73                stxd
   088c   73                stxd
   088d   73                stxd
   088e   73                stxd
                            
   088f   8f                glo STACK_REG
   0890   a5                plo R5
   0891   9f                ghi STACK_REG
   0892   b5                phi R5
   0893   15                inc R5
                            
   0894   f8 4e             ldi FACTOR.0
   0896   ad                plo CALL_REG
   0897   f8 07             ldi FACTOR.1
   0899   bd                phi CALL_REG
                            
   089a   f8 00             ldi FCALL.0
   089c   ae                plo FCALL_REG
   089d   de                sep FCALL_REG
                            
   089e   8f                glo STACK_REG
   089f   fc 07             adi 7
   08a1   a6                plo R6
   08a2   9f                ghi STACK_REG
   08a3   7c 00             adci 0
   08a5   b6                phi R6
                            
   08a6   84                glo R4
   08a7   56                str R6
   08a8   16                inc R6
   08a9   94                ghi R4
   08aa   56                str R6
                            
   08ab   8f                glo STACK_REG
   08ac   fc 05             adi 5
   08ae   a8                plo R8
   08af   9f                ghi STACK_REG
   08b0   7c 00             adci 0
   08b2   b8                phi R8
                            
   08b3   08                ldn R8
   08b4   a4                plo R4
   08b5   a6                plo R6
   08b6   18                inc R8
   08b7   08                ldn R8
   08b8   b4                phi R4
   08b9   b6                phi R6
                            
   08ba   8f                glo STACK_REG
   08bb   a5                plo R5
   08bc   9f                ghi STACK_REG
   08bd   b5                phi R5
   08be   15                inc R5
                            
   08bf   f8 72             ldi INTEGER_MUL.0
   08c1   ad                plo CALL_REG
   08c2   f8 03             ldi INTEGER_MUL.1
   08c4   bd                phi CALL_REG
                            
   08c5   f8 00             ldi FCALL.0
   08c7   ae                plo FCALL_REG
   08c8   de                sep FCALL_REG
                            
   08c9   8f                glo STACK_REG
   08ca   fc 07             adi 7
   08cc   a6                plo R6
   08cd   9f                ghi STACK_REG
   08ce   7c 00             adci 0
   08d0   b6                phi R6
                            
   08d1   06                ldn R6
   08d2   a4                plo R4
   08d3   16                inc R6
   08d4   06                ldn R6
   08d5   b4                phi R4
                            
   08d6   1f                inc STACK_REG
   08d7   1f                inc STACK_REG
   08d8   1f                inc STACK_REG
   08d9   1f                inc STACK_REG
                        
   08da   c0 08 0f          lbr TERM_MAIN
                            
   08dd                 TERM_NEXT_CYCLE
   08dd   14                inc R4
   08de   c0 08 0f          lbr TERM_MAIN
                            
   08e1                 TERM_END
   08e1   8f                glo STACK_REG
   08e2   a6                plo R6
   08e3   9f                ghi STACK_REG
   08e4   b6                phi R6
   08e5   16                inc R6
                            
   08e6   46                lda R6
   08e7   a5                plo R5
   08e8   46                lda R6
   08e9   b5                phi R5
                            
   08ea   8f                glo STACK_REG
   08eb   fc 04             adi 4
   08ed   af                plo STACK_REG
   08ee   9f                ghi STACK_REG
   08ef   7c 00             adci 0
   08f1   bf                phi STACK_REG
                            
   08f2   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-EXPRESSION-----------------------------------
                        ;-R4-string pointer----------------------------
                        ;-R5-result pointer----------------------------
                        ;-Local registers------------------------------
                        ;-R6-R7----------------------------------------
   08f3                 EXPRESSION
   08f3   ef                sex STACK_REG
                            
   08f4   97                ghi R7      ;saving local registers
   08f5   73                stxd
   08f6   87                glo R7
   08f7   73                stxd
                            
   08f8   96                ghi R6
   08f9   73                stxd
   08fa   86                glo R6
   08fb   73                stxd
                            
   08fc   94                ghi R4      ;R4 pointer to input string 
   08fd   73                stxd
   08fe   84                glo R4
   08ff   73                stxd        ;+3 input string pointer
                            
   0900   95                ghi R5      ;R5 pointer to result
   0901   73                stxd
   0902   85                glo R5
   0903   73                stxd        ;+1 result pointer
                            
   0904                 EXPRESSION_SKIPSPACES           ;skip spaces
   0904   44                lda R4
   0905   fb 20             xri 32
   0907   32 04             bz EXPRESSION_SKIPSPACES
   0909   24                dec R4
                            
   090a   f8 fc             ldi TERM.0                  ;read TERM
   090c   ad                plo CALL_REG
   090d   f8 07             ldi TERM.1
   090f   bd                phi CALL_REG
                            
   0910   f8 00             ldi FCALL.0
   0912   ae                plo FCALL_REG
   0913   de                sep FCALL_REG
                            
   0914                 EXPRESSION_MAIN
   0914   04                ldn R4
   0915   fb 20             xri 32                      ;if ' '
   0917   c2 09 d9          lbz EXPRESSION_NEXT_CYCLE
   091a   04                ldn R4
   091b   fb 2b             xri 43                      ;if '+'
   091d   32 28             bz EXPRESSION_ADD
   091f   04                ldn R4
   0920   fb 2d             xri 45                      ;if '-'
   0922   c2 09 81          lbz EXPRESSION_SUB
                            
                            
   0925   c0 09 dd          lbr EXPRESSION_END
                            
   0928                 EXPRESSION_ADD
   0928   14                inc R4
                            
   0929   f8 00             ldi 0               ;new result
   092b   73                stxd
   092c   73                stxd
   092d   73                stxd
   092e   73                stxd
                            
   092f   8f                glo STACK_REG       ;set R5 pointer to new result
   0930   a5                plo R5
   0931   9f                ghi STACK_REG
   0932   b5                phi R5
   0933   15                inc R5
                            
   0934   f8 fc             ldi TERM.0          ;read TERM
   0936   ad                plo CALL_REG
   0937   f8 07             ldi TERM.1
   0939   bd                phi CALL_REG
                            
   093a   f8 00             ldi FCALL.0
   093c   ae                plo FCALL_REG
   093d   de                sep FCALL_REG
                            
   093e   8f                glo STACK_REG       ; set R6 register to point to the input string pointer
   093f   fc 07             adi 7
   0941   a6                plo R6
   0942   9f                ghi STACK_REG
   0943   7c 00             adci 0
   0945   b6                phi R6
                            
   0946   84                glo R4              ;input string pointer = R4
   0947   56                str R6
   0948   16                inc R6
   0949   94                ghi R4
   094a   56                str R6
                            
   094b   8f                glo STACK_REG       ;set R5 register to point to result
   094c   a5                plo R5
   094d   9f                ghi STACK_REG
   094e   b5                phi R5
   094f   15                inc R5
                            
   0950   8f                glo STACK_REG       ;set R6 register to point to the result pointer
   0951   fc 05             adi 5
   0953   a6                plo R6
   0954   9f                ghi STACK_REG
   0955   7c 00             adci 0
   0957   b6                phi R6
                            
   0958   06                ldn R6              ;R4 = result pointer
   0959   a4                plo R4
   095a   16                inc R6
   095b   06                ldn R6
   095c   b4                phi R4
                            
   095d   e4                sex R4
                            
   095e   f8 02             ldi 2
   0960   fe                shl
   0961   a7                plo R7
                            
   0962                 EXPRESSION_ADD_LOOP     ;*result pointer += result;
   0962   05                ldn R5
   0963   74                adc
   0964   54                str R4
   0965   15                inc R5
   0966   60                irx
                            
   0967   27                dec R7
   0968   87                glo R7
   0969   ca 09 62          lbnz EXPRESSION_ADD_LOOP
                            
   096c   ef                sex STACK_REG
                            
   096d   8f                glo STACK_REG       
   096e   fc 07             adi 7
   0970   a6                plo R6
   0971   9f                ghi STACK_REG
   0972   7c 00             adci 0
   0974   b6                phi R6
                            
   0975   06                ldn R6              ;R4 = input string pointer
   0976   a4                plo R4
   0977   16                inc R6
   0978   06                ldn R6
   0979   b4                phi R4
                            
   097a   1f                inc STACK_REG
   097b   1f                inc STACK_REG
   097c   1f                inc STACK_REG
   097d   1f                inc STACK_REG
                        
   097e   c0 09 14          lbr EXPRESSION_MAIN
                        
   0981                 EXPRESSION_SUB
   0981   14                inc R4
                            
   0982   f8 00             ldi 0
   0984   73                stxd
   0985   73                stxd
   0986   73                stxd
   0987   73                stxd
                            
   0988   8f                glo STACK_REG
   0989   a5                plo R5
   098a   9f                ghi STACK_REG
   098b   b5                phi R5
   098c   15                inc R5
                            
   098d   f8 fc             ldi TERM.0
   098f   ad                plo CALL_REG
   0990   f8 07             ldi TERM.1
   0992   bd                phi CALL_REG
                            
   0993   f8 00             ldi FCALL.0
   0995   ae                plo FCALL_REG
   0996   de                sep FCALL_REG
                            
   0997   8f                glo STACK_REG
   0998   fc 07             adi 7
   099a   a6                plo R6
   099b   9f                ghi STACK_REG
   099c   7c 00             adci 0
   099e   b6                phi R6
                            
   099f   84                glo R4
   09a0   56                str R6
   09a1   16                inc R6
   09a2   94                ghi R4
   09a3   56                str R6
                            
   09a4   8f                glo STACK_REG
   09a5   a5                plo R5
   09a6   9f                ghi STACK_REG
   09a7   b5                phi R5
   09a8   15                inc R5
                            
   09a9   8f                glo STACK_REG
   09aa   fc 05             adi 5
   09ac   a6                plo R6
   09ad   9f                ghi STACK_REG
   09ae   7c 00             adci 0
   09b0   b6                phi R6
                            
   09b1   06                ldn R6
   09b2   a4                plo R4
   09b3   16                inc R6
   09b4   06                ldn R6
   09b5   b4                phi R4
                            
   09b6   e4                sex R4
                            
   09b7   f8 82             ldi 082h
   09b9   fe                shl
   09ba   a7                plo R7
                            
   09bb                 EXPRESSION_SUB_LOOP
   09bb   05                ldn R5
   09bc   75                sdb
   09bd   54                str R4
   09be   15                inc R5
   09bf   60                irx
                            
   09c0   27                dec R7
   09c1   87                glo R7
   09c2   3a bb             bnz EXPRESSION_SUB_LOOP
                            
   09c4   ef                sex STACK_REG
                            
   09c5   8f                glo STACK_REG
   09c6   fc 07             adi 7
   09c8   a6                plo R6
   09c9   9f                ghi STACK_REG
   09ca   7c 00             adci 0
   09cc   b6                phi R6
                            
   09cd   06                ldn R6
   09ce   a4                plo R4
   09cf   16                inc R6
   09d0   06                ldn R6
   09d1   b4                phi R4
                            
   09d2   1f                inc STACK_REG
   09d3   1f                inc STACK_REG
   09d4   1f                inc STACK_REG
   09d5   1f                inc STACK_REG
                        
   09d6   c0 09 14          lbr EXPRESSION_MAIN
                        
   09d9                 EXPRESSION_NEXT_CYCLE    
   09d9   14                inc R4
   09da   c0 09 14          lbr EXPRESSION_MAIN
                            
   09dd                 EXPRESSION_END
   09dd   ef                sex STACK_REG
   09de   60                irx
                            
   09df   72                ldxa            ;restoring registers
   09e0   a5                plo R5
   09e1   72                ldxa
   09e2   b5                phi R5
   09e3   60                irx
   09e4   60                irx
   09e5   72                ldxa
   09e6   a6                plo R6
   09e7   72                ldxa
   09e8   b6                phi R6
   09e9   72                ldxa
   09ea   a7                plo R7
   09eb   f0                ldx
   09ec   b7                phi R7
                            
   09ed   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-DYN MEMORY INIT------------------------------
   09ee                 DYN_MEMORY_INIT
   09ee   f8 06             ldi HEAP_LASTADDRESS.0
   09f0   a4                plo R4
   09f1   f8 21             ldi HEAP_LASTADDRESS.1
   09f3   b4                phi R4
                            
   09f4   f8 10             ldi HEAP_START.0
   09f6   54                str R4
   09f7   14                inc R4
   09f8   f8 21             ldi HEAP_START.1
   09fa   54                str R4
                            
   09fb   f8 10             ldi HEAP_START.0
   09fd   a4                plo R4
   09fe   f8 21             ldi HEAP_START.1
   0a00   b4                phi R4
                            
   0a01   f8 eb             ldi (HEAP_END - HEAP_START - 5).0
   0a03   54                str R4
   0a04   14                inc R4
   0a05   f8 da             ldi (HEAP_END - HEAP_START - 5).1
   0a07   54                str R4
   0a08   14                inc R4
                            
   0a09   f8 00             ldi 0
   0a0b   54                str R4
   0a0c   14                inc R4
   0a0d   54                str R4
   0a0e   14                inc R4
   0a0f   54                str R4
                            
   0a10   de                sep RETURN
                        ;----------------------------------------------
                        
   0a11                 DYN_MEMORY_DEBUG_STR
   0a11   20 2d 3e 20       db " -> size: ",0,", address: ",0,", previous: ",0,", ",0
   0a15   73 69 7a 65   
   0a19   3a 20 00 2c   
   0a1d   20 61 64 64   
   0a21   72 65 73 73   
   0a25   3a 20 00 2c   
   0a29   20 70 72 65   
   0a2d   76 69 6f 75   
   0a31   73 3a 20 00   
   0a35   2c 20 00      
   0a38                 DYN_MEMORY_DEBUG_STR_FREE
   0a38   46 52 45 45       db "FREE\r\n",0
   0a3c   0d 0a 00      
   0a3f                 DYN_MEMORY_DEBUG_STR_USED
   0a3f   55 53 45 44       db "USED\r\n",0
   0a43   0d 0a 00      
                        ;-DYN MEMORY DEBUG-----------------------------
   0a46                 DYN_MEMORY_DEBUG
   0a46   ef                sex STACK_REG
                            
   0a47   f8 00             ldi 0
   0a49   73                stxd
   0a4a   73                stxd
   0a4b   73                stxd
   0a4c   73                stxd                    ;+14 address + 5
                            
   0a4d   73                stxd
   0a4e   73                stxd
   0a4f   f8 21             ldi HEAP_START.1
   0a51   73                stxd
   0a52   f8 10             ldi HEAP_START.0
   0a54   73                stxd                    ;+10 address
                            
   0a55   f8 00             ldi 0
   0a57   73                stxd                    ;+9 used
                            
   0a58   73                stxd
   0a59   73                stxd
   0a5a   73                stxd
   0a5b   73                stxd                    ;+5 previous
                            
   0a5c   73                stxd
   0a5d   73                stxd
   0a5e   73                stxd
   0a5f   73                stxd                    ;+1 size
                            
   0a60                 DYN_MEMORY_DEBUG_MAINLOOP
   0a60   8f                glo STACK_REG
   0a61   fc 0a             adi 10
   0a63   a4                plo R4
   0a64   9f                ghi STACK_REG
   0a65   7c 00             adci 0
   0a67   b4                phi R4
                            
   0a68   e4                sex R4
                            
   0a69   f8 00             ldi HEAP_END.0
   0a6b   f5                sd
   0a6c   14                inc R4
   0a6d   f8 fc             ldi HEAP_END.1
   0a6f   75                sdb
                            
   0a70   c3 0b 7c          lbdf DYN_MEMORY_DEBUG_END    ;if address >= HEAP_END
                            
   0a73   8f                glo STACK_REG
   0a74   fc 0a             adi 10
   0a76   a4                plo R4
   0a77   9f                ghi STACK_REG
   0a78   7c 00             adci 0
   0a7a   b4                phi R4
                            
   0a7b   44                lda R4                      ;R5 = address
   0a7c   a5                plo R5
   0a7d   44                lda R4
   0a7e   b5                phi R5
                            
   0a7f   8f                glo STACK_REG
   0a80   a4                plo R4
   0a81   9f                ghi STACK_REG
   0a82   b4                phi R4
   0a83   14                inc R4
                            
   0a84   45                lda R5
   0a85   54                str R4
   0a86   14                inc R4
                            
   0a87   45                lda R5
   0a88   54                str R4
   0a89   14                inc R4
                            
   0a8a   14                inc R4
   0a8b   14                inc R4
                            
   0a8c   45                lda R5
   0a8d   54                str R4
   0a8e   14                inc R4
                            
   0a8f   45                lda R5
   0a90   54                str R4
   0a91   14                inc R4
                            
   0a92   14                inc R4
   0a93   14                inc R4
                            
   0a94   45                lda R5
   0a95   54                str R4
                            
   0a96   8f                glo STACK_REG
   0a97   fc 0e             adi 14
   0a99   a4                plo R4
   0a9a   9f                ghi STACK_REG
   0a9b   7c 00             adci 0
   0a9d   b4                phi R4
                            
   0a9e   85                glo R5
   0a9f   54                str R4
   0aa0   14                inc R4
                            
   0aa1   95                ghi R5
   0aa2   54                str R4
                            
   0aa3                 DYN_MEMORY_DEBUG_PRINT
   0aa3   8f                glo STACK_REG               ;set R4 to address
   0aa4   fc 0a             adi 10
   0aa6   a4                plo R4
   0aa7   9f                ghi STACK_REG
   0aa8   7c 00             adci 0
   0aaa   b4                phi R4
                        
   0aab   f8 ae             ldi PRINT_DEC.0             ;print address in decimal
   0aad   ad                plo CALL_REG
   0aae   f8 04             ldi PRINT_DEC.1
   0ab0   bd                phi CALL_REG
                            
   0ab1   f8 00             ldi FCALL.0
   0ab3   ae                plo FCALL_REG
   0ab4   de                sep FCALL_REG
                            
   0ab5   f8 11             ldi DYN_MEMORY_DEBUG_STR.0      ;print the debug string
   0ab7   a6                plo R6
   0ab8   f8 0a             ldi DYN_MEMORY_DEBUG_STR.1
   0aba   b6                phi R6
                            
   0abb   f8 52             ldi PRINT.0         ;prepare to call PRINT
   0abd   ad                plo CALL_REG
   0abe   f8 01             ldi PRINT.1
   0ac0   bd                phi CALL_REG
                            
   0ac1   f8 00             ldi FCALL.0
   0ac3   ae                plo FCALL_REG
   0ac4   de                sep FCALL_REG       ;call PRINT
                            
   0ac5   86                glo R6                  ;save R6 value
   0ac6   a7                plo R7
   0ac7   96                ghi R6
   0ac8   b7                phi R7
                            
   0ac9   8f                glo STACK_REG           ;set R4 to size
   0aca   a4                plo R4
   0acb   9f                ghi STACK_REG
   0acc   b4                phi R4
   0acd   14                inc R4
                        
   0ace   f8 ae             ldi PRINT_DEC.0         ;print size in decimal
   0ad0   ad                plo CALL_REG
   0ad1   f8 04             ldi PRINT_DEC.1
   0ad3   bd                phi CALL_REG
                            
   0ad4   f8 00             ldi FCALL.0
   0ad6   ae                plo FCALL_REG
   0ad7   de                sep FCALL_REG
                            
   0ad8   87                glo R7                  ;continue printing the debug string
   0ad9   a6                plo R6
   0ada   97                ghi R7
   0adb   b6                phi R6
                            
   0adc   f8 52             ldi PRINT.0             ;prepare to call PRINT
   0ade   ad                plo CALL_REG
   0adf   f8 01             ldi PRINT.1
   0ae1   bd                phi CALL_REG
                            
   0ae2   f8 00             ldi FCALL.0
   0ae4   ae                plo FCALL_REG
   0ae5   de                sep FCALL_REG           ;call PRINT
                            
   0ae6   86                glo R6                  ;save R6 value
   0ae7   a7                plo R7
   0ae8   96                ghi R6
   0ae9   b7                phi R7
                            
   0aea   8f                glo STACK_REG           ;set R4 to address+5
   0aeb   fc 0e             adi 14
   0aed   a4                plo R4
   0aee   9f                ghi STACK_REG
   0aef   7c 00             adci 0
   0af1   b4                phi R4
                            
   0af2   f8 ae             ldi PRINT_DEC.0         ;print address+5 in decimal
   0af4   ad                plo CALL_REG
   0af5   f8 04             ldi PRINT_DEC.1
   0af7   bd                phi CALL_REG
                            
   0af8   f8 00             ldi FCALL.0
   0afa   ae                plo FCALL_REG
   0afb   de                sep FCALL_REG
                            
   0afc   87                glo R7                  ;continue printing the debug string
   0afd   a6                plo R6
   0afe   97                ghi R7
   0aff   b6                phi R6
                            
   0b00   f8 52             ldi PRINT.0             ;prepare to call PRINT
   0b02   ad                plo CALL_REG
   0b03   f8 01             ldi PRINT.1
   0b05   bd                phi CALL_REG
                            
   0b06   f8 00             ldi FCALL.0
   0b08   ae                plo FCALL_REG
   0b09   de                sep FCALL_REG           ;call PRINT
                            
   0b0a   86                glo R6                  ;save R6 value
   0b0b   a7                plo R7
   0b0c   96                ghi R6
   0b0d   b7                phi R7
                            
   0b0e   8f                glo STACK_REG           ;set R4 to previous
   0b0f   fc 05             adi 5
   0b11   a4                plo R4
   0b12   9f                ghi STACK_REG
   0b13   7c 00             adci 0
   0b15   b4                phi R4
                            
   0b16   f8 ae             ldi PRINT_DEC.0         ;print previous in decimal
   0b18   ad                plo CALL_REG
   0b19   f8 04             ldi PRINT_DEC.1
   0b1b   bd                phi CALL_REG
                            
   0b1c   f8 00             ldi FCALL.0
   0b1e   ae                plo FCALL_REG
   0b1f   de                sep FCALL_REG
                            
   0b20   87                glo R7                  ;continue printing the debug string
   0b21   a6                plo R6
   0b22   97                ghi R7
   0b23   b6                phi R6
                            
   0b24   f8 52             ldi PRINT.0             ;prepare to call PRINT
   0b26   ad                plo CALL_REG
   0b27   f8 01             ldi PRINT.1
   0b29   bd                phi CALL_REG
                            
   0b2a   f8 00             ldi FCALL.0
   0b2c   ae                plo FCALL_REG
   0b2d   de                sep FCALL_REG           ;call PRINT
                            
   0b2e   8f                glo STACK_REG           ;set R4 to previous
   0b2f   fc 09             adi 9
   0b31   a4                plo R4
   0b32   9f                ghi STACK_REG
   0b33   7c 00             adci 0
   0b35   b4                phi R4
                            
   0b36   04                ldn R4
   0b37   32 41             bz DYN_MEMORY_DEBUG_FREE
                            
   0b39   f8 3f             ldi DYN_MEMORY_DEBUG_STR_USED.0
   0b3b   a6                plo R6
   0b3c   f8 0a             ldi DYN_MEMORY_DEBUG_STR_USED.1
   0b3e   b6                phi R6
                            
   0b3f   30 47             br DYN_MEMORY_DEBUG_NEXTADDRESS
                            
   0b41                 DYN_MEMORY_DEBUG_FREE
   0b41   f8 38             ldi DYN_MEMORY_DEBUG_STR_FREE.0
   0b43   a6                plo R6
   0b44   f8 0a             ldi DYN_MEMORY_DEBUG_STR_FREE.1
   0b46   b6                phi R6
                            
   0b47                 DYN_MEMORY_DEBUG_NEXTADDRESS
   0b47   f8 52             ldi PRINT.0             ;prepare to call PRINT
   0b49   ad                plo CALL_REG
   0b4a   f8 01             ldi PRINT.1
   0b4c   bd                phi CALL_REG
                            
   0b4d   f8 00             ldi FCALL.0
   0b4f   ae                plo FCALL_REG
   0b50   de                sep FCALL_REG           ;call PRINT
                            
   0b51   8f                glo STACK_REG           ;set R4 to address
   0b52   fc 0a             adi 10
   0b54   a4                plo R4
   0b55   9f                ghi STACK_REG
   0b56   7c 00             adci 0
   0b58   b4                phi R4
                            
   0b59   8f                glo STACK_REG           ;set R5 to address+5
   0b5a   fc 0e             adi 14
   0b5c   a5                plo R5
   0b5d   9f                ghi STACK_REG
   0b5e   7c 00             adci 0
   0b60   b5                phi R5
                            
   0b61   8f                glo STACK_REG           ;set R6 to size
   0b62   a6                plo R6
   0b63   9f                ghi STACK_REG
   0b64   b6                phi R6
   0b65   16                inc R6
                            
   0b66   e6                sex R6
                            
   0b67   45                lda R5
   0b68   f4                add
   0b69   60                irx
   0b6a   54                str R4
   0b6b   14                inc R4
                            
   0b6c   45                lda R5
   0b6d   74                adc
   0b6e   60                irx
   0b6f   54                str R4
   0b70   14                inc R4
                            
   0b71   45                lda R5
   0b72   74                adc
   0b73   60                irx
   0b74   54                str R4
   0b75   14                inc R4
                            
   0b76   45                lda R5
   0b77   74                adc
   0b78   54                str R4
                            
   0b79   c0 0a 60          lbr DYN_MEMORY_DEBUG_MAINLOOP
                        
   0b7c                 DYN_MEMORY_DEBUG_END
   0b7c   8f                glo STACK_REG           ;set R6 to size
   0b7d   fc 11             adi 17
   0b7f   af                plo STACK_REG
   0b80   9f                ghi STACK_REG
   0b81   7c 00             adci 0
   0b83   bf                phi STACK_REG
                            
   0b84   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-DYN MEMORY ALLOCATION------------------------
                        ;-R4-Size--------------------------------------
                        ;-R10-return address---------------------------
                        ;-Local registers------------------------------
                        ;-R5-R6-R7-R8----------------------------------
   0b85                 DYN_MEMORY_ALLOC
   0b85   ef                sex STACK_REG
                            
   0b86   98                ghi R8
   0b87   73                stxd
   0b88   88                glo R8
   0b89   73                stxd
                            
   0b8a   97                ghi R7
   0b8b   73                stxd
   0b8c   87                glo R7
   0b8d   73                stxd
                            
   0b8e   96                ghi R6
   0b8f   73                stxd
   0b90   86                glo R6
   0b91   73                stxd
                            
   0b92   95                ghi R5
   0b93   73                stxd
   0b94   85                glo R5
   0b95   73                stxd
                            
   0b96   f8 00             ldi 0
   0b98   73                stxd
   0b99   73                stxd                ;+7 currentSize
                            
   0b9a   94                ghi R4
   0b9b   73                stxd
   0b9c   84                glo R4
   0b9d   73                stxd                ;+5 size
                            
   0b9e   84                glo R4              ;R4 += 5
   0b9f   fc 05             adi 5
   0ba1   a4                plo R4
   0ba2   94                ghi R4
   0ba3   7c 00             adci 0
   0ba5   b4                phi R4
                            
   0ba6   94                ghi R4
   0ba7   73                stxd
   0ba8   84                glo R4              ;newSize is initialized to size+5 for further calculation
   0ba9   73                stxd                ;+3 newSize
                        
   0baa   f8 fc             ldi HEAP_END.1
   0bac   73                stxd
   0bad   f8 00             ldi HEAP_END.0
   0baf   73                stxd                ;+1 endAddress = HEAP_END
                            
   0bb0   f8 06             ldi HEAP_LASTADDRESS.0
   0bb2   a4                plo R4
   0bb3   f8 21             ldi HEAP_LASTADDRESS.1
   0bb5   b4                phi R4
                            
   0bb6   44                lda R4
   0bb7   a5                plo R5
   0bb8   44                lda R4
   0bb9   b5                phi R5              ;R5 = lastAddress
                            
   0bba   f8 00             ldi 0               ;R10 = 0
   0bbc   aa                plo R10
   0bbd   ba                phi R10
                            
   0bbe   f8 02             ldi 2               ;R8 = 2
   0bc0   a8                plo R8
                            
   0bc1                 DYN_MEMORY_ALLOC_MAINLOOP
   0bc1   8f                glo STACK_REG       ;set R4 pointer to endAddress
   0bc2   a4                plo R4
   0bc3   9f                ghi STACK_REG
   0bc4   b4                phi R4
   0bc5   14                inc R4
                            
   0bc6   e4                sex R4
                            
   0bc7   85                glo R5              ;currentAddress - endAddress
   0bc8   f7                sm
   0bc9   60                irx
   0bca   95                ghi R5
   0bcb   77                smb
                            
   0bcc   c3 0c b5          lbdf DYN_MEMORY_ALLOC_NEXTPASS      ;if currentAddress >= endAddress
                            
   0bcf   8f                glo STACK_REG                       ;set R4 pointer to currentSize
   0bd0   fc 07             adi 7
   0bd2   a4                plo R4
   0bd3   9f                ghi STACK_REG
   0bd4   7c 00             adci 0
   0bd6   b4                phi R4
                            
   0bd7   85                glo R5                              ;R6 = R5 (currentAddress)
   0bd8   a6                plo R6
   0bd9   95                ghi R5
   0bda   b6                phi R6
                            
   0bdb   46                lda R6                              ;currentSize = block size
   0bdc   54                str R4
   0bdd   14                inc R4
                            
   0bde   46                lda R6
   0bdf   54                str R4
                            
   0be0   16                inc R6
   0be1   16                inc R6
                                
   0be2   06                ldn R6
   0be3   ca 0c 9b          lbnz DYN_MEMORY_ALLOC_NEXTADDRESS   ;if the current block is USED
                            
   0be6   24                dec R4
                            
   0be7   8f                glo STACK_REG                   ;R6 pointer set to size
   0be8   fc 05             adi 5
   0bea   a6                plo R6
   0beb   9f                ghi STACK_REG
   0bec   7c 00             adci 0
   0bee   b6                phi R6
                            
   0bef   06                ldn R6                          ;currentSize == size
   0bf0   f5                sd
   0bf1   ca 0c 10          lbnz DYN_MEMORY_ALLOC_SIZEBIGGER
   0bf4   60                irx
   0bf5   16                inc R6
   0bf6   06                ldn R6
   0bf7   75                sdb
                        
   0bf8   26                dec R6                              ;set back R6
   0bf9   24                dec R4                              ;set back R4
                            
   0bfa   ca 0c 10          lbnz DYN_MEMORY_ALLOC_SIZEBIGGER    ;if currentSize != size
                        
   0bfd                 DYN_MEMORY_ALLOC_SIZEEQ
   0bfd   85                glo R5                              ;R6 = currentAddress + 4
   0bfe   fc 04             adi 4
   0c00   a6                plo R6
   0c01   95                ghi R5
   0c02   7c 00             adci 0
   0c04   b6                phi R6
                            
   0c05   f8 01             ldi 1
   0c07   56                str R6                              ;used = 1
                            
   0c08   16                inc R6                              ;R6++
   0c09   86                glo R6
   0c0a   aa                plo R10                             ;R10 = R6
   0c0b   96                ghi R6
   0c0c   ba                phi R10
                            
   0c0d   c0 0c d0          lbr DYN_MEMORY_ALLOC_END            ;RETURN
                        
   0c10                 DYN_MEMORY_ALLOC_SIZEBIGGER
   0c10   8f                glo STACK_REG                   ;R6 pinter set to newSize (size+5)
   0c11   fc 03             adi 3
   0c13   a6                plo R6
   0c14   9f                ghi STACK_REG
   0c15   7c 00             adci 0
   0c17   b6                phi R6
                            
   0c18   46                lda R6                          ;currentSize - newSize (size+5)
   0c19   f5                sd
   0c1a   60                irx
   0c1b   46                lda R6
   0c1c   75                sdb
                            
   0c1d   26                dec R6                              ;set back R6
   0c1e   26                dec R6
                               
   0c1f   cb 0c 9b          lbnf DYN_MEMORY_ALLOC_NEXTADDRESS   ;if currentSize < newSize (size+5)
                            
   0c22   24                dec R4                              ;R4 pointer to size
   0c23   24                dec R4
   0c24   24                dec R4
                            
   0c25   85                glo R5                              ;R6 = R5 (currentAddress)
   0c26   a6                plo R6
   0c27   95                ghi R5
   0c28   b6                phi R6
                            
   0c29   44                lda R4                              ;set current block size to size
   0c2a   56                str R6
   0c2b   16                inc R6
                            
   0c2c   44                lda R4
   0c2d   56                str R6
   0c2e   16                inc R6
                            
   0c2f   16                inc R6                              ;R6 += 2
   0c30   16                inc R6
                            
   0c31   f8 01             ldi 1                               ;set used to 1
   0c33   56                str R6
                            
   0c34   16                inc R6                              ;R6++
   0c35   86                glo R6
   0c36   aa                plo R10                             ;R10 = R6
   0c37   96                ghi R6                              ;R10 is set for return
   0c38   ba                phi R10
                            
   0c39   8f                glo STACK_REG                   ;R4 pinter set to newSize (size+5)
   0c3a   fc 03             adi 3
   0c3c   a4                plo R4
   0c3d   9f                ghi STACK_REG
   0c3e   7c 00             adci 0
   0c40   b4                phi R4
                            
   0c41   85                glo R5                          ;R7 = currentAddress + size + 5
   0c42   f4                add
   0c43   60                irx
   0c44   a7                plo R7
   0c45   95                ghi R5
   0c46   74                adc
   0c47   b7                phi R7                          ;R7 is the newAddress
                            
   0c48   f8 06             ldi HEAP_LASTADDRESS.0
   0c4a   a4                plo R4
   0c4b   f8 21             ldi HEAP_LASTADDRESS.1
   0c4d   b4                phi R4
                            
   0c4e   87                glo R7                          ;lastAddress = R7
   0c4f   54                str R4
   0c50   14                inc R4
                            
   0c51   97                ghi R7
   0c52   54                str R4
                        
   0c53   8f                glo STACK_REG                   ;R4 pinter set to newSize
   0c54   fc 03             adi 3
   0c56   a4                plo R4
   0c57   9f                ghi STACK_REG
   0c58   7c 00             adci 0
   0c5a   b4                phi R4
                            
   0c5b   8f                glo STACK_REG                   ;R4 pinter set to currentSize
   0c5c   fc 07             adi 7
   0c5e   a6                plo R6
   0c5f   9f                ghi STACK_REG
   0c60   7c 00             adci 0
   0c62   b6                phi R6
                            
   0c63   46                lda R6                          ;newSize = currentSize - (size + 5)
   0c64   f7                sm
   0c65   54                str R4
   0c66   60                irx
                            
   0c67   46                lda R6
   0c68   77                smb
   0c69   54                str R4
                            
   0c6a   24                dec R4                          ;set back R4 to newSize
                            
   0c6b   87                glo R7                          ;R6 = R7 (newAddress)
   0c6c   a6                plo R6
   0c6d   97                ghi R7
   0c6e   b6                phi R6
                            
   0c6f   44                lda R4                          ;new block size = newSize
   0c70   56                str R6
   0c71   16                inc R6
                            
   0c72   44                lda R4
   0c73   56                str R6
   0c74   16                inc R6
                            
   0c75   85                glo R5                          ;new block previous address = currentAddress
   0c76   56                str R6
   0c77   16                inc R6
                            
   0c78   95                ghi R5
   0c79   56                str R6
   0c7a   16                inc R6
                            
   0c7b   f8 00             ldi 0                           ;new block used = 0
   0c7d   56                str R6
   0c7e   16                inc R6
                            
   0c7f   24                dec R4
   0c80   24                dec R4
                            
   0c81   86                glo R6                          ;R6 = R6 + newSize
   0c82   f4                add
   0c83   60                irx
   0c84   a6                plo R6
   0c85   96                ghi R6
   0c86   74                adc
   0c87   b6                phi R6
                            
   0c88   16                inc R6                          ;R6 += 2
   0c89   16                inc R6
                            
   0c8a   86                glo R6
   0c8b   ff 00             smi HEAP_END.0
   0c8d   96                ghi R6
   0c8e   7f fc             smbi HEAP_END.1
                            
   0c90   c3 0c d0          lbdf DYN_MEMORY_ALLOC_END
                            
   0c93   87                glo R7                          ;next block previous address = R7
   0c94   56                str R6
   0c95   16                inc R6
                            
   0c96   97                ghi R7
   0c97   56                str R6
                            
   0c98   c0 0c d0          lbr DYN_MEMORY_ALLOC_END
                            
   0c9b                 DYN_MEMORY_ALLOC_NEXTADDRESS
   0c9b   8f                glo STACK_REG               ;set R4 pointer to currentSize
   0c9c   fc 07             adi 7
   0c9e   a4                plo R4
   0c9f   9f                ghi STACK_REG
   0ca0   7c 00             adci 0
   0ca2   b4                phi R4
                            
   0ca3   85                glo R5
   0ca4   f4                add
   0ca5   60                irx
   0ca6   a5                plo R5
   0ca7   95                ghi R5
   0ca8   74                adc
   0ca9   b5                phi R5                          ;currentAddress += size
                            
   0caa   85                glo R5
   0cab   fc 05             adi 5
   0cad   a5                plo R5
   0cae   95                ghi R5
   0caf   7c 00             adci 0
   0cb1   b5                phi R5                          ;currentAddress += 5
                            
   0cb2   c0 0b c1          lbr DYN_MEMORY_ALLOC_MAINLOOP
                            
   0cb5                 DYN_MEMORY_ALLOC_NEXTPASS
   0cb5   f8 10             ldi HEAP_START.0
   0cb7   a5                plo R5
   0cb8   f8 21             ldi HEAP_START.1
   0cba   b5                phi R5
                            
   0cbb   8f                glo STACK_REG                       ;set R4 pointer to endAddress
   0cbc   a4                plo R4
   0cbd   9f                ghi STACK_REG
   0cbe   b4                phi R4
   0cbf   14                inc R4
                            
   0cc0   f8 06             ldi HEAP_LASTADDRESS.0
   0cc2   a6                plo R6
   0cc3   f8 21             ldi HEAP_LASTADDRESS.1
   0cc5   b6                phi R6
                            
   0cc6   46                lda R6
   0cc7   54                str R4
   0cc8   14                inc R4
                            
   0cc9   46                lda R6
   0cca   54                str R4
                        
   0ccb   28                dec R8
   0ccc   88                glo R8
   0ccd   ca 0b c1          lbnz DYN_MEMORY_ALLOC_MAINLOOP
                            
   0cd0                 DYN_MEMORY_ALLOC_END
   0cd0   8f                glo STACK_REG
   0cd1   fc 09             adi 9
   0cd3   af                plo STACK_REG
   0cd4   9f                ghi STACK_REG
   0cd5   7c 00             adci 0
   0cd7   bf                phi STACK_REG
                            
   0cd8   ef                sex STACK_REG
                            
   0cd9   72                ldxa
   0cda   a5                plo R5
   0cdb   72                ldxa
   0cdc   b5                phi R5
                            
   0cdd   72                ldxa
   0cde   a6                plo R6
   0cdf   72                ldxa
   0ce0   b6                phi R6
                            
   0ce1   72                ldxa
   0ce2   a7                plo R7
   0ce3   72                ldxa
   0ce4   b7                phi R7
                            
   0ce5   72                ldxa
   0ce6   a8                plo R8
   0ce7   f0                ldx
   0ce8   b8                phi R8
                            
   0ce9   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-DYN MEMORY FREE------------------------------
                        ;-R4-address-----------------------------------
                        ;-Local registers------------------------------
                        ;-R5-R6----------------------------------------
   0cea                 DYN_MEMORY_FREE
   0cea   ef                sex STACK_REG
                            
   0ceb   95                ghi R5      ;saving local registers
   0cec   73                stxd
   0ced   85                glo R5
   0cee   73                stxd
                            
   0cef   96                ghi R6
   0cf0   73                stxd
   0cf1   86                glo R6
   0cf2   73                stxd
                            
   0cf3   f8 00             ldi 0
   0cf5   73                stxd
   0cf6   73                stxd
   0cf7   73                stxd
   0cf8   73                stxd        ;+5 size
                            
   0cf9   73                stxd
   0cfa   73                stxd
   0cfb   73                stxd
   0cfc   73                stxd        ;+1 nextSize
                            
   0cfd   24                dec R4      ;R4-- (address--)
   0cfe   54                str R4      ;set current block to free
                            
   0cff   24                dec R4
   0d00   24                dec R4
                            
   0d01   44                lda R4      ;R6 = previous block address
   0d02   a6                plo R6
   0d03   44                lda R4
   0d04   b6                phi R6
                            
   0d05   24                dec R4      ;set R4 to the beginning of the current block
   0d06   24                dec R4
   0d07   24                dec R4
   0d08   24                dec R4
                            
   0d09   86                glo R6
   0d0a   ca 0d 13          lbnz DYN_MEMORY_FREE_NEXTCHECK
   0d0d   96                ghi R6
   0d0e   ca 0d 13          lbnz DYN_MEMORY_FREE_NEXTCHECK      ;if previousAddress != 0
                            
   0d11   30 22             br DYN_MEMORY_FREE_MERGE
                        
   0d13                 DYN_MEMORY_FREE_NEXTCHECK
   0d13   86                glo R6                              ;set R5 pointer to previous block used
   0d14   fc 04             adi 4
   0d16   a5                plo R5
   0d17   96                ghi R6
   0d18   7c 00             adci 0
   0d1a   b5                phi R5
                            
   0d1b   05                ldn R5
   0d1c   3a 22             bnz DYN_MEMORY_FREE_MERGE           ;if used != 0
                            
   0d1e   86                glo R6                              ;set R4 to previous block
   0d1f   a4                plo R4
   0d20   96                ghi R6
   0d21   b4                phi R4
                            
   0d22                 DYN_MEMORY_FREE_MERGE
   0d22   8f                glo STACK_REG                       ;set R5 pointer to size
   0d23   fc 05             adi 5
   0d25   a5                plo R5
   0d26   9f                ghi STACK_REG
   0d27   7c 00             adci 0
   0d29   b5                phi R5
                            
   0d2a   e5                sex R5                              ;set R5 to pointer
                            
   0d2b   44                lda R4                              ;load block size to size
   0d2c   55                str R5
   0d2d   15                inc R5
                            
   0d2e   44                lda R4
   0d2f   55                str R5
                            
   0d30   24                dec R4
   0d31   24                dec R4                              ;set back R4 and R5
   0d32   25                dec R5
                            
   0d33   84                glo R4                              ;R6 (nextAddress) = address + 5 
   0d34   fc 05             adi 5
   0d36   a6                plo R6
   0d37   94                ghi R4
   0d38   7c 00             adci 0
   0d3a   b6                phi R6
                            
   0d3b   86                glo R6                              ;R6 += size
   0d3c   f4                add
   0d3d   60                irx
   0d3e   a6                plo R6
   0d3f   96                ghi R6
   0d40   74                adc
   0d41   b6                phi R6
                            
   0d42                 DYN_MEMORY_FREE_MERGELOOP
   0d42   86                glo R6
   0d43   ff 00             smi HEAP_END.0
   0d45   96                ghi R6
   0d46   7f fc             smbi HEAP_END.1
                            
   0d48   c3 0d 81          lbdf DYN_MEMORY_FREE_END            ;if nextAddress - HEAP_END >= 0
                            
   0d4b   86                glo R6                              ;set R5 to nextAddress used
   0d4c   fc 04             adi 4
   0d4e   a5                plo R5
   0d4f   96                ghi R6
   0d50   7c 00             adci 0
   0d52   b5                phi R5
                            
   0d53   05                ldn R5
   0d54   ca 0d 7a          lbnz DYN_MEMORY_FREE_SETPREVIOUS    ;if used != 0
                            
   0d57   8f                glo STACK_REG                       ;set R5 pointer to nextSize
   0d58   a5                plo R5
   0d59   9f                ghi STACK_REG
   0d5a   b5                phi R5
   0d5b   15                inc R5
                            
   0d5c   46                lda R6                              ;load size + 5 to nextSize 
   0d5d   fc 05             adi 5
   0d5f   55                str R5
   0d60   60                irx
                            
   0d61   06                ldn R6
   0d62   7c 00             adci 0
   0d64   55                str R5
                            
   0d65   25                dec R5                              ;set back R5 and R6
   0d66   26                dec R6
                            
   0d67   04                ldn R4                              ;current block size += nextSize
   0d68   f4                add
   0d69   54                str R4
   0d6a   60                irx
   0d6b   14                inc R4
                            
   0d6c   04                ldn R4
   0d6d   74                adc
   0d6e   54                str R4
                            
   0d6f   25                dec R5                              ;set back R4 and R5
   0d70   24                dec R4
                            
   0d71   86                glo R6                              ;R6 (nextAddress) += nextSize
   0d72   f4                add
   0d73   a6                plo R6
   0d74   60                irx
   0d75   96                ghi R6
   0d76   74                adc
   0d77   b6                phi R6
                            
   0d78   30 42             br DYN_MEMORY_FREE_MERGELOOP
                        
   0d7a                 DYN_MEMORY_FREE_SETPREVIOUS    
   0d7a   16                inc R6                              ;increment nextAddress to previous address section
   0d7b   16                inc R6
                            
   0d7c   84                glo R4                              ;set previous address to R4 value
   0d7d   56                str R6
   0d7e   16                inc R6
   0d7f   94                ghi R4
   0d80   56                str R6
                        
   0d81                 DYN_MEMORY_FREE_END
   0d81   8f                glo STACK_REG
   0d82   fc 09             adi 9
   0d84   af                plo STACK_REG
   0d85   9f                ghi STACK_REG
   0d86   7c 00             adci 0
   0d88   bf                phi STACK_REG
                            
   0d89   ef                sex STACK_REG
                            
   0d8a   f8 06             ldi HEAP_LASTADDRESS.0
   0d8c   a5                plo R5
   0d8d   f8 21             ldi HEAP_LASTADDRESS.1
   0d8f   b5                phi R5
                            
   0d90   84                glo R4
   0d91   55                str R5
   0d92   15                inc R5
                            
   0d93   94                ghi R4
   0d94   55                str R5
                            
   0d95   72                ldxa            ;restoring local registers
   0d96   a6                plo R6
   0d97   72                ldxa
   0d98   b6                phi R6
                            
   0d99   72                ldxa
   0d9a   a5                plo R5
   0d9b   f0                ldx
   0d9c   b5                phi R5
                            
   0d9d   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-VAR-LIST-INIT--------------------------------
   0d9e                 VAR_LIST_INIT
   0d9e   f8 00             ldi VARLIST_COUNT.0
   0da0   a4                plo R4
   0da1   f8 21             ldi VARLIST_COUNT.1
   0da3   b4                phi R4
                            
   0da4   f8 06             ldi 6
   0da6   a5                plo R5
                        
   0da7                 VAR_LIST_INIT_LOOP
   0da7   f8 00             ldi 0
   0da9   54                str R4
   0daa   14                inc R4
                            
   0dab   25                dec R5
   0dac   85                glo R5
   0dad   3a a7             bnz VAR_LIST_INIT_LOOP
                            
   0daf   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-GET-STRING-----------------------------------
                        ;-R4-Input string------------------------------
                        ;-R10-New string address-----------------------
                        ;-Local registers------------------------------
                        ;-R5-R6----------------------------------------
   0db0                 GET_STRING
   0db0   ef                sex STACK_REG
                            
   0db1   95                ghi R5
   0db2   73                stxd
   0db3   85                glo R5
   0db4   73                stxd
                            
   0db5   96                ghi R6
   0db6   73                stxd
   0db7   86                glo R6
   0db8   73                stxd
                            
   0db9   94                ghi R4
   0dba   73                stxd
   0dbb   84                glo R4
   0dbc   73                stxd                    ;+1 startAddress
                            
   0dbd   f8 00             ldi 0                   ;set R5 and R10 to zero
   0dbf   a5                plo R5
   0dc0   b5                phi R5
                            
   0dc1   aa                plo R10
   0dc2   ba                phi R10
                        
   0dc3                 GET_STRING_LEN
   0dc3   04                ldn R4                  
   0dc4   ff 30             smi 48
   0dc6   3b e7             bm GET_STRING_LEN_END   ;if *R4 < '0'
   0dc8   04                ldn R4
   0dc9   ff 3a             smi 58
   0dcb   3b e3             bm GET_STRING_ADDLEN    ;if *R4 <= '9'
   0dcd   04                ldn R4
   0dce   ff 41             smi 65
   0dd0   3b e7             bm GET_STRING_LEN_END   ;if *R4 < 'A'
   0dd2   04                ldn R4
   0dd3   ff 5b             smi 91
   0dd5   3b e3             bm GET_STRING_ADDLEN    ;if *R4 <= 'Z'
   0dd7   04                ldn R4
   0dd8   ff 61             smi 97
   0dda   3b e7             bm GET_STRING_LEN_END   ;if *R4 < 'a'
   0ddc   04                ldn R4
   0ddd   ff 7b             smi 123
   0ddf   3b e3             bm GET_STRING_ADDLEN    ;if *R4 <= 'z'
                            
   0de1   30 e7             br GET_STRING_LEN_END   ;length checking end
                            
   0de3                 GET_STRING_ADDLEN
   0de3   15                inc R5                  ;increment R4 and R5
   0de4   14                inc R4
   0de5   30 c3             br GET_STRING_LEN
                                
   0de7                 GET_STRING_LEN_END
   0de7   85                glo R5
   0de8   3a ee             bnz GET_STRING_ALLOCATE_MEM
   0dea   95                ghi R5
   0deb   c2 0e 1c          lbz GET_STRING_END               ;if R5 == 0
                            
   0dee                 GET_STRING_ALLOCATE_MEM
   0dee   85                glo R5
   0def   a4                plo R4
   0df0   95                ghi R5
   0df1   b4                phi R4
   0df2   14                inc R4                          ;increment R4 because we need spacefor the termination char
                            
   0df3   f8 85             ldi DYN_MEMORY_ALLOC.0         ;call DYN_MEMORY_ALLOC
   0df5   ad                plo CALL_REG
   0df6   f8 0b             ldi DYN_MEMORY_ALLOC.1
   0df8   bd                phi CALL_REG
                            
   0df9   f8 00             ldi FCALL.0
   0dfb   ae                plo FCALL_REG
   0dfc   de                sep FCALL_REG
                            
   0dfd   8a                glo R10
   0dfe   ca 0e 05          lbnz GET_STRING_COPY
   0e01   9a                ghi R10
   0e02   c2 0e 1c          lbz GET_STRING_END               ;if R10 == 0
                            
   0e05                 GET_STRING_COPY
   0e05   8f                glo STACK_REG                   ;restore R4
   0e06   a6                plo R6
   0e07   9f                ghi STACK_REG
   0e08   b6                phi R6
   0e09   16                inc R6
                            
   0e0a   46                lda R6
   0e0b   a4                plo R4
   0e0c   46                lda R6
   0e0d   b4                phi R4
                            
   0e0e   8a                glo R10                         ;R6 = R10
   0e0f   a6                plo R6
   0e10   9a                ghi R10
   0e11   b6                phi R6
                            
   0e12                 GET_STRING_COPY_LOOP
   0e12   44                lda R4                          ;read data from R4 location
   0e13   56                str R6                          ;and store to R6 location
   0e14   16                inc R6
                            
   0e15   25                dec R5                          ;decrement R5
   0e16   85                glo R5
   0e17   3a 12             bnz GET_STRING_COPY_LOOP        ;if R5 != 0
                            
   0e19   f8 00             ldi 0
   0e1b   56                str R6                          ;terminate the string
                        
   0e1c                 GET_STRING_END
   0e1c   60                irx
   0e1d   60                irx
   0e1e   60                irx
                            
   0e1f   72                ldxa                            ;restore local registers
   0e20   a6                plo R6
   0e21   72                ldxa
   0e22   b6                phi R6
                            
   0e23   72                ldxa
   0e24   a5                plo R5
   0e25   f0                ldx
   0e26   b5                phi R5
                            
   0e27   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-LET-STATEMENT--------------------------------
                        ;-R4-Input string------------------------------
                        ;-Local registres------------------------------
                        ;-R5-R6-R7-------------------------------------
   0e28                 LET_STATEMENT
   0e28   ef                sex STACK_REG
                            
   0e29   95                ghi R5
   0e2a   73                stxd
   0e2b   85                glo R5
   0e2c   73                stxd
                            
   0e2d   96                ghi R6
   0e2e   73                stxd
   0e2f   86                glo R6
   0e30   73                stxd
                            
   0e31   97                ghi R7
   0e32   73                stxd
   0e33   87                glo R7
   0e34   73                stxd
                            
   0e35   94                ghi R4          ;saving R4 value
   0e36   73                stxd
   0e37   84                glo R4
   0e38   73                stxd            ;+3 inputString
                            
   0e39   f8 00             ldi 0
   0e3b   73                stxd
   0e3c   73                stxd            ;+1 variableNode address
                            
   0e3d   b4                phi R4          ;R4 = 8
   0e3e   f8 08             ldi 8
   0e40   a4                plo R4
                            
   0e41   f8 85             ldi DYN_MEMORY_ALLOC.0          ;call DYN_MEMORY_ALLOC
   0e43   ad                plo CALL_REG                    ;Allocating memory for the variable node
   0e44   f8 0b             ldi DYN_MEMORY_ALLOC.1
   0e46   bd                phi CALL_REG
                            
   0e47   f8 00             ldi FCALL.0
   0e49   ae                plo FCALL_REG
   0e4a   de                sep FCALL_REG
                            
   0e4b   8a                glo R10
   0e4c   3a 52             bnz LET_STATEMENT_CONTINUE1
   0e4e   9a                ghi R10
   0e4f   c2 0f 06          lbz LET_STATEMENT_END            ;if R10 == 0
                            
   0e52                 LET_STATEMENT_CONTINUE1
   0e52   8f                glo STACK_REG                   ;set R5 pointer to variableNode address
   0e53   a5                plo R5
   0e54   9f                ghi STACK_REG
   0e55   b5                phi R5
   0e56   15                inc R5
                            
   0e57   8a                glo R10                         ;store R10 to variableNode address
   0e58   55                str R5
   0e59   15                inc R5
                            
   0e5a   9a                ghi R10
   0e5b   55                str R5
   0e5c   15                inc R5
                        
   0e5d   45                lda R5                          ;restore R4 inputString
   0e5e   a4                plo R4
   0e5f   45                lda R5
   0e60   b4                phi R4
                            
   0e61                 LET_STATEMENT_SKIPSPACES            ;skipping spaces
   0e61   44                lda R4
   0e62   fb 20             xri 32
   0e64   32 61             bz LET_STATEMENT_SKIPSPACES
                            
   0e66   24                dec R4
                            
   0e67   f8 b0             ldi GET_STRING.0                ;call GET_STRING
   0e69   ad                plo CALL_REG
   0e6a   f8 0d             ldi GET_STRING.1
   0e6c   bd                phi CALL_REG
                            
   0e6d   f8 00             ldi FCALL.0
   0e6f   ae                plo FCALL_REG
   0e70   de                sep FCALL_REG
                            
   0e71   8a                glo R10
   0e72   3a 78             bnz LET_STATEMENT_CONTINUE2
   0e74   9a                ghi R10
   0e75   c2 0e f4          lbz LET_STATEMENT_FREENODE       ;if allocating failed
                        
   0e78                 LET_STATEMENT_CONTINUE2
   0e78   8f                glo STACK_REG
   0e79   a6                plo R6
   0e7a   9f                ghi STACK_REG
   0e7b   b6                phi R6
   0e7c   16                inc R6
                            
   0e7d   46                lda R6                          ;set R6 to variableNode address
   0e7e   a5                plo R5
   0e7f   46                lda R6
   0e80   b5                phi R5
                            
   0e81   f8 00             ldi 0                           ;set variableNode->nextNode to 0
   0e83   55                str R5
   0e84   15                inc R5
                            
   0e85   55                str R5
   0e86   15                inc R5
                            
   0e87   8a                glo R10                         ;store R10 to variableNode->name
   0e88   55                str R5
   0e89   15                inc R5
                            
   0e8a   9a                ghi R10
   0e8b   55                str R5
   0e8c   15                inc R5
                            
   0e8d                 LET_STATEMENT_MAINLOOP
   0e8d   04                ldn R4
   0e8e   fb 20             xri 32
   0e90   32 9a             bz LET_STATEMENT_NEXTCHARACTER      ;if ' '
   0e92   04                ldn R4
   0e93   fb 3d             xri 61
   0e95   32 9d             bz LET_STATEMENT_EXPRESSION         ;if '='
                            
   0e97   c0 0f 06          lbr LET_STATEMENT_END
                        
   0e9a                 LET_STATEMENT_NEXTCHARACTER
   0e9a   14                inc R4
   0e9b   30 8d             br LET_STATEMENT_MAINLOOP
                        
   0e9d                 LET_STATEMENT_EXPRESSION
   0e9d   14                inc R4
                            
   0e9e   f8 f3             ldi EXPRESSION.0         ;call EXPRESSION
   0ea0   ad                plo CALL_REG
   0ea1   f8 08             ldi EXPRESSION.1
   0ea3   bd                phi CALL_REG
                            
   0ea4   f8 00             ldi FCALL.0
   0ea6   ae                plo FCALL_REG
   0ea7   de                sep FCALL_REG
                            
   0ea8                 LET_STATEMENT_ADDVAR
   0ea8   f8 00             ldi VARLIST_COUNT.0
   0eaa   a5                plo R5
   0eab   f8 21             ldi VARLIST_COUNT.1
   0ead   b5                phi R5
                            
   0eae   e5                sex R5
                            
   0eaf   45                lda R5
   0eb0   ca 0e b7          lbnz LET_STATEMENT_ADDNODE
   0eb3   05                ldn R5
   0eb4   c2 0e d8          lbz LET_STATEMENT_FIRSTNODE
                            
   0eb7                 LET_STATEMENT_ADDNODE
   0eb7   25                dec R5                          ;reset R5 to the VARLIST header
                            
   0eb8   f8 01             ldi 1                           ;increment the VARLIST_COUNT by one
   0eba   f4                add
   0ebb   55                str R5
   0ebc   15                inc R5
                            
   0ebd   f8 00             ldi 0
   0ebf   74                adc
   0ec0   55                str R5
   0ec1   15                inc R5
                            
   0ec2   15                inc R5                          ;skip VARLIST_FIRSTNODE
   0ec3   15                inc R5
                            
   0ec4   45                lda R5                          ;read VARLIST_LASTNODE
   0ec5   a7                plo R7                          ;and place the address to R7
   0ec6   05                ldn R5
   0ec7   b7                phi R7
                            
   0ec8   25                dec R5                          ;set R5 back to VARLIST_LASTNODE
                            
   0ec9   26                dec R6                          ;reset R6 to variableNode
   0eca   26                dec R6
                            
   0ecb   46                lda R6                          ;load address and store it to address R7 and R5
   0ecc   57                str R7
   0ecd   55                str R5
   0ece   17                inc R7
   0ecf   15                inc R5
                            
   0ed0   46                lda R6
   0ed1   57                str R7
   0ed2   55                str R5
   0ed3   17                inc R7
   0ed4   15                inc R5
                            
   0ed5   c0 0f 06          lbr LET_STATEMENT_END
                        
   0ed8                 LET_STATEMENT_FIRSTNODE
   0ed8   25                dec R5                          ;reset R5 to the VARLIST header
                            
   0ed9   f8 01             ldi 1                           ;set VARLIST_COUNT to one
   0edb   55                str R5
   0edc   15                inc R5
                            
   0edd   f8 00             ldi 0
   0edf   55                str R5
   0ee0   15                inc R5
                            
   0ee1   26                dec R6                          ;reset R6 to variableNode
   0ee2   26                dec R6
                            
   0ee3   46                lda R6                          ;load address and store it to VARLIST_FIRSTNODE
   0ee4   55                str R5
   0ee5   15                inc R5
                            
   0ee6   46                lda R6
   0ee7   55                str R5
   0ee8   15                inc R5
                            
   0ee9   26                dec R6                          ;reset R6 to variableNode
   0eea   26                dec R6
                            
   0eeb   46                lda R6                          ;load address and store it to VARLIST_LASTNODE
   0eec   55                str R5
   0eed   15                inc R5
                            
   0eee   46                lda R6
   0eef   55                str R5
   0ef0   15                inc R5
                            
   0ef1   c0 0f 06          lbr LET_STATEMENT_END
                        
   0ef4                 LET_STATEMENT_FREENODE
   0ef4   25                dec R5
   0ef5   25                dec R5
   0ef6   25                dec R5
   0ef7   25                dec R5
                            
   0ef8   45                lda R5
   0ef9   a4                plo R4
   0efa   45                lda R5
   0efb   b4                phi R4
                            
   0efc   f8 ea             ldi DYN_MEMORY_FREE.0         ;call DYN_MEMORY_FREE
   0efe   ad                plo CALL_REG
   0eff   f8 0c             ldi DYN_MEMORY_FREE.1
   0f01   bd                phi CALL_REG
                            
   0f02   f8 00             ldi FCALL.0
   0f04   ae                plo FCALL_REG
   0f05   de                sep FCALL_REG
                            
   0f06                 LET_STATEMENT_END
   0f06   8f                glo STACK_REG
   0f07   fc 05             adi 5
   0f09   af                plo STACK_REG
   0f0a   9f                ghi STACK_REG
   0f0b   7c 00             adci 0
   0f0d   bf                phi STACK_REG
                            
   0f0e   ef                sex STACK_REG
                            
   0f0f   72                ldxa
   0f10   a7                plo R7
   0f11   72                ldxa
   0f12   b7                phi R7
                            
   0f13   72                ldxa
   0f14   a6                plo R6
   0f15   72                ldxa
   0f16   b6                phi R6
                            
   0f17   72                ldxa
   0f18   a5                plo R5
   0f19   f0                ldx
   0f1a   b5                phi R5
                            
   0f1b   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-HEXVIEWER------------------------------------
                        ;-R4-Start address-----------------------------
                        ;-R5-Count-------------------------------------
   0f1c                 HEX_BASE_SRT
   0f1c   0d 0a 42 61       db "\r\nBase address: 0x",0
   0f20   73 65 20 61   
   0f24   64 64 72 65   
   0f28   73 73 3a 20   
   0f2c   30 78 00      
   0f2f                 HEX_HEADER_STR
   0f2f   0d 0a 0d 0a       db "\r\n\r\nOffset  00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F  String\r\n"
   0f33   4f 66 66 73   
   0f37   65 74 20 20   
   0f3b   30 30 20 30   
   0f3f   31 20 30 32   
   0f43   20 30 33 20   
   0f47   30 34 20 30   
   0f4b   35 20 30 36   
   0f4f   20 30 37 20   
   0f53   30 38 20 30   
   0f57   39 20 30 41   
   0f5b   20 30 42 20   
   0f5f   30 43 20 30   
   0f63   44 20 30 45   
   0f67   20 30 46 20   
   0f6b   20 53 74 72   
   0f6f   69 6e 67 0d   
   0f73   0a            
   0f74   2d 2d 2d 2d       db         "-------------------------------------------------------------------------\r\n",0
   0f78   2d 2d 2d 2d   
   0f7c   2d 2d 2d 2d   
   0f80   2d 2d 2d 2d   
   0f84   2d 2d 2d 2d   
   0f88   2d 2d 2d 2d   
   0f8c   2d 2d 2d 2d   
   0f90   2d 2d 2d 2d   
   0f94   2d 2d 2d 2d   
   0f98   2d 2d 2d 2d   
   0f9c   2d 2d 2d 2d   
   0fa0   2d 2d 2d 2d   
   0fa4   2d 2d 2d 2d   
   0fa8   2d 2d 2d 2d   
   0fac   2d 2d 2d 2d   
   0fb0   2d 2d 2d 2d   
   0fb4   2d 2d 2d 2d   
   0fb8   2d 2d 2d 2d   
   0fbc   2d 0d 0a 00   
                        ;              "0000:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................"
   0fc0                 HEX_LINECNT_SEPARATOR
   0fc0   3a 20 20 20       db ":   ",0
   0fc4   00            
                            
   0fc5                 HEXVIEWER
   0fc5   ef                sex STACK_REG
                            
   0fc6   f8 00             ldi 0
   0fc8   73                stxd
   0fc9   73                stxd
   0fca   94                ghi R4
   0fcb   73                stxd
   0fcc   84                glo R4
   0fcd   73                stxd    ;+17 current address
                            
   0fce   f8 00             ldi 0
   0fd0   73                stxd
   0fd1   73                stxd
   0fd2   94                ghi R4
   0fd3   73                stxd
   0fd4   84                glo R4
   0fd5   73                stxd    ;+13 start address
                            
   0fd6   f8 00             ldi 0
   0fd8   73                stxd
   0fd9   73                stxd
   0fda   95                ghi R5
   0fdb   73                stxd
   0fdc   85                glo R5
   0fdd   73                stxd    ;+9 last address
                            
   0fde   f8 00             ldi 0
   0fe0   73                stxd
   0fe1   73                stxd
   0fe2   73                stxd
   0fe3   73                stxd    ;+5 line counter
                            
   0fe4   73                stxd
   0fe5   73                stxd
   0fe6   73                stxd
   0fe7   73                stxd    ;+1 temp for hex digits
                            
   0fe8   8f                glo STACK_REG
   0fe9   fc 0d             adi 13
   0feb   a4                plo R4
   0fec   9f                ghi STACK_REG
   0fed   7c 00             adci 0
   0fef   b4                phi R4
                            
   0ff0   8f                glo STACK_REG
   0ff1   fc 09             adi 9
   0ff3   a6                plo R6
   0ff4   9f                ghi STACK_REG
   0ff5   7c 00             adci 0
   0ff7   b6                phi R6
                            
   0ff8   e4                sex R4
                            
   0ff9   85                glo R5      ;adding R5 value to start address and store it to last address
   0ffa   f4                add
   0ffb   56                str R6
   0ffc   60                irx
   0ffd   16                inc R6
   0ffe   95                ghi R5
   0fff   74                adc
   1000   56                str R6
   1001   60                irx
   1002   16                inc R6
   1003   f8 00             ldi 0
   1005   74                adc
   1006   56                str R6
                            
   1007   f8 1c             ldi HEX_BASE_SRT.0     ;prepare to print base address
   1009   a6                plo R6
   100a   f8 0f             ldi HEX_BASE_SRT.1
   100c   b6                phi R6
                        	
   100d   f8 52             ldi PRINT.0         ;prepare to call PRINT
   100f   ad                plo CALL_REG
   1010   f8 01             ldi PRINT.1
   1012   bd                phi CALL_REG
                            
   1013   f8 00             ldi FCALL.0
   1015   ae                plo FCALL_REG
   1016   de                sep FCALL_REG
                            
   1017   8f                glo STACK_REG       ;prepare to print the address in hex
   1018   fc 0d             adi 13
   101a   a4                plo R4
   101b   9f                ghi STACK_REG
   101c   7c 00             adci 0
   101e   b4                phi R4
                            
   101f   f8 04             ldi 4               ;with 4 digits
   1021   a5                plo R5
                            
   1022   f8 22             ldi PRINT_HEX.0     ;prepare to call PRINT_HEX
   1024   ad                plo CALL_REG
   1025   f8 04             ldi PRINT_HEX.1
   1027   bd                phi CALL_REG
                            
   1028   f8 00             ldi FCALL.0
   102a   ae                plo FCALL_REG
   102b   de                sep FCALL_REG
                            
   102c   f8 2f             ldi HEX_HEADER_STR.0     ;prepare to print the header
   102e   a6                plo R6
   102f   f8 0f             ldi HEX_HEADER_STR.1
   1031   b6                phi R6
                        	
   1032   f8 52             ldi PRINT.0         ;prepare to call PRINT
   1034   ad                plo CALL_REG
   1035   f8 01             ldi PRINT.1
   1037   bd                phi CALL_REG
                            
   1038   f8 00             ldi FCALL.0
   103a   ae                plo FCALL_REG
   103b   de                sep FCALL_REG
                        
   103c                 HEXVIEWER_MAINLOOP
   103c   8f                glo STACK_REG       ;prepare to print the first address in hex
   103d   fc 05             adi 5
   103f   a4                plo R4
   1040   9f                ghi STACK_REG
   1041   7c 00             adci 0
   1043   b4                phi R4
                            
   1044   f8 04             ldi 4               ;with 4 digits
   1046   a5                plo R5
                            
   1047   f8 22             ldi PRINT_HEX.0     ;prepare to call PRINT_HEX
   1049   ad                plo CALL_REG
   104a   f8 04             ldi PRINT_HEX.1
   104c   bd                phi CALL_REG
                            
   104d   f8 00             ldi FCALL.0
   104f   ae                plo FCALL_REG
   1050   de                sep FCALL_REG
                            
   1051   f8 c0             ldi HEX_LINECNT_SEPARATOR.0     ;prepare to print address separator
   1053   a6                plo R6
   1054   f8 0f             ldi HEX_LINECNT_SEPARATOR.1
   1056   b6                phi R6
                        	
   1057   f8 52             ldi PRINT.0         ;prepare to call PRINT
   1059   ad                plo CALL_REG
   105a   f8 01             ldi PRINT.1
   105c   bd                phi CALL_REG
                            
   105d   f8 00             ldi FCALL.0
   105f   ae                plo FCALL_REG
   1060   de                sep FCALL_REG
                            
   1061   f8 10             ldi 16      ;set R8 low to 16 for counting the bytes
   1063   a8                plo R8
                           
   1064                 HEXVIEWER_PRINT_HEX_LOOP
   1064   8f                glo STACK_REG       ;set R4 pointer to current address
   1065   fc 11             adi 17
   1067   a4                plo R4
   1068   9f                ghi STACK_REG
   1069   7c 00             adci 0
   106b   b4                phi R4
                            
   106c   8f                glo STACK_REG       ;set R5 pointer to last address
   106d   fc 09             adi 9
   106f   a5                plo R5
   1070   9f                ghi STACK_REG
   1071   7c 00             adci 0
   1073   b5                phi R5
                        
   1074   e4                sex R4          ;check if current address is >= last address
                            
   1075   45                lda R5
   1076   f5                sd
   1077   60                irx
                            
   1078   45                lda R5
   1079   75                sdb
   107a   60                irx
                            
   107b   45                lda R5
   107c   75                sdb
   107d   60                irx
                            
   107e   05                ldn R5
   107f   75                sdb
                            
   1080   c3 10 a8          lbdf HEXVIEWER_PRINT_HEX_SPACES   ;if current address >= last address then 
                        
   1083   8f                glo STACK_REG       ;set R4 pointer to current address
   1084   fc 11             adi 17
   1086   a4                plo R4
   1087   9f                ghi STACK_REG
   1088   7c 00             adci 0
   108a   b4                phi R4
                            
   108b   44                lda R4              ;get current address and load it in R5
   108c   a5                plo R5
   108d   44                lda R4
   108e   b5                phi R5
                            
   108f   05                ldn R5              ;get data from R5 address
   1090   a5                plo R5              ;store data in R5 low
                            
   1091   8f                glo STACK_REG       ;set R4 pointer to temp
   1092   a4                plo R4
   1093   9f                ghi STACK_REG
   1094   b4                phi R4
   1095   14                inc R4
                            
   1096   85                glo R5              ;get data from R5 low
   1097   54                str R4              ;store data to temp
                           
   1098   f8 02             ldi 2
   109a   a5                plo R5              ;set R5 low to 2 digits
                            
   109b   f8 22             ldi PRINT_HEX.0     ;prepare to call PRINT_HEX
   109d   ad                plo CALL_REG
   109e   f8 04             ldi PRINT_HEX.1
   10a0   bd                phi CALL_REG
                            
   10a1   f8 00             ldi FCALL.0
   10a3   ae                plo FCALL_REG
   10a4   de                sep FCALL_REG
                            
   10a5   c0 10 b8          lbr HEXVIEWER_NEXT_HEX
                            
   10a8                 HEXVIEWER_PRINT_HEX_SPACES
   10a8   f8 c2             ldi HEX_LINECNT_SEPARATOR+2.0     ;prepare to print two space
   10aa   a6                plo R6
   10ab   f8 0f             ldi HEX_LINECNT_SEPARATOR+2.1
   10ad   b6                phi R6
                        	
   10ae   f8 52             ldi PRINT.0         ;prepare to call PRINT
   10b0   ad                plo CALL_REG
   10b1   f8 01             ldi PRINT.1
   10b3   bd                phi CALL_REG
                            
   10b4   f8 00             ldi FCALL.0
   10b6   ae                plo FCALL_REG
   10b7   de                sep FCALL_REG
                        
   10b8                 HEXVIEWER_NEXT_HEX
   10b8   f8 c3             ldi HEX_LINECNT_SEPARATOR+3.0     ;prepare to print a space
   10ba   a6                plo R6
   10bb   f8 0f             ldi HEX_LINECNT_SEPARATOR+3.1
   10bd   b6                phi R6
                        	
   10be   f8 52             ldi PRINT.0         ;prepare to call PRINT
   10c0   ad                plo CALL_REG
   10c1   f8 01             ldi PRINT.1
   10c3   bd                phi CALL_REG
                            
   10c4   f8 00             ldi FCALL.0
   10c6   ae                plo FCALL_REG
   10c7   de                sep FCALL_REG
                            
   10c8   8f                glo STACK_REG       ;set R4 pointer to current address
   10c9   fc 11             adi 17
   10cb   a4                plo R4
   10cc   9f                ghi STACK_REG
   10cd   7c 00             adci 0
   10cf   b4                phi R4
                            
   10d0   e4                sex R4
   10d1   f8 01             ldi 1
   10d3   f4                add
   10d4   54                str R4
   10d5   60                irx
                            
   10d6   f8 00             ldi 0
   10d8   74                adc
   10d9   54                str R4
   10da   60                irx
                            
   10db   f8 00             ldi 0
   10dd   74                adc
   10de   54                str R4
   10df   60                irx
                            
   10e0   f8 00             ldi 0
   10e2   74                adc
   10e3   54                str R4
                            
   10e4   28                dec R8
   10e5   88                glo R8
   10e6   ca 10 64          lbnz HEXVIEWER_PRINT_HEX_LOOP
                            
   10e9   f8 c3             ldi HEX_LINECNT_SEPARATOR+3.0     ;prepare to print a space
   10eb   a6                plo R6
   10ec   f8 0f             ldi HEX_LINECNT_SEPARATOR+3.1
   10ee   b6                phi R6
                        	
   10ef   f8 52             ldi PRINT.0         ;prepare to call PRINT
   10f1   ad                plo CALL_REG
   10f2   f8 01             ldi PRINT.1
   10f4   bd                phi CALL_REG
                            
   10f5   f8 00             ldi FCALL.0
   10f7   ae                plo FCALL_REG
   10f8   de                sep FCALL_REG
                            
   10f9   8f                glo STACK_REG       ;set R4 pointer to current address
   10fa   fc 11             adi 17
   10fc   a4                plo R4
   10fd   9f                ghi STACK_REG
   10fe   7c 00             adci 0
   1100   b4                phi R4
                            
   1101   8f                glo STACK_REG       ;set R5 pointer to start address
   1102   fc 0d             adi 13
   1104   a5                plo R5
   1105   9f                ghi STACK_REG
   1106   7c 00             adci 0
   1108   b5                phi R5
                            
   1109   e5                sex R5
                            
   110a   72                ldxa
   110b   54                str R4
   110c   14                inc R4
                            
   110d   72                ldxa
   110e   54                str R4
   110f   14                inc R4
                            
   1110   72                ldxa
   1111   54                str R4
   1112   14                inc R4
                            
   1113   72                ldxa
   1114   54                str R4
                            
   1115   f8 10             ldi 16      ;set R8 low to 16 for counting the bytes
   1117   a8                plo R8
                        
   1118                 HEXVIEWER_PRINT_STR_LOOP
   1118   8f                glo STACK_REG       ;set R4 pointer to current address
   1119   fc 11             adi 17
   111b   a4                plo R4
   111c   9f                ghi STACK_REG
   111d   7c 00             adci 0
   111f   b4                phi R4
                            
   1120   8f                glo STACK_REG       ;set R5 pointer to last address
   1121   fc 09             adi 9
   1123   a5                plo R5
   1124   9f                ghi STACK_REG
   1125   7c 00             adci 0
   1127   b5                phi R5
                        
   1128   e4                sex R4          ;check if current address is <= last address
                            
   1129   45                lda R5
   112a   f5                sd
   112b   60                irx
                            
   112c   45                lda R5
   112d   75                sdb
   112e   60                irx
                            
   112f   45                lda R5
   1130   75                sdb
   1131   60                irx
                            
   1132   05                ldn R5
   1133   75                sdb
                            
   1134   c3 11 6a          lbdf HEXVIEWER_PRINT_STR_SPACE   ;if current address >= last address then 
                            
   1137   8f                glo STACK_REG       ;set R4 pointer to current address
   1138   fc 11             adi 17
   113a   a4                plo R4
   113b   9f                ghi STACK_REG
   113c   7c 00             adci 0
   113e   b4                phi R4
                            
   113f   44                lda R4              ;get current address and load it in R5
   1140   a5                plo R5
   1141   44                lda R4
   1142   b5                phi R5
                            
   1143   05                ldn R5              ;get data from R5 address
   1144   a5                plo R5              ;store data in R5 low
                            
   1145   ff 20             smi 32
   1147   3b 5b             bm HEXVIEWER_PRINT_STR_DOT
   1149   ff 5f             smi 95
   114b   33 5b             bpz HEXVIEWER_PRINT_STR_DOT
                            
   114d   85                glo R5
   114e   b4                phi R4
                            
   114f   f8 13             ldi SERIAL_SEND_START.0         ;prepare to call SERIAL_SEND_START to send one char
   1151   ad                plo CALL_REG
   1152   f8 01             ldi SERIAL_SEND_START.1
   1154   bd                phi CALL_REG
                            
   1155   f8 00             ldi FCALL.0
   1157   ae                plo FCALL_REG
   1158   de                sep FCALL_REG
                            
   1159   30 77             br HEXVIEWER_NEXT_STR
                            
   115b                 HEXVIEWER_PRINT_STR_DOT
   115b   f8 2e             ldi 46
   115d   b4                phi R4
                            
   115e   f8 13             ldi SERIAL_SEND_START.0         ;prepare to call SERIAL_SEND_START to send one char
   1160   ad                plo CALL_REG
   1161   f8 01             ldi SERIAL_SEND_START.1
   1163   bd                phi CALL_REG
                            
   1164   f8 00             ldi FCALL.0
   1166   ae                plo FCALL_REG
   1167   de                sep FCALL_REG
                            
   1168   30 77             br HEXVIEWER_NEXT_STR
                        
   116a                 HEXVIEWER_PRINT_STR_SPACE
   116a   f8 20             ldi 32
   116c   b4                phi R4
                            
   116d   f8 13             ldi SERIAL_SEND_START.0         ;prepare to call SERIAL_SEND_START to send one char
   116f   ad                plo CALL_REG
   1170   f8 01             ldi SERIAL_SEND_START.1
   1172   bd                phi CALL_REG
                            
   1173   f8 00             ldi FCALL.0
   1175   ae                plo FCALL_REG
   1176   de                sep FCALL_REG
                            
   1177                 HEXVIEWER_NEXT_STR
   1177   8f                glo STACK_REG       ;set R4 pointer to current address
   1178   fc 11             adi 17
   117a   a4                plo R4
   117b   9f                ghi STACK_REG
   117c   7c 00             adci 0
   117e   b4                phi R4
                            
   117f   e4                sex R4
   1180   f8 01             ldi 1
   1182   f4                add
   1183   54                str R4
   1184   60                irx
                            
   1185   f8 00             ldi 0
   1187   74                adc
   1188   54                str R4
   1189   60                irx
                            
   118a   f8 00             ldi 0
   118c   74                adc
   118d   54                str R4
   118e   60                irx
                            
   118f   f8 00             ldi 0
   1191   74                adc
   1192   54                str R4
                            
   1193   28                dec R8
   1194   88                glo R8
   1195   ca 11 18          lbnz HEXVIEWER_PRINT_STR_LOOP
                            
   1198   f8 dc             ldi NEW_LINE.0     ;prepare to print a space
   119a   a6                plo R6
   119b   f8 15             ldi NEW_LINE.1
   119d   b6                phi R6
                        	
   119e   f8 52             ldi PRINT.0         ;prepare to call PRINT
   11a0   ad                plo CALL_REG
   11a1   f8 01             ldi PRINT.1
   11a3   bd                phi CALL_REG
                            
   11a4   f8 00             ldi FCALL.0
   11a6   ae                plo FCALL_REG
   11a7   de                sep FCALL_REG
                            
   11a8   8f                glo STACK_REG       ;set R4 pointer to current address
   11a9   fc 11             adi 17
   11ab   a4                plo R4
   11ac   9f                ghi STACK_REG
   11ad   7c 00             adci 0
   11af   b4                phi R4
                            
   11b0   8f                glo STACK_REG       ;set R5 pointer to last address
   11b1   fc 09             adi 9
   11b3   a5                plo R5
   11b4   9f                ghi STACK_REG
   11b5   7c 00             adci 0
   11b7   b5                phi R5
                        
   11b8   e4                sex R4          ;check if current address is >= last address
                            
   11b9   45                lda R5
   11ba   f5                sd
   11bb   60                irx
                            
   11bc   45                lda R5
   11bd   75                sdb
   11be   60                irx
                            
   11bf   45                lda R5
   11c0   75                sdb
   11c1   60                irx
                            
   11c2   05                ldn R5
   11c3   75                sdb
                            
   11c4   c3 12 02          lbdf HEXVIEWER_END
                            
   11c7   8f                glo STACK_REG       ;set R4 pointer to line counter
   11c8   fc 05             adi 5
   11ca   a4                plo R4
   11cb   9f                ghi STACK_REG
   11cc   7c 00             adci 0
   11ce   b4                phi R4
                            
   11cf   e4                sex R4
                            
   11d0   f8 10             ldi 16
   11d2   f4                add
   11d3   54                str R4
   11d4   60                irx
                            
   11d5   f8 00             ldi 0
   11d7   74                adc
   11d8   54                str R4
   11d9   60                irx
                            
   11da   f8 00             ldi 0
   11dc   74                adc
   11dd   54                str R4
   11de   60                irx
                            
   11df   f8 00             ldi 0
   11e1   74                adc
   11e2   54                str R4
                            
   11e3   8f                glo STACK_REG       ;set R4 pointer to current address
   11e4   fc 11             adi 17
   11e6   a4                plo R4
   11e7   9f                ghi STACK_REG
   11e8   7c 00             adci 0
   11ea   b4                phi R4
                            
   11eb   8f                glo STACK_REG       ;set R5 pointer to start address
   11ec   fc 0d             adi 13
   11ee   a5                plo R5
   11ef   9f                ghi STACK_REG
   11f0   7c 00             adci 0
   11f2   b5                phi R5
                            
   11f3   e4                sex R4
                            
   11f4   72                ldxa
   11f5   55                str R5
   11f6   15                inc R5
                            
   11f7   72                ldxa
   11f8   55                str R5
   11f9   15                inc R5
                            
   11fa   72                ldxa
   11fb   55                str R5
   11fc   15                inc R5
                            
   11fd   72                ldxa
   11fe   55                str R5
                            
   11ff   c0 10 3c          lbr HEXVIEWER_MAINLOOP
                        
   1202                 HEXVIEWER_END
   1202   8f                glo STACK_REG
   1203   fc 14             adi 20
   1205   af                plo STACK_REG
   1206   9f                ghi STACK_REG
   1207   7c 00             adci 0
   1209   bf                phi STACK_REG
                            
   120a   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-DYN MEMORY ALLOC CALLER----------------------
   120b                 DYN_MEMORY_ALLOC_CALLER_STR1
   120b   20 62 79 74       db " bytes of memory allocated at memory address ",0," (0x",0,")\r\n",0
   120f   65 73 20 6f   
   1213   66 20 6d 65   
   1217   6d 6f 72 79   
   121b   20 61 6c 6c   
   121f   6f 63 61 74   
   1223   65 64 20 61   
   1227   74 20 6d 65   
   122b   6d 6f 72 79   
   122f   20 61 64 64   
   1233   72 65 73 73   
   1237   20 00 20 28   
   123b   30 78 00 29   
   123f   0d 0a 00      
   1242                 DYN_MEMORY_ALLOC_CALLER_STR2
   1242   4f 75 74 20       db "Out of memory!\r\n",0
   1246   6f 66 20 6d   
   124a   65 6d 6f 72   
   124e   79 21 0d 0a   
   1252   00            
                        
   1253                 DYN_MEMORY_ALLOC_CALLER
   1253   ef                sex STACK_REG
                            
   1254   f8 00             ldi 0
   1256   73                stxd
   1257   73                stxd
   1258   73                stxd
   1259   73                stxd                        ;+5 address
                            
   125a   73                stxd
   125b   73                stxd
   125c   73                stxd
   125d   73                stxd                        ;+1 size
                            
   125e   8f                glo STACK_REG               ;set R5 pointer to size
   125f   a5                plo R5
   1260   9f                ghi STACK_REG
   1261   b5                phi R5
   1262   15                inc R5
                            
   1263   f8 f3             ldi EXPRESSION.0            ;evaluate expression
   1265   ad                plo CALL_REG
   1266   f8 08             ldi EXPRESSION.1
   1268   bd                phi CALL_REG
                            
   1269   f8 00             ldi FCALL.0
   126b   ae                plo FCALL_REG
   126c   de                sep FCALL_REG
                            
   126d   8f                glo STACK_REG               ;set R5 pointer to size
   126e   a5                plo R5
   126f   9f                ghi STACK_REG
   1270   b5                phi R5
   1271   15                inc R5
                            
   1272   45                lda R5                      ;R4 = size
   1273   a4                plo R4
   1274   45                lda R5
   1275   b4                phi R4
                            
   1276   f8 85             ldi DYN_MEMORY_ALLOC.0      ;call memory allocation
   1278   ad                plo CALL_REG
   1279   f8 0b             ldi DYN_MEMORY_ALLOC.1
   127b   bd                phi CALL_REG
                            
   127c   f8 00             ldi FCALL.0
   127e   ae                plo FCALL_REG
   127f   de                sep FCALL_REG
                            
   1280   8a                glo R10                                 ;check if R10 has a value, if it is 0 then it failed
   1281   ca 12 9b          lbnz DYN_MEMORY_ALLOC_CALLER_SUCCESS
   1284   9a                ghi R10
   1285   ca 12 9b          lbnz DYN_MEMORY_ALLOC_CALLER_SUCCESS
                            
   1288                 DYN_MEMORY_ALLOC_CALLER_FAIL
   1288   f8 42             ldi DYN_MEMORY_ALLOC_CALLER_STR2.0      ;print out of memory
   128a   a6                plo R6
   128b   f8 12             ldi DYN_MEMORY_ALLOC_CALLER_STR2.1
   128d   b6                phi R6
                            
   128e   f8 52             ldi PRINT.0                             ;prepare to call PRINT
   1290   ad                plo CALL_REG
   1291   f8 01             ldi PRINT.1
   1293   bd                phi CALL_REG
                            
   1294   f8 00             ldi FCALL.0
   1296   ae                plo FCALL_REG
   1297   de                sep FCALL_REG                           ;call PRINT
                        	
   1298   c0 13 05          lbr DYN_MEMORY_ALLOC_CALLER_END         ;return
                        
   129b                 DYN_MEMORY_ALLOC_CALLER_SUCCESS
   129b   8f                glo STACK_REG                           ;set R5 pointer to address
   129c   fc 05             adi 5
   129e   a4                plo R4
   129f   9f                ghi STACK_REG
   12a0   7c 00             adci 0
   12a2   b4                phi R4
                            
   12a3   8a                glo R10                                 ;copy R10 value to address
   12a4   54                str R4
   12a5   14                inc R4
                            
   12a6   9a                ghi R10
   12a7   54                str R4
                            
   12a8   8f                glo STACK_REG                           ;set R4 pointor to size
   12a9   a4                plo R4
   12aa   9f                ghi STACK_REG
   12ab   b4                phi R4
   12ac   14                inc R4
                            
   12ad   f8 ae             ldi PRINT_DEC.0                         ;print size in decimal
   12af   ad                plo CALL_REG
   12b0   f8 04             ldi PRINT_DEC.1
   12b2   bd                phi CALL_REG
                            
   12b3   f8 00             ldi FCALL.0
   12b5   ae                plo FCALL_REG
   12b6   de                sep FCALL_REG
                            
   12b7   f8 0b             ldi DYN_MEMORY_ALLOC_CALLER_STR1.0      ;print the first part of the allocation message
   12b9   a6                plo R6
   12ba   f8 12             ldi DYN_MEMORY_ALLOC_CALLER_STR1.1
   12bc   b6                phi R6
                            
   12bd   f8 52             ldi PRINT.0                             ;prepare to call PRINT
   12bf   ad                plo CALL_REG    
   12c0   f8 01             ldi PRINT.1
   12c2   bd                phi CALL_REG
                            
   12c3   f8 00             ldi FCALL.0
   12c5   ae                plo FCALL_REG
   12c6   de                sep FCALL_REG                           ;call PRINT
                            
   12c7   8f                glo STACK_REG                           ;set R4 pointer to address
   12c8   fc 05             adi 5
   12ca   a4                plo R4
   12cb   9f                ghi STACK_REG
   12cc   7c 00             adci 0
   12ce   b4                phi R4
                            
   12cf   f8 ae             ldi PRINT_DEC.0                         ;print address in decimal
   12d1   ad                plo CALL_REG
   12d2   f8 04             ldi PRINT_DEC.1
   12d4   bd                phi CALL_REG
                            
   12d5   f8 00             ldi FCALL.0
   12d7   ae                plo FCALL_REG
   12d8   de                sep FCALL_REG
                            
   12d9   f8 52             ldi PRINT.0                             ;print the second part of the allocation message
   12db   ad                plo CALL_REG
   12dc   f8 01             ldi PRINT.1
   12de   bd                phi CALL_REG
                            
   12df   f8 00             ldi FCALL.0
   12e1   ae                plo FCALL_REG
   12e2   de                sep FCALL_REG                           ;call PRINT
                            
   12e3   8f                glo STACK_REG                           ;reset R4 pointer to address
   12e4   fc 05             adi 5
   12e6   a4                plo R4
   12e7   9f                ghi STACK_REG
   12e8   7c 00             adci 0
   12ea   b4                phi R4
                            
   12eb   f8 04             ldi 4                                   ;set number of digits to 4
   12ed   a5                plo R5
   12ee   f8 00             ldi 0
   12f0   b5                phi R5
                            
   12f1   f8 22             ldi PRINT_HEX.0                         ;print address in hexadecimal
   12f3   ad                plo CALL_REG
   12f4   f8 04             ldi PRINT_HEX.1
   12f6   bd                phi CALL_REG
                            
   12f7   f8 00             ldi FCALL.0
   12f9   ae                plo FCALL_REG
   12fa   de                sep FCALL_REG
                            
   12fb   f8 52             ldi PRINT.0                             ;print the last part of the allocation message
   12fd   ad                plo CALL_REG
   12fe   f8 01             ldi PRINT.1
   1300   bd                phi CALL_REG
                            
   1301   f8 00             ldi FCALL.0
   1303   ae                plo FCALL_REG
   1304   de                sep FCALL_REG                           ;call PRINT
                        
   1305                 DYN_MEMORY_ALLOC_CALLER_END
   1305   8f                glo STACK_REG
   1306   fc 08             adi 8
   1308   af                plo STACK_REG
   1309   9f                ghi STACK_REG
   130a   7c 00             adci 0
   130c   bf                phi STACK_REG
                            
   130d   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-DYN MEMORY FREE CALLER-----------------------
   130e                 DYN_MEMORY_FREE_CALLER_STR1
   130e   41 6c 6c 6f       db "Allocated memory has been freed at address ",0," (0x",0,")\r\n",0
   1312   63 61 74 65   
   1316   64 20 6d 65   
   131a   6d 6f 72 79   
   131e   20 68 61 73   
   1322   20 62 65 65   
   1326   6e 20 66 72   
   132a   65 65 64 20   
   132e   61 74 20 61   
   1332   64 64 72 65   
   1336   73 73 20 00   
   133a   20 28 30 78   
   133e   00 29 0d 0a   
   1342   00            
   1343                 DYN_MEMORY_FREE_CALLER_STR2
   1343   4d 65 6d 6f       db "Memory address is out of the heap range!\r\n",0
   1347   72 79 20 61   
   134b   64 64 72 65   
   134f   73 73 20 69   
   1353   73 20 6f 75   
   1357   74 20 6f 66   
   135b   20 74 68 65   
   135f   20 68 65 61   
   1363   70 20 72 61   
   1367   6e 67 65 21   
   136b   0d 0a 00      
                            
   136e                 DYN_MEMORY_FREE_CALLER
   136e   ef                sex STACK_REG
                            
   136f   f8 00             ldi 0
   1371   73                stxd
   1372   73                stxd
   1373   73                stxd
   1374   73                stxd                    ;+1 address
                            
   1375   8f                glo STACK_REG
   1376   a5                plo R5
   1377   9f                ghi STACK_REG
   1378   b5                phi R5
   1379   15                inc R5
                            
   137a   f8 f3             ldi EXPRESSION.0
   137c   ad                plo CALL_REG
   137d   f8 08             ldi EXPRESSION.1
   137f   bd                phi CALL_REG
                            
   1380   f8 00             ldi FCALL.0
   1382   ae                plo FCALL_REG
   1383   de                sep FCALL_REG
                            
   1384   8f                glo STACK_REG
   1385   a5                plo R5
   1386   9f                ghi STACK_REG
   1387   b5                phi R5
   1388   15                inc R5
                            
   1389   e5                sex R5
                            
   138a   f8 10             ldi HEAP_START.0
   138c   f5                sd
   138d   60                irx
   138e   f8 21             ldi HEAP_START.1
   1390   75                sdb
                            
   1391   25                dec R5
                            
   1392   cb 13 f8          lbnf DYN_MEMORY_FREE_CALLER_OUTOFRANGE
                            
   1395   f8 00             ldi HEAP_END.0
   1397   f5                sd
   1398   60                irx
   1399   f8 fc             ldi HEAP_END.1
   139b   75                sdb
                            
   139c   25                dec R5
                            
   139d   c3 13 f8          lbdf DYN_MEMORY_FREE_CALLER_OUTOFRANGE
                            
   13a0   72                ldxa
   13a1   a4                plo R4
   13a2   f0                ldx
   13a3   b4                phi R4
                            
   13a4   25                dec R5
                            
   13a5   f8 ea             ldi DYN_MEMORY_FREE.0                 ;call free
   13a7   ad                plo CALL_REG
   13a8   f8 0c             ldi DYN_MEMORY_FREE.1
   13aa   bd                phi CALL_REG
                            
   13ab   f8 00             ldi FCALL.0
   13ad   ae                plo FCALL_REG
   13ae   de                sep FCALL_REG
                            
   13af   f8 0e             ldi DYN_MEMORY_FREE_CALLER_STR1.0
   13b1   a6                plo R6
   13b2   f8 13             ldi DYN_MEMORY_FREE_CALLER_STR1.1
   13b4   b6                phi R6
                            
   13b5   f8 52             ldi PRINT.0                             ;print the success message 1st part
   13b7   ad                plo CALL_REG
   13b8   f8 01             ldi PRINT.1
   13ba   bd                phi CALL_REG
                            
   13bb   f8 00             ldi FCALL.0
   13bd   ae                plo FCALL_REG
   13be   de                sep FCALL_REG
                            
   13bf   85                glo R5
   13c0   a4                plo R4
   13c1   95                ghi R5
   13c2   b4                phi R4
                            
   13c3   f8 ae             ldi PRINT_DEC.0                         ;print address in decimal
   13c5   ad                plo CALL_REG
   13c6   f8 04             ldi PRINT_DEC.1
   13c8   bd                phi CALL_REG
                            
   13c9   f8 00             ldi FCALL.0
   13cb   ae                plo FCALL_REG
   13cc   de                sep FCALL_REG
                            
   13cd   f8 52             ldi PRINT.0                             ;print the success message 2nd part
   13cf   ad                plo CALL_REG
   13d0   f8 01             ldi PRINT.1
   13d2   bd                phi CALL_REG
                            
   13d3   f8 00             ldi FCALL.0
   13d5   ae                plo FCALL_REG
   13d6   de                sep FCALL_REG
                            
   13d7   85                glo R5
   13d8   a4                plo R4
   13d9   95                ghi R5
   13da   b4                phi R4
                            
   13db   f8 04             ldi 4
   13dd   a5                plo R5
   13de   f8 00             ldi 0
   13e0   b5                phi R5
                            
   13e1   f8 22             ldi PRINT_HEX.0                         ;print address in hexadecimal
   13e3   ad                plo CALL_REG
   13e4   f8 04             ldi PRINT_HEX.1
   13e6   bd                phi CALL_REG
                            
   13e7   f8 00             ldi FCALL.0
   13e9   ae                plo FCALL_REG
   13ea   de                sep FCALL_REG
                            
   13eb   f8 52             ldi PRINT.0                             ;print the success message 2nd part
   13ed   ad                plo CALL_REG
   13ee   f8 01             ldi PRINT.1
   13f0   bd                phi CALL_REG
                            
   13f1   f8 00             ldi FCALL.0
   13f3   ae                plo FCALL_REG
   13f4   de                sep FCALL_REG
                            
   13f5   c0 14 08          lbr DYN_MEMORY_FREE_CALLER_END
                            
   13f8                 DYN_MEMORY_FREE_CALLER_OUTOFRANGE
   13f8   f8 43             ldi DYN_MEMORY_FREE_CALLER_STR2.0
   13fa   a6                plo R6
   13fb   f8 13             ldi DYN_MEMORY_FREE_CALLER_STR2.1
   13fd   b6                phi R6
                            
   13fe   f8 52             ldi PRINT.0                             ;print the out of range message
   1400   ad                plo CALL_REG
   1401   f8 01             ldi PRINT.1
   1403   bd                phi CALL_REG
                            
   1404   f8 00             ldi FCALL.0
   1406   ae                plo FCALL_REG
   1407   de                sep FCALL_REG                           ;call PRINT
                            
   1408                 DYN_MEMORY_FREE_CALLER_END
   1408   8f                glo STACK_REG
   1409   fc 04             adi 4
   140b   af                plo STACK_REG
   140c   9f                ghi STACK_REG
   140d   7c 00             adci 0
   140f   bf                phi STACK_REG
                            
   1410   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-HEXVIEW_CALLER-------------------------------
   1411                 HEXVIEW_CALLER
   1411   ef                sex STACK_REG
                            
   1412   f8 00             ldi 0
   1414   73                stxd
   1415   73                stxd
   1416   73                stxd
   1417   73                stxd    ;+5 first arg
                            
   1418   73                stxd
   1419   73                stxd
   141a   f8 01             ldi 1
   141c   73                stxd
   141d   f8 00             ldi 0
   141f   73                stxd    ;+1 second arg
                            
   1420   8f                glo STACK_REG
   1421   fc 05             adi 5
   1423   a5                plo R5
   1424   9f                ghi STACK_REG
   1425   7c 00             adci 0
   1427   b5                phi R5
                            
   1428   f8 f3             ldi EXPRESSION.0
   142a   ad                plo CALL_REG
   142b   f8 08             ldi EXPRESSION.1
   142d   bd                phi CALL_REG
                            
   142e   f8 00             ldi FCALL.0
   1430   ae                plo FCALL_REG
   1431   de                sep FCALL_REG
                            
   1432   44                lda R4
   1433   fb 2c             xri 44
   1435   c2 14 4c          lbz HEXVIEW_CALLER_NEXTARG
   1438   24                dec R4
   1439   44                lda R4
   143a   c2 14 5b          lbz HEXVIEW_CALLER_EXEC
   143d   24                dec R4
                            
   143e   04                ldn R4
   143f   b4                phi R4
                            
   1440   f8 13             ldi SERIAL_SEND_START.0
   1442   ad                plo CALL_REG
   1443   f8 01             ldi SERIAL_SEND_START.1
   1445   bd                phi CALL_REG
                            
   1446   f8 00             ldi FCALL.0
   1448   ae                plo FCALL_REG
   1449   de                sep FCALL_REG
                            
   144a   30 7a             br HEXVIEW_CALLER_END
                            
   144c                 HEXVIEW_CALLER_NEXTARG
   144c   8f                glo STACK_REG
   144d   a5                plo R5
   144e   9f                ghi STACK_REG
   144f   b5                phi R5
   1450   15                inc R5
                            
   1451   f8 f3             ldi EXPRESSION.0
   1453   ad                plo CALL_REG
   1454   f8 08             ldi EXPRESSION.1
   1456   bd                phi CALL_REG
                            
   1457   f8 00             ldi FCALL.0
   1459   ae                plo FCALL_REG
   145a   de                sep FCALL_REG
                            
   145b                 HEXVIEW_CALLER_EXEC
   145b   8f                glo STACK_REG
   145c   fc 05             adi 5
   145e   a5                plo R5
   145f   9f                ghi STACK_REG
   1460   7c 00             adci 0
   1462   b5                phi R5
                            
   1463   45                lda R5
   1464   a4                plo R4
   1465   45                lda R5
   1466   b4                phi R4
                            
   1467   8f                glo STACK_REG
   1468   a6                plo R6
   1469   9f                ghi STACK_REG
   146a   b6                phi R6
   146b   16                inc R6
                            
   146c   46                lda R6
   146d   a5                plo R5
   146e   46                lda R6
   146f   b5                phi R5
                            
   1470   f8 c5             ldi HEXVIEWER.0
   1472   ad                plo CALL_REG
   1473   f8 0f             ldi HEXVIEWER.1
   1475   bd                phi CALL_REG
                            
   1476   f8 00             ldi FCALL.0
   1478   ae                plo FCALL_REG
   1479   de                sep FCALL_REG
                            
   147a                 HEXVIEW_CALLER_END
   147a   8f                glo STACK_REG
   147b   fc 08             adi 8
   147d   af                plo STACK_REG
   147e   9f                ghi STACK_REG
   147f   7c 00             adci 0
   1481   bf                phi STACK_REG
                            
   1482   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-TEST FUNCTION--------------------------------
   1483                 TEST_STR1
   1483   52 65 73 75       db "Result: ",0
   1487   6c 74 3a 20   
   148b   00            
                        
   148c                 FUNC_TEST
   148c   ef                sex STACK_REG
                            
   148d   f8 00             ldi 0
   148f   73                stxd
   1490   73                stxd
   1491   73                stxd
   1492   73                stxd    ;+1 result
                            
   1493   8f                glo STACK_REG
   1494   a5                plo R5
   1495   9f                ghi STACK_REG
   1496   b5                phi R5
   1497   15                inc R5
                            
   1498   f8 f3             ldi EXPRESSION.0
   149a   ad                plo CALL_REG
   149b   f8 08             ldi EXPRESSION.1
   149d   bd                phi CALL_REG
                            
   149e   f8 00             ldi FCALL.0
   14a0   ae                plo FCALL_REG
   14a1   de                sep FCALL_REG
                            
   14a2   8f                glo STACK_REG
   14a3   a4                plo R4
   14a4   9f                ghi STACK_REG
   14a5   b4                phi R4
   14a6   14                inc R4
                        
   14a7   f8 00             ldi 0
   14a9   a5                plo R5
                            
   14aa   f8 ae             ldi PRINT_DEC.0     ;prepare to print the Decimal result.
   14ac   ad                plo CALL_REG
   14ad   f8 04             ldi PRINT_DEC.1
   14af   bd                phi CALL_REG
                            
   14b0   f8 00             ldi FCALL.0
   14b2   ae                plo FCALL_REG
   14b3   de                sep FCALL_REG
                            
   14b4   f8 dc             ldi NEW_LINE.0  ;print newline
   14b6   a6                plo R6
   14b7   f8 15             ldi NEW_LINE.1
   14b9   b6                phi R6
                        	
   14ba   f8 52             ldi PRINT.0     ;prepare to call PRINT
   14bc   ad                plo CALL_REG
   14bd   f8 01             ldi PRINT.1
   14bf   bd                phi CALL_REG
                            
   14c0   f8 00             ldi FCALL.0
   14c2   ae                plo FCALL_REG
   14c3   de                sep FCALL_REG
                            
   14c4   8f                glo STACK_REG
   14c5   fc 04             adi 4
   14c7   af                plo STACK_REG
   14c8   9f                ghi STACK_REG
   14c9   7c 00             adci 0
   14cb   bf                phi STACK_REG
                            
   14cc   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-READ-VAR-CALLER------------------------------
   14cd                 READ_VAR_CALLER
   14cd   ef                sex STACK_REG
                        
   14ce   f8 00             ldi 0
   14d0   73                stxd
   14d1   73                stxd
   14d2   73                stxd
   14d3   73                stxd            ;+1 result
                        
   14d4                 READ_VAR_CALLER_SKIPSPACES
   14d4   44                lda R4
   14d5   fb 20             xri 32
   14d7   32 d4             bz READ_VAR_CALLER_SKIPSPACES
                        
   14d9   24                dec R4
                        
   14da   8f                glo STACK_REG
   14db   a5                plo R5
   14dc   9f                ghi STACK_REG
   14dd   b5                phi R5
   14de   15                inc R5
                        
   14df   f8 b0             ldi READ_VAR.0
   14e1   ad                plo CALL_REG
   14e2   f8 06             ldi READ_VAR.1
   14e4   bd                phi CALL_REG
                            
   14e5   f8 00             ldi FCALL.0
   14e7   ae                plo FCALL_REG
   14e8   de                sep FCALL_REG
                        
   14e9   8f                glo STACK_REG
   14ea   a4                plo R4
   14eb   9f                ghi STACK_REG
   14ec   b4                phi R4
   14ed   14                inc R4
                        
   14ee   f8 00             ldi 0
   14f0   a5                plo R5
                            
   14f1   f8 ae             ldi PRINT_DEC.0     ;prepare to print the Decimal result.
   14f3   ad                plo CALL_REG
   14f4   f8 04             ldi PRINT_DEC.1
   14f6   bd                phi CALL_REG
                        
   14f7   f8 00             ldi FCALL.0
   14f9   ae                plo FCALL_REG
   14fa   de                sep FCALL_REG
                        
   14fb                 READ_VAR_CALLER_END
   14fb   1f                inc STACK_REG
   14fc   1f                inc STACK_REG
   14fd   1f                inc STACK_REG
   14fe   1f                inc STACK_REG
                        
   14ff   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-COMMAND-CHECK--------------------------------
                        ;-R4-input string------------------------------
   1500                 COMMAND_CHECK
   1500   f8 19             ldi COMMAND_FUNC_LIST.0
   1502   a5                plo R5
   1503   f8 16             ldi COMMAND_FUNC_LIST.1
   1505   b5                phi R5
                            
   1506   f8 df             ldi COMMAND_LIST.0
   1508   a9                plo R9
   1509   f8 15             ldi COMMAND_LIST.1
   150b   b9                phi R9
                            
   150c   84                glo R4
   150d   a6                plo R6
   150e   94                ghi R4
   150f   b6                phi R6
                            
   1510                 COMMAND_CHECK_GOTOSPACE
   1510   46                lda R6
   1511   c2 15 1c          lbz COMMAND_CHECK_INSERTZERO
   1514   fb 20             xri 32
   1516   c2 15 1d          lbz COMMAND_CHECK_REPLACESPACE
   1519   c0 15 10          lbr COMMAND_CHECK_GOTOSPACE
                            
   151c                 COMMAND_CHECK_INSERTZERO
   151c   56                str R6
   151d                 COMMAND_CHECK_REPLACESPACE
   151d   26                dec R6
   151e   56                str R6
   151f   16                inc R6
                            
   1520                 COMMAND_CHECK_LOOP
   1520   84                glo R4
   1521   a8                plo R8
   1522   94                ghi R4
   1523   b8                phi R8
                            
   1524   09                ldn R9
   1525   c2 15 4d          lbz COMMAND_CHECK_END
                        
   1528   f8 c0             ldi STR_COMPARATOR.0
   152a   ad                plo CALL_REG
   152b   f8 01             ldi STR_COMPARATOR.1
   152d   bd                phi CALL_REG
                            
   152e   f8 00             ldi FCALL.0
   1530   ae                plo FCALL_REG
   1531   de                sep FCALL_REG
                            
   1532   8a                glo R10
   1533   ca 15 40          lbnz COMMAND_CHECK_EXEC
                            
   1536                 COMMAND_CHECK_STR_END
   1536   09                ldn R9
   1537   19                inc R9
   1538   ca 15 36          lbnz COMMAND_CHECK_STR_END
                            
   153b   15                inc R5
   153c   15                inc R5
   153d   c0 15 20          lbr COMMAND_CHECK_LOOP
                            
   1540                 COMMAND_CHECK_EXEC
   1540   86                glo R6
   1541   a4                plo R4
   1542   96                ghi R6
   1543   b4                phi R4
                            
   1544   45                lda R5
   1545   ad                plo CALL_REG
   1546   05                ldn R5
   1547   bd                phi CALL_REG
                            
   1548   f8 00             ldi FCALL.0
   154a   ae                plo FCALL_REG
   154b   de                sep FCALL_REG
                            
   154c   de                sep RETURN
                            
   154d                 COMMAND_CHECK_END
   154d   f8 27             ldi UNKNOWN_COMMAND.0  ;set the address of the boot msg in R6
   154f   a6                plo R6
   1550   f8 16             ldi UNKNOWN_COMMAND.1
   1552   b6                phi R6
                        	
   1553   f8 52             ldi PRINT.0     ;prepare to call PRINT
   1555   ad                plo CALL_REG
   1556   f8 01             ldi PRINT.1
   1558   bd                phi CALL_REG
                            
   1559   f8 00             ldi FCALL.0
   155b   ae                plo FCALL_REG
   155c   de                sep FCALL_REG   ;call PRINT
                            
   155d   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-MAIN-----------------------------------------
   155e                 MAIN_PROGRAM
   155e   f8 9e             ldi VAR_LIST_INIT.0       ;variable list init
   1560   ad                plo CALL_REG
   1561   f8 0d             ldi VAR_LIST_INIT.1
   1563   bd                phi CALL_REG
                            
   1564   f8 00             ldi FCALL.0
   1566   ae                plo FCALL_REG
   1567   de                sep FCALL_REG
                            
   1568   f8 ee             ldi DYN_MEMORY_INIT.0     ;heap init
   156a   ad                plo CALL_REG
   156b   f8 09             ldi DYN_MEMORY_INIT.1
   156d   bd                phi CALL_REG
                            
   156e   f8 00             ldi FCALL.0
   1570   ae                plo FCALL_REG
   1571   de                sep FCALL_REG   ;call heap init
                            
   1572   f8 b5             ldi BOOT_MSG.0  ;set the address of the boot msg in R6
   1574   a6                plo R6
   1575   f8 15             ldi BOOT_MSG.1
   1577   b6                phi R6
                        	
   1578   f8 52             ldi PRINT.0     ;prepare to call PRINT
   157a   ad                plo CALL_REG
   157b   f8 01             ldi PRINT.1
   157d   bd                phi CALL_REG
                            
   157e   f8 00             ldi FCALL.0
   1580   ae                plo FCALL_REG
   1581   de                sep FCALL_REG   ;call PRINT
                        
   1582                 ASK_INPUT
   1582   f8 00             ldi INPUT_BUFF.0    ;load the address of the buffer to R7
   1584   a7                plo R7
   1585   f8 20             ldi INPUT_BUFF.1
   1587   b7                phi R7
                            
   1588   f8 68             ldi READLINE.0      ;prepare to call READLINE
   158a   ad                plo CALL_REG
   158b   f8 01             ldi READLINE.1
   158d   bd                phi CALL_REG
                            
   158e   f8 00             ldi FCALL.0
   1590   ae                plo FCALL_REG
   1591   de                sep FCALL_REG       ;call READLINE
                            
                            ;Program goes here
   1592   f8 00             ldi INPUT_BUFF.0
   1594   a4                plo R4
   1595   f8 20             ldi INPUT_BUFF.1
   1597   b4                phi R4
                            
   1598   f8 00             ldi COMMAND_CHECK.0      ;prepare to call COMMAND_CHECK
   159a   ad                plo CALL_REG
   159b   f8 15             ldi COMMAND_CHECK.1
   159d   bd                phi CALL_REG
                            
   159e   f8 00             ldi FCALL.0
   15a0   ae                plo FCALL_REG
   15a1   de                sep FCALL_REG
                            ;Program ends here
                            
   15a2   f8 d8             ldi ASK_IN.0        ;load the ASK_IN string's address to R6
   15a4   a6                plo R6
   15a5   f8 15             ldi ASK_IN.1
   15a7   b6                phi R6
                            
   15a8   f8 52             ldi PRINT.0         ;prepare to call PRINT
   15aa   ad                plo CALL_REG
   15ab   f8 01             ldi PRINT.1
   15ad   bd                phi CALL_REG
                            
   15ae   f8 00             ldi FCALL.0
   15b0   ae                plo FCALL_REG
   15b1   de                sep FCALL_REG       ;call PRINT
                        	
   15b2   c0 15 82          lbr ASK_INPUT
                        ;----------------------------------------------
                        
                        ;-CONSTANT DATA--------------------------------
   15b5                 BOOT_MSG
   15b5   5a 4c 45 44       db "ZLED - CDP1802 Terminal.\r\n\r\nREADY\r\n"
   15b9   20 2d 20 43   
   15bd   44 50 31 38   
   15c1   30 32 20 54   
   15c5   65 72 6d 69   
   15c9   6e 61 6c 2e   
   15cd   0d 0a 0d 0a   
   15d1   52 45 41 44   
   15d5   59 0d 0a      
   15d8                 ASK_IN
   15d8   0d 0a 3e 00       db "\r\n>",0
   15dc                 NEW_LINE
   15dc   0d 0a 00          db "\r\n",0
   15df                 COMMAND_LIST
   15df   70 72 69 6e       db "print",0,"let",0,"mem_view",0,"mem_debug",0,"mem_alloc",0,"mem_free",0
   15e3   74 00 6c 65   
   15e7   74 00 6d 65   
   15eb   6d 5f 76 69   
   15ef   65 77 00 6d   
   15f3   65 6d 5f 64   
   15f7   65 62 75 67   
   15fb   00 6d 65 6d   
   15ff   5f 61 6c 6c   
   1603   6f 63 00 6d   
   1607   65 6d 5f 66   
   160b   72 65 65 00   
   160f   72 65 61 64       db "read_var",0,0
   1613   5f 76 61 72   
   1617   00 00         
   1619                 COMMAND_FUNC_LIST
   1619   8c 14             db FUNC_TEST.0,FUNC_TEST.1
   161b   28 0e             db LET_STATEMENT.0,LET_STATEMENT.1
   161d   11 14             db HEXVIEW_CALLER.0,HEXVIEW_CALLER.1
   161f   46 0a             db DYN_MEMORY_DEBUG.0,DYN_MEMORY_DEBUG.1
   1621   53 12             db DYN_MEMORY_ALLOC_CALLER.0,DYN_MEMORY_ALLOC_CALLER.1
   1623   6e 13             db DYN_MEMORY_FREE_CALLER.0,DYN_MEMORY_FREE_CALLER.1
   1625   cd 14             db READ_VAR_CALLER.0,READ_VAR_CALLER.1
   1627                 UNKNOWN_COMMAND
   1627   55 6e 6b 6e       db "Unknown command.\r\n",0
   162b   6f 77 6e 20   
   162f   63 6f 6d 6d   
   1633   61 6e 64 2e   
   1637   0d 0a 00      
   163a                 TEST_RESP
   163a   45 76 65 72       db "Everything is ok!",0
   163e   79 74 68 69   
   1642   6e 67 20 69   
   1646   73 20 6f 6b   
   164a   21 00         
                        
   164c                     end
15d8  ASK_IN        1582  ASK_INPUT     0164  BACKSPACE_ACTION    15b5  BOOT_MSG  
000d  CALL_REG      0283  CARRY_SHIFTING    1500  COMMAND_CHECK    154d  COMMAND_CHECK_END
1540  COMMAND_CHECK_EXEC    1510  COMMAND_CHECK_GOTOSPACE    151c  COMMAND_CHECK_INSERTZERO    1520  COMMAND_CHECK_LOOP
151d  COMMAND_CHECK_REPLACESPACE    1536  COMMAND_CHECK_STR_END    1619  COMMAND_FUNC_LIST    15df  COMMAND_LIST
028d  DIVISION_LOOP    3000  DMA_ADDRESS    0013  DMA_INIT      0000  DMA_REG   
0b85  DYN_MEMORY_ALLOC    1253  DYN_MEMORY_ALLOC_CALLER    1305  DYN_MEMORY_ALLOC_CALLER_END    1288  DYN_MEMORY_ALLOC_CALLER_FAIL
120b  DYN_MEMORY_ALLOC_CALLER_STR1    1242  DYN_MEMORY_ALLOC_CALLER_STR2    129b  DYN_MEMORY_ALLOC_CALLER_SUCCESS    0cd0  DYN_MEMORY_ALLOC_END
0bc1  DYN_MEMORY_ALLOC_MAINLOOP    0c9b  DYN_MEMORY_ALLOC_NEXTADDRESS    0cb5  DYN_MEMORY_ALLOC_NEXTPASS    0c10  DYN_MEMORY_ALLOC_SIZEBIGGER
0bfd  DYN_MEMORY_ALLOC_SIZEEQ    0a46  DYN_MEMORY_DEBUG    0b7c  DYN_MEMORY_DEBUG_END    0b41  DYN_MEMORY_DEBUG_FREE
0a60  DYN_MEMORY_DEBUG_MAINLOOP    0b47  DYN_MEMORY_DEBUG_NEXTADDRESS    0aa3  DYN_MEMORY_DEBUG_PRINT    0a11  DYN_MEMORY_DEBUG_STR
0a38  DYN_MEMORY_DEBUG_STR_FREE    0a3f  DYN_MEMORY_DEBUG_STR_USED    0cea  DYN_MEMORY_FREE    136e  DYN_MEMORY_FREE_CALLER
1408  DYN_MEMORY_FREE_CALLER_END    13f8  DYN_MEMORY_FREE_CALLER_OUTOFRANGE    130e  DYN_MEMORY_FREE_CALLER_STR1    1343  DYN_MEMORY_FREE_CALLER_STR2
0d81  DYN_MEMORY_FREE_END    0d22  DYN_MEMORY_FREE_MERGE    0d42  DYN_MEMORY_FREE_MERGELOOP    0d13  DYN_MEMORY_FREE_NEXTCHECK
0d7a  DYN_MEMORY_FREE_SETPREVIOUS    09ee  DYN_MEMORY_INIT    017a  END_LINE      08f3  EXPRESSION
0928  EXPRESSION_ADD    0962  EXPRESSION_ADD_LOOP    09dd  EXPRESSION_END    0914  EXPRESSION_MAIN
09d9  EXPRESSION_NEXT_CYCLE    0904  EXPRESSION_SKIPSPACES    0981  EXPRESSION_SUB    09bb  EXPRESSION_SUB_LOOP
074e  FACTOR        07cd  FACTOR_END    07f3  FACTOR_FINAL    07e8  FACTOR_INVERTING
075a  FACTOR_MAIN    07be  FACTOR_NEGATE    07c9  FACTOR_NEXT_CYCLE    07a4  FACTOR_PARENTHESIS
07af  FACTOR_PARENTHESIS_SKIPSPACES    0789  FACTOR_READ_DEC    0796  FACTOR_READ_HEX    0100  FCALL     
000e  FCALL_REG     031f  FINAL_CHECK    0343  FINAL_CHECK2    010a  FRETURN   
148c  FUNC_TEST     0db0  GET_STRING    0de3  GET_STRING_ADDLEN    0dee  GET_STRING_ALLOCATE_MEM
0e05  GET_STRING_COPY    0e12  GET_STRING_COPY_LOOP    0e1c  GET_STRING_END    0dc3  GET_STRING_LEN
0de7  GET_STRING_LEN_END    fc00  HEAP_END      2106  HEAP_LASTADDRESS    2110  HEAP_START
0fc5  HEXVIEWER     1202  HEXVIEWER_END    103c  HEXVIEWER_MAINLOOP    10b8  HEXVIEWER_NEXT_HEX
1177  HEXVIEWER_NEXT_STR    1064  HEXVIEWER_PRINT_HEX_LOOP    10a8  HEXVIEWER_PRINT_HEX_SPACES    115b  HEXVIEWER_PRINT_STR_DOT
1118  HEXVIEWER_PRINT_STR_LOOP    116a  HEXVIEWER_PRINT_STR_SPACE    1411  HEXVIEW_CALLER    147a  HEXVIEW_CALLER_END
145b  HEXVIEW_CALLER_EXEC    144c  HEXVIEW_CALLER_NEXTARG    0f1c  HEX_BASE_SRT    0412  HEX_CHARS 
0f2f  HEX_HEADER_STR    0fc0  HEX_LINECNT_SEPARATOR    2000  INPUT_BUFF    01d4  INTEGER_DIV
0224  INTEGER_DIV_INVERT_LOOP1    0234  INTEGER_DIV_NEXT_CHECK    0372  INTEGER_MUL    03d3  INTEGER_MUL_ADD
0409  INTEGER_MUL_END    039f  INTEGER_MUL_LOOP    03dc  INTEGER_MUL_SHIFT    03fd  INTEGER_MUL_SHMULTIPLICAND
03e9  INTEGER_MUL_SHMULTIPLIER    0262  INTEGER_SHIFT_DR    0001  INTP_REG      0002  INTX_REG  
0253  INVERT_LOOP2    0337  INVERT_LOOP3    035e  INVERT_LOOP4    0e28  LET_STATEMENT
0eb7  LET_STATEMENT_ADDNODE    0ea8  LET_STATEMENT_ADDVAR    0e52  LET_STATEMENT_CONTINUE1    0e78  LET_STATEMENT_CONTINUE2
0f06  LET_STATEMENT_END    0e9d  LET_STATEMENT_EXPRESSION    0ed8  LET_STATEMENT_FIRSTNODE    0ef4  LET_STATEMENT_FREENODE
0e8d  LET_STATEMENT_MAINLOOP    0e9a  LET_STATEMENT_NEXTCHARACTER    0e61  LET_STATEMENT_SKIPSPACES    155e  MAIN_PROGRAM
15dc  NEW_LINE      0307  NEXT_BIT      0003  PC_REG        0152  PRINT     
045e  PRINT_CHECK_DIGIT    04ae  PRINT_DEC     0555  PRINT_DEC_END    055e  PRINT_DEC_FINAL
0502  PRINT_DEC_INVER_LOOP    050d  PRINT_DEC_MAIN_LOOP    0461  PRINT_DIGIT_LOOP    0422  PRINT_HEX 
048f  PRINT_HEX_END    0473  PRINT_HEX_SHIFT_LOOP1    0449  PRINT_UNTIL_R    000a  R10       
000b  R11           000c  R12           0004  R4            0005  R5        
0006  R6            0007  R7            0008  R8            0009  R9        
0168  READLINE      018e  READLINE_BACKSPACE    016b  READLINE_LOOP    058b  READ_DEC  
061c  READ_DEC_END    05a5  READ_DEC_MAIN_LOOP    062e  READ_HEX      066a  READ_HEX_CONTINUE
069e  READ_HEX_END    068d  READ_HEX_HEXDIGIT    0696  READ_HEX_HEXDIGITLOWER    064b  READ_HEX_MAINLOOP
0699  READ_HEX_NEXTCHAR    066d  READ_HEX_SHIFTLOOP    06b0  READ_VAR      14cd  READ_VAR_CALLER
14fb  READ_VAR_CALLER_END    14d4  READ_VAR_CALLER_SKIPSPACES    06cc  READ_VAR_CONTINUE    0740  READ_VAR_END
0712  READ_VAR_FOUND    06fe  READ_VAR_NEXTNODE    072b  READ_VAR_NOTFOUND    06de  READ_VAR_SEARCHLOOP
06e5  READ_VAR_SEARCHLOOP_CONTINUE    000e  RETURN        013f  SERIAL_NULL_BIT    012d  SERIAL_READ_START
0139  SERIAL_SAMPLE_BIT    0143  SERIAL_SAVE_BIT    011b  SERIAL_SEND_BIT    0113  SERIAL_SEND_START
0131  SERIAL_WAIT_START    02a5  SHIFTING_Q    0276  SHIFT_DR      0314  SHIFT_SUBTRACTOR
ffff  STACK_ADDRESS    000f  STACK_REG     0000  START         01aa  STORE_CHAR
01c3  STR_CHARCHECK    01c0  STR_COMPARATOR    01c9  STR_EQUAL     01d0  STR_INC   
02fd  SUBTRACT_FOR_REAL    07fc  TERM          0823  TERM_DIVIDE    08e1  TERM_END  
080f  TERM_MAIN     0888  TERM_MULTIPLY    08dd  TERM_NEXT_CYCLE    163a  TEST_RESP 
1483  TEST_STR1     0369  THE_END       02c7  TRY_SUBTRACTING    1627  UNKNOWN_COMMAND
2100  VARLIST_COUNT    2102  VARLIST_FIRSTNODE    2104  VARLIST_LASTNODE    0d9e  VAR_LIST_INIT
0da7  VAR_LIST_INIT_LOOP    
