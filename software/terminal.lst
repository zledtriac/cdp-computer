                        
   0000                 DMA_REG EQU 0
   0001                 INTP_REG EQU 1
   0002                 INTX_REG EQU 2
   0003                 PC_REG EQU 3
   0004                 R4 EQU 4
   0005                 R5 EQU 5
   0006                 R6 EQU 6
   0007                 R7 EQU 7
   0008                 R8 EQU 8
   0009                 R9 EQU 9
   000a                 R10 EQU 10
   000b                 R11 EQU 11
   000c                 R12 EQU 12
   000d                 CALL_REG EQU 13
   000e                 FCALL_REG EQU 14
   000e                 RETURN EQU 14
   000f                 STACK_REG EQU 15
                        
   ffff                 STACK_ADDRESS EQU 0FFFFh
   3000                 DMA_ADDRESS EQU 03000h
                        
   2000                 INPUT_BUFF EQU 02000h
                        
   0000                     org 00h
                        
   0000                 START
   0000   71                dis
   0001   00                idl
                            
   0002   7b                seq     ;set Q output to high
                            
   0003   f8 ff             ldi STACK_ADDRESS.0 ;setup the STACK pointer
   0005   af                plo STACK_REG
   0006   f8 ff             ldi STACK_ADDRESS.1
   0008   bf                phi STACK_REG
                            
   0009   f8 01             ldi FCALL.1         ;setup FCALL
   000b   be                phi FCALL_REG
                            
   000c   f8 13             ldi DMA_INIT.0      ;switch PC to R3 and init DMA
   000e   a3                plo PC_REG
   000f   f8 00             ldi DMA_INIT.1
   0011   b3                phi PC_REG
                            
   0012   d3                sep PC_REG
                            
   0013                 DMA_INIT
   0013   f8 00             ldi DMA_ADDRESS.0   ;setup DMA address
   0015   a0                plo DMA_REG
   0016   f8 30             ldi DMA_ADDRESS.1
   0018   b0                phi DMA_REG
                            
   0019   c0 0d 28          lbr MAIN_PROGRAM
                            
                        ;-FUNCTION CALL HELPER-------------------------
                        ;-WHERE TO JUMP-(CALL_REG)---------------------
   0100                     org 0100h
                            
   0100                 FCALL
   0100   ef                sex STACK_REG   ;set STACK as X register
   0101   93                ghi PC_REG      ;saving the PC value to stack
   0102   73                stxd
   0103   83                glo PC_REG
   0104   73                stxd
                            
   0105   8d                glo CALL_REG    ;put the new address in the PC
   0106   a3                plo PC_REG
   0107   9d                ghi CALL_REG
   0108   b3                phi PC_REG
   0109   d3                sep PC_REG      ;jumping to PC
                            
   010a                 FRETURN
   010a   1f                inc STACK_REG   ;increment the STACK register
   010b   ef                sex STACK_REG   ;set STACK as X register
   010c   72                ldxa            ;restoring PC from STACK
   010d   a3                plo PC_REG
   010e   f0                ldx
   010f   b3                phi PC_REG
   0110   d3                sep PC_REG      ;jumping to PC
   0111   30 0a             br FRETURN
                        ;----------------------------------------------
                        
                        ;-SERIAL SEND BYTE-----------------------------
                        ;-DATA-R4.1------------------------------------
   0113                 SERIAL_SEND_START
   0113   94                ghi R4      ;R4 high is the data, load it into the D reg
   0114   fb ff             xri 0FFh    ;invert it
   0116   b4                phi R4      ;put it back
   0117   f8 85             ldi 085h    ;load 0x85 to the D reg
   0119   fe                shl         ;shift it left so we get 0x0A and set the flag bit
   011a   a4                plo R4      ;put the 0x10 to R4 low, this will be our bit counter
                        
   011b                 SERIAL_SEND_BIT
   011b   c7                lsnf        ;24 - long skip if the flag is not set
   011c   7a                req         ;16 - reset Q if the flag is set
   011d   c8                lskp        ;24
   011e   7b                seq         ;16 - set Q if the flag is not set
   011f   c4                nop         ;24
                            
   0120   24                dec R4      ;16 - decrement R4, this will only affect the R4 lower 8bit
   0121   84                glo R4      ;16
   0122   c6                lsnz        ;24 - if R4 lower is not 0 then long skip
   0123   de                sep RETURN  ;--
   0124   c4                nop         ;--
   0125   94                ghi R4      ;16 - get R4 high
   0126   f6                shr         ;16 - shift it right to get LSB in the flag
   0127   b4                phi R4      ;16 - put it back
   0128   c4                nop         ;24
   0129   c4                nop         ;24
   012a   c4                nop         ;24
   012b   30 1b             br SERIAL_SEND_BIT ;16
                        ;----------------------------------------------
                        
                        ;-SERIAL READ BYTE-----------------------------
                        ;-RETURN R5.1----------------------------------
   012d                 SERIAL_READ_START
   012d   f8 00             ldi 00h     ;set input data register to 0
   012f   a5                plo R5
   0130   b5                phi R5
                            
   0131                 SERIAL_WAIT_START
   0131   3c 31             bn1 SERIAL_WAIT_START ;16 - loop until EF1 goes low
   0133   c4                nop         ;24
   0134   c4                nop         ;24
   0135   c4                nop         ;24
   0136   c4                nop         ;24
   0137   f9 00             ori 00h     ;16 - do nothing for 16 clock cycles
                        
   0139                 SERIAL_SAMPLE_BIT
   0139   34 3f             b1 SERIAL_NULL_BIT  ;16 - checking the EF1
   013b   f9 80             ori 080h            ;16 - if EF1 is high then set MSB to 1 in D register
   013d   30 43             br SERIAL_SAVE_BIT  ;16
                        
   013f                 SERIAL_NULL_BIT
   013f   f9 00             ori 00h         ;16 - of EF1 is low we do nothing
   0141   f9 00             ori 00h         ;16
                        
   0143                 SERIAL_SAVE_BIT
   0143   b5                phi R5          ;16 - put D in R5 high
   0144   15                inc R5          ;16 - increment R5, this will only affect R5 low 8bit
   0145   85                glo R5          ;16 - get R5 low to D register
   0146   fb 09             xri 09h         ;16 - D = D ^ 0x09
   0148   c6                lsnz            ;24 
   0149   de                sep RETURN      ;--
   014a   c4                nop             ;--
   014b   95                ghi R5          ;16 - get R5 high
   014c   f6                shr             ;16 - shift it righ
   014d   c4                nop             ;24
   014e   c4                nop             ;24
   014f   c4                nop             ;24
   0150   30 39             br SERIAL_SAMPLE_BIT ;16
                        ;----------------------------------------------
                        
                        ;-PRINT----------------------------------------
                        ;-FIRST CHAR-R6--------------------------------
   0152                 PRINT
   0152   e6                sex R6          ;set X register to R6
   0153   72                ldxa            ;load data to D and increment R6
   0154   c6                lsnz            ;if it is not zero then long skip
   0155   de                sep RETURN
   0156   c4                nop
                            
   0157   b4                phi R4          ;put D register to R4 to send it
                            
   0158   f8 13             ldi SERIAL_SEND_START.0     ;prepare to call SERIAL_SEND
   015a   ad                plo CALL_REG
   015b   f8 01             ldi SERIAL_SEND_START.1
   015d   bd                phi CALL_REG
                            
   015e   f8 00             ldi FCALL.0
   0160   ae                plo FCALL_REG
   0161   de                sep FCALL_REG   ;call SERIAL_SEND
   0162   30 52             br PRINT
                        ;----------------------------------------------
                        
   0164                 BACKSPACE_ACTION
   0164   08 20 08 00       db 8, 32, 8, 0
                        ;-READ LINE------------------------------------
                        ;-WHERE TO READ-R7-----------------------------
                        ;-R8.1-Character counter-------------------------
   0168                 READLINE
   0168   f8 00             ldi 0
   016a   a8                plo R8
                            
   016b                 READLINE_LOOP
   016b   f8 2d             ldi SERIAL_READ_START.0     ;prepare calling SERIAL_READ
   016d   ad                plo CALL_REG
   016e   f8 01             ldi SERIAL_READ_START.1
   0170   bd                phi CALL_REG
                            
   0171   f8 00             ldi FCALL.0
   0173   ae                plo FCALL_REG
   0174   de                sep FCALL_REG       ;call SERIAL_READ
                            
   0175   95                ghi R5              ;get the result of SERIAL_READ
   0176   fb 0d             xri 13              ;check if it is 13 (ENTER KEY)
   0178   3a 8e             bnz READLINE_BACKSPACE      ;if not jump to READLINE_BACKSPACE
                            
   017a                 END_LINE
   017a   f8 00             ldi 00h             ;put 0 to the endof the string
   017c   57                str R7
                            
   017d   f8 92             ldi NEW_LINE.0      ;load the address of CRLF string
   017f   a6                plo R6
   0180   f8 0d             ldi NEW_LINE.1
   0182   b6                phi R6
                            
   0183   f8 52             ldi PRINT.0         ;prepare to call PRINT
   0185   ad                plo CALL_REG
   0186   f8 01             ldi PRINT.1
   0188   bd                phi CALL_REG
                            
   0189   f8 00             ldi FCALL.0
   018b   ae                plo FCALL_REG
   018c   de                sep FCALL_REG       ;call PRINT
                            
   018d   de                sep RETURN          ;RETURN from READLINE
                            
   018e                 READLINE_BACKSPACE
   018e   95                ghi R5              ;get the result of SERIAL_READ
   018f   fb 7f             xri 127             ;check if it is 127 (DEL)
   0191   3a aa             bnz STORE_CHAR      ;if not jump to STORE_CHAR
                            
   0193   88                glo R8
   0194   32 6b             bz READLINE_LOOP
                            
   0196   f8 64             ldi BACKSPACE_ACTION.0      ;load the address of the backspace action
   0198   a6                plo R6
   0199   f8 01             ldi BACKSPACE_ACTION.1
   019b   b6                phi R6
                            
   019c   f8 52             ldi PRINT.0                 ;prepare to call PRINT
   019e   ad                plo CALL_REG
   019f   f8 01             ldi PRINT.1
   01a1   bd                phi CALL_REG
                            
   01a2   f8 00             ldi FCALL.0
   01a4   ae                plo FCALL_REG
   01a5   de                sep FCALL_REG               ;call PRINT
                            
   01a6   27                dec R7
   01a7   28                dec R8
                            
   01a8   30 6b             br READLINE_LOOP
                            
   01aa                 STORE_CHAR
   01aa   88                glo R8
   01ab   fb ff             xri 0FFh
   01ad   32 6b             bz READLINE_LOOP
                            
   01af   95                ghi R5              ;get the result of the SERIAL_READ again
   01b0   57                str R7              ;store it where R7 pointing
   01b1   17                inc R7              ;increment R7
   01b2   18                inc R8
                            
   01b3   b4                phi R4              ;load the result to R4 to Echo it back
                            
   01b4   f8 13             ldi SERIAL_SEND_START.0     ;prepare to call SERIAL_SEND
   01b6   ad                plo CALL_REG
   01b7   f8 01             ldi SERIAL_SEND_START.1
   01b9   bd                phi CALL_REG
                            
   01ba   f8 00             ldi FCALL.0
   01bc   ae                plo FCALL_REG
   01bd   de                sep FCALL_REG       ;call SERIAL_SEND
   01be   30 6b             br READLINE_LOOP
                        ;----------------------------------------------
                        
                        ;-STR COMPARATOR-------------------------------
                        ;-R8 stringA-R9 stringB------------------------
                        ;-RETURN R10.0---------------------------------
   01c0                 STR_COMPARATOR
   01c0   f8 00             ldi 0           ;R10 low is the result, set it to 0
   01c2   aa                plo R10
                        	
   01c3                 STR_CHARCHECK
   01c3   08                ldn R8          ;load value from RAM[R8] to D register
   01c4   e9                sex R9          ;set X pointer to R9
   01c5   f3                xor             ;D = D ^ RAM[R9]
                            
   01c6   32 c9             bz STR_EQUAL    ;if D == 0 jump to STR_EQUAL
   01c8   de                sep RETURN      ;RETURN
                            
   01c9                 STR_EQUAL 
   01c9   08            	ldn R8          ;load value from RAM[R8] to D register again
   01ca   3a d0         	bnz STR_INC     ;if D != 0 jump to STR_INC
   01cc   f8 01         	ldi 1           ;set R10 to 1 and return
   01ce   aa            	plo R10
   01cf   de            	sep RETURN
                        	
   01d0                 STR_INC
   01d0   18            	inc R8          ;increment both address by 1
   01d1   19            	inc R9
   01d2   30 c3         	br STR_CHARCHECK
                        ;----------------------------------------------
                        
                        ;-INTEGER DIV----------------------------------
                        ;-R4 pointing to divident----------------------
                        ;-R5 pointing to divider-----------------------
                        ;-R6 pointing to quotient----------------------
                        ;-R7 pointing to remainder---------------------
                        ;-R8.0 bitcnt, R8.1 flags----------------------
                        ;-R9 general counter---------------------------
   01d4                 INTEGER_DIV
   01d4   ef                sex STACK_REG   ;set STACK_REG as data pointer to store variables in STACK
   01d5   f8 00             ldi 0           ;set bitcnt and flags to 0
   01d7   a8                plo R8
   01d8   b8                phi R8
                            
   01d9   15                inc R5          ;increment R5 to the MSB because we want to store the divider it in little-endian format
   01da   15                inc R5
   01db   15                inc R5
                            
   01dc   05                ldn R5          ;copying starts here
   01dd   73                stxd
   01de   25                dec R5
                            
   01df   05                ldn R5
   01e0   73                stxd
   01e1   25                dec R5
                            
   01e2   05                ldn R5
   01e3   73                stxd
   01e4   25                dec R5
                            
   01e5   05                ldn R5
   01e6   73                stxd            ;+11 divider, +11 shows the start of the data from the STACK pointer
                            
   01e7   f8 00             ldi 0           ;storing 0 for the subtractor
   01e9   73                stxd
   01ea   73                stxd
   01eb   73                stxd
   01ec   73                stxd            ;+7 subtractor
                            
   01ed   96                ghi R6          ;saving the quotient pointer
   01ee   73                stxd
   01ef   86                glo R6
   01f0   73                stxd            ;+5 quotient pointer
                        
   01f1   97                ghi R7          ;saving the remainder
   01f2   73                stxd
   01f3   87                glo R7
   01f4   73                stxd            ;+3 remainder pointer
                            
   01f5   94                ghi R4          ;saving the dividend pointer
   01f6   73                stxd
   01f7   84                glo R4
   01f8   73                stxd            ;+1 dividend pointer
                            
   01f9   e4                sex R4
                            
   01fa   72                ldxa            ;copy dividend to remainder
   01fb   57                str R7
   01fc   17                inc R7
                            
   01fd   72                ldxa
   01fe   57                str R7
   01ff   17                inc R7
                            
   0200   72                ldxa
   0201   57                str R7
   0202   17                inc R7
                            
   0203   f0                ldx
   0204   57                str R7
                            
   0205   f8 00             ldi 0
   0207   56                str R6
   0208   16                inc R6
   0209   56                str R6
   020a   16                inc R6
   020b   56                str R6
   020c   16                inc R6
   020d   56                str R6
                        
   020e   8f                glo STACK_REG   ;get the STACK_REG pointer to position it to the divider MSB
   020f   fc 0e             adi 14          ;add 14 to it
   0211   a5                plo R5          ;store the new pointer to R5
   0212   9f                ghi STACK_REG   ;get the STACK_REG high part to add the carry to it
   0213   7c 00             adci 0          ;adding the carry
   0215   b5                phi R5          ;store the new high part to R5
                            
   0216   e5                sex R5          ;set X data pointer to R5
   0217   f0                ldx             ;load data from RAM[R5]
   0218   25                dec R5          ;decrement R5 to set it back to the divider's LSB
   0219   25                dec R5
   021a   25                dec R5
   021b   fa 80             ani 080h        ;check if sign bit is set
                            
   021d   c2 02 34          lbz INTEGER_DIV_NEXT_CHECK
                            
   0220   f8 82             ldi 082h        ;load 0x82 to the D register
   0222   fe                shl             ;shit it left so it will set the carry flag and the D registre will be 4
   0223   a9                plo R9          ;store it to R9 low
                            
   0224                 INTEGER_DIV_INVERT_LOOP1
   0224   f0                ldx             ;load data from RAM[R5]
   0225   fb ff             xri 0FFh        ;xor D with 0xFF to invert it
   0227   7c 00             adci 0          ;add the carry for to the result (inver+1)
   0229   55                str R5          ;store the result to RAM[R5]
   022a   60                irx             ;increment R5
                        
   022b   29                dec R9          ;decrement R8
   022c   89                glo R9          ;get R8 low, and if it's not 0 then do the loop
   022d   ca 02 24          lbnz INTEGER_DIV_INVERT_LOOP1
                            
   0230   98                ghi R8          ;set the flag
   0231   f9 01             ori 1
   0233   b8                phi R8
                            
   0234                 INTEGER_DIV_NEXT_CHECK
   0234   8f                glo STACK_REG
   0235   fc 03             adi 3
   0237   a9                plo R9
   0238   9f                ghi STACK_REG
   0239   7c 00             adci 0
   023b   b9                phi R9
                            
   023c   09                ldn R9              ;restore and get remainder MSB
   023d   fc 03             adi 3
   023f   a4                plo R4
   0240   19                inc R9
   0241   09                ldn R9
   0242   7c 00             adci 0
   0244   b4                phi R4
                            
   0245   e4                sex R4
   0246   f0                ldx
   0247   24                dec R4
   0248   24                dec R4
   0249   24                dec R4
   024a   fa 80             ani 080h            ;check if sign bit is set
                            
   024c   c2 02 62          lbz INTEGER_SHIFT_DR
                            
   024f   f8 82             ldi 082h
   0251   fe                shl
   0252   a9                plo R9
                            
   0253                 INVERT_LOOP2
   0253   f0                ldx         ;invert byte 3
   0254   fb ff             xri 0FFh
   0256   7c 00             adci 0
   0258   54                str R4
   0259   60                irx
                        
   025a   29                dec R9
   025b   89                glo R9
   025c   3a 53             bnz INVERT_LOOP2
                            
   025e   98                ghi R8      ;set the flag
   025f   f9 02             ori 2
   0261   b8                phi R8
                            
   0262                 INTEGER_SHIFT_DR
   0262   8f                glo STACK_REG ;get divider MSB
   0263   fc 0b             adi 11
   0265   a5                plo R5
   0266   9f                ghi STACK_REG
   0267   7c 00             adci 0
   0269   b5                phi R5
                            
   026a   f8 00             ldi 0
   026c   e5                sex R5
   026d   f1                or
   026e   60                irx
   026f   f1                or
   0270   60                irx
   0271   f1                or
   0272   60                irx
   0273   f1                or
   0274   32 8d             bz DIVISION_LOOP
                            
   0276                 SHIFT_DR
   0276   8f                glo STACK_REG ;get divider MSB
   0277   fc 0e             adi 14
   0279   a5                plo R5
   027a   9f                ghi STACK_REG
   027b   7c 00             adci 0
   027d   b5                phi R5
                            
   027e   e5                sex R5
                            
   027f   f8 04             ldi 4
   0281   fe                shl
   0282   a9                plo R9
                            
   0283                 CARRY_SHIFTING
   0283   f0                ldx
   0284   76                shrc
   0285   73                stxd
                            
   0286   29                dec R9
   0287   89                glo R9
   0288   3a 83             bnz CARRY_SHIFTING
                            
   028a   18                inc R8
                            
   028b   30 62             br INTEGER_SHIFT_DR
                            
   028d                 DIVISION_LOOP
   028d   88                glo R8              ;get R8 low
   028e   fd 20             sdi 32              ;if larger than 32 then finish the loop
   0290   cb 03 1f          lbnf FINAL_CHECK
                        
   0293   8f                glo STACK_REG       ;restore quotient pointer to R6
   0294   fc 05             adi 5
   0296   a9                plo R9
   0297   9f                ghi STACK_REG
   0298   7c 00             adci 0
   029a   b9                phi R9
                            
   029b   09                ldn R9
   029c   a6                plo R6
   029d   19                inc R9
   029e   09                ldn R9
   029f   b6                phi R6
                            
   02a0   e6                sex R6
                            
   02a1   f8 02             ldi 2
   02a3   fe                shl
   02a4   a9                plo R9
                            
   02a5                 SHIFTING_Q
   02a5   f0                ldx                 ;shifting quotient to left
   02a6   7e                shlc
   02a7   56                str R6
   02a8   60                irx
                        
   02a9   29                dec R9
   02aa   89                glo R9
   02ab   3a a5             bnz SHIFTING_Q
                            
   02ad   8f                glo STACK_REG    ;restore remainder pointer to R4
   02ae   fc 03             adi 3
   02b0   a9                plo R9
   02b1   9f                ghi STACK_REG
   02b2   7c 00             adci 0
   02b4   b9                phi R9
                            
   02b5   09                ldn R9
   02b6   a4                plo R4
   02b7   19                inc R9
   02b8   09                ldn R9
   02b9   b4                phi R4
                            
   02ba   8f                glo STACK_REG    ;restore subtractor pointer to R5
   02bb   fc 07             adi 7
   02bd   a5                plo R5
   02be   9f                ghi STACK_REG
   02bf   7c 00             adci 0
   02c1   b5                phi R5
                            
   02c2   e4                sex R4
   02c3   f8 82             ldi 082h
   02c5   fe                shl
   02c6   a9                plo R9
                            
   02c7                 TRY_SUBTRACTING         ;try subtracting
   02c7   05                ldn R5
   02c8   75                sdb
   02c9   60                irx
   02ca   15                inc R5
                            
   02cb   29                dec R9
   02cc   89                glo R9
   02cd   3a c7             bnz TRY_SUBTRACTING
                            
   02cf   cb 03 07          lbnf NEXT_BIT        ;if subtracting unsuccesful, jump to NEXT_BIT
                            
   02d2   8f                glo STACK_REG
   02d3   fc 05             adi 5
   02d5   a9                plo R9
   02d6   9f                ghi STACK_REG
   02d7   7c 00             adci 0
   02d9   b9                phi R9
                            
   02da   09                ldn R9
   02db   a6                plo R6
   02dc   19                inc R9
   02dd   09                ldn R9
   02de   b6                phi R6
                            
   02df   06                ldn R6
   02e0   f9 01             ori 1
   02e2   56                str R6
                            
   02e3   8f                glo STACK_REG    ;restore remainder pointer
   02e4   fc 03             adi 3
   02e6   a9                plo R9
   02e7   9f                ghi STACK_REG
   02e8   7c 00             adci 0
   02ea   b9                phi R9
                            
   02eb   09                ldn R9
   02ec   a4                plo R4
   02ed   19                inc R9
   02ee   09                ldn R9
   02ef   b4                phi R4
                            
   02f0   8f                glo STACK_REG    ;restore subtractor's pointer to R5
   02f1   fc 07             adi 7
   02f3   a5                plo R5
   02f4   9f                ghi STACK_REG
   02f5   7c 00             adci 0
   02f7   b5                phi R5
                            
   02f8   e4                sex R4
                            
   02f9   f8 82             ldi 082h
   02fb   fe                shl
   02fc   a9                plo R9
                            
   02fd                 SUBTRACT_FOR_REAL
   02fd   05                ldn R5          ;subtract the subtractor from the remainder and store it
   02fe   75                sdb
   02ff   54                str R4
   0300   60                irx
   0301   15                inc R5
                            
   0302   29                dec R9
   0303   89                glo R9
   0304   ca 02 fd          lbnz SUBTRACT_FOR_REAL
                            
   0307                 NEXT_BIT
   0307   8f                glo STACK_REG    ;restore subtractor pointer to R5 and set it to MSB
   0308   fc 0a             adi 10
   030a   a5                plo R5
   030b   9f                ghi STACK_REG
   030c   7c 00             adci 0
   030e   b5                phi R5
                            
   030f   e5                sex R5
   0310   f8 02             ldi 2
   0312   fe                shl
   0313   a9                plo R9
                            
   0314                 SHIFT_SUBTRACTOR
   0314   f0                ldx
   0315   76                shrc
   0316   73                stxd
                            
   0317   29                dec R9
   0318   89                glo R9
   0319   3a 14             bnz SHIFT_SUBTRACTOR
                            
   031b   18                inc R8
   031c   c0 02 8d          lbr DIVISION_LOOP
                            
   031f                 FINAL_CHECK
   031f   98                ghi R8
   0320   fa 02             ani 2
   0322   c2 03 43          lbz FINAL_CHECK2
                            
   0325   8f                glo STACK_REG    ;restore remainder pointer to R4
   0326   fc 03             adi 3
   0328   a9                plo R9
   0329   9f                ghi STACK_REG
   032a   7c 00             adci 0
   032c   b9                phi R9
                            
   032d   09                ldn R9
   032e   a4                plo R4
   032f   19                inc R9
   0330   09                ldn R9
   0331   b4                phi R4
                            
   0332   e4                sex R4
                            
   0333   f8 82             ldi 082h
   0335   fe                shl
   0336   a9                plo R9
                            
   0337                 INVERT_LOOP3
   0337   f0                ldx
   0338   fb ff             xri 0FFh
   033a   7c 00             adci 0
   033c   54                str R4
   033d   60                irx
                            
   033e   29                dec R9
   033f   89                glo R9
   0340   ca 03 37          lbnz INVERT_LOOP3
                            
   0343                 FINAL_CHECK2
   0343   98                ghi R8
   0344   c2 03 69          lbz THE_END
   0347   fb 03             xri 3
   0349   c2 03 69          lbz THE_END
                            
   034c   8f                glo STACK_REG    ;restore quotient pointer to R6
   034d   fc 05             adi 5
   034f   a9                plo R9
   0350   9f                ghi STACK_REG
   0351   7c 00             adci 0
   0353   b9                phi R9
                            
   0354   09                ldn R9
   0355   a6                plo R6
   0356   19                inc R9
   0357   09                ldn R9
   0358   b6                phi R6
                            
   0359   e6                sex R6
                            
   035a   f8 82             ldi 082h
   035c   fe                shl
   035d   a9                plo R9
                            
   035e                 INVERT_LOOP4
   035e   f0                ldx
   035f   fb ff             xri 0FFh
   0361   7c 00             adci 0
   0363   56                str R6
   0364   60                irx
                            
   0365   29                dec R9
   0366   89                glo R9
   0367   3a 5e             bnz INVERT_LOOP4
                        
   0369                 THE_END
   0369   8f                glo STACK_REG       ;setting back the STACK_REG for return
   036a   fc 0e             adi 14
   036c   af                plo STACK_REG
   036d   9f                ghi STACK_REG
   036e   7c 00             adci 0
   0370   bf                phi STACK_REG
                            
   0371   de                sep RETURN          ;RETURN
                        ;----------------------------------------------
                        
                        ;-INTEGER MUL----------------------------------
                        ;-R4-multiplicand pointer----------------------
                        ;-R5-multiplier pointer------------------------
                        ;-R6-result pointer----------------------------
                        ;-R7-general register--------------------------
   0372                 INTEGER_MUL
   0372   ef                sex STACK_REG
                            
   0373   14                inc R4      ;increment R4 and R5 pointer to MSB
   0374   14                inc R4      ;to copy the values to the local variables
   0375   14                inc R4
                            
   0376   15                inc R5
   0377   15                inc R5
   0378   15                inc R5
                            
   0379   04                ldn R4      ;copying starts here
   037a   73                stxd
   037b   24                dec R4
                            
   037c   04                ldn R4
   037d   73                stxd
   037e   24                dec R4
                            
   037f   04                ldn R4
   0380   73                stxd
   0381   24                dec R4
                            
   0382   04                ldn R4
   0383   73                stxd        ;+7 multiplicand
                            
   0384   05                ldn R5
   0385   73                stxd
   0386   25                dec R5
                            
   0387   05                ldn R5
   0388   73                stxd
   0389   25                dec R5
                            
   038a   05                ldn R5
   038b   73                stxd
   038c   25                dec R5
                            
   038d   05                ldn R5
   038e   73                stxd        ;+3 multiplier
                            
   038f   96                ghi R6
   0390   73                stxd
   0391   86                glo R6
   0392   73                stxd        ;+1 result pointer
                        
   0393   f8 00             ldi 0       ;zeroing the result
                            
   0395   56                str R6
   0396   16                inc R6
                            
   0397   56                str R6
   0398   16                inc R6
                            
   0399   56                str R6
   039a   16                inc R6
                            
   039b   56                str R6
                            
   039c   26                dec R6
   039d   26                dec R6
   039e   26                dec R6
                        
   039f                 INTEGER_MUL_LOOP
   039f   8f                glo STACK_REG   ;restore multiplier pointer
   03a0   fc 03             adi 3
   03a2   a5                plo R5
   03a3   9f                ghi STACK_REG
   03a4   7c 00             adci 0
   03a6   b5                phi R5
                            
   03a7   e5                sex R5          ;check if multiplier is 0
   03a8   f8 00             ldi 0
   03aa   f1                or
   03ab   60                irx
   03ac   f1                or
   03ad   60                irx
   03ae   f1                or
   03af   60                irx
   03b0   f1                or
                            
   03b1   25                dec R5
   03b2   25                dec R5
   03b3   25                dec R5
                            
   03b4   c2 04 09          lbz INTEGER_MUL_END      ;if 0 then jump to the end
                            
   03b7   05                ldn R5                  ;load the multiplier's LSB
   03b8   fa 01             ani 1                   ;filter for the LSb
   03ba   32 dc             bz INTEGER_MUL_SHIFT    ;if zero, skip the addition
                            
   03bc   8f                glo STACK_REG           ;restore multiplicand pointer
   03bd   fc 07             adi 7
   03bf   a4                plo R4
   03c0   9f                ghi STACK_REG
   03c1   7c 00             adci 0
   03c3   b4                phi R4
                            
   03c4   8f                glo STACK_REG           ;restore result pointer
   03c5   a7                plo R7
   03c6   9f                ghi STACK_REG
   03c7   b7                phi R7
   03c8   17                inc R7
                            
   03c9   07                ldn R7
   03ca   a5                plo R5
   03cb   17                inc R7
   03cc   07                ldn R7
   03cd   b5                phi R5
                            
   03ce   e5                sex R5
                            
   03cf   f8 02             ldi 2                   ;prepare addition
   03d1   fe                shl
   03d2   a7                plo R7
                            
   03d3                 INTEGER_MUL_ADD
   03d3   04                ldn R4
   03d4   74                adc
   03d5   55                str R5
   03d6   60                irx
   03d7   14                inc R4
                            
   03d8   27                dec R7
   03d9   87                glo R7
   03da   3a d3             bnz INTEGER_MUL_ADD
                        
   03dc                 INTEGER_MUL_SHIFT
                        
   03dc   8f                glo STACK_REG           ;set multiplier's pointer to MSB
   03dd   fc 06             adi 6                   ;to shift it right
   03df   a5                plo R5
   03e0   9f                ghi STACK_REG
   03e1   7c 00             adci 0
   03e3   b5                phi R5
                            
   03e4   e5                sex R5
                            
   03e5   f8 02             ldi 2
   03e7   fe                shl
   03e8   a7                plo R7
                            
   03e9                 INTEGER_MUL_SHMULTIPLIER
   03e9   f0                ldx                     ;shifting right the multiplier
   03ea   76                shrc
   03eb   73                stxd
                            
   03ec   27                dec R7
   03ed   87                glo R7
   03ee   3a e9             bnz INTEGER_MUL_SHMULTIPLIER
                            
   03f0   8f                glo STACK_REG           ;restore multiplicand pointer
   03f1   fc 07             adi 7                   ;to shift it left
   03f3   a4                plo R4
   03f4   9f                ghi STACK_REG
   03f5   7c 00             adci 0
   03f7   b4                phi R4
                            
   03f8   e4                sex R4
                            
   03f9   f8 02             ldi 2
   03fb   fe                shl
   03fc   a7                plo R7
                            
   03fd                 INTEGER_MUL_SHMULTIPLICAND
   03fd   f0                ldx                     ;shifting the multiplicand left
   03fe   7e                shlc
   03ff   54                str R4
   0400   60                irx
                        
   0401   27                dec R7
   0402   87                glo R7
   0403   ca 03 fd          lbnz INTEGER_MUL_SHMULTIPLICAND
                            
   0406   c0 03 9f          lbr INTEGER_MUL_LOOP
                            
   0409                 INTEGER_MUL_END
   0409   8f                glo STACK_REG
   040a   fc 0a             adi 10
   040c   af                plo STACK_REG
   040d   9f                ghi STACK_REG
   040e   7c 00             adci 0
   0410   bf                phi STACK_REG
                            
   0411   de                sep RETURN          ;RETURN    
                        ;----------------------------------------------
                        
                        ;-PRINT HEX------------------------------------
                        ;-R4-int pointer-------------------------------
                        ;-R5.0-number of digits------------------------
                        ;-Local registers------------------------------
                        ;-R5.1-flag, R6--------------------------------
   0412                 HEX_CHARS
   0412   30 31 32 33       db "0123456789ABCDEF"
   0416   34 35 36 37   
   041a   38 39 41 42   
   041e   43 44 45 46   
                        ;----------------------------------------------
   0422                 PRINT_HEX
   0422   ef                sex STACK_REG
                            
   0423   95                ghi R5  ;saving the state of the local registers
   0424   73                stxd
                            
   0425   96                ghi R6
   0426   73                stxd
   0427   86                glo R6
   0428   73                stxd
                            
   0429   14                inc R4  ;making a copy of the Integer
   042a   14                inc R4
   042b   14                inc R4
                            
   042c   04                ldn R4
   042d   73                stxd
   042e   24                dec R4
   042f   04                ldn R4
   0430   73                stxd
   0431   24                dec R4
   0432   04                ldn R4
   0433   73                stxd
   0434   24                dec R4
   0435   04                ldn R4
   0436   73                stxd    ;+2 the integer
                            
   0437   f8 00             ldi 0   ;+1 
   0439   73                stxd
                            
   043a   8f                glo STACK_REG   ;set R4 to point to the Integer
   043b   a4                plo R4
   043c   9f                ghi STACK_REG
   043d   b4                phi R4
   043e   14                inc R4
   043f   14                inc R4
                            
   0440   f8 00             ldi 0           ;set R5 flags to 0
   0442   b5                phi R5
   0443   85                glo R5              
   0444   3a 49             bnz PRINT_UNTIL_R
   0446   f8 01             ldi 1           ;if R5 low, the number of digits, is zero, then set R5 flag
   0448   b5                phi R5
                        
   0449                 PRINT_UNTIL_R
   0449   95                ghi R5                  ;check the flag if set or not
   044a   32 5e             bz PRINT_CHECK_DIGIT    
   044c   e4                sex R4              ;checking the integer if it's zero
   044d   f8 00             ldi 0
   044f   f1                or
   0450   60                irx
   0451   f1                or
   0452   60                irx
   0453   f1                or
   0454   60                irx
   0455   f1                or
                            
   0456   24                dec R4
   0457   24                dec R4
   0458   24                dec R4
                            
   0459   ef                sex STACK_REG    
   045a   3a 61             bnz PRINT_DIGIT_LOOP
   045c   30 8f             br PRINT_HEX_END
                            
   045e                 PRINT_CHECK_DIGIT
   045e   85                glo R5
   045f   32 8f             bz PRINT_HEX_END
                        
   0461                 PRINT_DIGIT_LOOP
   0461   04                ldn R4
   0462   fa 0f             ani 0Fh
   0464   5f                str STACK_REG
   0465   f8 12             ldi HEX_CHARS.0
   0467   f4                add
   0468   a6                plo R6
   0469   f8 04             ldi HEX_CHARS.1
   046b   7c 00             adci 0
   046d   b6                phi R6
                            
   046e   06                ldn R6
   046f   73                stxd
                            
   0470   f8 04             ldi 4
   0472   a6                plo R6
                            
   0473                 PRINT_HEX_SHIFT_LOOP1
   0473   14                inc R4
   0474   14                inc R4
   0475   14                inc R4
                            
   0476   04                ldn R4
   0477   f6                shr
   0478   54                str R4
   0479   24                dec R4
                            
   047a   04                ldn R4
   047b   76                shrc
   047c   54                str R4
   047d   24                dec R4
                            
   047e   04                ldn R4
   047f   76                shrc
   0480   54                str R4
   0481   24                dec R4
                            
   0482   04                ldn R4
   0483   76                shrc
   0484   54                str R4
                            
   0485   26                dec R6
   0486   86                glo R6
   0487   3a 73             bnz PRINT_HEX_SHIFT_LOOP1
                            
   0489   95                ghi R5      ;check if R5 flag is set, if set then skip decrementing.
   048a   c6                lsnz
   048b   25                dec R5
   048c   c4                nop
   048d   30 49             br PRINT_UNTIL_R
                        
   048f                 PRINT_HEX_END
   048f   8f                glo STACK_REG
   0490   a6                plo R6
   0491   9f                ghi STACK_REG
   0492   b6                phi R6
   0493   16                inc R6
                            
   0494   f8 52             ldi PRINT.0     ;prepare to call PRINT
   0496   ad                plo CALL_REG
   0497   f8 01             ldi PRINT.1
   0499   bd                phi CALL_REG
                            
   049a   f8 00             ldi FCALL.0
   049c   ae                plo FCALL_REG
   049d   de                sep FCALL_REG
                            
   049e   86                glo R6
   049f   fc 04             adi 4
   04a1   af                plo STACK_REG
   04a2   96                ghi R6
   04a3   7c 00             adci 0
   04a5   bf                phi STACK_REG
                            
   04a6   ef                sex STACK_REG   ;restore local registers
   04a7   72                ldxa
   04a8   a6                plo R6
   04a9   72                ldxa
   04aa   b6                phi R6
   04ab   f0                ldx
   04ac   b5                phi R5
                            
   04ad   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-PRINT DEC------------------------------------
                        ;-R4-int pointer-------------------------------
                        
                        ;-R10-flags------------------------------------
   04ae                 PRINT_DEC
   04ae   ef                sex STACK_REG
                            
   04af   f8 00             ldi 0
   04b1   aa                plo R10
   04b2   ba                phi R10
                            
   04b3   14                inc R4
   04b4   14                inc R4
   04b5   14                inc R4
                            
   04b6   04                ldn R4
   04b7   73                stxd
   04b8   24                dec R4
   04b9   04                ldn R4
   04ba   73                stxd
   04bb   24                dec R4
   04bc   04                ldn R4
   04bd   73                stxd
   04be   24                dec R4
   04bf   04                ldn R4
   04c0   73                stxd        ;+10 the integer
                            
   04c1   f8 00             ldi 0
   04c3   73                stxd
   04c4   73                stxd
   04c5   73                stxd
   04c6   f8 0a             ldi 0Ah
   04c8   73                stxd        ;+6 divider
                            
   04c9   f8 00             ldi 0
   04cb   73                stxd
   04cc   73                stxd
   04cd   73                stxd
   04ce   73                stxd        ;+2 remainder
                            
   04cf   73                stxd        ;+1 output string buffer end
                            
   04d0   8f                glo STACK_REG
   04d1   ac                plo R12
   04d2   9f                ghi STACK_REG
   04d3   bc                phi R12
                            
   04d4   8c                glo R12
   04d5   fc 0d             adi 13
   04d7   a4                plo R4
   04d8   9c                ghi R12
   04d9   7c 00             adci 0
   04db   b4                phi R4
                            
   04dc   e4                sex R4
   04dd   f0                ldx
   04de   fa 80             ani 080h
   04e0   32 f8             bz PRINT_DEC_MAIN_LOOP
                            
   04e2   8a                glo R10
   04e3   f9 01             ori 1
   04e5   aa                plo R10
                            
   04e6   24                dec R4
   04e7   24                dec R4
   04e8   24                dec R4
                            
   04e9   f8 82             ldi 082h
   04eb   fe                shl
   04ec   a6                plo R6
                            
   04ed                 PRINT_DEC_INVER_LOOP
   04ed   f0                ldx
   04ee   fb ff             xri 0FFh
   04f0   7c 00             adci 0
   04f2   54                str R4
   04f3   14                inc R4
                            
   04f4   26                dec R6
   04f5   86                glo R6
   04f6   3a ed             bnz PRINT_DEC_INVER_LOOP
                            
   04f8                 PRINT_DEC_MAIN_LOOP    
   04f8   8c                glo R12
   04f9   fc 0a             adi 10
   04fb   a4                plo R4
   04fc   a6                plo R6
   04fd   9c                ghi R12
   04fe   7c 00             adci 0
   0500   b4                phi R4
   0501   b6                phi R6
                            
   0502   8c                glo R12
   0503   fc 06             adi 6
   0505   a5                plo R5
   0506   9c                ghi R12
   0507   7c 00             adci 0
   0509   b5                phi R5
                            
   050a   8c                glo R12
   050b   fc 02             adi 2
   050d   a7                plo R7
   050e   9c                ghi R12
   050f   7c 00             adci 0
   0511   b7                phi R7
                            
   0512   f8 d4             ldi INTEGER_DIV.0
   0514   ad                plo CALL_REG
   0515   f8 01             ldi INTEGER_DIV.1
   0517   bd                phi CALL_REG
                            
   0518   f8 00             ldi FCALL.0
   051a   ae                plo FCALL_REG
   051b   de                sep FCALL_REG
                            
   051c   ef                sex STACK_REG
                            
   051d   8c                glo R12
   051e   fc 02             adi 2
   0520   a7                plo R7
   0521   9c                ghi R12
   0522   7c 00             adci 0
   0524   b7                phi R7
                            
   0525   07                ldn R7
   0526   fc 30             adi 48
   0528   73                stxd
                            
   0529   8c                glo R12
   052a   fc 0a             adi 10
   052c   a4                plo R4
   052d   9c                ghi R12
   052e   7c 00             adci 0
   0530   b4                phi R4
                            
   0531   e4                sex R4
                            
   0532   f8 00             ldi 0
   0534   f1                or
   0535   60                irx
   0536   f1                or
   0537   60                irx
   0538   f1                or
   0539   60                irx
   053a   f1                or
                            
   053b   32 40             bz PRINT_DEC_END
   053d   c0 04 f8          lbr PRINT_DEC_MAIN_LOOP
                        
   0540                 PRINT_DEC_END
   0540   8a                glo R10
   0541   fa 01             ani 1
   0543   32 49             bz PRINT_DEC_FINAL
                            
   0545   ef                sex STACK_REG
   0546   f8 2d             ldi 45
   0548   73                stxd
                        
   0549                 PRINT_DEC_FINAL
   0549   8f                glo STACK_REG
   054a   a6                plo R6
   054b   9f                ghi STACK_REG
   054c   b6                phi R6
   054d   16                inc R6
                            
   054e   f8 52             ldi PRINT.0
   0550   ad                plo CALL_REG
   0551   f8 01             ldi PRINT.1
   0553   bd                phi CALL_REG
                            
   0554   f8 00             ldi FCALL.0
   0556   ae                plo FCALL_REG
   0557   de                sep FCALL_REG
                            
   0558   8c                glo R12
   0559   fc 0d             adi 13
   055b   af                plo STACK_REG
   055c   9c                ghi R12
   055d   7c 00             adci 0
   055f   bf                phi STACK_REG
                            
   0560   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-READ DEC-------------------------------------
                        ;-R4-string pointer----------------------------
                        ;-R5-result pointer----------------------------
   0561                 READ_DEC
   0561   ef                sex STACK_REG
                            
   0562   94                ghi R4
   0563   73                stxd
   0564   84                glo R4
   0565   73                stxd        ;+7 string pointer
                            
   0566   95                ghi R5
   0567   73                stxd
   0568   85                glo R5
   0569   73                stxd        ;+5 result pointer
                            
   056a   f8 00             ldi 0
   056c   73                stxd
   056d   73                stxd
   056e   73                stxd
   056f   f8 0a             ldi 0Ah
   0571   73                stxd        ;+1 multiplier
                            
   0572   f8 00             ldi 0       ;set result to 0
   0574   55                str R5
   0575   15                inc R5
   0576   55                str R5
   0577   15                inc R5
   0578   55                str R5
   0579   15                inc R5
   057a   55                str R5
                            
   057b                 READ_DEC_MAIN_LOOP
   057b   8f                glo STACK_REG
   057c   fc 07             adi 7
   057e   a6                plo R6
   057f   9f                ghi STACK_REG
   0580   7c 00             adci 0
   0582   b6                phi R6
                            
   0583   06                ldn R6
   0584   a4                plo R4
   0585   16                inc R6
   0586   06                ldn R6
   0587   b4                phi R4
                            
   0588   04                ldn R4
   0589   ff 30             smi 48
   058b   3b ef             bnf READ_DEC_END
   058d   ff 0a             smi 10
   058f   33 ef             bdf READ_DEC_END
                            
   0591   8f                glo STACK_REG
   0592   fc 05             adi 5
   0594   a6                plo R6
   0595   9f                ghi STACK_REG
   0596   7c 00             adci 0
   0598   b6                phi R6
                            
   0599   06                ldn R6
   059a   a4                plo R4
   059b   16                inc R6
   059c   06                ldn R6
   059d   b4                phi R4
                            
   059e   b6                phi R6
   059f   84                glo R4
   05a0   a6                plo R6
                            
   05a1   8f                glo STACK_REG
   05a2   a5                plo R5
   05a3   9f                ghi STACK_REG
   05a4   b5                phi R5
   05a5   15                inc R5
                            
   05a6   f8 72             ldi INTEGER_MUL.0     ;prepare to call INTEGER_MUL
   05a8   ad                plo CALL_REG
   05a9   f8 03             ldi INTEGER_MUL.1       
   05ab   bd                phi CALL_REG
                            
   05ac   f8 00             ldi FCALL.0
   05ae   ae                plo FCALL_REG
   05af   de                sep FCALL_REG
                            
   05b0   8f                glo STACK_REG
   05b1   fc 07             adi 7
   05b3   a6                plo R6
   05b4   9f                ghi STACK_REG
   05b5   7c 00             adci 0
   05b7   b6                phi R6
                            
   05b8   06                ldn R6
   05b9   a4                plo R4
   05ba   16                inc R6
   05bb   06                ldn R6
   05bc   b4                phi R4
                            
   05bd   8f                glo STACK_REG
   05be   fc 05             adi 5
   05c0   a6                plo R6
   05c1   9f                ghi STACK_REG
   05c2   7c 00             adci 0
   05c4   b6                phi R6
                            
   05c5   06                ldn R6
   05c6   a5                plo R5
   05c7   16                inc R6
   05c8   06                ldn R6
   05c9   b5                phi R5
                            
   05ca   e5                sex R5
                            
   05cb   04                ldn R4
   05cc   ff 30             smi 48
                            
   05ce   f4                add
   05cf   55                str R5
   05d0   15                inc R5
                            
   05d1   f8 00             ldi 0
   05d3   74                adc
   05d4   55                str R5
   05d5   15                inc R5
                            
   05d6   f8 00             ldi 0
   05d8   74                adc
   05d9   55                str R5
   05da   15                inc R5
                            
   05db   f8 00             ldi 0
   05dd   74                adc
   05de   55                str R5
                        
   05df   14                inc R4
                            
   05e0   8f                glo STACK_REG
   05e1   fc 07             adi 7
   05e3   a6                plo R6
   05e4   9f                ghi STACK_REG
   05e5   7c 00             adci 0
   05e7   b6                phi R6
                            
   05e8   84                glo R4
   05e9   56                str R6
   05ea   16                inc R6
   05eb   94                ghi R4
   05ec   56                str R6
                            
   05ed   30 7b             br READ_DEC_MAIN_LOOP
                           
   05ef                 READ_DEC_END
   05ef   8f                glo STACK_REG
   05f0   fc 05             adi 5
   05f2   af                plo STACK_REG
   05f3   9f                ghi STACK_REG
   05f4   7c 00             adci 0
   05f6   bf                phi STACK_REG
                            
   05f7   ef                sex STACK_REG
                            
   05f8   72                ldxa            ;restore R4 and R5
   05f9   a5                plo R5
   05fa   72                ldxa
   05fb   b5                phi R5
   05fc   72                ldxa
   05fd   a4                plo R4
   05fe   f0                ldx
   05ff   b4                phi R4
                            
   0600   de                sep RETURN      ;RETURN    
                        ;----------------------------------------------
                        
                        ;-READ HEX-------------------------------------
                        ;-R4-string pointer----------------------------
                        ;-R5-result pointer----------------------------
   0601                 READ_HEX
   0601   ef                sex STACK_REG
                            
   0602   96                ghi R6
   0603   73                stxd
   0604   86                glo R6
   0605   73                stxd
                            
   0606   97                ghi R7
   0607   73                stxd
   0608   87                glo R7
   0609   73                stxd
                            
   060a   94                ghi R4
   060b   73                stxd
   060c   84                glo R4
   060d   73                stxd        ;+3 string pointer
                            
   060e   95                ghi R5
   060f   73                stxd
   0610   85                glo R5
   0611   73                stxd        ;+1 result pointer
                            
   0612   f8 00             ldi 0       ;set result to 0
   0614   55                str R5
   0615   15                inc R5
   0616   55                str R5
   0617   15                inc R5
   0618   55                str R5
   0619   15                inc R5
   061a   55                str R5
                            
   061b   25                dec R5
   061c   25                dec R5
   061d   25                dec R5
                            
   061e                 READ_HEX_MAINLOOP
   061e   f8 00             ldi 0
   0620   a7                plo R7
                            
   0621   04                ldn R4
   0622   ff 30             smi 48
   0624   3b 71             bm READ_HEX_END
   0626   17                inc R7
   0627   ff 0a             smi 10
   0629   3b 3d             bm READ_HEX_CONTINUE
   062b   ff 07             smi 7
   062d   3b 71             bm READ_HEX_END
   062f   17                inc R7
   0630   ff 06             smi 6
   0632   3b 3d             bm READ_HEX_CONTINUE
   0634   ff 1a             smi 26
   0636   3b 71             bm READ_HEX_END
   0638   17                inc R7
   0639   ff 06             smi 6
   063b   33 71             bpz READ_HEX_END
                            
   063d                 READ_HEX_CONTINUE
   063d   f8 04             ldi 4
   063f   a6                plo R6
                        
   0640                 READ_HEX_SHIFTLOOP      ;result = result << 4
   0640   05                ldn R5
   0641   fe                shl
   0642   55                str R5
   0643   15                inc R5
                            
   0644   05                ldn R5
   0645   7e                shlc
   0646   55                str R5
   0647   15                inc R5
                            
   0648   05                ldn R5
   0649   7e                shlc
   064a   55                str R5
   064b   15                inc R5
                            
   064c   05                ldn R5
   064d   7e                shlc
   064e   55                str R5
                            
   064f   25                dec R5
   0650   25                dec R5
   0651   25                dec R5
                            
   0652   26                dec R6
   0653   86                glo R6
   0654   3a 40             bnz READ_HEX_SHIFTLOOP
                            
   0656   e5                sex R5
                            
   0657   27                dec R7
   0658   87                glo R7
   0659   3a 60             bnz READ_HEX_HEXDIGIT
   065b   04                ldn R4
   065c   ff 30             smi 48
   065e   30 6c             br READ_HEX_NEXTCHAR
                        
   0660                 READ_HEX_HEXDIGIT   
   0660   27                dec R7
   0661   87                glo R7
   0662   3a 69             bnz READ_HEX_HEXDIGITLOWER
   0664   04                ldn R4
   0665   ff 37             smi 55
   0667   30 6c             br READ_HEX_NEXTCHAR
                            
   0669                 READ_HEX_HEXDIGITLOWER
   0669   04                ldn R4
   066a   ff 57             smi 87
                            
   066c                 READ_HEX_NEXTCHAR
   066c   f4                add
   066d   55                str R5
   066e   14                inc R4
   066f   30 1e             br READ_HEX_MAINLOOP
                        
   0671                 READ_HEX_END
   0671   8f                glo STACK_REG
   0672   fc 05             adi 5
   0674   af                plo STACK_REG
   0675   9f                ghi STACK_REG
   0676   7c 00             adci 0
   0678   bf                phi STACK_REG
                            
   0679   ef                sex STACK_REG
                            
   067a   72                ldxa
   067b   a7                plo R7
   067c   72                ldxa
   067d   b7                phi R7
                            
   067e   72                ldxa
   067f   a6                plo R6
   0680   f0                ldx
   0681   b6                phi R6
                            
   0682   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-FACTOR---------------------------------------
                        ;-R4-string pointer----------------------------
                        ;-R5-result pointer----------------------------
                        ;-R10-result code------------------------------
   0683                 FACTOR
   0683   ef                sex STACK_REG
                            
   0684   94                ghi R4
   0685   73                stxd
   0686   84                glo R4
   0687   73                stxd    ;+4 string pt
                            
   0688   95                ghi R5
   0689   73                stxd
   068a   85                glo R5
   068b   73                stxd    ;+2 result pt
                            
   068c   f8 00             ldi 0
   068e   73                stxd    ;+1 flag, indicates if the factor needs to be negated
                            
                            
   068f                 FACTOR_MAIN
   068f   04                ldn R4
   0690   fb 20             xri 32
   0692   c2 06 fe          lbz FACTOR_NEXT_CYCLE       ;if ' '
   0695   04                ldn R4
   0696   fb 2b             xri 43
   0698   c2 06 fe          lbz FACTOR_NEXT_CYCLE       ;if '+'
   069b   04                ldn R4
   069c   fb 2d             xri 45
   069e   c2 06 f3          lbz FACTOR_NEGATE           ;if '-'
   06a1   04                ldn R4
   06a2   fb 28             xri 40
   06a4   c2 06 d9          lbz FACTOR_PARENTHESIS      ;if '('
   06a7   04                ldn R4
   06a8   ff 30             smi 48
   06aa   cb 07 02          lbnf FACTOR_END             ;if *R4 < '0'
   06ad   ff 0a             smi 10
   06af   c3 07 02          lbdf FACTOR_END             ;if *R4 > '9'
                        
   06b2   04                ldn R4
   06b3   fb 30             xri 48
   06b5   3a be             bnz FACTOR_READ_DEC         ;if *R4 != '0'
                            
   06b7   14                inc R4                      ;increment R4 to get the next char
   06b8   04                ldn R4
   06b9   fb 78             xri 120
   06bb   32 cb             bz FACTOR_READ_HEX          ;if *R4 == 'x'
                            
   06bd   24                dec R4                      ;decrement R4 to step back
                        
   06be                 FACTOR_READ_DEC    
   06be   f8 61             ldi READ_DEC.0
   06c0   ad                plo CALL_REG
   06c1   f8 05             ldi READ_DEC.1
   06c3   bd                phi CALL_REG
                            
   06c4   f8 00             ldi FCALL.0
   06c6   ae                plo FCALL_REG
   06c7   de                sep FCALL_REG
                            
   06c8   c0 07 02          lbr FACTOR_END
                            
   06cb                 FACTOR_READ_HEX
   06cb   14                inc R4
                            
   06cc   f8 01             ldi READ_HEX.0
   06ce   ad                plo CALL_REG
   06cf   f8 06             ldi READ_HEX.1
   06d1   bd                phi CALL_REG
                            
   06d2   f8 00             ldi FCALL.0
   06d4   ae                plo FCALL_REG
   06d5   de                sep FCALL_REG
                            
   06d6   c0 07 02          lbr FACTOR_END
                            
   06d9                 FACTOR_PARENTHESIS
   06d9   14                inc R4
                            
   06da   f8 28             ldi EXPRESSION.0
   06dc   ad                plo CALL_REG
   06dd   f8 08             ldi EXPRESSION.1
   06df   bd                phi CALL_REG
                            
   06e0   f8 00             ldi FCALL.0
   06e2   ae                plo FCALL_REG
   06e3   de                sep FCALL_REG
                        
   06e4                 FACTOR_PARENTHESIS_SKIPSPACES
   06e4   44                lda R4
   06e5   fb 20             xri 32
   06e7   32 e4             bz FACTOR_PARENTHESIS_SKIPSPACES
   06e9   24                dec R4
                            
   06ea   44                lda R4
   06eb   fb 29             xri 41
   06ed   c2 07 02          lbz FACTOR_END
                            
   06f0   c0 06 8f          lbr FACTOR_MAIN
                            
   06f3                 FACTOR_NEGATE
   06f3   8f                glo STACK_REG
   06f4   a6                plo R6
   06f5   9f                ghi STACK_REG
   06f6   b6                phi R6
   06f7   16                inc R6
                            
   06f8   06                ldn R6
   06f9   fb ff             xri 0FFh
   06fb   fa 01             ani 1
   06fd   56                str R6
                            
   06fe                 FACTOR_NEXT_CYCLE
   06fe   14                inc R4
   06ff   c0 06 8f          lbr FACTOR_MAIN
                            
   0702                 FACTOR_END
   0702   8f                glo STACK_REG
   0703   a6                plo R6
   0704   9f                ghi STACK_REG
   0705   b6                phi R6
   0706   16                inc R6
                            
   0707   06                ldn R6
   0708   c2 07 28          lbz FACTOR_FINAL
                            
   070b   8f                glo STACK_REG
   070c   fc 02             adi 2
   070e   a6                plo R6
   070f   9f                ghi STACK_REG
   0710   7c 00             adci 0
   0712   b6                phi R6
                            
   0713   06                ldn R6
   0714   a5                plo R5
   0715   16                inc R6
   0716   06                ldn R6
   0717   b5                phi R5
                            
   0718   e5                sex R5
                            
   0719   f8 82             ldi 082h
   071b   fe                shl
   071c   a6                plo R6
                            
   071d                 FACTOR_INVERTING
   071d   f0                ldx
   071e   fb ff             xri 0FFh
   0720   7c 00             adci 0
   0722   55                str R5
   0723   60                irx
                            
   0724   26                dec R6
   0725   86                glo R6
   0726   3a 1d             bnz FACTOR_INVERTING
                            
   0728                 FACTOR_FINAL
   0728   8f                glo STACK_REG
   0729   fc 05             adi 5
   072b   af                plo STACK_REG
   072c   9f                ghi STACK_REG
   072d   7c 00             adci 0
   072f   bf                phi STACK_REG
                            
   0730   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-TERM-----------------------------------------
                        ;-R4-string pointer----------------------------
                        ;-R5-result------------------------------------
   0731                 TERM
   0731   ef                sex STACK_REG
                            
   0732   94                ghi R4
   0733   73                stxd
   0734   84                glo R4
   0735   73                stxd
                            
   0736   95                ghi R5
   0737   73                stxd
   0738   85                glo R5
   0739   73                stxd
                            
   073a   f8 83             ldi FACTOR.0
   073c   ad                plo CALL_REG
   073d   f8 06             ldi FACTOR.1
   073f   bd                phi CALL_REG
                            
   0740   f8 00             ldi FCALL.0
   0742   ae                plo FCALL_REG
   0743   de                sep FCALL_REG
                            
   0744                 TERM_MAIN
   0744   04                ldn R4
   0745   fb 20             xri 32
   0747   c2 08 12          lbz TERM_NEXT_CYCLE
   074a   04                ldn R4
   074b   fb 2a             xri 42
   074d   c2 07 bd          lbz TERM_MULTIPLY       ;if '*'
   0750   04                ldn R4
   0751   fb 2f             xri 47
   0753   32 58             bz TERM_DIVIDE          ;if '/'
                            
   0755   c0 08 16          lbr TERM_END
                            
   0758                 TERM_DIVIDE
   0758   14                inc R4
                            
   0759   f8 00             ldi 0
   075b   73                stxd
   075c   73                stxd
   075d   73                stxd
   075e   73                stxd    ;+5 remainder
                            
   075f   73                stxd
   0760   73                stxd
   0761   73                stxd
   0762   73                stxd    ;+1 divider
                            
   0763   8f                glo STACK_REG
   0764   a5                plo R5
   0765   9f                ghi STACK_REG
   0766   b5                phi R5
   0767   15                inc R5
                            
   0768   f8 83             ldi FACTOR.0
   076a   ad                plo CALL_REG
   076b   f8 06             ldi FACTOR.1
   076d   bd                phi CALL_REG
                            
   076e   f8 00             ldi FCALL.0
   0770   ae                plo FCALL_REG
   0771   de                sep FCALL_REG
                            
   0772   8f                glo STACK_REG ;save R4 pointer
   0773   fc 0b             adi 11
   0775   a6                plo R6
   0776   9f                ghi STACK_REG
   0777   7c 00             adci 0
   0779   b6                phi R6
                            
   077a   84                glo R4
   077b   56                str R6
   077c   16                inc R6
   077d   94                ghi R4
   077e   56                str R6
                            
   077f   8f                glo STACK_REG
   0780   fc 09             adi 9
   0782   a8                plo R8
   0783   9f                ghi STACK_REG
   0784   7c 00             adci 0
   0786   b8                phi R8
                            
   0787   08                ldn R8
   0788   a4                plo R4
   0789   a6                plo R6
   078a   18                inc R8
   078b   08                ldn R8
   078c   b4                phi R4
   078d   b6                phi R6
                            
   078e   8f                glo STACK_REG
   078f   a5                plo R5
   0790   9f                ghi STACK_REG
   0791   b5                phi R5
   0792   15                inc R5
                            
   0793   8f                glo STACK_REG
   0794   fc 05             adi 5
   0796   a7                plo R7
   0797   9f                ghi STACK_REG
   0798   7c 00             adci 0
   079a   b7                phi R7
                            
   079b   f8 d4             ldi INTEGER_DIV.0
   079d   ad                plo CALL_REG
   079e   f8 01             ldi INTEGER_DIV.1
   07a0   bd                phi CALL_REG
                            
   07a1   f8 00             ldi FCALL.0
   07a3   ae                plo FCALL_REG
   07a4   de                sep FCALL_REG
                            
   07a5   8f                glo STACK_REG
   07a6   fc 0b             adi 11
   07a8   a6                plo R6
   07a9   9f                ghi STACK_REG
   07aa   7c 00             adci 0
   07ac   b6                phi R6
                            
   07ad   06                ldn R6
   07ae   a4                plo R4
   07af   16                inc R6
   07b0   06                ldn R6
   07b1   b4                phi R4
                            
   07b2   8f                glo STACK_REG
   07b3   fc 08             adi 8
   07b5   af                plo STACK_REG
   07b6   9f                ghi STACK_REG
   07b7   7c 00             adci 0
   07b9   bf                phi STACK_REG
                        
   07ba   c0 07 44          lbr TERM_MAIN
                            
   07bd                 TERM_MULTIPLY
   07bd   14                inc R4
                            
   07be   f8 00             ldi 0
   07c0   73                stxd
   07c1   73                stxd
   07c2   73                stxd
   07c3   73                stxd
                            
   07c4   8f                glo STACK_REG
   07c5   a5                plo R5
   07c6   9f                ghi STACK_REG
   07c7   b5                phi R5
   07c8   15                inc R5
                            
   07c9   f8 83             ldi FACTOR.0
   07cb   ad                plo CALL_REG
   07cc   f8 06             ldi FACTOR.1
   07ce   bd                phi CALL_REG
                            
   07cf   f8 00             ldi FCALL.0
   07d1   ae                plo FCALL_REG
   07d2   de                sep FCALL_REG
                            
   07d3   8f                glo STACK_REG
   07d4   fc 07             adi 7
   07d6   a6                plo R6
   07d7   9f                ghi STACK_REG
   07d8   7c 00             adci 0
   07da   b6                phi R6
                            
   07db   84                glo R4
   07dc   56                str R6
   07dd   16                inc R6
   07de   94                ghi R4
   07df   56                str R6
                            
   07e0   8f                glo STACK_REG
   07e1   fc 05             adi 5
   07e3   a8                plo R8
   07e4   9f                ghi STACK_REG
   07e5   7c 00             adci 0
   07e7   b8                phi R8
                            
   07e8   08                ldn R8
   07e9   a4                plo R4
   07ea   a6                plo R6
   07eb   18                inc R8
   07ec   08                ldn R8
   07ed   b4                phi R4
   07ee   b6                phi R6
                            
   07ef   8f                glo STACK_REG
   07f0   a5                plo R5
   07f1   9f                ghi STACK_REG
   07f2   b5                phi R5
   07f3   15                inc R5
                            
   07f4   f8 72             ldi INTEGER_MUL.0
   07f6   ad                plo CALL_REG
   07f7   f8 03             ldi INTEGER_MUL.1
   07f9   bd                phi CALL_REG
                            
   07fa   f8 00             ldi FCALL.0
   07fc   ae                plo FCALL_REG
   07fd   de                sep FCALL_REG
                            
   07fe   8f                glo STACK_REG
   07ff   fc 07             adi 7
   0801   a6                plo R6
   0802   9f                ghi STACK_REG
   0803   7c 00             adci 0
   0805   b6                phi R6
                            
   0806   06                ldn R6
   0807   a4                plo R4
   0808   16                inc R6
   0809   06                ldn R6
   080a   b4                phi R4
                            
   080b   1f                inc STACK_REG
   080c   1f                inc STACK_REG
   080d   1f                inc STACK_REG
   080e   1f                inc STACK_REG
                        
   080f   c0 07 44          lbr TERM_MAIN
                            
   0812                 TERM_NEXT_CYCLE
   0812   14                inc R4
   0813   c0 07 44          lbr TERM_MAIN
                            
   0816                 TERM_END
   0816   8f                glo STACK_REG
   0817   a6                plo R6
   0818   9f                ghi STACK_REG
   0819   b6                phi R6
   081a   16                inc R6
                            
   081b   46                lda R6
   081c   a5                plo R5
   081d   46                lda R6
   081e   b5                phi R5
                            
   081f   8f                glo STACK_REG
   0820   fc 04             adi 4
   0822   af                plo STACK_REG
   0823   9f                ghi STACK_REG
   0824   7c 00             adci 0
   0826   bf                phi STACK_REG
                            
   0827   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-EXPRESSION-----------------------------------
                        ;-R4-string pointer----------------------------
                        ;-R5-result pointer----------------------------
                        ;-Local registers------------------------------
                        ;-R6-R7----------------------------------------
   0828                 EXPRESSION
   0828   ef                sex STACK_REG
                            
   0829   97                ghi R7      ;saving local registers
   082a   73                stxd
   082b   87                glo R7
   082c   73                stxd
                            
   082d   96                ghi R6
   082e   73                stxd
   082f   86                glo R6
   0830   73                stxd
                            
   0831   94                ghi R4      ;R4 pointer to input string 
   0832   73                stxd
   0833   84                glo R4
   0834   73                stxd        ;+3 input string pointer
                            
   0835   95                ghi R5      ;R5 pointer to result
   0836   73                stxd
   0837   85                glo R5
   0838   73                stxd        ;+1 result pointer
                            
   0839                 EXPRESSION_SKIPSPACES           ;skip spaces
   0839   44                lda R4
   083a   fb 20             xri 32
   083c   32 39             bz EXPRESSION_SKIPSPACES
   083e   24                dec R4
                            
   083f   f8 31             ldi TERM.0                  ;read TERM
   0841   ad                plo CALL_REG
   0842   f8 07             ldi TERM.1
   0844   bd                phi CALL_REG
                            
   0845   f8 00             ldi FCALL.0
   0847   ae                plo FCALL_REG
   0848   de                sep FCALL_REG
                            
   0849                 EXPRESSION_MAIN
   0849   04                ldn R4
   084a   fb 20             xri 32                      ;if ' '
   084c   c2 09 0e          lbz EXPRESSION_NEXT_CYCLE
   084f   04                ldn R4
   0850   fb 2b             xri 43                      ;if '+'
   0852   32 5d             bz EXPRESSION_ADD
   0854   04                ldn R4
   0855   fb 2d             xri 45                      ;if '-'
   0857   c2 08 b6          lbz EXPRESSION_SUB
                            
                            
   085a   c0 09 12          lbr EXPRESSION_END
                            
   085d                 EXPRESSION_ADD
   085d   14                inc R4
                            
   085e   f8 00             ldi 0               ;new result
   0860   73                stxd
   0861   73                stxd
   0862   73                stxd
   0863   73                stxd
                            
   0864   8f                glo STACK_REG       ;set R5 pointer to new result
   0865   a5                plo R5
   0866   9f                ghi STACK_REG
   0867   b5                phi R5
   0868   15                inc R5
                            
   0869   f8 31             ldi TERM.0          ;read TERM
   086b   ad                plo CALL_REG
   086c   f8 07             ldi TERM.1
   086e   bd                phi CALL_REG
                            
   086f   f8 00             ldi FCALL.0
   0871   ae                plo FCALL_REG
   0872   de                sep FCALL_REG
                            
   0873   8f                glo STACK_REG       ; set R6 register to point to the input string pointer
   0874   fc 07             adi 7
   0876   a6                plo R6
   0877   9f                ghi STACK_REG
   0878   7c 00             adci 0
   087a   b6                phi R6
                            
   087b   84                glo R4              ;input string pointer = R4
   087c   56                str R6
   087d   16                inc R6
   087e   94                ghi R4
   087f   56                str R6
                            
   0880   8f                glo STACK_REG       ;set R5 register to point to result
   0881   a5                plo R5
   0882   9f                ghi STACK_REG
   0883   b5                phi R5
   0884   15                inc R5
                            
   0885   8f                glo STACK_REG       ;set R6 register to point to the result pointer
   0886   fc 05             adi 5
   0888   a6                plo R6
   0889   9f                ghi STACK_REG
   088a   7c 00             adci 0
   088c   b6                phi R6
                            
   088d   06                ldn R6              ;R4 = result pointer
   088e   a4                plo R4
   088f   16                inc R6
   0890   06                ldn R6
   0891   b4                phi R4
                            
   0892   e4                sex R4
                            
   0893   f8 02             ldi 2
   0895   fe                shl
   0896   a7                plo R7
                            
   0897                 EXPRESSION_ADD_LOOP     ;*result pointer += result;
   0897   05                ldn R5
   0898   74                adc
   0899   54                str R4
   089a   15                inc R5
   089b   60                irx
                            
   089c   27                dec R7
   089d   87                glo R7
   089e   ca 08 97          lbnz EXPRESSION_ADD_LOOP
                            
   08a1   ef                sex STACK_REG
                            
   08a2   8f                glo STACK_REG       
   08a3   fc 07             adi 7
   08a5   a6                plo R6
   08a6   9f                ghi STACK_REG
   08a7   7c 00             adci 0
   08a9   b6                phi R6
                            
   08aa   06                ldn R6              ;R4 = input string pointer
   08ab   a4                plo R4
   08ac   16                inc R6
   08ad   06                ldn R6
   08ae   b4                phi R4
                            
   08af   1f                inc STACK_REG
   08b0   1f                inc STACK_REG
   08b1   1f                inc STACK_REG
   08b2   1f                inc STACK_REG
                        
   08b3   c0 08 49          lbr EXPRESSION_MAIN
                        
   08b6                 EXPRESSION_SUB
   08b6   14                inc R4
                            
   08b7   f8 00             ldi 0
   08b9   73                stxd
   08ba   73                stxd
   08bb   73                stxd
   08bc   73                stxd
                            
   08bd   8f                glo STACK_REG
   08be   a5                plo R5
   08bf   9f                ghi STACK_REG
   08c0   b5                phi R5
   08c1   15                inc R5
                            
   08c2   f8 31             ldi TERM.0
   08c4   ad                plo CALL_REG
   08c5   f8 07             ldi TERM.1
   08c7   bd                phi CALL_REG
                            
   08c8   f8 00             ldi FCALL.0
   08ca   ae                plo FCALL_REG
   08cb   de                sep FCALL_REG
                            
   08cc   8f                glo STACK_REG
   08cd   fc 07             adi 7
   08cf   a6                plo R6
   08d0   9f                ghi STACK_REG
   08d1   7c 00             adci 0
   08d3   b6                phi R6
                            
   08d4   84                glo R4
   08d5   56                str R6
   08d6   16                inc R6
   08d7   94                ghi R4
   08d8   56                str R6
                            
   08d9   8f                glo STACK_REG
   08da   a5                plo R5
   08db   9f                ghi STACK_REG
   08dc   b5                phi R5
   08dd   15                inc R5
                            
   08de   8f                glo STACK_REG
   08df   fc 05             adi 5
   08e1   a6                plo R6
   08e2   9f                ghi STACK_REG
   08e3   7c 00             adci 0
   08e5   b6                phi R6
                            
   08e6   06                ldn R6
   08e7   a4                plo R4
   08e8   16                inc R6
   08e9   06                ldn R6
   08ea   b4                phi R4
                            
   08eb   e4                sex R4
                            
   08ec   f8 82             ldi 082h
   08ee   fe                shl
   08ef   a7                plo R7
                            
   08f0                 EXPRESSION_SUB_LOOP
   08f0   05                ldn R5
   08f1   75                sdb
   08f2   54                str R4
   08f3   15                inc R5
   08f4   60                irx
                            
   08f5   27                dec R7
   08f6   87                glo R7
   08f7   3a f0             bnz EXPRESSION_SUB_LOOP
                            
   08f9   ef                sex STACK_REG
                            
   08fa   8f                glo STACK_REG
   08fb   fc 07             adi 7
   08fd   a6                plo R6
   08fe   9f                ghi STACK_REG
   08ff   7c 00             adci 0
   0901   b6                phi R6
                            
   0902   06                ldn R6
   0903   a4                plo R4
   0904   16                inc R6
   0905   06                ldn R6
   0906   b4                phi R4
                            
   0907   1f                inc STACK_REG
   0908   1f                inc STACK_REG
   0909   1f                inc STACK_REG
   090a   1f                inc STACK_REG
                        
   090b   c0 08 49          lbr EXPRESSION_MAIN
                        
   090e                 EXPRESSION_NEXT_CYCLE    
   090e   14                inc R4
   090f   c0 08 49          lbr EXPRESSION_MAIN
                            
   0912                 EXPRESSION_END
   0912   ef                sex STACK_REG
   0913   60                irx
                            
   0914   72                ldxa            ;restoring registers
   0915   a5                plo R5
   0916   72                ldxa
   0917   b5                phi R5
   0918   60                irx
   0919   60                irx
   091a   72                ldxa
   091b   a6                plo R6
   091c   72                ldxa
   091d   b6                phi R6
   091e   72                ldxa
   091f   a7                plo R7
   0920   f0                ldx
   0921   b7                phi R7
                            
   0922   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-HEXVIEWER------------------------------------
                        ;-R4-Start address-----------------------------
                        ;-R5-Count-------------------------------------
   0923                 HEX_BASE_SRT
   0923   0d 0a 42 61       db "\r\nBase address: 0x",0
   0927   73 65 20 61   
   092b   64 64 72 65   
   092f   73 73 3a 20   
   0933   30 78 00      
   0936                 HEX_HEADER_STR
   0936   0d 0a 0d 0a       db "\r\n\r\nOffset  00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F  String\r\n"
   093a   4f 66 66 73   
   093e   65 74 20 20   
   0942   30 30 20 30   
   0946   31 20 30 32   
   094a   20 30 33 20   
   094e   30 34 20 30   
   0952   35 20 30 36   
   0956   20 30 37 20   
   095a   30 38 20 30   
   095e   39 20 30 41   
   0962   20 30 42 20   
   0966   30 43 20 30   
   096a   44 20 30 45   
   096e   20 30 46 20   
   0972   20 53 74 72   
   0976   69 6e 67 0d   
   097a   0a            
   097b   2d 2d 2d 2d       db         "-------------------------------------------------------------------------\r\n",0
   097f   2d 2d 2d 2d   
   0983   2d 2d 2d 2d   
   0987   2d 2d 2d 2d   
   098b   2d 2d 2d 2d   
   098f   2d 2d 2d 2d   
   0993   2d 2d 2d 2d   
   0997   2d 2d 2d 2d   
   099b   2d 2d 2d 2d   
   099f   2d 2d 2d 2d   
   09a3   2d 2d 2d 2d   
   09a7   2d 2d 2d 2d   
   09ab   2d 2d 2d 2d   
   09af   2d 2d 2d 2d   
   09b3   2d 2d 2d 2d   
   09b7   2d 2d 2d 2d   
   09bb   2d 2d 2d 2d   
   09bf   2d 2d 2d 2d   
   09c3   2d 0d 0a 00   
                        ;              "0000:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................"
   09c7                 HEX_LINECNT_SEPARATOR
   09c7   3a 20 20 20       db ":   ",0
   09cb   00            
                            
   09cc                 HEXVIEWER
   09cc   ef                sex STACK_REG
                            
   09cd   f8 00             ldi 0
   09cf   73                stxd
   09d0   73                stxd
   09d1   94                ghi R4
   09d2   73                stxd
   09d3   84                glo R4
   09d4   73                stxd    ;+17 current address
                            
   09d5   f8 00             ldi 0
   09d7   73                stxd
   09d8   73                stxd
   09d9   94                ghi R4
   09da   73                stxd
   09db   84                glo R4
   09dc   73                stxd    ;+13 start address
                            
   09dd   f8 00             ldi 0
   09df   73                stxd
   09e0   73                stxd
   09e1   95                ghi R5
   09e2   73                stxd
   09e3   85                glo R5
   09e4   73                stxd    ;+9 last address
                            
   09e5   f8 00             ldi 0
   09e7   73                stxd
   09e8   73                stxd
   09e9   73                stxd
   09ea   73                stxd    ;+5 line counter
                            
   09eb   73                stxd
   09ec   73                stxd
   09ed   73                stxd
   09ee   73                stxd    ;+1 temp for hex digits
                            
   09ef   8f                glo STACK_REG
   09f0   fc 0d             adi 13
   09f2   a4                plo R4
   09f3   9f                ghi STACK_REG
   09f4   7c 00             adci 0
   09f6   b4                phi R4
                            
   09f7   8f                glo STACK_REG
   09f8   fc 09             adi 9
   09fa   a6                plo R6
   09fb   9f                ghi STACK_REG
   09fc   7c 00             adci 0
   09fe   b6                phi R6
                            
   09ff   e4                sex R4
                            
   0a00   85                glo R5      ;adding R5 value to start address and store it to last address
   0a01   f4                add
   0a02   56                str R6
   0a03   60                irx
   0a04   16                inc R6
   0a05   95                ghi R5
   0a06   74                adc
   0a07   56                str R6
   0a08   60                irx
   0a09   16                inc R6
   0a0a   f8 00             ldi 0
   0a0c   74                adc
   0a0d   56                str R6
                            
   0a0e   f8 23             ldi HEX_BASE_SRT.0     ;prepare to print base address
   0a10   a6                plo R6
   0a11   f8 09             ldi HEX_BASE_SRT.1
   0a13   b6                phi R6
                        	
   0a14   f8 52             ldi PRINT.0         ;prepare to call PRINT
   0a16   ad                plo CALL_REG
   0a17   f8 01             ldi PRINT.1
   0a19   bd                phi CALL_REG
                            
   0a1a   f8 00             ldi FCALL.0
   0a1c   ae                plo FCALL_REG
   0a1d   de                sep FCALL_REG
                            
   0a1e   8f                glo STACK_REG       ;prepare to print the address in hex
   0a1f   fc 0d             adi 13
   0a21   a4                plo R4
   0a22   9f                ghi STACK_REG
   0a23   7c 00             adci 0
   0a25   b4                phi R4
                            
   0a26   f8 04             ldi 4               ;with 4 digits
   0a28   a5                plo R5
                            
   0a29   f8 22             ldi PRINT_HEX.0     ;prepare to call PRINT_HEX
   0a2b   ad                plo CALL_REG
   0a2c   f8 04             ldi PRINT_HEX.1
   0a2e   bd                phi CALL_REG
                            
   0a2f   f8 00             ldi FCALL.0
   0a31   ae                plo FCALL_REG
   0a32   de                sep FCALL_REG
                            
   0a33   f8 36             ldi HEX_HEADER_STR.0     ;prepare to print the header
   0a35   a6                plo R6
   0a36   f8 09             ldi HEX_HEADER_STR.1
   0a38   b6                phi R6
                        	
   0a39   f8 52             ldi PRINT.0         ;prepare to call PRINT
   0a3b   ad                plo CALL_REG
   0a3c   f8 01             ldi PRINT.1
   0a3e   bd                phi CALL_REG
                            
   0a3f   f8 00             ldi FCALL.0
   0a41   ae                plo FCALL_REG
   0a42   de                sep FCALL_REG
                        
   0a43                 HEXVIEWER_MAINLOOP
   0a43   8f                glo STACK_REG       ;prepare to print the first address in hex
   0a44   fc 05             adi 5
   0a46   a4                plo R4
   0a47   9f                ghi STACK_REG
   0a48   7c 00             adci 0
   0a4a   b4                phi R4
                            
   0a4b   f8 04             ldi 4               ;with 4 digits
   0a4d   a5                plo R5
                            
   0a4e   f8 22             ldi PRINT_HEX.0     ;prepare to call PRINT_HEX
   0a50   ad                plo CALL_REG
   0a51   f8 04             ldi PRINT_HEX.1
   0a53   bd                phi CALL_REG
                            
   0a54   f8 00             ldi FCALL.0
   0a56   ae                plo FCALL_REG
   0a57   de                sep FCALL_REG
                            
   0a58   f8 c7             ldi HEX_LINECNT_SEPARATOR.0     ;prepare to print address separator
   0a5a   a6                plo R6
   0a5b   f8 09             ldi HEX_LINECNT_SEPARATOR.1
   0a5d   b6                phi R6
                        	
   0a5e   f8 52             ldi PRINT.0         ;prepare to call PRINT
   0a60   ad                plo CALL_REG
   0a61   f8 01             ldi PRINT.1
   0a63   bd                phi CALL_REG
                            
   0a64   f8 00             ldi FCALL.0
   0a66   ae                plo FCALL_REG
   0a67   de                sep FCALL_REG
                            
   0a68   f8 10             ldi 16      ;set R8 low to 16 for counting the bytes
   0a6a   a8                plo R8
                           
   0a6b                 HEXVIEWER_PRINT_HEX_LOOP
   0a6b   8f                glo STACK_REG       ;set R4 pointer to current address
   0a6c   fc 11             adi 17
   0a6e   a4                plo R4
   0a6f   9f                ghi STACK_REG
   0a70   7c 00             adci 0
   0a72   b4                phi R4
                            
   0a73   8f                glo STACK_REG       ;set R5 pointer to last address
   0a74   fc 09             adi 9
   0a76   a5                plo R5
   0a77   9f                ghi STACK_REG
   0a78   7c 00             adci 0
   0a7a   b5                phi R5
                        
   0a7b   e4                sex R4          ;check if current address is >= last address
                            
   0a7c   45                lda R5
   0a7d   f5                sd
   0a7e   60                irx
                            
   0a7f   45                lda R5
   0a80   75                sdb
   0a81   60                irx
                            
   0a82   45                lda R5
   0a83   75                sdb
   0a84   60                irx
                            
   0a85   05                ldn R5
   0a86   75                sdb
                            
   0a87   c3 0a af          lbdf HEXVIEWER_PRINT_HEX_SPACES   ;if current address >= last address then 
                        
   0a8a   8f                glo STACK_REG       ;set R4 pointer to current address
   0a8b   fc 11             adi 17
   0a8d   a4                plo R4
   0a8e   9f                ghi STACK_REG
   0a8f   7c 00             adci 0
   0a91   b4                phi R4
                            
   0a92   44                lda R4              ;get current address and load it in R5
   0a93   a5                plo R5
   0a94   44                lda R4
   0a95   b5                phi R5
                            
   0a96   05                ldn R5              ;get data from R5 address
   0a97   a5                plo R5              ;store data in R5 low
                            
   0a98   8f                glo STACK_REG       ;set R4 pointer to temp
   0a99   a4                plo R4
   0a9a   9f                ghi STACK_REG
   0a9b   b4                phi R4
   0a9c   14                inc R4
                            
   0a9d   85                glo R5              ;get data from R5 low
   0a9e   54                str R4              ;store data to temp
                           
   0a9f   f8 02             ldi 2
   0aa1   a5                plo R5              ;set R5 low to 2 digits
                            
   0aa2   f8 22             ldi PRINT_HEX.0     ;prepare to call PRINT_HEX
   0aa4   ad                plo CALL_REG
   0aa5   f8 04             ldi PRINT_HEX.1
   0aa7   bd                phi CALL_REG
                            
   0aa8   f8 00             ldi FCALL.0
   0aaa   ae                plo FCALL_REG
   0aab   de                sep FCALL_REG
                            
   0aac   c0 0a bf          lbr HEXVIEWER_NEXT_HEX
                            
   0aaf                 HEXVIEWER_PRINT_HEX_SPACES
   0aaf   f8 c9             ldi HEX_LINECNT_SEPARATOR+2.0     ;prepare to print two space
   0ab1   a6                plo R6
   0ab2   f8 09             ldi HEX_LINECNT_SEPARATOR+2.1
   0ab4   b6                phi R6
                        	
   0ab5   f8 52             ldi PRINT.0         ;prepare to call PRINT
   0ab7   ad                plo CALL_REG
   0ab8   f8 01             ldi PRINT.1
   0aba   bd                phi CALL_REG
                            
   0abb   f8 00             ldi FCALL.0
   0abd   ae                plo FCALL_REG
   0abe   de                sep FCALL_REG
                        
   0abf                 HEXVIEWER_NEXT_HEX
   0abf   f8 ca             ldi HEX_LINECNT_SEPARATOR+3.0     ;prepare to print a space
   0ac1   a6                plo R6
   0ac2   f8 09             ldi HEX_LINECNT_SEPARATOR+3.1
   0ac4   b6                phi R6
                        	
   0ac5   f8 52             ldi PRINT.0         ;prepare to call PRINT
   0ac7   ad                plo CALL_REG
   0ac8   f8 01             ldi PRINT.1
   0aca   bd                phi CALL_REG
                            
   0acb   f8 00             ldi FCALL.0
   0acd   ae                plo FCALL_REG
   0ace   de                sep FCALL_REG
                            
   0acf   8f                glo STACK_REG       ;set R4 pointer to current address
   0ad0   fc 11             adi 17
   0ad2   a4                plo R4
   0ad3   9f                ghi STACK_REG
   0ad4   7c 00             adci 0
   0ad6   b4                phi R4
                            
   0ad7   e4                sex R4
   0ad8   f8 01             ldi 1
   0ada   f4                add
   0adb   54                str R4
   0adc   60                irx
                            
   0add   f8 00             ldi 0
   0adf   74                adc
   0ae0   54                str R4
   0ae1   60                irx
                            
   0ae2   f8 00             ldi 0
   0ae4   74                adc
   0ae5   54                str R4
   0ae6   60                irx
                            
   0ae7   f8 00             ldi 0
   0ae9   74                adc
   0aea   54                str R4
                            
   0aeb   28                dec R8
   0aec   88                glo R8
   0aed   ca 0a 6b          lbnz HEXVIEWER_PRINT_HEX_LOOP
                            
   0af0   f8 ca             ldi HEX_LINECNT_SEPARATOR+3.0     ;prepare to print a space
   0af2   a6                plo R6
   0af3   f8 09             ldi HEX_LINECNT_SEPARATOR+3.1
   0af5   b6                phi R6
                        	
   0af6   f8 52             ldi PRINT.0         ;prepare to call PRINT
   0af8   ad                plo CALL_REG
   0af9   f8 01             ldi PRINT.1
   0afb   bd                phi CALL_REG
                            
   0afc   f8 00             ldi FCALL.0
   0afe   ae                plo FCALL_REG
   0aff   de                sep FCALL_REG
                            
   0b00   8f                glo STACK_REG       ;set R4 pointer to current address
   0b01   fc 11             adi 17
   0b03   a4                plo R4
   0b04   9f                ghi STACK_REG
   0b05   7c 00             adci 0
   0b07   b4                phi R4
                            
   0b08   8f                glo STACK_REG       ;set R5 pointer to start address
   0b09   fc 0d             adi 13
   0b0b   a5                plo R5
   0b0c   9f                ghi STACK_REG
   0b0d   7c 00             adci 0
   0b0f   b5                phi R5
                            
   0b10   e5                sex R5
                            
   0b11   72                ldxa
   0b12   54                str R4
   0b13   14                inc R4
                            
   0b14   72                ldxa
   0b15   54                str R4
   0b16   14                inc R4
                            
   0b17   72                ldxa
   0b18   54                str R4
   0b19   14                inc R4
                            
   0b1a   72                ldxa
   0b1b   54                str R4
                            
   0b1c   f8 10             ldi 16      ;set R8 low to 16 for counting the bytes
   0b1e   a8                plo R8
                        
   0b1f                 HEXVIEWER_PRINT_STR_LOOP
   0b1f   8f                glo STACK_REG       ;set R4 pointer to current address
   0b20   fc 11             adi 17
   0b22   a4                plo R4
   0b23   9f                ghi STACK_REG
   0b24   7c 00             adci 0
   0b26   b4                phi R4
                            
   0b27   8f                glo STACK_REG       ;set R5 pointer to last address
   0b28   fc 09             adi 9
   0b2a   a5                plo R5
   0b2b   9f                ghi STACK_REG
   0b2c   7c 00             adci 0
   0b2e   b5                phi R5
                        
   0b2f   e4                sex R4          ;check if current address is <= last address
                            
   0b30   45                lda R5
   0b31   f5                sd
   0b32   60                irx
                            
   0b33   45                lda R5
   0b34   75                sdb
   0b35   60                irx
                            
   0b36   45                lda R5
   0b37   75                sdb
   0b38   60                irx
                            
   0b39   05                ldn R5
   0b3a   75                sdb
                            
   0b3b   33 70             bpz HEXVIEWER_PRINT_STR_SPACE   ;if current address >= last address then 
                            
   0b3d   8f                glo STACK_REG       ;set R4 pointer to current address
   0b3e   fc 11             adi 17
   0b40   a4                plo R4
   0b41   9f                ghi STACK_REG
   0b42   7c 00             adci 0
   0b44   b4                phi R4
                            
   0b45   44                lda R4              ;get current address and load it in R5
   0b46   a5                plo R5
   0b47   44                lda R4
   0b48   b5                phi R5
                            
   0b49   05                ldn R5              ;get data from R5 address
   0b4a   a5                plo R5              ;store data in R5 low
                            
   0b4b   ff 20             smi 32
   0b4d   3b 61             bm HEXVIEWER_PRINT_STR_DOT
   0b4f   ff 5f             smi 95
   0b51   33 61             bpz HEXVIEWER_PRINT_STR_DOT
                            
   0b53   85                glo R5
   0b54   b4                phi R4
                            
   0b55   f8 13             ldi SERIAL_SEND_START.0         ;prepare to call SERIAL_SEND_START to send one char
   0b57   ad                plo CALL_REG
   0b58   f8 01             ldi SERIAL_SEND_START.1
   0b5a   bd                phi CALL_REG
                            
   0b5b   f8 00             ldi FCALL.0
   0b5d   ae                plo FCALL_REG
   0b5e   de                sep FCALL_REG
                            
   0b5f   30 7d             br HEXVIEWER_NEXT_STR
                            
   0b61                 HEXVIEWER_PRINT_STR_DOT
   0b61   f8 2e             ldi 46
   0b63   b4                phi R4
                            
   0b64   f8 13             ldi SERIAL_SEND_START.0         ;prepare to call SERIAL_SEND_START to send one char
   0b66   ad                plo CALL_REG
   0b67   f8 01             ldi SERIAL_SEND_START.1
   0b69   bd                phi CALL_REG
                            
   0b6a   f8 00             ldi FCALL.0
   0b6c   ae                plo FCALL_REG
   0b6d   de                sep FCALL_REG
                            
   0b6e   30 7d             br HEXVIEWER_NEXT_STR
                        
   0b70                 HEXVIEWER_PRINT_STR_SPACE
   0b70   f8 20             ldi 32
   0b72   b4                phi R4
                            
   0b73   f8 13             ldi SERIAL_SEND_START.0         ;prepare to call SERIAL_SEND_START to send one char
   0b75   ad                plo CALL_REG
   0b76   f8 01             ldi SERIAL_SEND_START.1
   0b78   bd                phi CALL_REG
                            
   0b79   f8 00             ldi FCALL.0
   0b7b   ae                plo FCALL_REG
   0b7c   de                sep FCALL_REG
                            
   0b7d                 HEXVIEWER_NEXT_STR
   0b7d   8f                glo STACK_REG       ;set R4 pointer to current address
   0b7e   fc 11             adi 17
   0b80   a4                plo R4
   0b81   9f                ghi STACK_REG
   0b82   7c 00             adci 0
   0b84   b4                phi R4
                            
   0b85   e4                sex R4
   0b86   f8 01             ldi 1
   0b88   f4                add
   0b89   54                str R4
   0b8a   60                irx
                            
   0b8b   f8 00             ldi 0
   0b8d   74                adc
   0b8e   54                str R4
   0b8f   60                irx
                            
   0b90   f8 00             ldi 0
   0b92   74                adc
   0b93   54                str R4
   0b94   60                irx
                            
   0b95   f8 00             ldi 0
   0b97   74                adc
   0b98   54                str R4
                            
   0b99   28                dec R8
   0b9a   88                glo R8
   0b9b   3a 1f             bnz HEXVIEWER_PRINT_STR_LOOP
                            
   0b9d   f8 92             ldi NEW_LINE.0     ;prepare to print a space
   0b9f   a6                plo R6
   0ba0   f8 0d             ldi NEW_LINE.1
   0ba2   b6                phi R6
                        	
   0ba3   f8 52             ldi PRINT.0         ;prepare to call PRINT
   0ba5   ad                plo CALL_REG
   0ba6   f8 01             ldi PRINT.1
   0ba8   bd                phi CALL_REG
                            
   0ba9   f8 00             ldi FCALL.0
   0bab   ae                plo FCALL_REG
   0bac   de                sep FCALL_REG
                            
   0bad   8f                glo STACK_REG       ;set R4 pointer to current address
   0bae   fc 11             adi 17
   0bb0   a4                plo R4
   0bb1   9f                ghi STACK_REG
   0bb2   7c 00             adci 0
   0bb4   b4                phi R4
                            
   0bb5   8f                glo STACK_REG       ;set R5 pointer to last address
   0bb6   fc 09             adi 9
   0bb8   a5                plo R5
   0bb9   9f                ghi STACK_REG
   0bba   7c 00             adci 0
   0bbc   b5                phi R5
                        
   0bbd   e4                sex R4          ;check if current address is >= last address
                            
   0bbe   45                lda R5
   0bbf   f5                sd
   0bc0   60                irx
                            
   0bc1   45                lda R5
   0bc2   75                sdb
   0bc3   60                irx
                            
   0bc4   45                lda R5
   0bc5   75                sdb
   0bc6   60                irx
                            
   0bc7   05                ldn R5
   0bc8   75                sdb
                            
   0bc9   c3 0c 07          lbdf HEXVIEWER_END
                            
   0bcc   8f                glo STACK_REG       ;set R4 pointer to line counter
   0bcd   fc 05             adi 5
   0bcf   a4                plo R4
   0bd0   9f                ghi STACK_REG
   0bd1   7c 00             adci 0
   0bd3   b4                phi R4
                            
   0bd4   e4                sex R4
                            
   0bd5   f8 10             ldi 16
   0bd7   f4                add
   0bd8   54                str R4
   0bd9   60                irx
                            
   0bda   f8 00             ldi 0
   0bdc   74                adc
   0bdd   54                str R4
   0bde   60                irx
                            
   0bdf   f8 00             ldi 0
   0be1   74                adc
   0be2   54                str R4
   0be3   60                irx
                            
   0be4   f8 00             ldi 0
   0be6   74                adc
   0be7   54                str R4
                            
   0be8   8f                glo STACK_REG       ;set R4 pointer to current address
   0be9   fc 11             adi 17
   0beb   a4                plo R4
   0bec   9f                ghi STACK_REG
   0bed   7c 00             adci 0
   0bef   b4                phi R4
                            
   0bf0   8f                glo STACK_REG       ;set R5 pointer to start address
   0bf1   fc 0d             adi 13
   0bf3   a5                plo R5
   0bf4   9f                ghi STACK_REG
   0bf5   7c 00             adci 0
   0bf7   b5                phi R5
                            
   0bf8   e4                sex R4
                            
   0bf9   72                ldxa
   0bfa   55                str R5
   0bfb   15                inc R5
                            
   0bfc   72                ldxa
   0bfd   55                str R5
   0bfe   15                inc R5
                            
   0bff   72                ldxa
   0c00   55                str R5
   0c01   15                inc R5
                            
   0c02   72                ldxa
   0c03   55                str R5
                            
   0c04   c0 0a 43          lbr HEXVIEWER_MAINLOOP
                        
   0c07                 HEXVIEWER_END
   0c07   8f                glo STACK_REG
   0c08   fc 14             adi 20
   0c0a   af                plo STACK_REG
   0c0b   9f                ghi STACK_REG
   0c0c   7c 00             adci 0
   0c0e   bf                phi STACK_REG
                            
   0c0f   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-HEXVIEW_CALLER-------------------------------
   0c10                 HEXVIEW_CALLER
   0c10   ef                sex STACK_REG
                            
   0c11   f8 00             ldi 0
   0c13   73                stxd
   0c14   73                stxd
   0c15   73                stxd
   0c16   73                stxd    ;+5 first arg
                            
   0c17   73                stxd
   0c18   73                stxd
   0c19   f8 01             ldi 1
   0c1b   73                stxd
   0c1c   f8 00             ldi 0
   0c1e   73                stxd    ;+1 second arg
                            
   0c1f   8f                glo STACK_REG
   0c20   fc 05             adi 5
   0c22   a5                plo R5
   0c23   9f                ghi STACK_REG
   0c24   7c 00             adci 0
   0c26   b5                phi R5
                            
   0c27   f8 28             ldi EXPRESSION.0
   0c29   ad                plo CALL_REG
   0c2a   f8 08             ldi EXPRESSION.1
   0c2c   bd                phi CALL_REG
                            
   0c2d   f8 00             ldi FCALL.0
   0c2f   ae                plo FCALL_REG
   0c30   de                sep FCALL_REG
                            
   0c31   44                lda R4
   0c32   fb 2c             xri 44
   0c34   32 49             bz HEXVIEW_CALLER_NEXTARG
   0c36   24                dec R4
   0c37   44                lda R4
   0c38   32 58             bz HEXVIEW_CALLER_EXEC
   0c3a   24                dec R4
                            
   0c3b   04                ldn R4
   0c3c   b4                phi R4
                            
   0c3d   f8 13             ldi SERIAL_SEND_START.0
   0c3f   ad                plo CALL_REG
   0c40   f8 01             ldi SERIAL_SEND_START.1
   0c42   bd                phi CALL_REG
                            
   0c43   f8 00             ldi FCALL.0
   0c45   ae                plo FCALL_REG
   0c46   de                sep FCALL_REG
                            
   0c47   30 77             br HEXVIEW_CALLER_END
                            
   0c49                 HEXVIEW_CALLER_NEXTARG
   0c49   8f                glo STACK_REG
   0c4a   a5                plo R5
   0c4b   9f                ghi STACK_REG
   0c4c   b5                phi R5
   0c4d   15                inc R5
                            
   0c4e   f8 28             ldi EXPRESSION.0
   0c50   ad                plo CALL_REG
   0c51   f8 08             ldi EXPRESSION.1
   0c53   bd                phi CALL_REG
                            
   0c54   f8 00             ldi FCALL.0
   0c56   ae                plo FCALL_REG
   0c57   de                sep FCALL_REG
                            
   0c58                 HEXVIEW_CALLER_EXEC
   0c58   8f                glo STACK_REG
   0c59   fc 05             adi 5
   0c5b   a5                plo R5
   0c5c   9f                ghi STACK_REG
   0c5d   7c 00             adci 0
   0c5f   b5                phi R5
                            
   0c60   45                lda R5
   0c61   a4                plo R4
   0c62   45                lda R5
   0c63   b4                phi R4
                            
   0c64   8f                glo STACK_REG
   0c65   a6                plo R6
   0c66   9f                ghi STACK_REG
   0c67   b6                phi R6
   0c68   16                inc R6
                            
   0c69   46                lda R6
   0c6a   a5                plo R5
   0c6b   46                lda R6
   0c6c   b5                phi R5
                            
   0c6d   f8 cc             ldi HEXVIEWER.0
   0c6f   ad                plo CALL_REG
   0c70   f8 09             ldi HEXVIEWER.1
   0c72   bd                phi CALL_REG
                            
   0c73   f8 00             ldi FCALL.0
   0c75   ae                plo FCALL_REG
   0c76   de                sep FCALL_REG
                            
   0c77                 HEXVIEW_CALLER_END
   0c77   8f                glo STACK_REG
   0c78   fc 08             adi 8
   0c7a   af                plo STACK_REG
   0c7b   9f                ghi STACK_REG
   0c7c   7c 00             adci 0
   0c7e   bf                phi STACK_REG
                            
   0c7f   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-TEST FUNCTION--------------------------------
   0c80                 TEST_STR1
   0c80   52 65 73 75       db "Result: ",0
   0c84   6c 74 3a 20   
   0c88   00            
                        
   0c89                 FUNC_TEST
   0c89   ef                sex STACK_REG
                            
   0c8a   f8 00             ldi 0
   0c8c   73                stxd
   0c8d   73                stxd
   0c8e   73                stxd
   0c8f   73                stxd    ;+1 result
                            
   0c90   8f                glo STACK_REG
   0c91   a5                plo R5
   0c92   9f                ghi STACK_REG
   0c93   b5                phi R5
   0c94   15                inc R5
                            
   0c95   f8 28             ldi EXPRESSION.0
   0c97   ad                plo CALL_REG
   0c98   f8 08             ldi EXPRESSION.1
   0c9a   bd                phi CALL_REG
                            
   0c9b   f8 00             ldi FCALL.0
   0c9d   ae                plo FCALL_REG
   0c9e   de                sep FCALL_REG
                            
   0c9f   8f                glo STACK_REG
   0ca0   a4                plo R4
   0ca1   9f                ghi STACK_REG
   0ca2   b4                phi R4
   0ca3   14                inc R4
                        
   0ca4   f8 00             ldi 0
   0ca6   a5                plo R5
                            
   0ca7   f8 ae             ldi PRINT_DEC.0     ;prepare to print the Decimal result.
   0ca9   ad                plo CALL_REG
   0caa   f8 04             ldi PRINT_DEC.1
   0cac   bd                phi CALL_REG
                            
   0cad   f8 00             ldi FCALL.0
   0caf   ae                plo FCALL_REG
   0cb0   de                sep FCALL_REG
                            
   0cb1   f8 92             ldi NEW_LINE.0  ;print newline
   0cb3   a6                plo R6
   0cb4   f8 0d             ldi NEW_LINE.1
   0cb6   b6                phi R6
                        	
   0cb7   f8 52             ldi PRINT.0     ;prepare to call PRINT
   0cb9   ad                plo CALL_REG
   0cba   f8 01             ldi PRINT.1
   0cbc   bd                phi CALL_REG
                            
   0cbd   f8 00             ldi FCALL.0
   0cbf   ae                plo FCALL_REG
   0cc0   de                sep FCALL_REG
                            
   0cc1   8f                glo STACK_REG
   0cc2   fc 04             adi 4
   0cc4   af                plo STACK_REG
   0cc5   9f                ghi STACK_REG
   0cc6   7c 00             adci 0
   0cc8   bf                phi STACK_REG
                            
   0cc9   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-COMMAND-CHECK--------------------------------
                        ;-R4-input string------------------------------
   0cca                 COMMAND_CHECK
   0cca   f8 a5             ldi COMMAND_FUNC_LIST.0
   0ccc   a5                plo R5
   0ccd   f8 0d             ldi COMMAND_FUNC_LIST.1
   0ccf   b5                phi R5
                            
   0cd0   f8 95             ldi COMMAND_LIST.0
   0cd2   a9                plo R9
   0cd3   f8 0d             ldi COMMAND_LIST.1
   0cd5   b9                phi R9
                            
   0cd6   84                glo R4
   0cd7   a6                plo R6
   0cd8   94                ghi R4
   0cd9   b6                phi R6
                            
   0cda                 COMMAND_CHECK_GOTOSPACE
   0cda   46                lda R6
   0cdb   c2 0c e6          lbz COMMAND_CHECK_INSERTZERO
   0cde   fb 20             xri 32
   0ce0   c2 0c e7          lbz COMMAND_CHECK_REPLACESPACE
   0ce3   c0 0c da          lbr COMMAND_CHECK_GOTOSPACE
                            
   0ce6                 COMMAND_CHECK_INSERTZERO
   0ce6   56                str R6
   0ce7                 COMMAND_CHECK_REPLACESPACE
   0ce7   26                dec R6
   0ce8   56                str R6
   0ce9   16                inc R6
                            
   0cea                 COMMAND_CHECK_LOOP
   0cea   84                glo R4
   0ceb   a8                plo R8
   0cec   94                ghi R4
   0ced   b8                phi R8
                            
   0cee   09                ldn R9
   0cef   c2 0d 17          lbz COMMAND_CHECK_END
                        
   0cf2   f8 c0             ldi STR_COMPARATOR.0
   0cf4   ad                plo CALL_REG
   0cf5   f8 01             ldi STR_COMPARATOR.1
   0cf7   bd                phi CALL_REG
                            
   0cf8   f8 00             ldi FCALL.0
   0cfa   ae                plo FCALL_REG
   0cfb   de                sep FCALL_REG
                            
   0cfc   8a                glo R10
   0cfd   ca 0d 0a          lbnz COMMAND_CHECK_EXEC
                            
   0d00                 COMMAND_CHECK_STR_END
   0d00   09                ldn R9
   0d01   19                inc R9
   0d02   ca 0d 00          lbnz COMMAND_CHECK_STR_END
                            
   0d05   15                inc R5
   0d06   15                inc R5
   0d07   c0 0c ea          lbr COMMAND_CHECK_LOOP
                            
   0d0a                 COMMAND_CHECK_EXEC
   0d0a   86                glo R6
   0d0b   a4                plo R4
   0d0c   96                ghi R6
   0d0d   b4                phi R4
                            
   0d0e   45                lda R5
   0d0f   ad                plo CALL_REG
   0d10   05                ldn R5
   0d11   bd                phi CALL_REG
                            
   0d12   f8 00             ldi FCALL.0
   0d14   ae                plo FCALL_REG
   0d15   de                sep FCALL_REG
                            
   0d16   de                sep RETURN
                            
   0d17                 COMMAND_CHECK_END
   0d17   f8 a9             ldi UNKNOWN_COMMAND.0  ;set the address of the boot msg in R6
   0d19   a6                plo R6
   0d1a   f8 0d             ldi UNKNOWN_COMMAND.1
   0d1c   b6                phi R6
                        	
   0d1d   f8 52             ldi PRINT.0     ;prepare to call PRINT
   0d1f   ad                plo CALL_REG
   0d20   f8 01             ldi PRINT.1
   0d22   bd                phi CALL_REG
                            
   0d23   f8 00             ldi FCALL.0
   0d25   ae                plo FCALL_REG
   0d26   de                sep FCALL_REG   ;call PRINT
                            
   0d27   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-MAIN-----------------------------------------
   0d28                 MAIN_PROGRAM
   0d28   f8 6b             ldi BOOT_MSG.0  ;set the address of the boot msg in R6
   0d2a   a6                plo R6
   0d2b   f8 0d             ldi BOOT_MSG.1
   0d2d   b6                phi R6
                        	
   0d2e   f8 52             ldi PRINT.0     ;prepare to call PRINT
   0d30   ad                plo CALL_REG
   0d31   f8 01             ldi PRINT.1
   0d33   bd                phi CALL_REG
                            
   0d34   f8 00             ldi FCALL.0
   0d36   ae                plo FCALL_REG
   0d37   de                sep FCALL_REG   ;call PRINT
                        
   0d38                 ASK_INPUT
   0d38   f8 00             ldi INPUT_BUFF.0    ;load the address of the buffer to R7
   0d3a   a7                plo R7
   0d3b   f8 20             ldi INPUT_BUFF.1
   0d3d   b7                phi R7
                            
   0d3e   f8 68             ldi READLINE.0      ;prepare to call READLINE
   0d40   ad                plo CALL_REG
   0d41   f8 01             ldi READLINE.1
   0d43   bd                phi CALL_REG
                            
   0d44   f8 00             ldi FCALL.0
   0d46   ae                plo FCALL_REG
   0d47   de                sep FCALL_REG       ;call READLINE
                            
                            ;Program goes here
   0d48   f8 00             ldi INPUT_BUFF.0
   0d4a   a4                plo R4
   0d4b   f8 20             ldi INPUT_BUFF.1
   0d4d   b4                phi R4
                            
   0d4e   f8 ca             ldi COMMAND_CHECK.0      ;prepare to call COMMAND_CHECK
   0d50   ad                plo CALL_REG
   0d51   f8 0c             ldi COMMAND_CHECK.1
   0d53   bd                phi CALL_REG
                            
   0d54   f8 00             ldi FCALL.0
   0d56   ae                plo FCALL_REG
   0d57   de                sep FCALL_REG
                            ;Program ends here
                            
   0d58   f8 8e             ldi ASK_IN.0        ;load the ASK_IN string's address to R6
   0d5a   a6                plo R6
   0d5b   f8 0d             ldi ASK_IN.1
   0d5d   b6                phi R6
                            
   0d5e   f8 52             ldi PRINT.0         ;prepare to call PRINT
   0d60   ad                plo CALL_REG
   0d61   f8 01             ldi PRINT.1
   0d63   bd                phi CALL_REG
                            
   0d64   f8 00             ldi FCALL.0
   0d66   ae                plo FCALL_REG
   0d67   de                sep FCALL_REG       ;call PRINT
                        	
   0d68   c0 0d 38          lbr ASK_INPUT
                        ;----------------------------------------------
                        
                        ;-CONSTANT DATA--------------------------------
   0d6b                 BOOT_MSG
   0d6b   5a 4c 45 44       db "ZLED - CDP1802 Terminal.\r\n\r\nREADY\r\n"
   0d6f   20 2d 20 43   
   0d73   44 50 31 38   
   0d77   30 32 20 54   
   0d7b   65 72 6d 69   
   0d7f   6e 61 6c 2e   
   0d83   0d 0a 0d 0a   
   0d87   52 45 41 44   
   0d8b   59 0d 0a      
   0d8e                 ASK_IN
   0d8e   0d 0a 3e 00       db "\r\n>",0
   0d92                 NEW_LINE
   0d92   0d 0a 00          db "\r\n",0
   0d95                 COMMAND_LIST
   0d95   70 72 69 6e       db "print",0,"mem_view",0,0
   0d99   74 00 6d 65   
   0d9d   6d 5f 76 69   
   0da1   65 77 00 00   
   0da5                 COMMAND_FUNC_LIST
   0da5   89 0c             db FUNC_TEST.0,FUNC_TEST.1
   0da7   10 0c             db HEXVIEW_CALLER.0,HEXVIEW_CALLER.1
   0da9                 UNKNOWN_COMMAND
   0da9   55 6e 6b 6e       db "Unknown command.\r\n",0
   0dad   6f 77 6e 20   
   0db1   63 6f 6d 6d   
   0db5   61 6e 64 2e   
   0db9   0d 0a 00      
   0dbc                 TEST_RESP
   0dbc   45 76 65 72       db "Everything is ok!",0
   0dc0   79 74 68 69   
   0dc4   6e 67 20 69   
   0dc8   73 20 6f 6b   
   0dcc   21 00         
                        
   0dce                     end
0d8e  ASK_IN        0d38  ASK_INPUT     0164  BACKSPACE_ACTION    0d6b  BOOT_MSG  
000d  CALL_REG      0283  CARRY_SHIFTING    0cca  COMMAND_CHECK    0d17  COMMAND_CHECK_END
0d0a  COMMAND_CHECK_EXEC    0cda  COMMAND_CHECK_GOTOSPACE    0ce6  COMMAND_CHECK_INSERTZERO    0cea  COMMAND_CHECK_LOOP
0ce7  COMMAND_CHECK_REPLACESPACE    0d00  COMMAND_CHECK_STR_END    0da5  COMMAND_FUNC_LIST    0d95  COMMAND_LIST
028d  DIVISION_LOOP    3000  DMA_ADDRESS    0013  DMA_INIT      0000  DMA_REG   
017a  END_LINE      0828  EXPRESSION    085d  EXPRESSION_ADD    0897  EXPRESSION_ADD_LOOP
0912  EXPRESSION_END    0849  EXPRESSION_MAIN    090e  EXPRESSION_NEXT_CYCLE    0839  EXPRESSION_SKIPSPACES
08b6  EXPRESSION_SUB    08f0  EXPRESSION_SUB_LOOP    0683  FACTOR        0702  FACTOR_END
0728  FACTOR_FINAL    071d  FACTOR_INVERTING    068f  FACTOR_MAIN    06f3  FACTOR_NEGATE
06fe  FACTOR_NEXT_CYCLE    06d9  FACTOR_PARENTHESIS    06e4  FACTOR_PARENTHESIS_SKIPSPACES    06be  FACTOR_READ_DEC
06cb  FACTOR_READ_HEX    0100  FCALL         000e  FCALL_REG     031f  FINAL_CHECK
0343  FINAL_CHECK2    010a  FRETURN       0c89  FUNC_TEST     09cc  HEXVIEWER 
0c07  HEXVIEWER_END    0a43  HEXVIEWER_MAINLOOP    0abf  HEXVIEWER_NEXT_HEX    0b7d  HEXVIEWER_NEXT_STR
0a6b  HEXVIEWER_PRINT_HEX_LOOP    0aaf  HEXVIEWER_PRINT_HEX_SPACES    0b61  HEXVIEWER_PRINT_STR_DOT    0b1f  HEXVIEWER_PRINT_STR_LOOP
0b70  HEXVIEWER_PRINT_STR_SPACE    0c10  HEXVIEW_CALLER    0c77  HEXVIEW_CALLER_END    0c58  HEXVIEW_CALLER_EXEC
0c49  HEXVIEW_CALLER_NEXTARG    0923  HEX_BASE_SRT    0412  HEX_CHARS     0936  HEX_HEADER_STR
09c7  HEX_LINECNT_SEPARATOR    2000  INPUT_BUFF    01d4  INTEGER_DIV    0224  INTEGER_DIV_INVERT_LOOP1
0234  INTEGER_DIV_NEXT_CHECK    0372  INTEGER_MUL    03d3  INTEGER_MUL_ADD    0409  INTEGER_MUL_END
039f  INTEGER_MUL_LOOP    03dc  INTEGER_MUL_SHIFT    03fd  INTEGER_MUL_SHMULTIPLICAND    03e9  INTEGER_MUL_SHMULTIPLIER
0262  INTEGER_SHIFT_DR    0001  INTP_REG      0002  INTX_REG      0253  INVERT_LOOP2
0337  INVERT_LOOP3    035e  INVERT_LOOP4    0d28  MAIN_PROGRAM    0d92  NEW_LINE  
0307  NEXT_BIT      0003  PC_REG        0152  PRINT         045e  PRINT_CHECK_DIGIT
04ae  PRINT_DEC     0540  PRINT_DEC_END    0549  PRINT_DEC_FINAL    04ed  PRINT_DEC_INVER_LOOP
04f8  PRINT_DEC_MAIN_LOOP    0461  PRINT_DIGIT_LOOP    0422  PRINT_HEX     048f  PRINT_HEX_END
0473  PRINT_HEX_SHIFT_LOOP1    0449  PRINT_UNTIL_R    000a  R10           000b  R11       
000c  R12           0004  R4            0005  R5            0006  R6        
0007  R7            0008  R8            0009  R9            0168  READLINE  
018e  READLINE_BACKSPACE    016b  READLINE_LOOP    0561  READ_DEC      05ef  READ_DEC_END
057b  READ_DEC_MAIN_LOOP    0601  READ_HEX      063d  READ_HEX_CONTINUE    0671  READ_HEX_END
0660  READ_HEX_HEXDIGIT    0669  READ_HEX_HEXDIGITLOWER    061e  READ_HEX_MAINLOOP    066c  READ_HEX_NEXTCHAR
0640  READ_HEX_SHIFTLOOP    000e  RETURN        013f  SERIAL_NULL_BIT    012d  SERIAL_READ_START
0139  SERIAL_SAMPLE_BIT    0143  SERIAL_SAVE_BIT    011b  SERIAL_SEND_BIT    0113  SERIAL_SEND_START
0131  SERIAL_WAIT_START    02a5  SHIFTING_Q    0276  SHIFT_DR      0314  SHIFT_SUBTRACTOR
ffff  STACK_ADDRESS    000f  STACK_REG     0000  START         01aa  STORE_CHAR
01c3  STR_CHARCHECK    01c0  STR_COMPARATOR    01c9  STR_EQUAL     01d0  STR_INC   
02fd  SUBTRACT_FOR_REAL    0731  TERM          0758  TERM_DIVIDE    0816  TERM_END  
0744  TERM_MAIN     07bd  TERM_MULTIPLY    0812  TERM_NEXT_CYCLE    0dbc  TEST_RESP 
0c80  TEST_STR1     0369  THE_END       02c7  TRY_SUBTRACTING    0da9  UNKNOWN_COMMAND
