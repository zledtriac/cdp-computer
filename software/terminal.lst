                        
   0000                 DMA_REG EQU 0
   0001                 INTP_REG EQU 1
   0002                 INTX_REG EQU 2
   0003                 PC_REG EQU 3
   0004                 R4 EQU 4
   0005                 R5 EQU 5
   0006                 R6 EQU 6
   0007                 R7 EQU 7
   0008                 R8 EQU 8
   0009                 R9 EQU 9
   000a                 R10 EQU 10
   000b                 R11 EQU 11
   000c                 R12 EQU 12
   000d                 CALL_REG EQU 13
   000e                 FCALL_REG EQU 14
   000e                 RETURN EQU 14
   000f                 STACK_REG EQU 15
                        
   ffff                 STACK_ADDRESS EQU 0FFFFh
   3000                 DMA_ADDRESS EQU 03000h
                        
   2000                 INPUT_BUFF EQU 02000h
                        
   2100                 VARLIST_COUNT EQU 02100h
   2102                 VARLIST_FIRSTNODE EQU 02102h
   2104                 VARLIST_LASTNODE EQU 02104h
                        
   2106                 HEAP_LASTADDRESS EQU 02106h
   2110                 HEAP_START EQU 02110h
   fc00                 HEAP_END EQU 0FC00h
                        
                        
   0000                     org 00h
                        
   0000                 START
   0000   71                dis
   0001   00                idl
                            
   0002   7b                seq     ;set Q output to high
                            
   0003   f8 ff             ldi STACK_ADDRESS.0 ;setup the STACK pointer
   0005   af                plo STACK_REG
   0006   f8 ff             ldi STACK_ADDRESS.1
   0008   bf                phi STACK_REG
                            
   0009   f8 01             ldi FCALL.1         ;setup FCALL
   000b   be                phi FCALL_REG
                            
   000c   f8 13             ldi DMA_INIT.0      ;switch PC to R3 and init DMA
   000e   a3                plo PC_REG
   000f   f8 00             ldi DMA_INIT.1
   0011   b3                phi PC_REG
                            
   0012   d3                sep PC_REG
                            
   0013                 DMA_INIT
   0013   f8 00             ldi DMA_ADDRESS.0   ;setup DMA address
   0015   a0                plo DMA_REG
   0016   f8 30             ldi DMA_ADDRESS.1
   0018   b0                phi DMA_REG
                            
   0019   c0 15 58          lbr MAIN_PROGRAM
                            
                        ;-FUNCTION CALL HELPER-------------------------
                        ;-WHERE TO JUMP-(CALL_REG)---------------------
   0100                     org 0100h
                            
   0100                 FCALL
   0100   ef                sex STACK_REG   ;set STACK as X register
   0101   93                ghi PC_REG      ;saving the PC value to stack
   0102   73                stxd
   0103   83                glo PC_REG
   0104   73                stxd
                            
   0105   8d                glo CALL_REG    ;put the new address in the PC
   0106   a3                plo PC_REG
   0107   9d                ghi CALL_REG
   0108   b3                phi PC_REG
   0109   d3                sep PC_REG      ;jumping to PC
                            
   010a                 FRETURN
   010a   1f                inc STACK_REG   ;increment the STACK register
   010b   ef                sex STACK_REG   ;set STACK as X register
   010c   72                ldxa            ;restoring PC from STACK
   010d   a3                plo PC_REG
   010e   f0                ldx
   010f   b3                phi PC_REG
   0110   d3                sep PC_REG      ;jumping to PC
   0111   30 0a             br FRETURN
                        ;----------------------------------------------
                        
                        ;-SERIAL SEND BYTE-----------------------------
                        ;-DATA-R4.1------------------------------------
   0113                 SERIAL_SEND_START
   0113   94                ghi R4      ;R4 high is the data, load it into the D reg
   0114   fb ff             xri 0FFh    ;invert it
   0116   b4                phi R4      ;put it back
   0117   f8 85             ldi 085h    ;load 0x85 to the D reg
   0119   fe                shl         ;shift it left so we get 0x0A and set the flag bit
   011a   a4                plo R4      ;put the 0x10 to R4 low, this will be our bit counter
                        
   011b                 SERIAL_SEND_BIT
   011b   c7                lsnf        ;24 - long skip if the flag is not set
   011c   7a                req         ;16 - reset Q if the flag is set
   011d   c8                lskp        ;24
   011e   7b                seq         ;16 - set Q if the flag is not set
   011f   c4                nop         ;24
                            
   0120   24                dec R4      ;16 - decrement R4, this will only affect the R4 lower 8bit
   0121   84                glo R4      ;16
   0122   c6                lsnz        ;24 - if R4 lower is not 0 then long skip
   0123   de                sep RETURN  ;--
   0124   c4                nop         ;--
   0125   94                ghi R4      ;16 - get R4 high
   0126   f6                shr         ;16 - shift it right to get LSB in the flag
   0127   b4                phi R4      ;16 - put it back
   0128   c4                nop         ;24
   0129   c4                nop         ;24
   012a   c4                nop         ;24
   012b   30 1b             br SERIAL_SEND_BIT ;16
                        ;----------------------------------------------
                        
                        ;-SERIAL READ BYTE-----------------------------
                        ;-RETURN R5.1----------------------------------
   012d                 SERIAL_READ_START
   012d   f8 00             ldi 00h     ;set input data register to 0
   012f   a5                plo R5
   0130   b5                phi R5
                            
   0131                 SERIAL_WAIT_START
   0131   3c 31             bn1 SERIAL_WAIT_START ;16 - loop until EF1 goes low
   0133   c4                nop         ;24
   0134   c4                nop         ;24
   0135   c4                nop         ;24
   0136   c4                nop         ;24
   0137   f9 00             ori 00h     ;16 - do nothing for 16 clock cycles
                        
   0139                 SERIAL_SAMPLE_BIT
   0139   34 3f             b1 SERIAL_NULL_BIT  ;16 - checking the EF1
   013b   f9 80             ori 080h            ;16 - if EF1 is high then set MSB to 1 in D register
   013d   30 43             br SERIAL_SAVE_BIT  ;16
                        
   013f                 SERIAL_NULL_BIT
   013f   f9 00             ori 00h         ;16 - of EF1 is low we do nothing
   0141   f9 00             ori 00h         ;16
                        
   0143                 SERIAL_SAVE_BIT
   0143   b5                phi R5          ;16 - put D in R5 high
   0144   15                inc R5          ;16 - increment R5, this will only affect R5 low 8bit
   0145   85                glo R5          ;16 - get R5 low to D register
   0146   fb 09             xri 09h         ;16 - D = D ^ 0x09
   0148   c6                lsnz            ;24 
   0149   de                sep RETURN      ;--
   014a   c4                nop             ;--
   014b   95                ghi R5          ;16 - get R5 high
   014c   f6                shr             ;16 - shift it righ
   014d   c4                nop             ;24
   014e   c4                nop             ;24
   014f   c4                nop             ;24
   0150   30 39             br SERIAL_SAMPLE_BIT ;16
                        ;----------------------------------------------
                        
                        ;-PRINT----------------------------------------
                        ;-FIRST CHAR-R6--------------------------------
   0152                 PRINT
   0152   e6                sex R6          ;set X register to R6
   0153   72                ldxa            ;load data to D and increment R6
   0154   c6                lsnz            ;if it is not zero then long skip
   0155   de                sep RETURN
   0156   c4                nop
                            
   0157   b4                phi R4          ;put D register to R4 to send it
                            
   0158   f8 13             ldi SERIAL_SEND_START.0     ;prepare to call SERIAL_SEND
   015a   ad                plo CALL_REG
   015b   f8 01             ldi SERIAL_SEND_START.1
   015d   bd                phi CALL_REG
                            
   015e   f8 00             ldi FCALL.0
   0160   ae                plo FCALL_REG
   0161   de                sep FCALL_REG   ;call SERIAL_SEND
   0162   30 52             br PRINT
                        ;----------------------------------------------
                        
   0164                 BACKSPACE_ACTION
   0164   08 20 08 00       db 8, 32, 8, 0
                        ;-READ LINE------------------------------------
                        ;-WHERE TO READ-R7-----------------------------
                        ;-R8.1-Character counter-------------------------
   0168                 READLINE
   0168   f8 00             ldi 0
   016a   a8                plo R8
                            
   016b                 READLINE_LOOP
   016b   f8 2d             ldi SERIAL_READ_START.0     ;prepare calling SERIAL_READ
   016d   ad                plo CALL_REG
   016e   f8 01             ldi SERIAL_READ_START.1
   0170   bd                phi CALL_REG
                            
   0171   f8 00             ldi FCALL.0
   0173   ae                plo FCALL_REG
   0174   de                sep FCALL_REG       ;call SERIAL_READ
                            
   0175   95                ghi R5              ;get the result of SERIAL_READ
   0176   fb 0d             xri 13              ;check if it is 13 (ENTER KEY)
   0178   3a 8e             bnz READLINE_BACKSPACE      ;if not jump to READLINE_BACKSPACE
                            
   017a                 END_LINE
   017a   f8 00             ldi 00h             ;put 0 to the endof the string
   017c   57                str R7
                            
   017d   f8 d6             ldi NEW_LINE.0      ;load the address of CRLF string
   017f   a6                plo R6
   0180   f8 15             ldi NEW_LINE.1
   0182   b6                phi R6
                            
   0183   f8 52             ldi PRINT.0         ;prepare to call PRINT
   0185   ad                plo CALL_REG
   0186   f8 01             ldi PRINT.1
   0188   bd                phi CALL_REG
                            
   0189   f8 00             ldi FCALL.0
   018b   ae                plo FCALL_REG
   018c   de                sep FCALL_REG       ;call PRINT
                            
   018d   de                sep RETURN          ;RETURN from READLINE
                            
   018e                 READLINE_BACKSPACE
   018e   95                ghi R5              ;get the result of SERIAL_READ
   018f   fb 7f             xri 127             ;check if it is 127 (DEL)
   0191   3a aa             bnz STORE_CHAR      ;if not jump to STORE_CHAR
                            
   0193   88                glo R8
   0194   32 6b             bz READLINE_LOOP
                            
   0196   f8 64             ldi BACKSPACE_ACTION.0      ;load the address of the backspace action
   0198   a6                plo R6
   0199   f8 01             ldi BACKSPACE_ACTION.1
   019b   b6                phi R6
                            
   019c   f8 52             ldi PRINT.0                 ;prepare to call PRINT
   019e   ad                plo CALL_REG
   019f   f8 01             ldi PRINT.1
   01a1   bd                phi CALL_REG
                            
   01a2   f8 00             ldi FCALL.0
   01a4   ae                plo FCALL_REG
   01a5   de                sep FCALL_REG               ;call PRINT
                            
   01a6   27                dec R7
   01a7   28                dec R8
                            
   01a8   30 6b             br READLINE_LOOP
                            
   01aa                 STORE_CHAR
   01aa   88                glo R8
   01ab   fb ff             xri 0FFh
   01ad   32 6b             bz READLINE_LOOP
                            
   01af   95                ghi R5              ;get the result of the SERIAL_READ again
   01b0   57                str R7              ;store it where R7 pointing
   01b1   17                inc R7              ;increment R7
   01b2   18                inc R8
                            
   01b3   b4                phi R4              ;load the result to R4 to Echo it back
                            
   01b4   f8 13             ldi SERIAL_SEND_START.0     ;prepare to call SERIAL_SEND
   01b6   ad                plo CALL_REG
   01b7   f8 01             ldi SERIAL_SEND_START.1
   01b9   bd                phi CALL_REG
                            
   01ba   f8 00             ldi FCALL.0
   01bc   ae                plo FCALL_REG
   01bd   de                sep FCALL_REG       ;call SERIAL_SEND
   01be   30 6b             br READLINE_LOOP
                        ;----------------------------------------------
                        
                        ;-STR COMPARATOR-------------------------------
                        ;-R8 stringA-R9 stringB------------------------
                        ;-RETURN R10.0---------------------------------
   01c0                 STR_COMPARATOR
   01c0   f8 00             ldi 0           ;R10 low is the result, set it to 0
   01c2   aa                plo R10
                        	
   01c3                 STR_CHARCHECK
   01c3   08                ldn R8          ;load value from RAM[R8] to D register
   01c4   e9                sex R9          ;set X pointer to R9
   01c5   f3                xor             ;D = D ^ RAM[R9]
                            
   01c6   32 c9             bz STR_EQUAL    ;if D == 0 jump to STR_EQUAL
   01c8   de                sep RETURN      ;RETURN
                            
   01c9                 STR_EQUAL 
   01c9   08            	ldn R8          ;load value from RAM[R8] to D register again
   01ca   3a d0         	bnz STR_INC     ;if D != 0 jump to STR_INC
   01cc   f8 01         	ldi 1           ;set R10 to 1 and return
   01ce   aa            	plo R10
   01cf   de            	sep RETURN
                        	
   01d0                 STR_INC
   01d0   18            	inc R8          ;increment both address by 1
   01d1   19            	inc R9
   01d2   30 c3         	br STR_CHARCHECK
                        ;----------------------------------------------
                        
                        ;-INTEGER DIV----------------------------------
                        ;-R4 pointing to divident----------------------
                        ;-R5 pointing to divider-----------------------
                        ;-R6 pointing to quotient----------------------
                        ;-R7 pointing to remainder---------------------
                        ;-R8.0 bitcnt, R8.1 flags----------------------
                        ;-R9 general counter---------------------------
   01d4                 INTEGER_DIV
   01d4   ef                sex STACK_REG   ;set STACK_REG as data pointer to store variables in STACK
   01d5   f8 00             ldi 0           ;set bitcnt and flags to 0
   01d7   a8                plo R8
   01d8   b8                phi R8
                            
   01d9   15                inc R5          ;increment R5 to the MSB because we want to store the divider it in little-endian format
   01da   15                inc R5
   01db   15                inc R5
                            
   01dc   05                ldn R5          ;copying starts here
   01dd   73                stxd
   01de   25                dec R5
                            
   01df   05                ldn R5
   01e0   73                stxd
   01e1   25                dec R5
                            
   01e2   05                ldn R5
   01e3   73                stxd
   01e4   25                dec R5
                            
   01e5   05                ldn R5
   01e6   73                stxd            ;+11 divider, +11 shows the start of the data from the STACK pointer
                            
   01e7   f8 00             ldi 0           ;storing 0 for the subtractor
   01e9   73                stxd
   01ea   73                stxd
   01eb   73                stxd
   01ec   73                stxd            ;+7 subtractor
                            
   01ed   96                ghi R6          ;saving the quotient pointer
   01ee   73                stxd
   01ef   86                glo R6
   01f0   73                stxd            ;+5 quotient pointer
                        
   01f1   97                ghi R7          ;saving the remainder
   01f2   73                stxd
   01f3   87                glo R7
   01f4   73                stxd            ;+3 remainder pointer
                            
   01f5   94                ghi R4          ;saving the dividend pointer
   01f6   73                stxd
   01f7   84                glo R4
   01f8   73                stxd            ;+1 dividend pointer
                            
   01f9   e4                sex R4
                            
   01fa   72                ldxa            ;copy dividend to remainder
   01fb   57                str R7
   01fc   17                inc R7
                            
   01fd   72                ldxa
   01fe   57                str R7
   01ff   17                inc R7
                            
   0200   72                ldxa
   0201   57                str R7
   0202   17                inc R7
                            
   0203   f0                ldx
   0204   57                str R7
                            
   0205   f8 00             ldi 0
   0207   56                str R6
   0208   16                inc R6
   0209   56                str R6
   020a   16                inc R6
   020b   56                str R6
   020c   16                inc R6
   020d   56                str R6
                        
   020e   8f                glo STACK_REG   ;get the STACK_REG pointer to position it to the divider MSB
   020f   fc 0e             adi 14          ;add 14 to it
   0211   a5                plo R5          ;store the new pointer to R5
   0212   9f                ghi STACK_REG   ;get the STACK_REG high part to add the carry to it
   0213   7c 00             adci 0          ;adding the carry
   0215   b5                phi R5          ;store the new high part to R5
                            
   0216   e5                sex R5          ;set X data pointer to R5
   0217   f0                ldx             ;load data from RAM[R5]
   0218   25                dec R5          ;decrement R5 to set it back to the divider's LSB
   0219   25                dec R5
   021a   25                dec R5
   021b   fa 80             ani 080h        ;check if sign bit is set
                            
   021d   c2 02 34          lbz INTEGER_DIV_NEXT_CHECK
                            
   0220   f8 82             ldi 082h        ;load 0x82 to the D register
   0222   fe                shl             ;shit it left so it will set the carry flag and the D registre will be 4
   0223   a9                plo R9          ;store it to R9 low
                            
   0224                 INTEGER_DIV_INVERT_LOOP1
   0224   f0                ldx             ;load data from RAM[R5]
   0225   fb ff             xri 0FFh        ;xor D with 0xFF to invert it
   0227   7c 00             adci 0          ;add the carry for to the result (inver+1)
   0229   55                str R5          ;store the result to RAM[R5]
   022a   60                irx             ;increment R5
                        
   022b   29                dec R9          ;decrement R8
   022c   89                glo R9          ;get R8 low, and if it's not 0 then do the loop
   022d   ca 02 24          lbnz INTEGER_DIV_INVERT_LOOP1
                            
   0230   98                ghi R8          ;set the flag
   0231   f9 01             ori 1
   0233   b8                phi R8
                            
   0234                 INTEGER_DIV_NEXT_CHECK
   0234   8f                glo STACK_REG
   0235   fc 03             adi 3
   0237   a9                plo R9
   0238   9f                ghi STACK_REG
   0239   7c 00             adci 0
   023b   b9                phi R9
                            
   023c   09                ldn R9              ;restore and get remainder MSB
   023d   fc 03             adi 3
   023f   a4                plo R4
   0240   19                inc R9
   0241   09                ldn R9
   0242   7c 00             adci 0
   0244   b4                phi R4
                            
   0245   e4                sex R4
   0246   f0                ldx
   0247   24                dec R4
   0248   24                dec R4
   0249   24                dec R4
   024a   fa 80             ani 080h            ;check if sign bit is set
                            
   024c   c2 02 62          lbz INTEGER_SHIFT_DR
                            
   024f   f8 82             ldi 082h
   0251   fe                shl
   0252   a9                plo R9
                            
   0253                 INVERT_LOOP2
   0253   f0                ldx         ;invert byte 3
   0254   fb ff             xri 0FFh
   0256   7c 00             adci 0
   0258   54                str R4
   0259   60                irx
                        
   025a   29                dec R9
   025b   89                glo R9
   025c   3a 53             bnz INVERT_LOOP2
                            
   025e   98                ghi R8      ;set the flag
   025f   f9 02             ori 2
   0261   b8                phi R8
                            
   0262                 INTEGER_SHIFT_DR
   0262   8f                glo STACK_REG ;get divider MSB
   0263   fc 0b             adi 11
   0265   a5                plo R5
   0266   9f                ghi STACK_REG
   0267   7c 00             adci 0
   0269   b5                phi R5
                            
   026a   f8 00             ldi 0
   026c   e5                sex R5
   026d   f1                or
   026e   60                irx
   026f   f1                or
   0270   60                irx
   0271   f1                or
   0272   60                irx
   0273   f1                or
   0274   32 8d             bz DIVISION_LOOP
                            
   0276                 SHIFT_DR
   0276   8f                glo STACK_REG ;get divider MSB
   0277   fc 0e             adi 14
   0279   a5                plo R5
   027a   9f                ghi STACK_REG
   027b   7c 00             adci 0
   027d   b5                phi R5
                            
   027e   e5                sex R5
                            
   027f   f8 04             ldi 4
   0281   fe                shl
   0282   a9                plo R9
                            
   0283                 CARRY_SHIFTING
   0283   f0                ldx
   0284   76                shrc
   0285   73                stxd
                            
   0286   29                dec R9
   0287   89                glo R9
   0288   3a 83             bnz CARRY_SHIFTING
                            
   028a   18                inc R8
                            
   028b   30 62             br INTEGER_SHIFT_DR
                            
   028d                 DIVISION_LOOP
   028d   88                glo R8              ;get R8 low
   028e   fd 20             sdi 32              ;if larger than 32 then finish the loop
   0290   cb 03 1f          lbnf FINAL_CHECK
                        
   0293   8f                glo STACK_REG       ;restore quotient pointer to R6
   0294   fc 05             adi 5
   0296   a9                plo R9
   0297   9f                ghi STACK_REG
   0298   7c 00             adci 0
   029a   b9                phi R9
                            
   029b   09                ldn R9
   029c   a6                plo R6
   029d   19                inc R9
   029e   09                ldn R9
   029f   b6                phi R6
                            
   02a0   e6                sex R6
                            
   02a1   f8 02             ldi 2
   02a3   fe                shl
   02a4   a9                plo R9
                            
   02a5                 SHIFTING_Q
   02a5   f0                ldx                 ;shifting quotient to left
   02a6   7e                shlc
   02a7   56                str R6
   02a8   60                irx
                        
   02a9   29                dec R9
   02aa   89                glo R9
   02ab   3a a5             bnz SHIFTING_Q
                            
   02ad   8f                glo STACK_REG    ;restore remainder pointer to R4
   02ae   fc 03             adi 3
   02b0   a9                plo R9
   02b1   9f                ghi STACK_REG
   02b2   7c 00             adci 0
   02b4   b9                phi R9
                            
   02b5   09                ldn R9
   02b6   a4                plo R4
   02b7   19                inc R9
   02b8   09                ldn R9
   02b9   b4                phi R4
                            
   02ba   8f                glo STACK_REG    ;restore subtractor pointer to R5
   02bb   fc 07             adi 7
   02bd   a5                plo R5
   02be   9f                ghi STACK_REG
   02bf   7c 00             adci 0
   02c1   b5                phi R5
                            
   02c2   e4                sex R4
   02c3   f8 82             ldi 082h
   02c5   fe                shl
   02c6   a9                plo R9
                            
   02c7                 TRY_SUBTRACTING         ;try subtracting
   02c7   05                ldn R5
   02c8   75                sdb
   02c9   60                irx
   02ca   15                inc R5
                            
   02cb   29                dec R9
   02cc   89                glo R9
   02cd   3a c7             bnz TRY_SUBTRACTING
                            
   02cf   cb 03 07          lbnf NEXT_BIT        ;if subtracting unsuccesful, jump to NEXT_BIT
                            
   02d2   8f                glo STACK_REG
   02d3   fc 05             adi 5
   02d5   a9                plo R9
   02d6   9f                ghi STACK_REG
   02d7   7c 00             adci 0
   02d9   b9                phi R9
                            
   02da   09                ldn R9
   02db   a6                plo R6
   02dc   19                inc R9
   02dd   09                ldn R9
   02de   b6                phi R6
                            
   02df   06                ldn R6
   02e0   f9 01             ori 1
   02e2   56                str R6
                            
   02e3   8f                glo STACK_REG    ;restore remainder pointer
   02e4   fc 03             adi 3
   02e6   a9                plo R9
   02e7   9f                ghi STACK_REG
   02e8   7c 00             adci 0
   02ea   b9                phi R9
                            
   02eb   09                ldn R9
   02ec   a4                plo R4
   02ed   19                inc R9
   02ee   09                ldn R9
   02ef   b4                phi R4
                            
   02f0   8f                glo STACK_REG    ;restore subtractor's pointer to R5
   02f1   fc 07             adi 7
   02f3   a5                plo R5
   02f4   9f                ghi STACK_REG
   02f5   7c 00             adci 0
   02f7   b5                phi R5
                            
   02f8   e4                sex R4
                            
   02f9   f8 82             ldi 082h
   02fb   fe                shl
   02fc   a9                plo R9
                            
   02fd                 SUBTRACT_FOR_REAL
   02fd   05                ldn R5          ;subtract the subtractor from the remainder and store it
   02fe   75                sdb
   02ff   54                str R4
   0300   60                irx
   0301   15                inc R5
                            
   0302   29                dec R9
   0303   89                glo R9
   0304   ca 02 fd          lbnz SUBTRACT_FOR_REAL
                            
   0307                 NEXT_BIT
   0307   8f                glo STACK_REG    ;restore subtractor pointer to R5 and set it to MSB
   0308   fc 0a             adi 10
   030a   a5                plo R5
   030b   9f                ghi STACK_REG
   030c   7c 00             adci 0
   030e   b5                phi R5
                            
   030f   e5                sex R5
   0310   f8 02             ldi 2
   0312   fe                shl
   0313   a9                plo R9
                            
   0314                 SHIFT_SUBTRACTOR
   0314   f0                ldx
   0315   76                shrc
   0316   73                stxd
                            
   0317   29                dec R9
   0318   89                glo R9
   0319   3a 14             bnz SHIFT_SUBTRACTOR
                            
   031b   18                inc R8
   031c   c0 02 8d          lbr DIVISION_LOOP
                            
   031f                 FINAL_CHECK
   031f   98                ghi R8
   0320   fa 02             ani 2
   0322   c2 03 43          lbz FINAL_CHECK2
                            
   0325   8f                glo STACK_REG    ;restore remainder pointer to R4
   0326   fc 03             adi 3
   0328   a9                plo R9
   0329   9f                ghi STACK_REG
   032a   7c 00             adci 0
   032c   b9                phi R9
                            
   032d   09                ldn R9
   032e   a4                plo R4
   032f   19                inc R9
   0330   09                ldn R9
   0331   b4                phi R4
                            
   0332   e4                sex R4
                            
   0333   f8 82             ldi 082h
   0335   fe                shl
   0336   a9                plo R9
                            
   0337                 INVERT_LOOP3
   0337   f0                ldx
   0338   fb ff             xri 0FFh
   033a   7c 00             adci 0
   033c   54                str R4
   033d   60                irx
                            
   033e   29                dec R9
   033f   89                glo R9
   0340   ca 03 37          lbnz INVERT_LOOP3
                            
   0343                 FINAL_CHECK2
   0343   98                ghi R8
   0344   c2 03 69          lbz THE_END
   0347   fb 03             xri 3
   0349   c2 03 69          lbz THE_END
                            
   034c   8f                glo STACK_REG    ;restore quotient pointer to R6
   034d   fc 05             adi 5
   034f   a9                plo R9
   0350   9f                ghi STACK_REG
   0351   7c 00             adci 0
   0353   b9                phi R9
                            
   0354   09                ldn R9
   0355   a6                plo R6
   0356   19                inc R9
   0357   09                ldn R9
   0358   b6                phi R6
                            
   0359   e6                sex R6
                            
   035a   f8 82             ldi 082h
   035c   fe                shl
   035d   a9                plo R9
                            
   035e                 INVERT_LOOP4
   035e   f0                ldx
   035f   fb ff             xri 0FFh
   0361   7c 00             adci 0
   0363   56                str R6
   0364   60                irx
                            
   0365   29                dec R9
   0366   89                glo R9
   0367   3a 5e             bnz INVERT_LOOP4
                        
   0369                 THE_END
   0369   8f                glo STACK_REG       ;setting back the STACK_REG for return
   036a   fc 0e             adi 14
   036c   af                plo STACK_REG
   036d   9f                ghi STACK_REG
   036e   7c 00             adci 0
   0370   bf                phi STACK_REG
                            
   0371   de                sep RETURN          ;RETURN
                        ;----------------------------------------------
                        
                        ;-INTEGER MUL----------------------------------
                        ;-R4-multiplicand pointer----------------------
                        ;-R5-multiplier pointer------------------------
                        ;-R6-result pointer----------------------------
                        ;-R7-general register--------------------------
   0372                 INTEGER_MUL
   0372   ef                sex STACK_REG
                            
   0373   14                inc R4      ;increment R4 and R5 pointer to MSB
   0374   14                inc R4      ;to copy the values to the local variables
   0375   14                inc R4
                            
   0376   15                inc R5
   0377   15                inc R5
   0378   15                inc R5
                            
   0379   04                ldn R4      ;copying starts here
   037a   73                stxd
   037b   24                dec R4
                            
   037c   04                ldn R4
   037d   73                stxd
   037e   24                dec R4
                            
   037f   04                ldn R4
   0380   73                stxd
   0381   24                dec R4
                            
   0382   04                ldn R4
   0383   73                stxd        ;+7 multiplicand
                            
   0384   05                ldn R5
   0385   73                stxd
   0386   25                dec R5
                            
   0387   05                ldn R5
   0388   73                stxd
   0389   25                dec R5
                            
   038a   05                ldn R5
   038b   73                stxd
   038c   25                dec R5
                            
   038d   05                ldn R5
   038e   73                stxd        ;+3 multiplier
                            
   038f   96                ghi R6
   0390   73                stxd
   0391   86                glo R6
   0392   73                stxd        ;+1 result pointer
                        
   0393   f8 00             ldi 0       ;zeroing the result
                            
   0395   56                str R6
   0396   16                inc R6
                            
   0397   56                str R6
   0398   16                inc R6
                            
   0399   56                str R6
   039a   16                inc R6
                            
   039b   56                str R6
                            
   039c   26                dec R6
   039d   26                dec R6
   039e   26                dec R6
                        
   039f                 INTEGER_MUL_LOOP
   039f   8f                glo STACK_REG   ;restore multiplier pointer
   03a0   fc 03             adi 3
   03a2   a5                plo R5
   03a3   9f                ghi STACK_REG
   03a4   7c 00             adci 0
   03a6   b5                phi R5
                            
   03a7   e5                sex R5          ;check if multiplier is 0
   03a8   f8 00             ldi 0
   03aa   f1                or
   03ab   60                irx
   03ac   f1                or
   03ad   60                irx
   03ae   f1                or
   03af   60                irx
   03b0   f1                or
                            
   03b1   25                dec R5
   03b2   25                dec R5
   03b3   25                dec R5
                            
   03b4   c2 04 09          lbz INTEGER_MUL_END      ;if 0 then jump to the end
                            
   03b7   05                ldn R5                  ;load the multiplier's LSB
   03b8   fa 01             ani 1                   ;filter for the LSb
   03ba   32 dc             bz INTEGER_MUL_SHIFT    ;if zero, skip the addition
                            
   03bc   8f                glo STACK_REG           ;restore multiplicand pointer
   03bd   fc 07             adi 7
   03bf   a4                plo R4
   03c0   9f                ghi STACK_REG
   03c1   7c 00             adci 0
   03c3   b4                phi R4
                            
   03c4   8f                glo STACK_REG           ;restore result pointer
   03c5   a7                plo R7
   03c6   9f                ghi STACK_REG
   03c7   b7                phi R7
   03c8   17                inc R7
                            
   03c9   07                ldn R7
   03ca   a5                plo R5
   03cb   17                inc R7
   03cc   07                ldn R7
   03cd   b5                phi R5
                            
   03ce   e5                sex R5
                            
   03cf   f8 02             ldi 2                   ;prepare addition
   03d1   fe                shl
   03d2   a7                plo R7
                            
   03d3                 INTEGER_MUL_ADD
   03d3   04                ldn R4
   03d4   74                adc
   03d5   55                str R5
   03d6   60                irx
   03d7   14                inc R4
                            
   03d8   27                dec R7
   03d9   87                glo R7
   03da   3a d3             bnz INTEGER_MUL_ADD
                        
   03dc                 INTEGER_MUL_SHIFT
                        
   03dc   8f                glo STACK_REG           ;set multiplier's pointer to MSB
   03dd   fc 06             adi 6                   ;to shift it right
   03df   a5                plo R5
   03e0   9f                ghi STACK_REG
   03e1   7c 00             adci 0
   03e3   b5                phi R5
                            
   03e4   e5                sex R5
                            
   03e5   f8 02             ldi 2
   03e7   fe                shl
   03e8   a7                plo R7
                            
   03e9                 INTEGER_MUL_SHMULTIPLIER
   03e9   f0                ldx                     ;shifting right the multiplier
   03ea   76                shrc
   03eb   73                stxd
                            
   03ec   27                dec R7
   03ed   87                glo R7
   03ee   3a e9             bnz INTEGER_MUL_SHMULTIPLIER
                            
   03f0   8f                glo STACK_REG           ;restore multiplicand pointer
   03f1   fc 07             adi 7                   ;to shift it left
   03f3   a4                plo R4
   03f4   9f                ghi STACK_REG
   03f5   7c 00             adci 0
   03f7   b4                phi R4
                            
   03f8   e4                sex R4
                            
   03f9   f8 02             ldi 2
   03fb   fe                shl
   03fc   a7                plo R7
                            
   03fd                 INTEGER_MUL_SHMULTIPLICAND
   03fd   f0                ldx                     ;shifting the multiplicand left
   03fe   7e                shlc
   03ff   54                str R4
   0400   60                irx
                        
   0401   27                dec R7
   0402   87                glo R7
   0403   ca 03 fd          lbnz INTEGER_MUL_SHMULTIPLICAND
                            
   0406   c0 03 9f          lbr INTEGER_MUL_LOOP
                            
   0409                 INTEGER_MUL_END
   0409   8f                glo STACK_REG
   040a   fc 0a             adi 10
   040c   af                plo STACK_REG
   040d   9f                ghi STACK_REG
   040e   7c 00             adci 0
   0410   bf                phi STACK_REG
                            
   0411   de                sep RETURN          ;RETURN    
                        ;----------------------------------------------
                        
                        ;-PRINT HEX------------------------------------
                        ;-R4-int pointer-------------------------------
                        ;-R5.0-number of digits------------------------
                        ;-Local registers------------------------------
                        ;-R5.1-flag, R6--------------------------------
   0412                 HEX_CHARS
   0412   30 31 32 33       db "0123456789ABCDEF"
   0416   34 35 36 37   
   041a   38 39 41 42   
   041e   43 44 45 46   
                        ;----------------------------------------------
   0422                 PRINT_HEX
   0422   ef                sex STACK_REG
                            
   0423   95                ghi R5  ;saving the state of the local registers
   0424   73                stxd
                            
   0425   96                ghi R6
   0426   73                stxd
   0427   86                glo R6
   0428   73                stxd
                            
   0429   14                inc R4  ;making a copy of the Integer
   042a   14                inc R4
   042b   14                inc R4
                            
   042c   04                ldn R4
   042d   73                stxd
   042e   24                dec R4
   042f   04                ldn R4
   0430   73                stxd
   0431   24                dec R4
   0432   04                ldn R4
   0433   73                stxd
   0434   24                dec R4
   0435   04                ldn R4
   0436   73                stxd    ;+2 the integer
                            
   0437   f8 00             ldi 0   ;+1 
   0439   73                stxd
                            
   043a   8f                glo STACK_REG   ;set R4 to point to the Integer
   043b   a4                plo R4
   043c   9f                ghi STACK_REG
   043d   b4                phi R4
   043e   14                inc R4
   043f   14                inc R4
                            
   0440   f8 00             ldi 0           ;set R5 flags to 0
   0442   b5                phi R5
   0443   85                glo R5              
   0444   3a 49             bnz PRINT_UNTIL_R
   0446   f8 01             ldi 1           ;if R5 low, the number of digits, is zero, then set R5 flag
   0448   b5                phi R5
                        
   0449                 PRINT_UNTIL_R
   0449   95                ghi R5                  ;check the flag if set or not
   044a   32 5e             bz PRINT_CHECK_DIGIT    
   044c   e4                sex R4              ;checking the integer if it's zero
   044d   f8 00             ldi 0
   044f   f1                or
   0450   60                irx
   0451   f1                or
   0452   60                irx
   0453   f1                or
   0454   60                irx
   0455   f1                or
                            
   0456   24                dec R4
   0457   24                dec R4
   0458   24                dec R4
                            
   0459   ef                sex STACK_REG    
   045a   3a 61             bnz PRINT_DIGIT_LOOP
   045c   30 8f             br PRINT_HEX_END
                            
   045e                 PRINT_CHECK_DIGIT
   045e   85                glo R5
   045f   32 8f             bz PRINT_HEX_END
                        
   0461                 PRINT_DIGIT_LOOP
   0461   04                ldn R4
   0462   fa 0f             ani 0Fh
   0464   5f                str STACK_REG
   0465   f8 12             ldi HEX_CHARS.0
   0467   f4                add
   0468   a6                plo R6
   0469   f8 04             ldi HEX_CHARS.1
   046b   7c 00             adci 0
   046d   b6                phi R6
                            
   046e   06                ldn R6
   046f   73                stxd
                            
   0470   f8 04             ldi 4
   0472   a6                plo R6
                            
   0473                 PRINT_HEX_SHIFT_LOOP1
   0473   14                inc R4
   0474   14                inc R4
   0475   14                inc R4
                            
   0476   04                ldn R4
   0477   f6                shr
   0478   54                str R4
   0479   24                dec R4
                            
   047a   04                ldn R4
   047b   76                shrc
   047c   54                str R4
   047d   24                dec R4
                            
   047e   04                ldn R4
   047f   76                shrc
   0480   54                str R4
   0481   24                dec R4
                            
   0482   04                ldn R4
   0483   76                shrc
   0484   54                str R4
                            
   0485   26                dec R6
   0486   86                glo R6
   0487   3a 73             bnz PRINT_HEX_SHIFT_LOOP1
                            
   0489   95                ghi R5      ;check if R5 flag is set, if set then skip decrementing.
   048a   c6                lsnz
   048b   25                dec R5
   048c   c4                nop
   048d   30 49             br PRINT_UNTIL_R
                        
   048f                 PRINT_HEX_END
   048f   8f                glo STACK_REG
   0490   a6                plo R6
   0491   9f                ghi STACK_REG
   0492   b6                phi R6
   0493   16                inc R6
                            
   0494   f8 52             ldi PRINT.0     ;prepare to call PRINT
   0496   ad                plo CALL_REG
   0497   f8 01             ldi PRINT.1
   0499   bd                phi CALL_REG
                            
   049a   f8 00             ldi FCALL.0
   049c   ae                plo FCALL_REG
   049d   de                sep FCALL_REG
                            
   049e   86                glo R6
   049f   fc 04             adi 4
   04a1   af                plo STACK_REG
   04a2   96                ghi R6
   04a3   7c 00             adci 0
   04a5   bf                phi STACK_REG
                            
   04a6   ef                sex STACK_REG   ;restore local registers
   04a7   72                ldxa
   04a8   a6                plo R6
   04a9   72                ldxa
   04aa   b6                phi R6
   04ab   f0                ldx
   04ac   b5                phi R5
                            
   04ad   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-PRINT DEC------------------------------------
                        ;-R4-int pointer-------------------------------
                        ;-Local registers------------------------------
                        ;-R5-R6-R7-R10-R12-----------------------------
                        ;-R10-flags------------------------------------
   04ae                 PRINT_DEC
   04ae   ef                sex STACK_REG
                            
   04af   95                ghi R5          ;saving local registers
   04b0   73                stxd
   04b1   85                glo R5
   04b2   73                stxd
                            
   04b3   96                ghi R6
   04b4   73                stxd
   04b5   86                glo R6
   04b6   73                stxd
                            
   04b7   97                ghi R7
   04b8   73                stxd
   04b9   87                glo R7
   04ba   73                stxd
                        
   04bb   9a                ghi R10
   04bc   73                stxd
   04bd   8a                glo R10
   04be   73                stxd
                            
   04bf   9c                ghi R12
   04c0   73                stxd
   04c1   8c                glo R12
   04c2   73                stxd
                            
   04c3   f8 00             ldi 0
   04c5   aa                plo R10
   04c6   ba                phi R10
                            
   04c7   14                inc R4
   04c8   14                inc R4
   04c9   14                inc R4
                            
   04ca   04                ldn R4
   04cb   73                stxd
   04cc   24                dec R4
   04cd   04                ldn R4
   04ce   73                stxd
   04cf   24                dec R4
   04d0   04                ldn R4
   04d1   73                stxd
   04d2   24                dec R4
   04d3   04                ldn R4
   04d4   73                stxd        ;+10 the integer
                            
   04d5   f8 00             ldi 0
   04d7   73                stxd
   04d8   73                stxd
   04d9   73                stxd
   04da   f8 0a             ldi 0Ah
   04dc   73                stxd        ;+6 divider
                            
   04dd   f8 00             ldi 0
   04df   73                stxd
   04e0   73                stxd
   04e1   73                stxd
   04e2   73                stxd        ;+2 remainder
                            
   04e3   73                stxd        ;+1 output string buffer end
                            
   04e4   8f                glo STACK_REG
   04e5   ac                plo R12
   04e6   9f                ghi STACK_REG
   04e7   bc                phi R12
                            
   04e8   8c                glo R12
   04e9   fc 0d             adi 13
   04eb   a4                plo R4
   04ec   9c                ghi R12
   04ed   7c 00             adci 0
   04ef   b4                phi R4
                            
   04f0   e4                sex R4
   04f1   f0                ldx
   04f2   fa 80             ani 080h
   04f4   c2 05 0d          lbz PRINT_DEC_MAIN_LOOP
                            
   04f7   8a                glo R10
   04f8   f9 01             ori 1
   04fa   aa                plo R10
                            
   04fb   24                dec R4
   04fc   24                dec R4
   04fd   24                dec R4
                            
   04fe   f8 82             ldi 082h
   0500   fe                shl
   0501   a6                plo R6
                            
   0502                 PRINT_DEC_INVER_LOOP
   0502   f0                ldx
   0503   fb ff             xri 0FFh
   0505   7c 00             adci 0
   0507   54                str R4
   0508   14                inc R4
                            
   0509   26                dec R6
   050a   86                glo R6
   050b   3a 02             bnz PRINT_DEC_INVER_LOOP
                            
   050d                 PRINT_DEC_MAIN_LOOP    
   050d   8c                glo R12
   050e   fc 0a             adi 10
   0510   a4                plo R4
   0511   a6                plo R6
   0512   9c                ghi R12
   0513   7c 00             adci 0
   0515   b4                phi R4
   0516   b6                phi R6
                            
   0517   8c                glo R12
   0518   fc 06             adi 6
   051a   a5                plo R5
   051b   9c                ghi R12
   051c   7c 00             adci 0
   051e   b5                phi R5
                            
   051f   8c                glo R12
   0520   fc 02             adi 2
   0522   a7                plo R7
   0523   9c                ghi R12
   0524   7c 00             adci 0
   0526   b7                phi R7
                            
   0527   f8 d4             ldi INTEGER_DIV.0
   0529   ad                plo CALL_REG
   052a   f8 01             ldi INTEGER_DIV.1
   052c   bd                phi CALL_REG
                            
   052d   f8 00             ldi FCALL.0
   052f   ae                plo FCALL_REG
   0530   de                sep FCALL_REG
                            
   0531   ef                sex STACK_REG
                            
   0532   8c                glo R12
   0533   fc 02             adi 2
   0535   a7                plo R7
   0536   9c                ghi R12
   0537   7c 00             adci 0
   0539   b7                phi R7
                            
   053a   07                ldn R7
   053b   fc 30             adi 48
   053d   73                stxd
                            
   053e   8c                glo R12
   053f   fc 0a             adi 10
   0541   a4                plo R4
   0542   9c                ghi R12
   0543   7c 00             adci 0
   0545   b4                phi R4
                            
   0546   e4                sex R4
                            
   0547   f8 00             ldi 0
   0549   f1                or
   054a   60                irx
   054b   f1                or
   054c   60                irx
   054d   f1                or
   054e   60                irx
   054f   f1                or
                            
   0550   32 55             bz PRINT_DEC_END
   0552   c0 05 0d          lbr PRINT_DEC_MAIN_LOOP
                        
   0555                 PRINT_DEC_END
   0555   8a                glo R10
   0556   fa 01             ani 1
   0558   32 5e             bz PRINT_DEC_FINAL
                            
   055a   ef                sex STACK_REG
   055b   f8 2d             ldi 45
   055d   73                stxd
                        
   055e                 PRINT_DEC_FINAL
   055e   8f                glo STACK_REG
   055f   a6                plo R6
   0560   9f                ghi STACK_REG
   0561   b6                phi R6
   0562   16                inc R6
                            
   0563   f8 52             ldi PRINT.0
   0565   ad                plo CALL_REG
   0566   f8 01             ldi PRINT.1
   0568   bd                phi CALL_REG
                            
   0569   f8 00             ldi FCALL.0
   056b   ae                plo FCALL_REG
   056c   de                sep FCALL_REG
                            
   056d   8c                glo R12
   056e   fc 0e             adi 14
   0570   af                plo STACK_REG
   0571   9c                ghi R12
   0572   7c 00             adci 0
   0574   bf                phi STACK_REG
                            
   0575   ef                sex STACK_REG
                            
   0576   72                ldxa
   0577   ac                plo R12
   0578   72                ldxa
   0579   bc                phi R12
                            
   057a   72                ldxa
   057b   aa                plo R10
   057c   72                ldxa
   057d   ba                phi R10
                            
   057e   72                ldxa
   057f   a7                plo R7
   0580   72                ldxa
   0581   b7                phi R7
                            
   0582   72                ldxa
   0583   a6                plo R6
   0584   72                ldxa
   0585   b6                phi R6
                            
   0586   72                ldxa
   0587   a5                plo R5
   0588   f0                ldx
   0589   b5                phi R5
                            
   058a   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-READ DEC-------------------------------------
                        ;-R4-string pointer----------------------------
                        ;-R5-result pointer----------------------------
   058b                 READ_DEC
   058b   ef                sex STACK_REG
                            
   058c   94                ghi R4
   058d   73                stxd
   058e   84                glo R4
   058f   73                stxd        ;+7 string pointer
                            
   0590   95                ghi R5
   0591   73                stxd
   0592   85                glo R5
   0593   73                stxd        ;+5 result pointer
                            
   0594   f8 00             ldi 0
   0596   73                stxd
   0597   73                stxd
   0598   73                stxd
   0599   f8 0a             ldi 0Ah
   059b   73                stxd        ;+1 multiplier
                            
   059c   f8 00             ldi 0       ;set result to 0
   059e   55                str R5
   059f   15                inc R5
   05a0   55                str R5
   05a1   15                inc R5
   05a2   55                str R5
   05a3   15                inc R5
   05a4   55                str R5
                            
   05a5                 READ_DEC_MAIN_LOOP
   05a5   8f                glo STACK_REG
   05a6   fc 07             adi 7
   05a8   a6                plo R6
   05a9   9f                ghi STACK_REG
   05aa   7c 00             adci 0
   05ac   b6                phi R6
                            
   05ad   06                ldn R6
   05ae   a4                plo R4
   05af   16                inc R6
   05b0   06                ldn R6
   05b1   b4                phi R4
                            
   05b2   04                ldn R4
   05b3   ff 30             smi 48
   05b5   cb 06 1c          lbnf READ_DEC_END
   05b8   ff 0a             smi 10
   05ba   c3 06 1c          lbdf READ_DEC_END
                            
   05bd   8f                glo STACK_REG
   05be   fc 05             adi 5
   05c0   a6                plo R6
   05c1   9f                ghi STACK_REG
   05c2   7c 00             adci 0
   05c4   b6                phi R6
                            
   05c5   06                ldn R6
   05c6   a4                plo R4
   05c7   16                inc R6
   05c8   06                ldn R6
   05c9   b4                phi R4
                            
   05ca   b6                phi R6
   05cb   84                glo R4
   05cc   a6                plo R6
                            
   05cd   8f                glo STACK_REG
   05ce   a5                plo R5
   05cf   9f                ghi STACK_REG
   05d0   b5                phi R5
   05d1   15                inc R5
                            
   05d2   f8 72             ldi INTEGER_MUL.0     ;prepare to call INTEGER_MUL
   05d4   ad                plo CALL_REG
   05d5   f8 03             ldi INTEGER_MUL.1       
   05d7   bd                phi CALL_REG
                            
   05d8   f8 00             ldi FCALL.0
   05da   ae                plo FCALL_REG
   05db   de                sep FCALL_REG
                            
   05dc   8f                glo STACK_REG
   05dd   fc 07             adi 7
   05df   a6                plo R6
   05e0   9f                ghi STACK_REG
   05e1   7c 00             adci 0
   05e3   b6                phi R6
                            
   05e4   06                ldn R6
   05e5   a4                plo R4
   05e6   16                inc R6
   05e7   06                ldn R6
   05e8   b4                phi R4
                            
   05e9   8f                glo STACK_REG
   05ea   fc 05             adi 5
   05ec   a6                plo R6
   05ed   9f                ghi STACK_REG
   05ee   7c 00             adci 0
   05f0   b6                phi R6
                            
   05f1   06                ldn R6
   05f2   a5                plo R5
   05f3   16                inc R6
   05f4   06                ldn R6
   05f5   b5                phi R5
                            
   05f6   e5                sex R5
                            
   05f7   04                ldn R4
   05f8   ff 30             smi 48
                            
   05fa   f4                add
   05fb   55                str R5
   05fc   15                inc R5
                            
   05fd   f8 00             ldi 0
   05ff   74                adc
   0600   55                str R5
   0601   15                inc R5
                            
   0602   f8 00             ldi 0
   0604   74                adc
   0605   55                str R5
   0606   15                inc R5
                            
   0607   f8 00             ldi 0
   0609   74                adc
   060a   55                str R5
                        
   060b   14                inc R4
                            
   060c   8f                glo STACK_REG
   060d   fc 07             adi 7
   060f   a6                plo R6
   0610   9f                ghi STACK_REG
   0611   7c 00             adci 0
   0613   b6                phi R6
                            
   0614   84                glo R4
   0615   56                str R6
   0616   16                inc R6
   0617   94                ghi R4
   0618   56                str R6
                            
   0619   c0 05 a5          lbr READ_DEC_MAIN_LOOP
                           
   061c                 READ_DEC_END
   061c   8f                glo STACK_REG
   061d   fc 05             adi 5
   061f   af                plo STACK_REG
   0620   9f                ghi STACK_REG
   0621   7c 00             adci 0
   0623   bf                phi STACK_REG
                            
   0624   ef                sex STACK_REG
                            
   0625   72                ldxa            ;restore R4 and R5
   0626   a5                plo R5
   0627   72                ldxa
   0628   b5                phi R5
   0629   72                ldxa
   062a   a4                plo R4
   062b   f0                ldx
   062c   b4                phi R4
                            
   062d   de                sep RETURN      ;RETURN    
                        ;----------------------------------------------
                        
                        ;-READ HEX-------------------------------------
                        ;-R4-string pointer----------------------------
                        ;-R5-result pointer----------------------------
   062e                 READ_HEX
   062e   ef                sex STACK_REG
                            
   062f   96                ghi R6
   0630   73                stxd
   0631   86                glo R6
   0632   73                stxd
                            
   0633   97                ghi R7
   0634   73                stxd
   0635   87                glo R7
   0636   73                stxd
                            
   0637   94                ghi R4
   0638   73                stxd
   0639   84                glo R4
   063a   73                stxd        ;+3 string pointer
                            
   063b   95                ghi R5
   063c   73                stxd
   063d   85                glo R5
   063e   73                stxd        ;+1 result pointer
                            
   063f   f8 00             ldi 0       ;set result to 0
   0641   55                str R5
   0642   15                inc R5
   0643   55                str R5
   0644   15                inc R5
   0645   55                str R5
   0646   15                inc R5
   0647   55                str R5
                            
   0648   25                dec R5
   0649   25                dec R5
   064a   25                dec R5
                            
   064b                 READ_HEX_MAINLOOP
   064b   f8 00             ldi 0
   064d   a7                plo R7
                            
   064e   04                ldn R4
   064f   ff 30             smi 48
   0651   3b 9e             bm READ_HEX_END
   0653   17                inc R7
   0654   ff 0a             smi 10
   0656   3b 6a             bm READ_HEX_CONTINUE
   0658   ff 07             smi 7
   065a   3b 9e             bm READ_HEX_END
   065c   17                inc R7
   065d   ff 06             smi 6
   065f   3b 6a             bm READ_HEX_CONTINUE
   0661   ff 1a             smi 26
   0663   3b 9e             bm READ_HEX_END
   0665   17                inc R7
   0666   ff 06             smi 6
   0668   33 9e             bpz READ_HEX_END
                            
   066a                 READ_HEX_CONTINUE
   066a   f8 04             ldi 4
   066c   a6                plo R6
                        
   066d                 READ_HEX_SHIFTLOOP      ;result = result << 4
   066d   05                ldn R5
   066e   fe                shl
   066f   55                str R5
   0670   15                inc R5
                            
   0671   05                ldn R5
   0672   7e                shlc
   0673   55                str R5
   0674   15                inc R5
                            
   0675   05                ldn R5
   0676   7e                shlc
   0677   55                str R5
   0678   15                inc R5
                            
   0679   05                ldn R5
   067a   7e                shlc
   067b   55                str R5
                            
   067c   25                dec R5
   067d   25                dec R5
   067e   25                dec R5
                            
   067f   26                dec R6
   0680   86                glo R6
   0681   3a 6d             bnz READ_HEX_SHIFTLOOP
                            
   0683   e5                sex R5
                            
   0684   27                dec R7
   0685   87                glo R7
   0686   3a 8d             bnz READ_HEX_HEXDIGIT
   0688   04                ldn R4
   0689   ff 30             smi 48
   068b   30 99             br READ_HEX_NEXTCHAR
                        
   068d                 READ_HEX_HEXDIGIT   
   068d   27                dec R7
   068e   87                glo R7
   068f   3a 96             bnz READ_HEX_HEXDIGITLOWER
   0691   04                ldn R4
   0692   ff 37             smi 55
   0694   30 99             br READ_HEX_NEXTCHAR
                            
   0696                 READ_HEX_HEXDIGITLOWER
   0696   04                ldn R4
   0697   ff 57             smi 87
                            
   0699                 READ_HEX_NEXTCHAR
   0699   f4                add
   069a   55                str R5
   069b   14                inc R4
   069c   30 4b             br READ_HEX_MAINLOOP
                        
   069e                 READ_HEX_END
   069e   8f                glo STACK_REG
   069f   fc 05             adi 5
   06a1   af                plo STACK_REG
   06a2   9f                ghi STACK_REG
   06a3   7c 00             adci 0
   06a5   bf                phi STACK_REG
                            
   06a6   ef                sex STACK_REG
                            
   06a7   72                ldxa
   06a8   a7                plo R7
   06a9   72                ldxa
   06aa   b7                phi R7
                            
   06ab   72                ldxa
   06ac   a6                plo R6
   06ad   f0                ldx
   06ae   b6                phi R6
                            
   06af   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-READ-VAR-------------------------------------
   06b0                 READ_VAR
   06b0   ef                sex STACK_REG
                            
   06b1   95                ghi R5
   06b2   73                stxd
   06b3   85                glo R5
   06b4   73                stxd                            ;+5 result pointer
                            
   06b5   f8 00             ldi 0
   06b7   73                stxd
   06b8   73                stxd                            ;+3 variableName address
                            
   06b9   73                stxd
   06ba   73                stxd                            ;+1 string address
                            
   06bb   f8 d5             ldi GET_STRING.0                ;call GET_STRING
   06bd   ad                plo CALL_REG
   06be   f8 0d             ldi GET_STRING.1
   06c0   bd                phi CALL_REG
                            
   06c1   f8 00             ldi FCALL.0
   06c3   ae                plo FCALL_REG
   06c4   de                sep FCALL_REG
                            
   06c5   8a                glo R10                         ;if R10 == 0 then end, else continue
   06c6   3a cc             bnz READ_VAR_CONTINUE
   06c8   9a                ghi R10
   06c9   c2 07 40          lbz READ_VAR_END
                            
   06cc                 READ_VAR_CONTINUE
   06cc   8f                glo STACK_REG                   ;set R5 pointer to string address
   06cd   a5                plo R5
   06ce   9f                ghi STACK_REG
   06cf   b5                phi R5
   06d0   15                inc R5
                            
   06d1   8a                glo R10                         ;store string address and set R9
   06d2   a9                plo R9
   06d3   55                str R5
   06d4   15                inc R5
                            
   06d5   9a                ghi R10
   06d6   b9                phi R9
   06d7   55                str R5
                            
   06d8   f8 02             ldi VARLIST_FIRSTNODE.0         ;load the first node address
   06da   a5                plo R5
   06db   f8 21             ldi VARLIST_FIRSTNODE.1
   06dd   b5                phi R5
                            
   06de                 READ_VAR_SEARCHLOOP
   06de   45                lda R5                              ;test if the address in R5 is zero or not.
   06df   3a e5             bnz READ_VAR_SEARCHLOOP_CONTINUE
   06e1   05                ldn R5
   06e2   c2 07 2b          lbz READ_VAR_NOTFOUND
                            
   06e5                 READ_VAR_SEARCHLOOP_CONTINUE
   06e5   25                dec R5
                            
   06e6   45                lda R5                              ;set R6 pointer to node address
   06e7   a6                plo R6
   06e8   45                lda R5
   06e9   b6                phi R6
                            
   06ea   16                inc R6                              ;skip next node
   06eb   16                inc R6
                            
   06ec   46                lda R6                              ;load variableNode->name address to R8
   06ed   a8                plo R8                              ;for comparing the strings
   06ee   46                lda R6
   06ef   b8                phi R8
                            
   06f0   f8 c0             ldi STR_COMPARATOR.0                ;call STR_COMPARATOR
   06f2   ad                plo CALL_REG
   06f3   f8 01             ldi STR_COMPARATOR.1
   06f5   bd                phi CALL_REG
                            
   06f6   f8 00             ldi FCALL.0
   06f8   ae                plo FCALL_REG
   06f9   de                sep FCALL_REG
                            
   06fa   8a                glo R10                             ;if R10 == 1 then READ_VAR_FOUND
   06fb   ca 07 12          lbnz READ_VAR_FOUND
                        
   06fe                 READ_VAR_NEXTNODE
   06fe   26                dec R6                              ;set back R6 to the base of the node
   06ff   26                dec R6
   0700   26                dec R6
   0701   26                dec R6
                            
   0702   86                glo R6                              ;load next node address to R5
   0703   a5                plo R5
   0704   96                ghi R6
   0705   b5                phi R5
                            
   0706   8f                glo STACK_REG                       ;set R6 pointer to string address
   0707   a6                plo R6
   0708   9f                ghi STACK_REG
   0709   b6                phi R6
   070a   16                inc R6
                            
   070b   46                lda R6                              ;load string address to R9
   070c   a9                plo R9
   070d   46                lda R6
   070e   b9                phi R9
                            
   070f   c0 06 de          lbr READ_VAR_SEARCHLOOP
                        
   0712                 READ_VAR_FOUND
   0712   8f                glo STACK_REG
   0713   fc 05             adi 5                               ;set R7 pointer to result pointer
   0715   a7                plo R7
   0716   9f                ghi STACK_REG
   0717   7c 00             adci 0
   0719   b7                phi R7
                            
   071a   47                lda R7
   071b   a5                plo R5
   071c   47                lda R7
   071d   b5                phi R5
                            
   071e   46                lda R6
   071f   55                str R5
   0720   15                inc R5
                            
   0721   46                lda R6
   0722   55                str R5
   0723   15                inc R5
                            
   0724   46                lda R6
   0725   55                str R5
   0726   15                inc R5
                            
   0727   46                lda R6
   0728   55                str R5
                            
   0729   30 40             br READ_VAR_END
                            
   072b                 READ_VAR_NOTFOUND
   072b   8f                glo STACK_REG
   072c   fc 05             adi 5                               ;set R7 pointer to result pointer
   072e   a7                plo R7
   072f   9f                ghi STACK_REG
   0730   7c 00             adci 0
   0732   b7                phi R7
                            
   0733   47                lda R7
   0734   a5                plo R5
   0735   47                lda R7
   0736   b5                phi R5
                            
   0737   f8 00             ldi 0
   0739   55                str R5
   073a   15                inc R5
                            
   073b   55                str R5
   073c   15                inc R5
                            
   073d   55                str R5
   073e   15                inc R5
                            
   073f   55                str R5
                        
   0740                 READ_VAR_END
   0740   8f                glo STACK_REG
   0741   fc 05             adi 5
   0743   af                plo STACK_REG
   0744   9f                ghi STACK_REG
   0745   7c 00             adci 0
   0747   bf                phi STACK_REG
                            
   0748   ef                sex STACK_REG
                            
   0749   72                ldxa
   074a   a5                plo R5
   074b   f0                ldx
   074c   b5                phi R5
                            
   074d   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-FACTOR---------------------------------------
                        ;-R4-string pointer----------------------------
                        ;-R5-result pointer----------------------------
                        ;-R10-result code------------------------------
   074e                 FACTOR
   074e   ef                sex STACK_REG
                            
   074f   94                ghi R4
   0750   73                stxd
   0751   84                glo R4
   0752   73                stxd    ;+4 string pt
                            
   0753   95                ghi R5
   0754   73                stxd
   0755   85                glo R5
   0756   73                stxd    ;+2 result pt
                            
   0757   f8 00             ldi 0
   0759   73                stxd    ;+1 flag, indicates if the factor needs to be negated
                            
                            
   075a                 FACTOR_MAIN
   075a   04                ldn R4
   075b   fb 20             xri 32
   075d   c2 07 ee          lbz FACTOR_NEXT_CYCLE       ;if ' '
   0760   04                ldn R4
   0761   fb 2b             xri 43
   0763   c2 07 ee          lbz FACTOR_NEXT_CYCLE       ;if '+'
   0766   04                ldn R4
   0767   fb 2d             xri 45
   0769   c2 07 e3          lbz FACTOR_NEGATE           ;if '-'
   076c   04                ldn R4
   076d   fb 28             xri 40
   076f   c2 07 c9          lbz FACTOR_PARENTHESIS      ;if '('
                        
   0772   04                ldn R4
   0773   ff 30             smi 48
   0775   cb 07 f2          lbnf FACTOR_END             ;if *R4 < '0'
   0778   ff 0a             smi 10
   077a   cb 07 a2          lbnf FACTOR_READ_NUMBER     ;if *R4 <= '9'
                        
   077d   04                ldn R4
   077e   ff 41             smi 65
   0780   cb 07 f2          lbnf FACTOR_END             ;if *R4 < 'A'
   0783   04                ldn R4
   0784   ff 5b             smi 91
   0786   cb 07 95          lbnf FACTOR_VAR             ;if *R4 <= 'Z'
                        
   0789   04                ldn R4
   078a   ff 61             smi 97
   078c   cb 07 f2          lbnf FACTOR_END             ;if *R4 < 'a'
   078f   04                ldn R4
   0790   ff 7b             smi 123
   0792   c3 07 f2          lbdf FACTOR_END             ;if *R4 > 'z'
                        
   0795                 FACTOR_VAR
   0795   f8 b0             ldi READ_VAR.0
   0797   ad                plo CALL_REG
   0798   f8 06             ldi READ_VAR.1
   079a   bd                phi CALL_REG
                            
   079b   f8 00             ldi FCALL.0
   079d   ae                plo FCALL_REG
   079e   de                sep FCALL_REG
                            
   079f   c0 07 f2          lbr FACTOR_END
                        
   07a2                 FACTOR_READ_NUMBER
   07a2   04                ldn R4
   07a3   fb 30             xri 48
   07a5   3a ae             bnz FACTOR_READ_DEC         ;if *R4 != '0'
                            
   07a7   14                inc R4                      ;increment R4 to get the next char
   07a8   04                ldn R4
   07a9   fb 78             xri 120
   07ab   32 bb             bz FACTOR_READ_HEX          ;if *R4 == 'x'
                            
   07ad   24                dec R4                      ;decrement R4 to step back
                        
   07ae                 FACTOR_READ_DEC    
   07ae   f8 8b             ldi READ_DEC.0
   07b0   ad                plo CALL_REG
   07b1   f8 05             ldi READ_DEC.1
   07b3   bd                phi CALL_REG
                            
   07b4   f8 00             ldi FCALL.0
   07b6   ae                plo FCALL_REG
   07b7   de                sep FCALL_REG
                            
   07b8   c0 07 f2          lbr FACTOR_END
                            
   07bb                 FACTOR_READ_HEX
   07bb   14                inc R4
                            
   07bc   f8 2e             ldi READ_HEX.0
   07be   ad                plo CALL_REG
   07bf   f8 06             ldi READ_HEX.1
   07c1   bd                phi CALL_REG
                            
   07c2   f8 00             ldi FCALL.0
   07c4   ae                plo FCALL_REG
   07c5   de                sep FCALL_REG
                            
   07c6   c0 07 f2          lbr FACTOR_END
                            
   07c9                 FACTOR_PARENTHESIS
   07c9   14                inc R4
                            
   07ca   f8 18             ldi EXPRESSION.0
   07cc   ad                plo CALL_REG
   07cd   f8 09             ldi EXPRESSION.1
   07cf   bd                phi CALL_REG
                            
   07d0   f8 00             ldi FCALL.0
   07d2   ae                plo FCALL_REG
   07d3   de                sep FCALL_REG
                        
   07d4                 FACTOR_PARENTHESIS_SKIPSPACES
   07d4   44                lda R4
   07d5   fb 20             xri 32
   07d7   32 d4             bz FACTOR_PARENTHESIS_SKIPSPACES
   07d9   24                dec R4
                            
   07da   44                lda R4
   07db   fb 29             xri 41
   07dd   c2 07 f2          lbz FACTOR_END
                            
   07e0   c0 07 5a          lbr FACTOR_MAIN
                            
   07e3                 FACTOR_NEGATE
   07e3   8f                glo STACK_REG
   07e4   a6                plo R6
   07e5   9f                ghi STACK_REG
   07e6   b6                phi R6
   07e7   16                inc R6
                            
   07e8   06                ldn R6
   07e9   fb ff             xri 0FFh
   07eb   fa 01             ani 1
   07ed   56                str R6
                            
   07ee                 FACTOR_NEXT_CYCLE
   07ee   14                inc R4
   07ef   c0 07 5a          lbr FACTOR_MAIN
                            
   07f2                 FACTOR_END
   07f2   8f                glo STACK_REG
   07f3   a6                plo R6
   07f4   9f                ghi STACK_REG
   07f5   b6                phi R6
   07f6   16                inc R6
                            
   07f7   06                ldn R6
   07f8   c2 08 18          lbz FACTOR_FINAL
                            
   07fb   8f                glo STACK_REG
   07fc   fc 02             adi 2
   07fe   a6                plo R6
   07ff   9f                ghi STACK_REG
   0800   7c 00             adci 0
   0802   b6                phi R6
                            
   0803   06                ldn R6
   0804   a5                plo R5
   0805   16                inc R6
   0806   06                ldn R6
   0807   b5                phi R5
                            
   0808   e5                sex R5
                            
   0809   f8 82             ldi 082h
   080b   fe                shl
   080c   a6                plo R6
                            
   080d                 FACTOR_INVERTING
   080d   f0                ldx
   080e   fb ff             xri 0FFh
   0810   7c 00             adci 0
   0812   55                str R5
   0813   60                irx
                            
   0814   26                dec R6
   0815   86                glo R6
   0816   3a 0d             bnz FACTOR_INVERTING
                            
   0818                 FACTOR_FINAL
   0818   8f                glo STACK_REG
   0819   fc 05             adi 5
   081b   af                plo STACK_REG
   081c   9f                ghi STACK_REG
   081d   7c 00             adci 0
   081f   bf                phi STACK_REG
                            
   0820   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-TERM-----------------------------------------
                        ;-R4-string pointer----------------------------
                        ;-R5-result------------------------------------
   0821                 TERM
   0821   ef                sex STACK_REG
                            
   0822   94                ghi R4
   0823   73                stxd
   0824   84                glo R4
   0825   73                stxd
                            
   0826   95                ghi R5
   0827   73                stxd
   0828   85                glo R5
   0829   73                stxd
                            
   082a   f8 4e             ldi FACTOR.0
   082c   ad                plo CALL_REG
   082d   f8 07             ldi FACTOR.1
   082f   bd                phi CALL_REG
                            
   0830   f8 00             ldi FCALL.0
   0832   ae                plo FCALL_REG
   0833   de                sep FCALL_REG
                            
   0834                 TERM_MAIN
   0834   04                ldn R4
   0835   fb 20             xri 32
   0837   c2 09 02          lbz TERM_NEXT_CYCLE
   083a   04                ldn R4
   083b   fb 2a             xri 42
   083d   c2 08 ad          lbz TERM_MULTIPLY       ;if '*'
   0840   04                ldn R4
   0841   fb 2f             xri 47
   0843   32 48             bz TERM_DIVIDE          ;if '/'
                            
   0845   c0 09 06          lbr TERM_END
                            
   0848                 TERM_DIVIDE
   0848   14                inc R4
                            
   0849   f8 00             ldi 0
   084b   73                stxd
   084c   73                stxd
   084d   73                stxd
   084e   73                stxd    ;+5 remainder
                            
   084f   73                stxd
   0850   73                stxd
   0851   73                stxd
   0852   73                stxd    ;+1 divider
                            
   0853   8f                glo STACK_REG
   0854   a5                plo R5
   0855   9f                ghi STACK_REG
   0856   b5                phi R5
   0857   15                inc R5
                            
   0858   f8 4e             ldi FACTOR.0
   085a   ad                plo CALL_REG
   085b   f8 07             ldi FACTOR.1
   085d   bd                phi CALL_REG
                            
   085e   f8 00             ldi FCALL.0
   0860   ae                plo FCALL_REG
   0861   de                sep FCALL_REG
                            
   0862   8f                glo STACK_REG ;save R4 pointer
   0863   fc 0b             adi 11
   0865   a6                plo R6
   0866   9f                ghi STACK_REG
   0867   7c 00             adci 0
   0869   b6                phi R6
                            
   086a   84                glo R4
   086b   56                str R6
   086c   16                inc R6
   086d   94                ghi R4
   086e   56                str R6
                            
   086f   8f                glo STACK_REG
   0870   fc 09             adi 9
   0872   a8                plo R8
   0873   9f                ghi STACK_REG
   0874   7c 00             adci 0
   0876   b8                phi R8
                            
   0877   08                ldn R8
   0878   a4                plo R4
   0879   a6                plo R6
   087a   18                inc R8
   087b   08                ldn R8
   087c   b4                phi R4
   087d   b6                phi R6
                            
   087e   8f                glo STACK_REG
   087f   a5                plo R5
   0880   9f                ghi STACK_REG
   0881   b5                phi R5
   0882   15                inc R5
                            
   0883   8f                glo STACK_REG
   0884   fc 05             adi 5
   0886   a7                plo R7
   0887   9f                ghi STACK_REG
   0888   7c 00             adci 0
   088a   b7                phi R7
                            
   088b   f8 d4             ldi INTEGER_DIV.0
   088d   ad                plo CALL_REG
   088e   f8 01             ldi INTEGER_DIV.1
   0890   bd                phi CALL_REG
                            
   0891   f8 00             ldi FCALL.0
   0893   ae                plo FCALL_REG
   0894   de                sep FCALL_REG
                            
   0895   8f                glo STACK_REG
   0896   fc 0b             adi 11
   0898   a6                plo R6
   0899   9f                ghi STACK_REG
   089a   7c 00             adci 0
   089c   b6                phi R6
                            
   089d   06                ldn R6
   089e   a4                plo R4
   089f   16                inc R6
   08a0   06                ldn R6
   08a1   b4                phi R4
                            
   08a2   8f                glo STACK_REG
   08a3   fc 08             adi 8
   08a5   af                plo STACK_REG
   08a6   9f                ghi STACK_REG
   08a7   7c 00             adci 0
   08a9   bf                phi STACK_REG
                        
   08aa   c0 08 34          lbr TERM_MAIN
                            
   08ad                 TERM_MULTIPLY
   08ad   14                inc R4
                            
   08ae   f8 00             ldi 0
   08b0   73                stxd
   08b1   73                stxd
   08b2   73                stxd
   08b3   73                stxd
                            
   08b4   8f                glo STACK_REG
   08b5   a5                plo R5
   08b6   9f                ghi STACK_REG
   08b7   b5                phi R5
   08b8   15                inc R5
                            
   08b9   f8 4e             ldi FACTOR.0
   08bb   ad                plo CALL_REG
   08bc   f8 07             ldi FACTOR.1
   08be   bd                phi CALL_REG
                            
   08bf   f8 00             ldi FCALL.0
   08c1   ae                plo FCALL_REG
   08c2   de                sep FCALL_REG
                            
   08c3   8f                glo STACK_REG
   08c4   fc 07             adi 7
   08c6   a6                plo R6
   08c7   9f                ghi STACK_REG
   08c8   7c 00             adci 0
   08ca   b6                phi R6
                            
   08cb   84                glo R4
   08cc   56                str R6
   08cd   16                inc R6
   08ce   94                ghi R4
   08cf   56                str R6
                            
   08d0   8f                glo STACK_REG
   08d1   fc 05             adi 5
   08d3   a8                plo R8
   08d4   9f                ghi STACK_REG
   08d5   7c 00             adci 0
   08d7   b8                phi R8
                            
   08d8   08                ldn R8
   08d9   a4                plo R4
   08da   a6                plo R6
   08db   18                inc R8
   08dc   08                ldn R8
   08dd   b4                phi R4
   08de   b6                phi R6
                            
   08df   8f                glo STACK_REG
   08e0   a5                plo R5
   08e1   9f                ghi STACK_REG
   08e2   b5                phi R5
   08e3   15                inc R5
                            
   08e4   f8 72             ldi INTEGER_MUL.0
   08e6   ad                plo CALL_REG
   08e7   f8 03             ldi INTEGER_MUL.1
   08e9   bd                phi CALL_REG
                            
   08ea   f8 00             ldi FCALL.0
   08ec   ae                plo FCALL_REG
   08ed   de                sep FCALL_REG
                            
   08ee   8f                glo STACK_REG
   08ef   fc 07             adi 7
   08f1   a6                plo R6
   08f2   9f                ghi STACK_REG
   08f3   7c 00             adci 0
   08f5   b6                phi R6
                            
   08f6   06                ldn R6
   08f7   a4                plo R4
   08f8   16                inc R6
   08f9   06                ldn R6
   08fa   b4                phi R4
                            
   08fb   1f                inc STACK_REG
   08fc   1f                inc STACK_REG
   08fd   1f                inc STACK_REG
   08fe   1f                inc STACK_REG
                        
   08ff   c0 08 34          lbr TERM_MAIN
                            
   0902                 TERM_NEXT_CYCLE
   0902   14                inc R4
   0903   c0 08 34          lbr TERM_MAIN
                            
   0906                 TERM_END
   0906   8f                glo STACK_REG
   0907   a6                plo R6
   0908   9f                ghi STACK_REG
   0909   b6                phi R6
   090a   16                inc R6
                            
   090b   46                lda R6
   090c   a5                plo R5
   090d   46                lda R6
   090e   b5                phi R5
                            
   090f   8f                glo STACK_REG
   0910   fc 04             adi 4
   0912   af                plo STACK_REG
   0913   9f                ghi STACK_REG
   0914   7c 00             adci 0
   0916   bf                phi STACK_REG
                            
   0917   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-EXPRESSION-----------------------------------
                        ;-R4-string pointer----------------------------
                        ;-R5-result pointer----------------------------
                        ;-Local registers------------------------------
                        ;-R6-R7----------------------------------------
   0918                 EXPRESSION
   0918   ef                sex STACK_REG
                            
   0919   97                ghi R7      ;saving local registers
   091a   73                stxd
   091b   87                glo R7
   091c   73                stxd
                            
   091d   96                ghi R6
   091e   73                stxd
   091f   86                glo R6
   0920   73                stxd
                            
   0921   94                ghi R4      ;R4 pointer to input string 
   0922   73                stxd
   0923   84                glo R4
   0924   73                stxd        ;+3 input string pointer
                            
   0925   95                ghi R5      ;R5 pointer to result
   0926   73                stxd
   0927   85                glo R5
   0928   73                stxd        ;+1 result pointer
                            
   0929                 EXPRESSION_SKIPSPACES           ;skip spaces
   0929   44                lda R4
   092a   fb 20             xri 32
   092c   32 29             bz EXPRESSION_SKIPSPACES
   092e   24                dec R4
                            
   092f   f8 21             ldi TERM.0                  ;read TERM
   0931   ad                plo CALL_REG
   0932   f8 08             ldi TERM.1
   0934   bd                phi CALL_REG
                            
   0935   f8 00             ldi FCALL.0
   0937   ae                plo FCALL_REG
   0938   de                sep FCALL_REG
                            
   0939                 EXPRESSION_MAIN
   0939   04                ldn R4
   093a   fb 20             xri 32                      ;if ' '
   093c   c2 09 fe          lbz EXPRESSION_NEXT_CYCLE
   093f   04                ldn R4
   0940   fb 2b             xri 43                      ;if '+'
   0942   32 4d             bz EXPRESSION_ADD
   0944   04                ldn R4
   0945   fb 2d             xri 45                      ;if '-'
   0947   c2 09 a6          lbz EXPRESSION_SUB
                            
                            
   094a   c0 0a 02          lbr EXPRESSION_END
                            
   094d                 EXPRESSION_ADD
   094d   14                inc R4
                            
   094e   f8 00             ldi 0               ;new result
   0950   73                stxd
   0951   73                stxd
   0952   73                stxd
   0953   73                stxd
                            
   0954   8f                glo STACK_REG       ;set R5 pointer to new result
   0955   a5                plo R5
   0956   9f                ghi STACK_REG
   0957   b5                phi R5
   0958   15                inc R5
                            
   0959   f8 21             ldi TERM.0          ;read TERM
   095b   ad                plo CALL_REG
   095c   f8 08             ldi TERM.1
   095e   bd                phi CALL_REG
                            
   095f   f8 00             ldi FCALL.0
   0961   ae                plo FCALL_REG
   0962   de                sep FCALL_REG
                            
   0963   8f                glo STACK_REG       ; set R6 register to point to the input string pointer
   0964   fc 07             adi 7
   0966   a6                plo R6
   0967   9f                ghi STACK_REG
   0968   7c 00             adci 0
   096a   b6                phi R6
                            
   096b   84                glo R4              ;input string pointer = R4
   096c   56                str R6
   096d   16                inc R6
   096e   94                ghi R4
   096f   56                str R6
                            
   0970   8f                glo STACK_REG       ;set R5 register to point to result
   0971   a5                plo R5
   0972   9f                ghi STACK_REG
   0973   b5                phi R5
   0974   15                inc R5
                            
   0975   8f                glo STACK_REG       ;set R6 register to point to the result pointer
   0976   fc 05             adi 5
   0978   a6                plo R6
   0979   9f                ghi STACK_REG
   097a   7c 00             adci 0
   097c   b6                phi R6
                            
   097d   06                ldn R6              ;R4 = result pointer
   097e   a4                plo R4
   097f   16                inc R6
   0980   06                ldn R6
   0981   b4                phi R4
                            
   0982   e4                sex R4
                            
   0983   f8 02             ldi 2
   0985   fe                shl
   0986   a7                plo R7
                            
   0987                 EXPRESSION_ADD_LOOP     ;*result pointer += result;
   0987   05                ldn R5
   0988   74                adc
   0989   54                str R4
   098a   15                inc R5
   098b   60                irx
                            
   098c   27                dec R7
   098d   87                glo R7
   098e   ca 09 87          lbnz EXPRESSION_ADD_LOOP
                            
   0991   ef                sex STACK_REG
                            
   0992   8f                glo STACK_REG       
   0993   fc 07             adi 7
   0995   a6                plo R6
   0996   9f                ghi STACK_REG
   0997   7c 00             adci 0
   0999   b6                phi R6
                            
   099a   06                ldn R6              ;R4 = input string pointer
   099b   a4                plo R4
   099c   16                inc R6
   099d   06                ldn R6
   099e   b4                phi R4
                            
   099f   1f                inc STACK_REG
   09a0   1f                inc STACK_REG
   09a1   1f                inc STACK_REG
   09a2   1f                inc STACK_REG
                        
   09a3   c0 09 39          lbr EXPRESSION_MAIN
                        
   09a6                 EXPRESSION_SUB
   09a6   14                inc R4
                            
   09a7   f8 00             ldi 0
   09a9   73                stxd
   09aa   73                stxd
   09ab   73                stxd
   09ac   73                stxd
                            
   09ad   8f                glo STACK_REG
   09ae   a5                plo R5
   09af   9f                ghi STACK_REG
   09b0   b5                phi R5
   09b1   15                inc R5
                            
   09b2   f8 21             ldi TERM.0
   09b4   ad                plo CALL_REG
   09b5   f8 08             ldi TERM.1
   09b7   bd                phi CALL_REG
                            
   09b8   f8 00             ldi FCALL.0
   09ba   ae                plo FCALL_REG
   09bb   de                sep FCALL_REG
                            
   09bc   8f                glo STACK_REG
   09bd   fc 07             adi 7
   09bf   a6                plo R6
   09c0   9f                ghi STACK_REG
   09c1   7c 00             adci 0
   09c3   b6                phi R6
                            
   09c4   84                glo R4
   09c5   56                str R6
   09c6   16                inc R6
   09c7   94                ghi R4
   09c8   56                str R6
                            
   09c9   8f                glo STACK_REG
   09ca   a5                plo R5
   09cb   9f                ghi STACK_REG
   09cc   b5                phi R5
   09cd   15                inc R5
                            
   09ce   8f                glo STACK_REG
   09cf   fc 05             adi 5
   09d1   a6                plo R6
   09d2   9f                ghi STACK_REG
   09d3   7c 00             adci 0
   09d5   b6                phi R6
                            
   09d6   06                ldn R6
   09d7   a4                plo R4
   09d8   16                inc R6
   09d9   06                ldn R6
   09da   b4                phi R4
                            
   09db   e4                sex R4
                            
   09dc   f8 82             ldi 082h
   09de   fe                shl
   09df   a7                plo R7
                            
   09e0                 EXPRESSION_SUB_LOOP
   09e0   05                ldn R5
   09e1   75                sdb
   09e2   54                str R4
   09e3   15                inc R5
   09e4   60                irx
                            
   09e5   27                dec R7
   09e6   87                glo R7
   09e7   3a e0             bnz EXPRESSION_SUB_LOOP
                            
   09e9   ef                sex STACK_REG
                            
   09ea   8f                glo STACK_REG
   09eb   fc 07             adi 7
   09ed   a6                plo R6
   09ee   9f                ghi STACK_REG
   09ef   7c 00             adci 0
   09f1   b6                phi R6
                            
   09f2   06                ldn R6
   09f3   a4                plo R4
   09f4   16                inc R6
   09f5   06                ldn R6
   09f6   b4                phi R4
                            
   09f7   1f                inc STACK_REG
   09f8   1f                inc STACK_REG
   09f9   1f                inc STACK_REG
   09fa   1f                inc STACK_REG
                        
   09fb   c0 09 39          lbr EXPRESSION_MAIN
                        
   09fe                 EXPRESSION_NEXT_CYCLE    
   09fe   14                inc R4
   09ff   c0 09 39          lbr EXPRESSION_MAIN
                            
   0a02                 EXPRESSION_END
   0a02   ef                sex STACK_REG
   0a03   60                irx
                            
   0a04   72                ldxa            ;restoring registers
   0a05   a5                plo R5
   0a06   72                ldxa
   0a07   b5                phi R5
   0a08   60                irx
   0a09   60                irx
   0a0a   72                ldxa
   0a0b   a6                plo R6
   0a0c   72                ldxa
   0a0d   b6                phi R6
   0a0e   72                ldxa
   0a0f   a7                plo R7
   0a10   f0                ldx
   0a11   b7                phi R7
                            
   0a12   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-DYN MEMORY INIT------------------------------
   0a13                 DYN_MEMORY_INIT
   0a13   f8 06             ldi HEAP_LASTADDRESS.0
   0a15   a4                plo R4
   0a16   f8 21             ldi HEAP_LASTADDRESS.1
   0a18   b4                phi R4
                            
   0a19   f8 10             ldi HEAP_START.0
   0a1b   54                str R4
   0a1c   14                inc R4
   0a1d   f8 21             ldi HEAP_START.1
   0a1f   54                str R4
                            
   0a20   f8 10             ldi HEAP_START.0
   0a22   a4                plo R4
   0a23   f8 21             ldi HEAP_START.1
   0a25   b4                phi R4
                            
   0a26   f8 eb             ldi (HEAP_END - HEAP_START - 5).0
   0a28   54                str R4
   0a29   14                inc R4
   0a2a   f8 da             ldi (HEAP_END - HEAP_START - 5).1
   0a2c   54                str R4
   0a2d   14                inc R4
                            
   0a2e   f8 00             ldi 0
   0a30   54                str R4
   0a31   14                inc R4
   0a32   54                str R4
   0a33   14                inc R4
   0a34   54                str R4
                            
   0a35   de                sep RETURN
                        ;----------------------------------------------
                        
   0a36                 DYN_MEMORY_DEBUG_STR
   0a36   20 2d 3e 20       db " -> size: ",0,", address: ",0,", previous: ",0,", ",0
   0a3a   73 69 7a 65   
   0a3e   3a 20 00 2c   
   0a42   20 61 64 64   
   0a46   72 65 73 73   
   0a4a   3a 20 00 2c   
   0a4e   20 70 72 65   
   0a52   76 69 6f 75   
   0a56   73 3a 20 00   
   0a5a   2c 20 00      
   0a5d                 DYN_MEMORY_DEBUG_STR_FREE
   0a5d   46 52 45 45       db "FREE\r\n",0
   0a61   0d 0a 00      
   0a64                 DYN_MEMORY_DEBUG_STR_USED
   0a64   55 53 45 44       db "USED\r\n",0
   0a68   0d 0a 00      
                        ;-DYN MEMORY DEBUG-----------------------------
   0a6b                 DYN_MEMORY_DEBUG
   0a6b   ef                sex STACK_REG
                            
   0a6c   f8 00             ldi 0
   0a6e   73                stxd
   0a6f   73                stxd
   0a70   73                stxd
   0a71   73                stxd                    ;+14 address + 5
                            
   0a72   73                stxd
   0a73   73                stxd
   0a74   f8 21             ldi HEAP_START.1
   0a76   73                stxd
   0a77   f8 10             ldi HEAP_START.0
   0a79   73                stxd                    ;+10 address
                            
   0a7a   f8 00             ldi 0
   0a7c   73                stxd                    ;+9 used
                            
   0a7d   73                stxd
   0a7e   73                stxd
   0a7f   73                stxd
   0a80   73                stxd                    ;+5 previous
                            
   0a81   73                stxd
   0a82   73                stxd
   0a83   73                stxd
   0a84   73                stxd                    ;+1 size
                            
   0a85                 DYN_MEMORY_DEBUG_MAINLOOP
   0a85   8f                glo STACK_REG
   0a86   fc 0a             adi 10
   0a88   a4                plo R4
   0a89   9f                ghi STACK_REG
   0a8a   7c 00             adci 0
   0a8c   b4                phi R4
                            
   0a8d   e4                sex R4
                            
   0a8e   f8 00             ldi HEAP_END.0
   0a90   f5                sd
   0a91   14                inc R4
   0a92   f8 fc             ldi HEAP_END.1
   0a94   75                sdb
                            
   0a95   c3 0b a1          lbdf DYN_MEMORY_DEBUG_END    ;if address >= HEAP_END
                            
   0a98   8f                glo STACK_REG
   0a99   fc 0a             adi 10
   0a9b   a4                plo R4
   0a9c   9f                ghi STACK_REG
   0a9d   7c 00             adci 0
   0a9f   b4                phi R4
                            
   0aa0   44                lda R4                      ;R5 = address
   0aa1   a5                plo R5
   0aa2   44                lda R4
   0aa3   b5                phi R5
                            
   0aa4   8f                glo STACK_REG
   0aa5   a4                plo R4
   0aa6   9f                ghi STACK_REG
   0aa7   b4                phi R4
   0aa8   14                inc R4
                            
   0aa9   45                lda R5
   0aaa   54                str R4
   0aab   14                inc R4
                            
   0aac   45                lda R5
   0aad   54                str R4
   0aae   14                inc R4
                            
   0aaf   14                inc R4
   0ab0   14                inc R4
                            
   0ab1   45                lda R5
   0ab2   54                str R4
   0ab3   14                inc R4
                            
   0ab4   45                lda R5
   0ab5   54                str R4
   0ab6   14                inc R4
                            
   0ab7   14                inc R4
   0ab8   14                inc R4
                            
   0ab9   45                lda R5
   0aba   54                str R4
                            
   0abb   8f                glo STACK_REG
   0abc   fc 0e             adi 14
   0abe   a4                plo R4
   0abf   9f                ghi STACK_REG
   0ac0   7c 00             adci 0
   0ac2   b4                phi R4
                            
   0ac3   85                glo R5
   0ac4   54                str R4
   0ac5   14                inc R4
                            
   0ac6   95                ghi R5
   0ac7   54                str R4
                            
   0ac8                 DYN_MEMORY_DEBUG_PRINT
   0ac8   8f                glo STACK_REG               ;set R4 to address
   0ac9   fc 0a             adi 10
   0acb   a4                plo R4
   0acc   9f                ghi STACK_REG
   0acd   7c 00             adci 0
   0acf   b4                phi R4
                        
   0ad0   f8 ae             ldi PRINT_DEC.0             ;print address in decimal
   0ad2   ad                plo CALL_REG
   0ad3   f8 04             ldi PRINT_DEC.1
   0ad5   bd                phi CALL_REG
                            
   0ad6   f8 00             ldi FCALL.0
   0ad8   ae                plo FCALL_REG
   0ad9   de                sep FCALL_REG
                            
   0ada   f8 36             ldi DYN_MEMORY_DEBUG_STR.0      ;print the debug string
   0adc   a6                plo R6
   0add   f8 0a             ldi DYN_MEMORY_DEBUG_STR.1
   0adf   b6                phi R6
                            
   0ae0   f8 52             ldi PRINT.0         ;prepare to call PRINT
   0ae2   ad                plo CALL_REG
   0ae3   f8 01             ldi PRINT.1
   0ae5   bd                phi CALL_REG
                            
   0ae6   f8 00             ldi FCALL.0
   0ae8   ae                plo FCALL_REG
   0ae9   de                sep FCALL_REG       ;call PRINT
                            
   0aea   86                glo R6                  ;save R6 value
   0aeb   a7                plo R7
   0aec   96                ghi R6
   0aed   b7                phi R7
                            
   0aee   8f                glo STACK_REG           ;set R4 to size
   0aef   a4                plo R4
   0af0   9f                ghi STACK_REG
   0af1   b4                phi R4
   0af2   14                inc R4
                        
   0af3   f8 ae             ldi PRINT_DEC.0         ;print size in decimal
   0af5   ad                plo CALL_REG
   0af6   f8 04             ldi PRINT_DEC.1
   0af8   bd                phi CALL_REG
                            
   0af9   f8 00             ldi FCALL.0
   0afb   ae                plo FCALL_REG
   0afc   de                sep FCALL_REG
                            
   0afd   87                glo R7                  ;continue printing the debug string
   0afe   a6                plo R6
   0aff   97                ghi R7
   0b00   b6                phi R6
                            
   0b01   f8 52             ldi PRINT.0             ;prepare to call PRINT
   0b03   ad                plo CALL_REG
   0b04   f8 01             ldi PRINT.1
   0b06   bd                phi CALL_REG
                            
   0b07   f8 00             ldi FCALL.0
   0b09   ae                plo FCALL_REG
   0b0a   de                sep FCALL_REG           ;call PRINT
                            
   0b0b   86                glo R6                  ;save R6 value
   0b0c   a7                plo R7
   0b0d   96                ghi R6
   0b0e   b7                phi R7
                            
   0b0f   8f                glo STACK_REG           ;set R4 to address+5
   0b10   fc 0e             adi 14
   0b12   a4                plo R4
   0b13   9f                ghi STACK_REG
   0b14   7c 00             adci 0
   0b16   b4                phi R4
                            
   0b17   f8 ae             ldi PRINT_DEC.0         ;print address+5 in decimal
   0b19   ad                plo CALL_REG
   0b1a   f8 04             ldi PRINT_DEC.1
   0b1c   bd                phi CALL_REG
                            
   0b1d   f8 00             ldi FCALL.0
   0b1f   ae                plo FCALL_REG
   0b20   de                sep FCALL_REG
                            
   0b21   87                glo R7                  ;continue printing the debug string
   0b22   a6                plo R6
   0b23   97                ghi R7
   0b24   b6                phi R6
                            
   0b25   f8 52             ldi PRINT.0             ;prepare to call PRINT
   0b27   ad                plo CALL_REG
   0b28   f8 01             ldi PRINT.1
   0b2a   bd                phi CALL_REG
                            
   0b2b   f8 00             ldi FCALL.0
   0b2d   ae                plo FCALL_REG
   0b2e   de                sep FCALL_REG           ;call PRINT
                            
   0b2f   86                glo R6                  ;save R6 value
   0b30   a7                plo R7
   0b31   96                ghi R6
   0b32   b7                phi R7
                            
   0b33   8f                glo STACK_REG           ;set R4 to previous
   0b34   fc 05             adi 5
   0b36   a4                plo R4
   0b37   9f                ghi STACK_REG
   0b38   7c 00             adci 0
   0b3a   b4                phi R4
                            
   0b3b   f8 ae             ldi PRINT_DEC.0         ;print previous in decimal
   0b3d   ad                plo CALL_REG
   0b3e   f8 04             ldi PRINT_DEC.1
   0b40   bd                phi CALL_REG
                            
   0b41   f8 00             ldi FCALL.0
   0b43   ae                plo FCALL_REG
   0b44   de                sep FCALL_REG
                            
   0b45   87                glo R7                  ;continue printing the debug string
   0b46   a6                plo R6
   0b47   97                ghi R7
   0b48   b6                phi R6
                            
   0b49   f8 52             ldi PRINT.0             ;prepare to call PRINT
   0b4b   ad                plo CALL_REG
   0b4c   f8 01             ldi PRINT.1
   0b4e   bd                phi CALL_REG
                            
   0b4f   f8 00             ldi FCALL.0
   0b51   ae                plo FCALL_REG
   0b52   de                sep FCALL_REG           ;call PRINT
                            
   0b53   8f                glo STACK_REG           ;set R4 to previous
   0b54   fc 09             adi 9
   0b56   a4                plo R4
   0b57   9f                ghi STACK_REG
   0b58   7c 00             adci 0
   0b5a   b4                phi R4
                            
   0b5b   04                ldn R4
   0b5c   32 66             bz DYN_MEMORY_DEBUG_FREE
                            
   0b5e   f8 64             ldi DYN_MEMORY_DEBUG_STR_USED.0
   0b60   a6                plo R6
   0b61   f8 0a             ldi DYN_MEMORY_DEBUG_STR_USED.1
   0b63   b6                phi R6
                            
   0b64   30 6c             br DYN_MEMORY_DEBUG_NEXTADDRESS
                            
   0b66                 DYN_MEMORY_DEBUG_FREE
   0b66   f8 5d             ldi DYN_MEMORY_DEBUG_STR_FREE.0
   0b68   a6                plo R6
   0b69   f8 0a             ldi DYN_MEMORY_DEBUG_STR_FREE.1
   0b6b   b6                phi R6
                            
   0b6c                 DYN_MEMORY_DEBUG_NEXTADDRESS
   0b6c   f8 52             ldi PRINT.0             ;prepare to call PRINT
   0b6e   ad                plo CALL_REG
   0b6f   f8 01             ldi PRINT.1
   0b71   bd                phi CALL_REG
                            
   0b72   f8 00             ldi FCALL.0
   0b74   ae                plo FCALL_REG
   0b75   de                sep FCALL_REG           ;call PRINT
                            
   0b76   8f                glo STACK_REG           ;set R4 to address
   0b77   fc 0a             adi 10
   0b79   a4                plo R4
   0b7a   9f                ghi STACK_REG
   0b7b   7c 00             adci 0
   0b7d   b4                phi R4
                            
   0b7e   8f                glo STACK_REG           ;set R5 to address+5
   0b7f   fc 0e             adi 14
   0b81   a5                plo R5
   0b82   9f                ghi STACK_REG
   0b83   7c 00             adci 0
   0b85   b5                phi R5
                            
   0b86   8f                glo STACK_REG           ;set R6 to size
   0b87   a6                plo R6
   0b88   9f                ghi STACK_REG
   0b89   b6                phi R6
   0b8a   16                inc R6
                            
   0b8b   e6                sex R6
                            
   0b8c   45                lda R5
   0b8d   f4                add
   0b8e   60                irx
   0b8f   54                str R4
   0b90   14                inc R4
                            
   0b91   45                lda R5
   0b92   74                adc
   0b93   60                irx
   0b94   54                str R4
   0b95   14                inc R4
                            
   0b96   45                lda R5
   0b97   74                adc
   0b98   60                irx
   0b99   54                str R4
   0b9a   14                inc R4
                            
   0b9b   45                lda R5
   0b9c   74                adc
   0b9d   54                str R4
                            
   0b9e   c0 0a 85          lbr DYN_MEMORY_DEBUG_MAINLOOP
                        
   0ba1                 DYN_MEMORY_DEBUG_END
   0ba1   8f                glo STACK_REG           ;set R6 to size
   0ba2   fc 11             adi 17
   0ba4   af                plo STACK_REG
   0ba5   9f                ghi STACK_REG
   0ba6   7c 00             adci 0
   0ba8   bf                phi STACK_REG
                            
   0ba9   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-DYN MEMORY ALLOCATION------------------------
                        ;-R4-Size--------------------------------------
                        ;-R10-return address---------------------------
                        ;-Local registers------------------------------
                        ;-R5-R6-R7-R8----------------------------------
   0baa                 DYN_MEMORY_ALLOC
   0baa   ef                sex STACK_REG
                            
   0bab   98                ghi R8
   0bac   73                stxd
   0bad   88                glo R8
   0bae   73                stxd
                            
   0baf   97                ghi R7
   0bb0   73                stxd
   0bb1   87                glo R7
   0bb2   73                stxd
                            
   0bb3   96                ghi R6
   0bb4   73                stxd
   0bb5   86                glo R6
   0bb6   73                stxd
                            
   0bb7   95                ghi R5
   0bb8   73                stxd
   0bb9   85                glo R5
   0bba   73                stxd
                            
   0bbb   f8 00             ldi 0
   0bbd   73                stxd
   0bbe   73                stxd                ;+7 currentSize
                            
   0bbf   94                ghi R4
   0bc0   73                stxd
   0bc1   84                glo R4
   0bc2   73                stxd                ;+5 size
                            
   0bc3   84                glo R4              ;R4 += 5
   0bc4   fc 05             adi 5
   0bc6   a4                plo R4
   0bc7   94                ghi R4
   0bc8   7c 00             adci 0
   0bca   b4                phi R4
                            
   0bcb   94                ghi R4
   0bcc   73                stxd
   0bcd   84                glo R4              ;newSize is initialized to size+5 for further calculation
   0bce   73                stxd                ;+3 newSize
                        
   0bcf   f8 fc             ldi HEAP_END.1
   0bd1   73                stxd
   0bd2   f8 00             ldi HEAP_END.0
   0bd4   73                stxd                ;+1 endAddress = HEAP_END
                            
   0bd5   f8 06             ldi HEAP_LASTADDRESS.0
   0bd7   a4                plo R4
   0bd8   f8 21             ldi HEAP_LASTADDRESS.1
   0bda   b4                phi R4
                            
   0bdb   44                lda R4
   0bdc   a5                plo R5
   0bdd   44                lda R4
   0bde   b5                phi R5              ;R5 = lastAddress
                            
   0bdf   f8 00             ldi 0               ;R10 = 0
   0be1   aa                plo R10
   0be2   ba                phi R10
                            
   0be3   f8 02             ldi 2               ;R8 = 2
   0be5   a8                plo R8
                            
   0be6                 DYN_MEMORY_ALLOC_MAINLOOP
   0be6   8f                glo STACK_REG       ;set R4 pointer to endAddress
   0be7   a4                plo R4
   0be8   9f                ghi STACK_REG
   0be9   b4                phi R4
   0bea   14                inc R4
                            
   0beb   e4                sex R4
                            
   0bec   85                glo R5              ;currentAddress - endAddress
   0bed   f7                sm
   0bee   60                irx
   0bef   95                ghi R5
   0bf0   77                smb
                            
   0bf1   c3 0c da          lbdf DYN_MEMORY_ALLOC_NEXTPASS      ;if currentAddress >= endAddress
                            
   0bf4   8f                glo STACK_REG                       ;set R4 pointer to currentSize
   0bf5   fc 07             adi 7
   0bf7   a4                plo R4
   0bf8   9f                ghi STACK_REG
   0bf9   7c 00             adci 0
   0bfb   b4                phi R4
                            
   0bfc   85                glo R5                              ;R6 = R5 (currentAddress)
   0bfd   a6                plo R6
   0bfe   95                ghi R5
   0bff   b6                phi R6
                            
   0c00   46                lda R6                              ;currentSize = block size
   0c01   54                str R4
   0c02   14                inc R4
                            
   0c03   46                lda R6
   0c04   54                str R4
                            
   0c05   16                inc R6
   0c06   16                inc R6
                                
   0c07   06                ldn R6
   0c08   ca 0c c0          lbnz DYN_MEMORY_ALLOC_NEXTADDRESS   ;if the current block is USED
                            
   0c0b   24                dec R4
                            
   0c0c   8f                glo STACK_REG                   ;R6 pointer set to size
   0c0d   fc 05             adi 5
   0c0f   a6                plo R6
   0c10   9f                ghi STACK_REG
   0c11   7c 00             adci 0
   0c13   b6                phi R6
                            
   0c14   06                ldn R6                          ;currentSize == size
   0c15   f5                sd
   0c16   ca 0c 35          lbnz DYN_MEMORY_ALLOC_SIZEBIGGER
   0c19   60                irx
   0c1a   16                inc R6
   0c1b   06                ldn R6
   0c1c   75                sdb
                        
   0c1d   26                dec R6                              ;set back R6
   0c1e   24                dec R4                              ;set back R4
                            
   0c1f   ca 0c 35          lbnz DYN_MEMORY_ALLOC_SIZEBIGGER    ;if currentSize != size
                        
   0c22                 DYN_MEMORY_ALLOC_SIZEEQ
   0c22   85                glo R5                              ;R6 = currentAddress + 4
   0c23   fc 04             adi 4
   0c25   a6                plo R6
   0c26   95                ghi R5
   0c27   7c 00             adci 0
   0c29   b6                phi R6
                            
   0c2a   f8 01             ldi 1
   0c2c   56                str R6                              ;used = 1
                            
   0c2d   16                inc R6                              ;R6++
   0c2e   86                glo R6
   0c2f   aa                plo R10                             ;R10 = R6
   0c30   96                ghi R6
   0c31   ba                phi R10
                            
   0c32   c0 0c f5          lbr DYN_MEMORY_ALLOC_END            ;RETURN
                        
   0c35                 DYN_MEMORY_ALLOC_SIZEBIGGER
   0c35   8f                glo STACK_REG                   ;R6 pinter set to newSize (size+5)
   0c36   fc 03             adi 3
   0c38   a6                plo R6
   0c39   9f                ghi STACK_REG
   0c3a   7c 00             adci 0
   0c3c   b6                phi R6
                            
   0c3d   46                lda R6                          ;currentSize - newSize (size+5)
   0c3e   f5                sd
   0c3f   60                irx
   0c40   46                lda R6
   0c41   75                sdb
                            
   0c42   26                dec R6                              ;set back R6
   0c43   26                dec R6
                               
   0c44   cb 0c c0          lbnf DYN_MEMORY_ALLOC_NEXTADDRESS   ;if currentSize < newSize (size+5)
                            
   0c47   24                dec R4                              ;R4 pointer to size
   0c48   24                dec R4
   0c49   24                dec R4
                            
   0c4a   85                glo R5                              ;R6 = R5 (currentAddress)
   0c4b   a6                plo R6
   0c4c   95                ghi R5
   0c4d   b6                phi R6
                            
   0c4e   44                lda R4                              ;set current block size to size
   0c4f   56                str R6
   0c50   16                inc R6
                            
   0c51   44                lda R4
   0c52   56                str R6
   0c53   16                inc R6
                            
   0c54   16                inc R6                              ;R6 += 2
   0c55   16                inc R6
                            
   0c56   f8 01             ldi 1                               ;set used to 1
   0c58   56                str R6
                            
   0c59   16                inc R6                              ;R6++
   0c5a   86                glo R6
   0c5b   aa                plo R10                             ;R10 = R6
   0c5c   96                ghi R6                              ;R10 is set for return
   0c5d   ba                phi R10
                            
   0c5e   8f                glo STACK_REG                   ;R4 pinter set to newSize (size+5)
   0c5f   fc 03             adi 3
   0c61   a4                plo R4
   0c62   9f                ghi STACK_REG
   0c63   7c 00             adci 0
   0c65   b4                phi R4
                            
   0c66   85                glo R5                          ;R7 = currentAddress + size + 5
   0c67   f4                add
   0c68   60                irx
   0c69   a7                plo R7
   0c6a   95                ghi R5
   0c6b   74                adc
   0c6c   b7                phi R7                          ;R7 is the newAddress
                            
   0c6d   f8 06             ldi HEAP_LASTADDRESS.0
   0c6f   a4                plo R4
   0c70   f8 21             ldi HEAP_LASTADDRESS.1
   0c72   b4                phi R4
                            
   0c73   87                glo R7                          ;lastAddress = R7
   0c74   54                str R4
   0c75   14                inc R4
                            
   0c76   97                ghi R7
   0c77   54                str R4
                        
   0c78   8f                glo STACK_REG                   ;R4 pinter set to newSize
   0c79   fc 03             adi 3
   0c7b   a4                plo R4
   0c7c   9f                ghi STACK_REG
   0c7d   7c 00             adci 0
   0c7f   b4                phi R4
                            
   0c80   8f                glo STACK_REG                   ;R4 pinter set to currentSize
   0c81   fc 07             adi 7
   0c83   a6                plo R6
   0c84   9f                ghi STACK_REG
   0c85   7c 00             adci 0
   0c87   b6                phi R6
                            
   0c88   46                lda R6                          ;newSize = currentSize - (size + 5)
   0c89   f7                sm
   0c8a   54                str R4
   0c8b   60                irx
                            
   0c8c   46                lda R6
   0c8d   77                smb
   0c8e   54                str R4
                            
   0c8f   24                dec R4                          ;set back R4 to newSize
                            
   0c90   87                glo R7                          ;R6 = R7 (newAddress)
   0c91   a6                plo R6
   0c92   97                ghi R7
   0c93   b6                phi R6
                            
   0c94   44                lda R4                          ;new block size = newSize
   0c95   56                str R6
   0c96   16                inc R6
                            
   0c97   44                lda R4
   0c98   56                str R6
   0c99   16                inc R6
                            
   0c9a   85                glo R5                          ;new block previous address = currentAddress
   0c9b   56                str R6
   0c9c   16                inc R6
                            
   0c9d   95                ghi R5
   0c9e   56                str R6
   0c9f   16                inc R6
                            
   0ca0   f8 00             ldi 0                           ;new block used = 0
   0ca2   56                str R6
   0ca3   16                inc R6
                            
   0ca4   24                dec R4
   0ca5   24                dec R4
                            
   0ca6   86                glo R6                          ;R6 = R6 + newSize
   0ca7   f4                add
   0ca8   60                irx
   0ca9   a6                plo R6
   0caa   96                ghi R6
   0cab   74                adc
   0cac   b6                phi R6
                            
   0cad   16                inc R6                          ;R6 += 2
   0cae   16                inc R6
                            
   0caf   86                glo R6
   0cb0   ff 00             smi HEAP_END.0
   0cb2   96                ghi R6
   0cb3   7f fc             smbi HEAP_END.1
                            
   0cb5   c3 0c f5          lbdf DYN_MEMORY_ALLOC_END
                            
   0cb8   87                glo R7                          ;next block previous address = R7
   0cb9   56                str R6
   0cba   16                inc R6
                            
   0cbb   97                ghi R7
   0cbc   56                str R6
                            
   0cbd   c0 0c f5          lbr DYN_MEMORY_ALLOC_END
                            
   0cc0                 DYN_MEMORY_ALLOC_NEXTADDRESS
   0cc0   8f                glo STACK_REG               ;set R4 pointer to currentSize
   0cc1   fc 07             adi 7
   0cc3   a4                plo R4
   0cc4   9f                ghi STACK_REG
   0cc5   7c 00             adci 0
   0cc7   b4                phi R4
                            
   0cc8   85                glo R5
   0cc9   f4                add
   0cca   60                irx
   0ccb   a5                plo R5
   0ccc   95                ghi R5
   0ccd   74                adc
   0cce   b5                phi R5                          ;currentAddress += size
                            
   0ccf   85                glo R5
   0cd0   fc 05             adi 5
   0cd2   a5                plo R5
   0cd3   95                ghi R5
   0cd4   7c 00             adci 0
   0cd6   b5                phi R5                          ;currentAddress += 5
                            
   0cd7   c0 0b e6          lbr DYN_MEMORY_ALLOC_MAINLOOP
                            
   0cda                 DYN_MEMORY_ALLOC_NEXTPASS
   0cda   f8 10             ldi HEAP_START.0
   0cdc   a5                plo R5
   0cdd   f8 21             ldi HEAP_START.1
   0cdf   b5                phi R5
                            
   0ce0   8f                glo STACK_REG                       ;set R4 pointer to endAddress
   0ce1   a4                plo R4
   0ce2   9f                ghi STACK_REG
   0ce3   b4                phi R4
   0ce4   14                inc R4
                            
   0ce5   f8 06             ldi HEAP_LASTADDRESS.0
   0ce7   a6                plo R6
   0ce8   f8 21             ldi HEAP_LASTADDRESS.1
   0cea   b6                phi R6
                            
   0ceb   46                lda R6
   0cec   54                str R4
   0ced   14                inc R4
                            
   0cee   46                lda R6
   0cef   54                str R4
                        
   0cf0   28                dec R8
   0cf1   88                glo R8
   0cf2   ca 0b e6          lbnz DYN_MEMORY_ALLOC_MAINLOOP
                            
   0cf5                 DYN_MEMORY_ALLOC_END
   0cf5   8f                glo STACK_REG
   0cf6   fc 09             adi 9
   0cf8   af                plo STACK_REG
   0cf9   9f                ghi STACK_REG
   0cfa   7c 00             adci 0
   0cfc   bf                phi STACK_REG
                            
   0cfd   ef                sex STACK_REG
                            
   0cfe   72                ldxa
   0cff   a5                plo R5
   0d00   72                ldxa
   0d01   b5                phi R5
                            
   0d02   72                ldxa
   0d03   a6                plo R6
   0d04   72                ldxa
   0d05   b6                phi R6
                            
   0d06   72                ldxa
   0d07   a7                plo R7
   0d08   72                ldxa
   0d09   b7                phi R7
                            
   0d0a   72                ldxa
   0d0b   a8                plo R8
   0d0c   f0                ldx
   0d0d   b8                phi R8
                            
   0d0e   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-DYN MEMORY FREE------------------------------
                        ;-R4-address-----------------------------------
                        ;-Local registers------------------------------
                        ;-R5-R6----------------------------------------
   0d0f                 DYN_MEMORY_FREE
   0d0f   ef                sex STACK_REG
                            
   0d10   95                ghi R5      ;saving local registers
   0d11   73                stxd
   0d12   85                glo R5
   0d13   73                stxd
                            
   0d14   96                ghi R6
   0d15   73                stxd
   0d16   86                glo R6
   0d17   73                stxd
                            
   0d18   f8 00             ldi 0
   0d1a   73                stxd
   0d1b   73                stxd
   0d1c   73                stxd
   0d1d   73                stxd        ;+5 size
                            
   0d1e   73                stxd
   0d1f   73                stxd
   0d20   73                stxd
   0d21   73                stxd        ;+1 nextSize
                            
   0d22   24                dec R4      ;R4-- (address--)
   0d23   54                str R4      ;set current block to free
                            
   0d24   24                dec R4
   0d25   24                dec R4
                            
   0d26   44                lda R4      ;R6 = previous block address
   0d27   a6                plo R6
   0d28   44                lda R4
   0d29   b6                phi R6
                            
   0d2a   24                dec R4      ;set R4 to the beginning of the current block
   0d2b   24                dec R4
   0d2c   24                dec R4
   0d2d   24                dec R4
                            
   0d2e   86                glo R6
   0d2f   ca 0d 38          lbnz DYN_MEMORY_FREE_NEXTCHECK
   0d32   96                ghi R6
   0d33   ca 0d 38          lbnz DYN_MEMORY_FREE_NEXTCHECK      ;if previousAddress != 0
                            
   0d36   30 47             br DYN_MEMORY_FREE_MERGE
                        
   0d38                 DYN_MEMORY_FREE_NEXTCHECK
   0d38   86                glo R6                              ;set R5 pointer to previous block used
   0d39   fc 04             adi 4
   0d3b   a5                plo R5
   0d3c   96                ghi R6
   0d3d   7c 00             adci 0
   0d3f   b5                phi R5
                            
   0d40   05                ldn R5
   0d41   3a 47             bnz DYN_MEMORY_FREE_MERGE           ;if used != 0
                            
   0d43   86                glo R6                              ;set R4 to previous block
   0d44   a4                plo R4
   0d45   96                ghi R6
   0d46   b4                phi R4
                            
   0d47                 DYN_MEMORY_FREE_MERGE
   0d47   8f                glo STACK_REG                       ;set R5 pointer to size
   0d48   fc 05             adi 5
   0d4a   a5                plo R5
   0d4b   9f                ghi STACK_REG
   0d4c   7c 00             adci 0
   0d4e   b5                phi R5
                            
   0d4f   e5                sex R5                              ;set R5 to pointer
                            
   0d50   44                lda R4                              ;load block size to size
   0d51   55                str R5
   0d52   15                inc R5
                            
   0d53   44                lda R4
   0d54   55                str R5
                            
   0d55   24                dec R4
   0d56   24                dec R4                              ;set back R4 and R5
   0d57   25                dec R5
                            
   0d58   84                glo R4                              ;R6 (nextAddress) = address + 5 
   0d59   fc 05             adi 5
   0d5b   a6                plo R6
   0d5c   94                ghi R4
   0d5d   7c 00             adci 0
   0d5f   b6                phi R6
                            
   0d60   86                glo R6                              ;R6 += size
   0d61   f4                add
   0d62   60                irx
   0d63   a6                plo R6
   0d64   96                ghi R6
   0d65   74                adc
   0d66   b6                phi R6
                            
   0d67                 DYN_MEMORY_FREE_MERGELOOP
   0d67   86                glo R6
   0d68   ff 00             smi HEAP_END.0
   0d6a   96                ghi R6
   0d6b   7f fc             smbi HEAP_END.1
                            
   0d6d   c3 0d a6          lbdf DYN_MEMORY_FREE_END            ;if nextAddress - HEAP_END >= 0
                            
   0d70   86                glo R6                              ;set R5 to nextAddress used
   0d71   fc 04             adi 4
   0d73   a5                plo R5
   0d74   96                ghi R6
   0d75   7c 00             adci 0
   0d77   b5                phi R5
                            
   0d78   05                ldn R5
   0d79   ca 0d 9f          lbnz DYN_MEMORY_FREE_SETPREVIOUS    ;if used != 0
                            
   0d7c   8f                glo STACK_REG                       ;set R5 pointer to nextSize
   0d7d   a5                plo R5
   0d7e   9f                ghi STACK_REG
   0d7f   b5                phi R5
   0d80   15                inc R5
                            
   0d81   46                lda R6                              ;load size + 5 to nextSize 
   0d82   fc 05             adi 5
   0d84   55                str R5
   0d85   60                irx
                            
   0d86   06                ldn R6
   0d87   7c 00             adci 0
   0d89   55                str R5
                            
   0d8a   25                dec R5                              ;set back R5 and R6
   0d8b   26                dec R6
                            
   0d8c   04                ldn R4                              ;current block size += nextSize
   0d8d   f4                add
   0d8e   54                str R4
   0d8f   60                irx
   0d90   14                inc R4
                            
   0d91   04                ldn R4
   0d92   74                adc
   0d93   54                str R4
                            
   0d94   25                dec R5                              ;set back R4 and R5
   0d95   24                dec R4
                            
   0d96   86                glo R6                              ;R6 (nextAddress) += nextSize
   0d97   f4                add
   0d98   a6                plo R6
   0d99   60                irx
   0d9a   96                ghi R6
   0d9b   74                adc
   0d9c   b6                phi R6
                            
   0d9d   30 67             br DYN_MEMORY_FREE_MERGELOOP
                        
   0d9f                 DYN_MEMORY_FREE_SETPREVIOUS    
   0d9f   16                inc R6                              ;increment nextAddress to previous address section
   0da0   16                inc R6
                            
   0da1   84                glo R4                              ;set previous address to R4 value
   0da2   56                str R6
   0da3   16                inc R6
   0da4   94                ghi R4
   0da5   56                str R6
                        
   0da6                 DYN_MEMORY_FREE_END
   0da6   8f                glo STACK_REG
   0da7   fc 09             adi 9
   0da9   af                plo STACK_REG
   0daa   9f                ghi STACK_REG
   0dab   7c 00             adci 0
   0dad   bf                phi STACK_REG
                            
   0dae   ef                sex STACK_REG
                            
   0daf   f8 06             ldi HEAP_LASTADDRESS.0
   0db1   a5                plo R5
   0db2   f8 21             ldi HEAP_LASTADDRESS.1
   0db4   b5                phi R5
                            
   0db5   84                glo R4
   0db6   55                str R5
   0db7   15                inc R5
                            
   0db8   94                ghi R4
   0db9   55                str R5
                            
   0dba   72                ldxa            ;restoring local registers
   0dbb   a6                plo R6
   0dbc   72                ldxa
   0dbd   b6                phi R6
                            
   0dbe   72                ldxa
   0dbf   a5                plo R5
   0dc0   f0                ldx
   0dc1   b5                phi R5
                            
   0dc2   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-VAR-LIST-INIT--------------------------------
   0dc3                 VAR_LIST_INIT
   0dc3   f8 00             ldi VARLIST_COUNT.0
   0dc5   a4                plo R4
   0dc6   f8 21             ldi VARLIST_COUNT.1
   0dc8   b4                phi R4
                            
   0dc9   f8 06             ldi 6
   0dcb   a5                plo R5
                        
   0dcc                 VAR_LIST_INIT_LOOP
   0dcc   f8 00             ldi 0
   0dce   54                str R4
   0dcf   14                inc R4
                            
   0dd0   25                dec R5
   0dd1   85                glo R5
   0dd2   3a cc             bnz VAR_LIST_INIT_LOOP
                            
   0dd4   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-GET-STRING-----------------------------------
                        ;-R4-Input string------------------------------
                        ;-R10-New string address-----------------------
                        ;-Local registers------------------------------
                        ;-R5-R6----------------------------------------
   0dd5                 GET_STRING
   0dd5   ef                sex STACK_REG
                            
   0dd6   95                ghi R5
   0dd7   73                stxd
   0dd8   85                glo R5
   0dd9   73                stxd
                            
   0dda   96                ghi R6
   0ddb   73                stxd
   0ddc   86                glo R6
   0ddd   73                stxd
                            
   0dde   94                ghi R4
   0ddf   73                stxd
   0de0   84                glo R4
   0de1   73                stxd                    ;+1 startAddress
                            
   0de2   f8 00             ldi 0                   ;set R5 and R10 to zero
   0de4   a5                plo R5
   0de5   b5                phi R5
                            
   0de6   aa                plo R10
   0de7   ba                phi R10
                        
   0de8                 GET_STRING_LEN
   0de8   04                ldn R4                  
   0de9   ff 30             smi 48
   0deb   cb 0e 14          lbnf GET_STRING_LEN_END   ;if *R4 < '0'
   0dee   04                ldn R4
   0def   ff 3a             smi 58
   0df1   cb 0e 0f          lbnf GET_STRING_ADDLEN    ;if *R4 <= '9'
   0df4   04                ldn R4
   0df5   ff 41             smi 65
   0df7   cb 0e 14          lbnf GET_STRING_LEN_END   ;if *R4 < 'A'
   0dfa   04                ldn R4
   0dfb   ff 5b             smi 91
   0dfd   cb 0e 0f          lbnf GET_STRING_ADDLEN    ;if *R4 <= 'Z'
   0e00   04                ldn R4
   0e01   ff 61             smi 97
   0e03   cb 0e 14          lbnf GET_STRING_LEN_END   ;if *R4 < 'a'
   0e06   04                ldn R4
   0e07   ff 7b             smi 123
   0e09   cb 0e 0f          lbnf GET_STRING_ADDLEN    ;if *R4 <= 'z'
                            
   0e0c   c0 0e 14          lbr GET_STRING_LEN_END   ;length checking end
                            
   0e0f                 GET_STRING_ADDLEN
   0e0f   15                inc R5                  ;increment R4 and R5
   0e10   14                inc R4
   0e11   c0 0d e8          lbr GET_STRING_LEN
                                
   0e14                 GET_STRING_LEN_END
   0e14   85                glo R5
   0e15   3a 1b             bnz GET_STRING_ALLOCATE_MEM
   0e17   95                ghi R5
   0e18   c2 0e 49          lbz GET_STRING_END               ;if R5 == 0
                            
   0e1b                 GET_STRING_ALLOCATE_MEM
   0e1b   85                glo R5
   0e1c   a4                plo R4
   0e1d   95                ghi R5
   0e1e   b4                phi R4
   0e1f   14                inc R4                          ;increment R4 because we need spacefor the termination char
                            
   0e20   f8 aa             ldi DYN_MEMORY_ALLOC.0         ;call DYN_MEMORY_ALLOC
   0e22   ad                plo CALL_REG
   0e23   f8 0b             ldi DYN_MEMORY_ALLOC.1
   0e25   bd                phi CALL_REG
                            
   0e26   f8 00             ldi FCALL.0
   0e28   ae                plo FCALL_REG
   0e29   de                sep FCALL_REG
                            
   0e2a   8a                glo R10
   0e2b   ca 0e 32          lbnz GET_STRING_COPY
   0e2e   9a                ghi R10
   0e2f   c2 0e 49          lbz GET_STRING_END               ;if R10 == 0
                            
   0e32                 GET_STRING_COPY
   0e32   8f                glo STACK_REG                   ;restore R4
   0e33   a6                plo R6
   0e34   9f                ghi STACK_REG
   0e35   b6                phi R6
   0e36   16                inc R6
                            
   0e37   46                lda R6
   0e38   a4                plo R4
   0e39   46                lda R6
   0e3a   b4                phi R4
                            
   0e3b   8a                glo R10                         ;R6 = R10
   0e3c   a6                plo R6
   0e3d   9a                ghi R10
   0e3e   b6                phi R6
                            
   0e3f                 GET_STRING_COPY_LOOP
   0e3f   44                lda R4                          ;read data from R4 location
   0e40   56                str R6                          ;and store to R6 location
   0e41   16                inc R6
                            
   0e42   25                dec R5                          ;decrement R5
   0e43   85                glo R5
   0e44   3a 3f             bnz GET_STRING_COPY_LOOP        ;if R5 != 0
                            
   0e46   f8 00             ldi 0
   0e48   56                str R6                          ;terminate the string
                        
   0e49                 GET_STRING_END
   0e49   60                irx
   0e4a   60                irx
   0e4b   60                irx
                            
   0e4c   72                ldxa                            ;restore local registers
   0e4d   a6                plo R6
   0e4e   72                ldxa
   0e4f   b6                phi R6
                            
   0e50   72                ldxa
   0e51   a5                plo R5
   0e52   f0                ldx
   0e53   b5                phi R5
                            
   0e54   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-LET-STATEMENT--------------------------------
                        ;-R4-Input string------------------------------
                        ;-Local registres------------------------------
                        ;-R5-R6-R7-------------------------------------
   0e55                 LET_STATEMENT
   0e55   ef                sex STACK_REG
                            
   0e56   95                ghi R5
   0e57   73                stxd
   0e58   85                glo R5
   0e59   73                stxd
                            
   0e5a   96                ghi R6
   0e5b   73                stxd
   0e5c   86                glo R6
   0e5d   73                stxd
                            
   0e5e   97                ghi R7
   0e5f   73                stxd
   0e60   87                glo R7
   0e61   73                stxd
                            
   0e62   94                ghi R4          ;saving R4 value
   0e63   73                stxd
   0e64   84                glo R4
   0e65   73                stxd            ;+3 inputString
                            
   0e66   f8 00             ldi 0
   0e68   73                stxd
   0e69   73                stxd            ;+1 variableNode address
                            
   0e6a   b4                phi R4          ;R4 = 8
   0e6b   f8 08             ldi 8
   0e6d   a4                plo R4
                            
   0e6e   f8 aa             ldi DYN_MEMORY_ALLOC.0          ;call DYN_MEMORY_ALLOC
   0e70   ad                plo CALL_REG                    ;Allocating memory for the variable node
   0e71   f8 0b             ldi DYN_MEMORY_ALLOC.1
   0e73   bd                phi CALL_REG
                            
   0e74   f8 00             ldi FCALL.0
   0e76   ae                plo FCALL_REG
   0e77   de                sep FCALL_REG
                            
   0e78   8a                glo R10
   0e79   3a 7f             bnz LET_STATEMENT_CONTINUE1
   0e7b   9a                ghi R10
   0e7c   c2 0f 33          lbz LET_STATEMENT_END            ;if R10 == 0
                            
   0e7f                 LET_STATEMENT_CONTINUE1
   0e7f   8f                glo STACK_REG                   ;set R5 pointer to variableNode address
   0e80   a5                plo R5
   0e81   9f                ghi STACK_REG
   0e82   b5                phi R5
   0e83   15                inc R5
                            
   0e84   8a                glo R10                         ;store R10 to variableNode address
   0e85   55                str R5
   0e86   15                inc R5
                            
   0e87   9a                ghi R10
   0e88   55                str R5
   0e89   15                inc R5
                        
   0e8a   45                lda R5                          ;restore R4 inputString
   0e8b   a4                plo R4
   0e8c   45                lda R5
   0e8d   b4                phi R4
                            
   0e8e                 LET_STATEMENT_SKIPSPACES            ;skipping spaces
   0e8e   44                lda R4
   0e8f   fb 20             xri 32
   0e91   32 8e             bz LET_STATEMENT_SKIPSPACES
                            
   0e93   24                dec R4
                            
   0e94   f8 d5             ldi GET_STRING.0                ;call GET_STRING
   0e96   ad                plo CALL_REG
   0e97   f8 0d             ldi GET_STRING.1
   0e99   bd                phi CALL_REG
                            
   0e9a   f8 00             ldi FCALL.0
   0e9c   ae                plo FCALL_REG
   0e9d   de                sep FCALL_REG
                            
   0e9e   8a                glo R10
   0e9f   3a a5             bnz LET_STATEMENT_CONTINUE2
   0ea1   9a                ghi R10
   0ea2   c2 0f 21          lbz LET_STATEMENT_FREENODE       ;if allocating failed
                        
   0ea5                 LET_STATEMENT_CONTINUE2
   0ea5   8f                glo STACK_REG
   0ea6   a6                plo R6
   0ea7   9f                ghi STACK_REG
   0ea8   b6                phi R6
   0ea9   16                inc R6
                            
   0eaa   46                lda R6                          ;set R6 to variableNode address
   0eab   a5                plo R5
   0eac   46                lda R6
   0ead   b5                phi R5
                            
   0eae   f8 00             ldi 0                           ;set variableNode->nextNode to 0
   0eb0   55                str R5
   0eb1   15                inc R5
                            
   0eb2   55                str R5
   0eb3   15                inc R5
                            
   0eb4   8a                glo R10                         ;store R10 to variableNode->name
   0eb5   55                str R5
   0eb6   15                inc R5
                            
   0eb7   9a                ghi R10
   0eb8   55                str R5
   0eb9   15                inc R5
                            
   0eba                 LET_STATEMENT_MAINLOOP
   0eba   04                ldn R4
   0ebb   fb 20             xri 32
   0ebd   32 c7             bz LET_STATEMENT_NEXTCHARACTER      ;if ' '
   0ebf   04                ldn R4
   0ec0   fb 3d             xri 61
   0ec2   32 ca             bz LET_STATEMENT_EXPRESSION         ;if '='
                            
   0ec4   c0 0f 33          lbr LET_STATEMENT_END
                        
   0ec7                 LET_STATEMENT_NEXTCHARACTER
   0ec7   14                inc R4
   0ec8   30 ba             br LET_STATEMENT_MAINLOOP
                        
   0eca                 LET_STATEMENT_EXPRESSION
   0eca   14                inc R4
                            
   0ecb   f8 18             ldi EXPRESSION.0         ;call EXPRESSION
   0ecd   ad                plo CALL_REG
   0ece   f8 09             ldi EXPRESSION.1
   0ed0   bd                phi CALL_REG
                            
   0ed1   f8 00             ldi FCALL.0
   0ed3   ae                plo FCALL_REG
   0ed4   de                sep FCALL_REG
                            
   0ed5                 LET_STATEMENT_ADDVAR
   0ed5   f8 00             ldi VARLIST_COUNT.0
   0ed7   a5                plo R5
   0ed8   f8 21             ldi VARLIST_COUNT.1
   0eda   b5                phi R5
                            
   0edb   e5                sex R5
                            
   0edc   45                lda R5
   0edd   ca 0e e4          lbnz LET_STATEMENT_ADDNODE
   0ee0   05                ldn R5
   0ee1   c2 0f 05          lbz LET_STATEMENT_FIRSTNODE
                            
   0ee4                 LET_STATEMENT_ADDNODE
   0ee4   25                dec R5                          ;reset R5 to the VARLIST header
                            
   0ee5   f8 01             ldi 1                           ;increment the VARLIST_COUNT by one
   0ee7   f4                add
   0ee8   55                str R5
   0ee9   15                inc R5
                            
   0eea   f8 00             ldi 0
   0eec   74                adc
   0eed   55                str R5
   0eee   15                inc R5
                            
   0eef   15                inc R5                          ;skip VARLIST_FIRSTNODE
   0ef0   15                inc R5
                            
   0ef1   45                lda R5                          ;read VARLIST_LASTNODE
   0ef2   a7                plo R7                          ;and place the address to R7
   0ef3   05                ldn R5
   0ef4   b7                phi R7
                            
   0ef5   25                dec R5                          ;set R5 back to VARLIST_LASTNODE
                            
   0ef6   26                dec R6                          ;reset R6 to variableNode
   0ef7   26                dec R6
                            
   0ef8   46                lda R6                          ;load address and store it to address R7 and R5
   0ef9   57                str R7
   0efa   55                str R5
   0efb   17                inc R7
   0efc   15                inc R5
                            
   0efd   46                lda R6
   0efe   57                str R7
   0eff   55                str R5
   0f00   17                inc R7
   0f01   15                inc R5
                            
   0f02   c0 0f 33          lbr LET_STATEMENT_END
                        
   0f05                 LET_STATEMENT_FIRSTNODE
   0f05   25                dec R5                          ;reset R5 to the VARLIST header
                            
   0f06   f8 01             ldi 1                           ;set VARLIST_COUNT to one
   0f08   55                str R5
   0f09   15                inc R5
                            
   0f0a   f8 00             ldi 0
   0f0c   55                str R5
   0f0d   15                inc R5
                            
   0f0e   26                dec R6                          ;reset R6 to variableNode
   0f0f   26                dec R6
                            
   0f10   46                lda R6                          ;load address and store it to VARLIST_FIRSTNODE
   0f11   55                str R5
   0f12   15                inc R5
                            
   0f13   46                lda R6
   0f14   55                str R5
   0f15   15                inc R5
                            
   0f16   26                dec R6                          ;reset R6 to variableNode
   0f17   26                dec R6
                            
   0f18   46                lda R6                          ;load address and store it to VARLIST_LASTNODE
   0f19   55                str R5
   0f1a   15                inc R5
                            
   0f1b   46                lda R6
   0f1c   55                str R5
   0f1d   15                inc R5
                            
   0f1e   c0 0f 33          lbr LET_STATEMENT_END
                        
   0f21                 LET_STATEMENT_FREENODE
   0f21   25                dec R5
   0f22   25                dec R5
   0f23   25                dec R5
   0f24   25                dec R5
                            
   0f25   45                lda R5
   0f26   a4                plo R4
   0f27   45                lda R5
   0f28   b4                phi R4
                            
   0f29   f8 0f             ldi DYN_MEMORY_FREE.0         ;call DYN_MEMORY_FREE
   0f2b   ad                plo CALL_REG
   0f2c   f8 0d             ldi DYN_MEMORY_FREE.1
   0f2e   bd                phi CALL_REG
                            
   0f2f   f8 00             ldi FCALL.0
   0f31   ae                plo FCALL_REG
   0f32   de                sep FCALL_REG
                            
   0f33                 LET_STATEMENT_END
   0f33   8f                glo STACK_REG
   0f34   fc 05             adi 5
   0f36   af                plo STACK_REG
   0f37   9f                ghi STACK_REG
   0f38   7c 00             adci 0
   0f3a   bf                phi STACK_REG
                            
   0f3b   ef                sex STACK_REG
                            
   0f3c   72                ldxa
   0f3d   a7                plo R7
   0f3e   72                ldxa
   0f3f   b7                phi R7
                            
   0f40   72                ldxa
   0f41   a6                plo R6
   0f42   72                ldxa
   0f43   b6                phi R6
                            
   0f44   72                ldxa
   0f45   a5                plo R5
   0f46   f0                ldx
   0f47   b5                phi R5
                            
   0f48   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-HEXVIEWER------------------------------------
                        ;-R4-Start address-----------------------------
                        ;-R5-Count-------------------------------------
   0f49                 HEX_BASE_SRT
   0f49   0d 0a 42 61       db "\r\nBase address: 0x",0
   0f4d   73 65 20 61   
   0f51   64 64 72 65   
   0f55   73 73 3a 20   
   0f59   30 78 00      
   0f5c                 HEX_HEADER_STR
   0f5c   0d 0a 0d 0a       db "\r\n\r\nOffset  00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F  String\r\n"
   0f60   4f 66 66 73   
   0f64   65 74 20 20   
   0f68   30 30 20 30   
   0f6c   31 20 30 32   
   0f70   20 30 33 20   
   0f74   30 34 20 30   
   0f78   35 20 30 36   
   0f7c   20 30 37 20   
   0f80   30 38 20 30   
   0f84   39 20 30 41   
   0f88   20 30 42 20   
   0f8c   30 43 20 30   
   0f90   44 20 30 45   
   0f94   20 30 46 20   
   0f98   20 53 74 72   
   0f9c   69 6e 67 0d   
   0fa0   0a            
   0fa1   2d 2d 2d 2d       db         "-------------------------------------------------------------------------\r\n",0
   0fa5   2d 2d 2d 2d   
   0fa9   2d 2d 2d 2d   
   0fad   2d 2d 2d 2d   
   0fb1   2d 2d 2d 2d   
   0fb5   2d 2d 2d 2d   
   0fb9   2d 2d 2d 2d   
   0fbd   2d 2d 2d 2d   
   0fc1   2d 2d 2d 2d   
   0fc5   2d 2d 2d 2d   
   0fc9   2d 2d 2d 2d   
   0fcd   2d 2d 2d 2d   
   0fd1   2d 2d 2d 2d   
   0fd5   2d 2d 2d 2d   
   0fd9   2d 2d 2d 2d   
   0fdd   2d 2d 2d 2d   
   0fe1   2d 2d 2d 2d   
   0fe5   2d 2d 2d 2d   
   0fe9   2d 0d 0a 00   
                        ;              "0000:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................"
   0fed                 HEX_LINECNT_SEPARATOR
   0fed   3a 20 20 20       db ":   ",0
   0ff1   00            
                            
   0ff2                 HEXVIEWER
   0ff2   ef                sex STACK_REG
                            
   0ff3   f8 00             ldi 0
   0ff5   73                stxd
   0ff6   73                stxd
   0ff7   94                ghi R4
   0ff8   73                stxd
   0ff9   84                glo R4
   0ffa   73                stxd    ;+17 current address
                            
   0ffb   f8 00             ldi 0
   0ffd   73                stxd
   0ffe   73                stxd
   0fff   94                ghi R4
   1000   73                stxd
   1001   84                glo R4
   1002   73                stxd    ;+13 start address
                            
   1003   f8 00             ldi 0
   1005   73                stxd
   1006   73                stxd
   1007   95                ghi R5
   1008   73                stxd
   1009   85                glo R5
   100a   73                stxd    ;+9 last address
                            
   100b   f8 00             ldi 0
   100d   73                stxd
   100e   73                stxd
   100f   73                stxd
   1010   73                stxd    ;+5 line counter
                            
   1011   73                stxd
   1012   73                stxd
   1013   73                stxd
   1014   73                stxd    ;+1 temp for hex digits
                            
   1015   8f                glo STACK_REG
   1016   fc 0d             adi 13
   1018   a4                plo R4
   1019   9f                ghi STACK_REG
   101a   7c 00             adci 0
   101c   b4                phi R4
                            
   101d   8f                glo STACK_REG
   101e   fc 09             adi 9
   1020   a6                plo R6
   1021   9f                ghi STACK_REG
   1022   7c 00             adci 0
   1024   b6                phi R6
                            
   1025   e4                sex R4
                            
   1026   85                glo R5      ;adding R5 value to start address and store it to last address
   1027   f4                add
   1028   56                str R6
   1029   60                irx
   102a   16                inc R6
   102b   95                ghi R5
   102c   74                adc
   102d   56                str R6
   102e   60                irx
   102f   16                inc R6
   1030   f8 00             ldi 0
   1032   74                adc
   1033   56                str R6
                            
   1034   f8 49             ldi HEX_BASE_SRT.0     ;prepare to print base address
   1036   a6                plo R6
   1037   f8 0f             ldi HEX_BASE_SRT.1
   1039   b6                phi R6
                        	
   103a   f8 52             ldi PRINT.0         ;prepare to call PRINT
   103c   ad                plo CALL_REG
   103d   f8 01             ldi PRINT.1
   103f   bd                phi CALL_REG
                            
   1040   f8 00             ldi FCALL.0
   1042   ae                plo FCALL_REG
   1043   de                sep FCALL_REG
                            
   1044   8f                glo STACK_REG       ;prepare to print the address in hex
   1045   fc 0d             adi 13
   1047   a4                plo R4
   1048   9f                ghi STACK_REG
   1049   7c 00             adci 0
   104b   b4                phi R4
                            
   104c   f8 04             ldi 4               ;with 4 digits
   104e   a5                plo R5
                            
   104f   f8 22             ldi PRINT_HEX.0     ;prepare to call PRINT_HEX
   1051   ad                plo CALL_REG
   1052   f8 04             ldi PRINT_HEX.1
   1054   bd                phi CALL_REG
                            
   1055   f8 00             ldi FCALL.0
   1057   ae                plo FCALL_REG
   1058   de                sep FCALL_REG
                            
   1059   f8 5c             ldi HEX_HEADER_STR.0     ;prepare to print the header
   105b   a6                plo R6
   105c   f8 0f             ldi HEX_HEADER_STR.1
   105e   b6                phi R6
                        	
   105f   f8 52             ldi PRINT.0         ;prepare to call PRINT
   1061   ad                plo CALL_REG
   1062   f8 01             ldi PRINT.1
   1064   bd                phi CALL_REG
                            
   1065   f8 00             ldi FCALL.0
   1067   ae                plo FCALL_REG
   1068   de                sep FCALL_REG
                        
   1069                 HEXVIEWER_MAINLOOP
   1069   8f                glo STACK_REG       ;prepare to print the first address in hex
   106a   fc 05             adi 5
   106c   a4                plo R4
   106d   9f                ghi STACK_REG
   106e   7c 00             adci 0
   1070   b4                phi R4
                            
   1071   f8 04             ldi 4               ;with 4 digits
   1073   a5                plo R5
                            
   1074   f8 22             ldi PRINT_HEX.0     ;prepare to call PRINT_HEX
   1076   ad                plo CALL_REG
   1077   f8 04             ldi PRINT_HEX.1
   1079   bd                phi CALL_REG
                            
   107a   f8 00             ldi FCALL.0
   107c   ae                plo FCALL_REG
   107d   de                sep FCALL_REG
                            
   107e   f8 ed             ldi HEX_LINECNT_SEPARATOR.0     ;prepare to print address separator
   1080   a6                plo R6
   1081   f8 0f             ldi HEX_LINECNT_SEPARATOR.1
   1083   b6                phi R6
                        	
   1084   f8 52             ldi PRINT.0         ;prepare to call PRINT
   1086   ad                plo CALL_REG
   1087   f8 01             ldi PRINT.1
   1089   bd                phi CALL_REG
                            
   108a   f8 00             ldi FCALL.0
   108c   ae                plo FCALL_REG
   108d   de                sep FCALL_REG
                            
   108e   f8 10             ldi 16      ;set R8 low to 16 for counting the bytes
   1090   a8                plo R8
                           
   1091                 HEXVIEWER_PRINT_HEX_LOOP
   1091   8f                glo STACK_REG       ;set R4 pointer to current address
   1092   fc 11             adi 17
   1094   a4                plo R4
   1095   9f                ghi STACK_REG
   1096   7c 00             adci 0
   1098   b4                phi R4
                            
   1099   8f                glo STACK_REG       ;set R5 pointer to last address
   109a   fc 09             adi 9
   109c   a5                plo R5
   109d   9f                ghi STACK_REG
   109e   7c 00             adci 0
   10a0   b5                phi R5
                        
   10a1   e4                sex R4          ;check if current address is >= last address
                            
   10a2   45                lda R5
   10a3   f5                sd
   10a4   60                irx
                            
   10a5   45                lda R5
   10a6   75                sdb
   10a7   60                irx
                            
   10a8   45                lda R5
   10a9   75                sdb
   10aa   60                irx
                            
   10ab   05                ldn R5
   10ac   75                sdb
                            
   10ad   c3 10 d5          lbdf HEXVIEWER_PRINT_HEX_SPACES   ;if current address >= last address then 
                        
   10b0   8f                glo STACK_REG       ;set R4 pointer to current address
   10b1   fc 11             adi 17
   10b3   a4                plo R4
   10b4   9f                ghi STACK_REG
   10b5   7c 00             adci 0
   10b7   b4                phi R4
                            
   10b8   44                lda R4              ;get current address and load it in R5
   10b9   a5                plo R5
   10ba   44                lda R4
   10bb   b5                phi R5
                            
   10bc   05                ldn R5              ;get data from R5 address
   10bd   a5                plo R5              ;store data in R5 low
                            
   10be   8f                glo STACK_REG       ;set R4 pointer to temp
   10bf   a4                plo R4
   10c0   9f                ghi STACK_REG
   10c1   b4                phi R4
   10c2   14                inc R4
                            
   10c3   85                glo R5              ;get data from R5 low
   10c4   54                str R4              ;store data to temp
                           
   10c5   f8 02             ldi 2
   10c7   a5                plo R5              ;set R5 low to 2 digits
                            
   10c8   f8 22             ldi PRINT_HEX.0     ;prepare to call PRINT_HEX
   10ca   ad                plo CALL_REG
   10cb   f8 04             ldi PRINT_HEX.1
   10cd   bd                phi CALL_REG
                            
   10ce   f8 00             ldi FCALL.0
   10d0   ae                plo FCALL_REG
   10d1   de                sep FCALL_REG
                            
   10d2   c0 10 e5          lbr HEXVIEWER_NEXT_HEX
                            
   10d5                 HEXVIEWER_PRINT_HEX_SPACES
   10d5   f8 ef             ldi HEX_LINECNT_SEPARATOR+2.0     ;prepare to print two space
   10d7   a6                plo R6
   10d8   f8 0f             ldi HEX_LINECNT_SEPARATOR+2.1
   10da   b6                phi R6
                        	
   10db   f8 52             ldi PRINT.0         ;prepare to call PRINT
   10dd   ad                plo CALL_REG
   10de   f8 01             ldi PRINT.1
   10e0   bd                phi CALL_REG
                            
   10e1   f8 00             ldi FCALL.0
   10e3   ae                plo FCALL_REG
   10e4   de                sep FCALL_REG
                        
   10e5                 HEXVIEWER_NEXT_HEX
   10e5   f8 f0             ldi HEX_LINECNT_SEPARATOR+3.0     ;prepare to print a space
   10e7   a6                plo R6
   10e8   f8 0f             ldi HEX_LINECNT_SEPARATOR+3.1
   10ea   b6                phi R6
                        	
   10eb   f8 52             ldi PRINT.0         ;prepare to call PRINT
   10ed   ad                plo CALL_REG
   10ee   f8 01             ldi PRINT.1
   10f0   bd                phi CALL_REG
                            
   10f1   f8 00             ldi FCALL.0
   10f3   ae                plo FCALL_REG
   10f4   de                sep FCALL_REG
                            
   10f5   8f                glo STACK_REG       ;set R4 pointer to current address
   10f6   fc 11             adi 17
   10f8   a4                plo R4
   10f9   9f                ghi STACK_REG
   10fa   7c 00             adci 0
   10fc   b4                phi R4
                            
   10fd   e4                sex R4
   10fe   f8 01             ldi 1
   1100   f4                add
   1101   54                str R4
   1102   60                irx
                            
   1103   f8 00             ldi 0
   1105   74                adc
   1106   54                str R4
   1107   60                irx
                            
   1108   f8 00             ldi 0
   110a   74                adc
   110b   54                str R4
   110c   60                irx
                            
   110d   f8 00             ldi 0
   110f   74                adc
   1110   54                str R4
                            
   1111   28                dec R8
   1112   88                glo R8
   1113   ca 10 91          lbnz HEXVIEWER_PRINT_HEX_LOOP
                            
   1116   f8 f0             ldi HEX_LINECNT_SEPARATOR+3.0     ;prepare to print a space
   1118   a6                plo R6
   1119   f8 0f             ldi HEX_LINECNT_SEPARATOR+3.1
   111b   b6                phi R6
                        	
   111c   f8 52             ldi PRINT.0         ;prepare to call PRINT
   111e   ad                plo CALL_REG
   111f   f8 01             ldi PRINT.1
   1121   bd                phi CALL_REG
                            
   1122   f8 00             ldi FCALL.0
   1124   ae                plo FCALL_REG
   1125   de                sep FCALL_REG
                            
   1126   8f                glo STACK_REG       ;set R4 pointer to current address
   1127   fc 11             adi 17
   1129   a4                plo R4
   112a   9f                ghi STACK_REG
   112b   7c 00             adci 0
   112d   b4                phi R4
                            
   112e   8f                glo STACK_REG       ;set R5 pointer to start address
   112f   fc 0d             adi 13
   1131   a5                plo R5
   1132   9f                ghi STACK_REG
   1133   7c 00             adci 0
   1135   b5                phi R5
                            
   1136   e5                sex R5
                            
   1137   72                ldxa
   1138   54                str R4
   1139   14                inc R4
                            
   113a   72                ldxa
   113b   54                str R4
   113c   14                inc R4
                            
   113d   72                ldxa
   113e   54                str R4
   113f   14                inc R4
                            
   1140   72                ldxa
   1141   54                str R4
                            
   1142   f8 10             ldi 16      ;set R8 low to 16 for counting the bytes
   1144   a8                plo R8
                        
   1145                 HEXVIEWER_PRINT_STR_LOOP
   1145   8f                glo STACK_REG       ;set R4 pointer to current address
   1146   fc 11             adi 17
   1148   a4                plo R4
   1149   9f                ghi STACK_REG
   114a   7c 00             adci 0
   114c   b4                phi R4
                            
   114d   8f                glo STACK_REG       ;set R5 pointer to last address
   114e   fc 09             adi 9
   1150   a5                plo R5
   1151   9f                ghi STACK_REG
   1152   7c 00             adci 0
   1154   b5                phi R5
                        
   1155   e4                sex R4          ;check if current address is <= last address
                            
   1156   45                lda R5
   1157   f5                sd
   1158   60                irx
                            
   1159   45                lda R5
   115a   75                sdb
   115b   60                irx
                            
   115c   45                lda R5
   115d   75                sdb
   115e   60                irx
                            
   115f   05                ldn R5
   1160   75                sdb
                            
   1161   c3 11 97          lbdf HEXVIEWER_PRINT_STR_SPACE   ;if current address >= last address then 
                            
   1164   8f                glo STACK_REG       ;set R4 pointer to current address
   1165   fc 11             adi 17
   1167   a4                plo R4
   1168   9f                ghi STACK_REG
   1169   7c 00             adci 0
   116b   b4                phi R4
                            
   116c   44                lda R4              ;get current address and load it in R5
   116d   a5                plo R5
   116e   44                lda R4
   116f   b5                phi R5
                            
   1170   05                ldn R5              ;get data from R5 address
   1171   a5                plo R5              ;store data in R5 low
                            
   1172   ff 20             smi 32
   1174   3b 88             bm HEXVIEWER_PRINT_STR_DOT
   1176   ff 5f             smi 95
   1178   33 88             bpz HEXVIEWER_PRINT_STR_DOT
                            
   117a   85                glo R5
   117b   b4                phi R4
                            
   117c   f8 13             ldi SERIAL_SEND_START.0         ;prepare to call SERIAL_SEND_START to send one char
   117e   ad                plo CALL_REG
   117f   f8 01             ldi SERIAL_SEND_START.1
   1181   bd                phi CALL_REG
                            
   1182   f8 00             ldi FCALL.0
   1184   ae                plo FCALL_REG
   1185   de                sep FCALL_REG
                            
   1186   30 a4             br HEXVIEWER_NEXT_STR
                            
   1188                 HEXVIEWER_PRINT_STR_DOT
   1188   f8 2e             ldi 46
   118a   b4                phi R4
                            
   118b   f8 13             ldi SERIAL_SEND_START.0         ;prepare to call SERIAL_SEND_START to send one char
   118d   ad                plo CALL_REG
   118e   f8 01             ldi SERIAL_SEND_START.1
   1190   bd                phi CALL_REG
                            
   1191   f8 00             ldi FCALL.0
   1193   ae                plo FCALL_REG
   1194   de                sep FCALL_REG
                            
   1195   30 a4             br HEXVIEWER_NEXT_STR
                        
   1197                 HEXVIEWER_PRINT_STR_SPACE
   1197   f8 20             ldi 32
   1199   b4                phi R4
                            
   119a   f8 13             ldi SERIAL_SEND_START.0         ;prepare to call SERIAL_SEND_START to send one char
   119c   ad                plo CALL_REG
   119d   f8 01             ldi SERIAL_SEND_START.1
   119f   bd                phi CALL_REG
                            
   11a0   f8 00             ldi FCALL.0
   11a2   ae                plo FCALL_REG
   11a3   de                sep FCALL_REG
                            
   11a4                 HEXVIEWER_NEXT_STR
   11a4   8f                glo STACK_REG       ;set R4 pointer to current address
   11a5   fc 11             adi 17
   11a7   a4                plo R4
   11a8   9f                ghi STACK_REG
   11a9   7c 00             adci 0
   11ab   b4                phi R4
                            
   11ac   e4                sex R4
   11ad   f8 01             ldi 1
   11af   f4                add
   11b0   54                str R4
   11b1   60                irx
                            
   11b2   f8 00             ldi 0
   11b4   74                adc
   11b5   54                str R4
   11b6   60                irx
                            
   11b7   f8 00             ldi 0
   11b9   74                adc
   11ba   54                str R4
   11bb   60                irx
                            
   11bc   f8 00             ldi 0
   11be   74                adc
   11bf   54                str R4
                            
   11c0   28                dec R8
   11c1   88                glo R8
   11c2   ca 11 45          lbnz HEXVIEWER_PRINT_STR_LOOP
                            
   11c5   f8 d6             ldi NEW_LINE.0     ;prepare to print a space
   11c7   a6                plo R6
   11c8   f8 15             ldi NEW_LINE.1
   11ca   b6                phi R6
                        	
   11cb   f8 52             ldi PRINT.0         ;prepare to call PRINT
   11cd   ad                plo CALL_REG
   11ce   f8 01             ldi PRINT.1
   11d0   bd                phi CALL_REG
                            
   11d1   f8 00             ldi FCALL.0
   11d3   ae                plo FCALL_REG
   11d4   de                sep FCALL_REG
                            
   11d5   8f                glo STACK_REG       ;set R4 pointer to current address
   11d6   fc 11             adi 17
   11d8   a4                plo R4
   11d9   9f                ghi STACK_REG
   11da   7c 00             adci 0
   11dc   b4                phi R4
                            
   11dd   8f                glo STACK_REG       ;set R5 pointer to last address
   11de   fc 09             adi 9
   11e0   a5                plo R5
   11e1   9f                ghi STACK_REG
   11e2   7c 00             adci 0
   11e4   b5                phi R5
                        
   11e5   e4                sex R4          ;check if current address is >= last address
                            
   11e6   45                lda R5
   11e7   f5                sd
   11e8   60                irx
                            
   11e9   45                lda R5
   11ea   75                sdb
   11eb   60                irx
                            
   11ec   45                lda R5
   11ed   75                sdb
   11ee   60                irx
                            
   11ef   05                ldn R5
   11f0   75                sdb
                            
   11f1   c3 12 2f          lbdf HEXVIEWER_END
                            
   11f4   8f                glo STACK_REG       ;set R4 pointer to line counter
   11f5   fc 05             adi 5
   11f7   a4                plo R4
   11f8   9f                ghi STACK_REG
   11f9   7c 00             adci 0
   11fb   b4                phi R4
                            
   11fc   e4                sex R4
                            
   11fd   f8 10             ldi 16
   11ff   f4                add
   1200   54                str R4
   1201   60                irx
                            
   1202   f8 00             ldi 0
   1204   74                adc
   1205   54                str R4
   1206   60                irx
                            
   1207   f8 00             ldi 0
   1209   74                adc
   120a   54                str R4
   120b   60                irx
                            
   120c   f8 00             ldi 0
   120e   74                adc
   120f   54                str R4
                            
   1210   8f                glo STACK_REG       ;set R4 pointer to current address
   1211   fc 11             adi 17
   1213   a4                plo R4
   1214   9f                ghi STACK_REG
   1215   7c 00             adci 0
   1217   b4                phi R4
                            
   1218   8f                glo STACK_REG       ;set R5 pointer to start address
   1219   fc 0d             adi 13
   121b   a5                plo R5
   121c   9f                ghi STACK_REG
   121d   7c 00             adci 0
   121f   b5                phi R5
                            
   1220   e4                sex R4
                            
   1221   72                ldxa
   1222   55                str R5
   1223   15                inc R5
                            
   1224   72                ldxa
   1225   55                str R5
   1226   15                inc R5
                            
   1227   72                ldxa
   1228   55                str R5
   1229   15                inc R5
                            
   122a   72                ldxa
   122b   55                str R5
                            
   122c   c0 10 69          lbr HEXVIEWER_MAINLOOP
                        
   122f                 HEXVIEWER_END
   122f   8f                glo STACK_REG
   1230   fc 14             adi 20
   1232   af                plo STACK_REG
   1233   9f                ghi STACK_REG
   1234   7c 00             adci 0
   1236   bf                phi STACK_REG
                            
   1237   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-DYN MEMORY ALLOC CALLER----------------------
   1238                 DYN_MEMORY_ALLOC_CALLER_STR1
   1238   20 62 79 74       db " bytes of memory allocated at memory address ",0," (0x",0,")\r\n",0
   123c   65 73 20 6f   
   1240   66 20 6d 65   
   1244   6d 6f 72 79   
   1248   20 61 6c 6c   
   124c   6f 63 61 74   
   1250   65 64 20 61   
   1254   74 20 6d 65   
   1258   6d 6f 72 79   
   125c   20 61 64 64   
   1260   72 65 73 73   
   1264   20 00 20 28   
   1268   30 78 00 29   
   126c   0d 0a 00      
   126f                 DYN_MEMORY_ALLOC_CALLER_STR2
   126f   4f 75 74 20       db "Out of memory!\r\n",0
   1273   6f 66 20 6d   
   1277   65 6d 6f 72   
   127b   79 21 0d 0a   
   127f   00            
                        
   1280                 DYN_MEMORY_ALLOC_CALLER
   1280   ef                sex STACK_REG
                            
   1281   f8 00             ldi 0
   1283   73                stxd
   1284   73                stxd
   1285   73                stxd
   1286   73                stxd                        ;+5 address
                            
   1287   73                stxd
   1288   73                stxd
   1289   73                stxd
   128a   73                stxd                        ;+1 size
                            
   128b   8f                glo STACK_REG               ;set R5 pointer to size
   128c   a5                plo R5
   128d   9f                ghi STACK_REG
   128e   b5                phi R5
   128f   15                inc R5
                            
   1290   f8 18             ldi EXPRESSION.0            ;evaluate expression
   1292   ad                plo CALL_REG
   1293   f8 09             ldi EXPRESSION.1
   1295   bd                phi CALL_REG
                            
   1296   f8 00             ldi FCALL.0
   1298   ae                plo FCALL_REG
   1299   de                sep FCALL_REG
                            
   129a   8f                glo STACK_REG               ;set R5 pointer to size
   129b   a5                plo R5
   129c   9f                ghi STACK_REG
   129d   b5                phi R5
   129e   15                inc R5
                            
   129f   45                lda R5                      ;R4 = size
   12a0   a4                plo R4
   12a1   45                lda R5
   12a2   b4                phi R4
                            
   12a3   f8 aa             ldi DYN_MEMORY_ALLOC.0      ;call memory allocation
   12a5   ad                plo CALL_REG
   12a6   f8 0b             ldi DYN_MEMORY_ALLOC.1
   12a8   bd                phi CALL_REG
                            
   12a9   f8 00             ldi FCALL.0
   12ab   ae                plo FCALL_REG
   12ac   de                sep FCALL_REG
                            
   12ad   8a                glo R10                                 ;check if R10 has a value, if it is 0 then it failed
   12ae   ca 12 c8          lbnz DYN_MEMORY_ALLOC_CALLER_SUCCESS
   12b1   9a                ghi R10
   12b2   ca 12 c8          lbnz DYN_MEMORY_ALLOC_CALLER_SUCCESS
                            
   12b5                 DYN_MEMORY_ALLOC_CALLER_FAIL
   12b5   f8 6f             ldi DYN_MEMORY_ALLOC_CALLER_STR2.0      ;print out of memory
   12b7   a6                plo R6
   12b8   f8 12             ldi DYN_MEMORY_ALLOC_CALLER_STR2.1
   12ba   b6                phi R6
                            
   12bb   f8 52             ldi PRINT.0                             ;prepare to call PRINT
   12bd   ad                plo CALL_REG
   12be   f8 01             ldi PRINT.1
   12c0   bd                phi CALL_REG
                            
   12c1   f8 00             ldi FCALL.0
   12c3   ae                plo FCALL_REG
   12c4   de                sep FCALL_REG                           ;call PRINT
                        	
   12c5   c0 13 32          lbr DYN_MEMORY_ALLOC_CALLER_END         ;return
                        
   12c8                 DYN_MEMORY_ALLOC_CALLER_SUCCESS
   12c8   8f                glo STACK_REG                           ;set R5 pointer to address
   12c9   fc 05             adi 5
   12cb   a4                plo R4
   12cc   9f                ghi STACK_REG
   12cd   7c 00             adci 0
   12cf   b4                phi R4
                            
   12d0   8a                glo R10                                 ;copy R10 value to address
   12d1   54                str R4
   12d2   14                inc R4
                            
   12d3   9a                ghi R10
   12d4   54                str R4
                            
   12d5   8f                glo STACK_REG                           ;set R4 pointor to size
   12d6   a4                plo R4
   12d7   9f                ghi STACK_REG
   12d8   b4                phi R4
   12d9   14                inc R4
                            
   12da   f8 ae             ldi PRINT_DEC.0                         ;print size in decimal
   12dc   ad                plo CALL_REG
   12dd   f8 04             ldi PRINT_DEC.1
   12df   bd                phi CALL_REG
                            
   12e0   f8 00             ldi FCALL.0
   12e2   ae                plo FCALL_REG
   12e3   de                sep FCALL_REG
                            
   12e4   f8 38             ldi DYN_MEMORY_ALLOC_CALLER_STR1.0      ;print the first part of the allocation message
   12e6   a6                plo R6
   12e7   f8 12             ldi DYN_MEMORY_ALLOC_CALLER_STR1.1
   12e9   b6                phi R6
                            
   12ea   f8 52             ldi PRINT.0                             ;prepare to call PRINT
   12ec   ad                plo CALL_REG    
   12ed   f8 01             ldi PRINT.1
   12ef   bd                phi CALL_REG
                            
   12f0   f8 00             ldi FCALL.0
   12f2   ae                plo FCALL_REG
   12f3   de                sep FCALL_REG                           ;call PRINT
                            
   12f4   8f                glo STACK_REG                           ;set R4 pointer to address
   12f5   fc 05             adi 5
   12f7   a4                plo R4
   12f8   9f                ghi STACK_REG
   12f9   7c 00             adci 0
   12fb   b4                phi R4
                            
   12fc   f8 ae             ldi PRINT_DEC.0                         ;print address in decimal
   12fe   ad                plo CALL_REG
   12ff   f8 04             ldi PRINT_DEC.1
   1301   bd                phi CALL_REG
                            
   1302   f8 00             ldi FCALL.0
   1304   ae                plo FCALL_REG
   1305   de                sep FCALL_REG
                            
   1306   f8 52             ldi PRINT.0                             ;print the second part of the allocation message
   1308   ad                plo CALL_REG
   1309   f8 01             ldi PRINT.1
   130b   bd                phi CALL_REG
                            
   130c   f8 00             ldi FCALL.0
   130e   ae                plo FCALL_REG
   130f   de                sep FCALL_REG                           ;call PRINT
                            
   1310   8f                glo STACK_REG                           ;reset R4 pointer to address
   1311   fc 05             adi 5
   1313   a4                plo R4
   1314   9f                ghi STACK_REG
   1315   7c 00             adci 0
   1317   b4                phi R4
                            
   1318   f8 04             ldi 4                                   ;set number of digits to 4
   131a   a5                plo R5
   131b   f8 00             ldi 0
   131d   b5                phi R5
                            
   131e   f8 22             ldi PRINT_HEX.0                         ;print address in hexadecimal
   1320   ad                plo CALL_REG
   1321   f8 04             ldi PRINT_HEX.1
   1323   bd                phi CALL_REG
                            
   1324   f8 00             ldi FCALL.0
   1326   ae                plo FCALL_REG
   1327   de                sep FCALL_REG
                            
   1328   f8 52             ldi PRINT.0                             ;print the last part of the allocation message
   132a   ad                plo CALL_REG
   132b   f8 01             ldi PRINT.1
   132d   bd                phi CALL_REG
                            
   132e   f8 00             ldi FCALL.0
   1330   ae                plo FCALL_REG
   1331   de                sep FCALL_REG                           ;call PRINT
                        
   1332                 DYN_MEMORY_ALLOC_CALLER_END
   1332   8f                glo STACK_REG
   1333   fc 08             adi 8
   1335   af                plo STACK_REG
   1336   9f                ghi STACK_REG
   1337   7c 00             adci 0
   1339   bf                phi STACK_REG
                            
   133a   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-DYN MEMORY FREE CALLER-----------------------
   133b                 DYN_MEMORY_FREE_CALLER_STR1
   133b   41 6c 6c 6f       db "Allocated memory has been freed at address ",0," (0x",0,")\r\n",0
   133f   63 61 74 65   
   1343   64 20 6d 65   
   1347   6d 6f 72 79   
   134b   20 68 61 73   
   134f   20 62 65 65   
   1353   6e 20 66 72   
   1357   65 65 64 20   
   135b   61 74 20 61   
   135f   64 64 72 65   
   1363   73 73 20 00   
   1367   20 28 30 78   
   136b   00 29 0d 0a   
   136f   00            
   1370                 DYN_MEMORY_FREE_CALLER_STR2
   1370   4d 65 6d 6f       db "Memory address is out of the heap range!\r\n",0
   1374   72 79 20 61   
   1378   64 64 72 65   
   137c   73 73 20 69   
   1380   73 20 6f 75   
   1384   74 20 6f 66   
   1388   20 74 68 65   
   138c   20 68 65 61   
   1390   70 20 72 61   
   1394   6e 67 65 21   
   1398   0d 0a 00      
                            
   139b                 DYN_MEMORY_FREE_CALLER
   139b   ef                sex STACK_REG
                            
   139c   f8 00             ldi 0
   139e   73                stxd
   139f   73                stxd
   13a0   73                stxd
   13a1   73                stxd                    ;+1 address
                            
   13a2   8f                glo STACK_REG
   13a3   a5                plo R5
   13a4   9f                ghi STACK_REG
   13a5   b5                phi R5
   13a6   15                inc R5
                            
   13a7   f8 18             ldi EXPRESSION.0
   13a9   ad                plo CALL_REG
   13aa   f8 09             ldi EXPRESSION.1
   13ac   bd                phi CALL_REG
                            
   13ad   f8 00             ldi FCALL.0
   13af   ae                plo FCALL_REG
   13b0   de                sep FCALL_REG
                            
   13b1   8f                glo STACK_REG
   13b2   a5                plo R5
   13b3   9f                ghi STACK_REG
   13b4   b5                phi R5
   13b5   15                inc R5
                            
   13b6   e5                sex R5
                            
   13b7   f8 10             ldi HEAP_START.0
   13b9   f5                sd
   13ba   60                irx
   13bb   f8 21             ldi HEAP_START.1
   13bd   75                sdb
                            
   13be   25                dec R5
                            
   13bf   cb 14 25          lbnf DYN_MEMORY_FREE_CALLER_OUTOFRANGE
                            
   13c2   f8 00             ldi HEAP_END.0
   13c4   f5                sd
   13c5   60                irx
   13c6   f8 fc             ldi HEAP_END.1
   13c8   75                sdb
                            
   13c9   25                dec R5
                            
   13ca   c3 14 25          lbdf DYN_MEMORY_FREE_CALLER_OUTOFRANGE
                            
   13cd   72                ldxa
   13ce   a4                plo R4
   13cf   f0                ldx
   13d0   b4                phi R4
                            
   13d1   25                dec R5
                            
   13d2   f8 0f             ldi DYN_MEMORY_FREE.0                 ;call free
   13d4   ad                plo CALL_REG
   13d5   f8 0d             ldi DYN_MEMORY_FREE.1
   13d7   bd                phi CALL_REG
                            
   13d8   f8 00             ldi FCALL.0
   13da   ae                plo FCALL_REG
   13db   de                sep FCALL_REG
                            
   13dc   f8 3b             ldi DYN_MEMORY_FREE_CALLER_STR1.0
   13de   a6                plo R6
   13df   f8 13             ldi DYN_MEMORY_FREE_CALLER_STR1.1
   13e1   b6                phi R6
                            
   13e2   f8 52             ldi PRINT.0                             ;print the success message 1st part
   13e4   ad                plo CALL_REG
   13e5   f8 01             ldi PRINT.1
   13e7   bd                phi CALL_REG
                            
   13e8   f8 00             ldi FCALL.0
   13ea   ae                plo FCALL_REG
   13eb   de                sep FCALL_REG
                            
   13ec   85                glo R5
   13ed   a4                plo R4
   13ee   95                ghi R5
   13ef   b4                phi R4
                            
   13f0   f8 ae             ldi PRINT_DEC.0                         ;print address in decimal
   13f2   ad                plo CALL_REG
   13f3   f8 04             ldi PRINT_DEC.1
   13f5   bd                phi CALL_REG
                            
   13f6   f8 00             ldi FCALL.0
   13f8   ae                plo FCALL_REG
   13f9   de                sep FCALL_REG
                            
   13fa   f8 52             ldi PRINT.0                             ;print the success message 2nd part
   13fc   ad                plo CALL_REG
   13fd   f8 01             ldi PRINT.1
   13ff   bd                phi CALL_REG
                            
   1400   f8 00             ldi FCALL.0
   1402   ae                plo FCALL_REG
   1403   de                sep FCALL_REG
                            
   1404   85                glo R5
   1405   a4                plo R4
   1406   95                ghi R5
   1407   b4                phi R4
                            
   1408   f8 04             ldi 4
   140a   a5                plo R5
   140b   f8 00             ldi 0
   140d   b5                phi R5
                            
   140e   f8 22             ldi PRINT_HEX.0                         ;print address in hexadecimal
   1410   ad                plo CALL_REG
   1411   f8 04             ldi PRINT_HEX.1
   1413   bd                phi CALL_REG
                            
   1414   f8 00             ldi FCALL.0
   1416   ae                plo FCALL_REG
   1417   de                sep FCALL_REG
                            
   1418   f8 52             ldi PRINT.0                             ;print the success message 2nd part
   141a   ad                plo CALL_REG
   141b   f8 01             ldi PRINT.1
   141d   bd                phi CALL_REG
                            
   141e   f8 00             ldi FCALL.0
   1420   ae                plo FCALL_REG
   1421   de                sep FCALL_REG
                            
   1422   c0 14 35          lbr DYN_MEMORY_FREE_CALLER_END
                            
   1425                 DYN_MEMORY_FREE_CALLER_OUTOFRANGE
   1425   f8 70             ldi DYN_MEMORY_FREE_CALLER_STR2.0
   1427   a6                plo R6
   1428   f8 13             ldi DYN_MEMORY_FREE_CALLER_STR2.1
   142a   b6                phi R6
                            
   142b   f8 52             ldi PRINT.0                             ;print the out of range message
   142d   ad                plo CALL_REG
   142e   f8 01             ldi PRINT.1
   1430   bd                phi CALL_REG
                            
   1431   f8 00             ldi FCALL.0
   1433   ae                plo FCALL_REG
   1434   de                sep FCALL_REG                           ;call PRINT
                            
   1435                 DYN_MEMORY_FREE_CALLER_END
   1435   8f                glo STACK_REG
   1436   fc 04             adi 4
   1438   af                plo STACK_REG
   1439   9f                ghi STACK_REG
   143a   7c 00             adci 0
   143c   bf                phi STACK_REG
                            
   143d   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-HEXVIEW_CALLER-------------------------------
   143e                 HEXVIEW_CALLER
   143e   ef                sex STACK_REG
                            
   143f   f8 00             ldi 0
   1441   73                stxd
   1442   73                stxd
   1443   73                stxd
   1444   73                stxd    ;+5 first arg
                            
   1445   73                stxd
   1446   73                stxd
   1447   f8 01             ldi 1
   1449   73                stxd
   144a   f8 00             ldi 0
   144c   73                stxd    ;+1 second arg
                            
   144d   8f                glo STACK_REG
   144e   fc 05             adi 5
   1450   a5                plo R5
   1451   9f                ghi STACK_REG
   1452   7c 00             adci 0
   1454   b5                phi R5
                            
   1455   f8 18             ldi EXPRESSION.0
   1457   ad                plo CALL_REG
   1458   f8 09             ldi EXPRESSION.1
   145a   bd                phi CALL_REG
                            
   145b   f8 00             ldi FCALL.0
   145d   ae                plo FCALL_REG
   145e   de                sep FCALL_REG
                            
   145f   44                lda R4
   1460   fb 2c             xri 44
   1462   c2 14 79          lbz HEXVIEW_CALLER_NEXTARG
   1465   24                dec R4
   1466   44                lda R4
   1467   c2 14 88          lbz HEXVIEW_CALLER_EXEC
   146a   24                dec R4
                            
   146b   04                ldn R4
   146c   b4                phi R4
                            
   146d   f8 13             ldi SERIAL_SEND_START.0
   146f   ad                plo CALL_REG
   1470   f8 01             ldi SERIAL_SEND_START.1
   1472   bd                phi CALL_REG
                            
   1473   f8 00             ldi FCALL.0
   1475   ae                plo FCALL_REG
   1476   de                sep FCALL_REG
                            
   1477   30 a7             br HEXVIEW_CALLER_END
                            
   1479                 HEXVIEW_CALLER_NEXTARG
   1479   8f                glo STACK_REG
   147a   a5                plo R5
   147b   9f                ghi STACK_REG
   147c   b5                phi R5
   147d   15                inc R5
                            
   147e   f8 18             ldi EXPRESSION.0
   1480   ad                plo CALL_REG
   1481   f8 09             ldi EXPRESSION.1
   1483   bd                phi CALL_REG
                            
   1484   f8 00             ldi FCALL.0
   1486   ae                plo FCALL_REG
   1487   de                sep FCALL_REG
                            
   1488                 HEXVIEW_CALLER_EXEC
   1488   8f                glo STACK_REG
   1489   fc 05             adi 5
   148b   a5                plo R5
   148c   9f                ghi STACK_REG
   148d   7c 00             adci 0
   148f   b5                phi R5
                            
   1490   45                lda R5
   1491   a4                plo R4
   1492   45                lda R5
   1493   b4                phi R4
                            
   1494   8f                glo STACK_REG
   1495   a6                plo R6
   1496   9f                ghi STACK_REG
   1497   b6                phi R6
   1498   16                inc R6
                            
   1499   46                lda R6
   149a   a5                plo R5
   149b   46                lda R6
   149c   b5                phi R5
                            
   149d   f8 f2             ldi HEXVIEWER.0
   149f   ad                plo CALL_REG
   14a0   f8 0f             ldi HEXVIEWER.1
   14a2   bd                phi CALL_REG
                            
   14a3   f8 00             ldi FCALL.0
   14a5   ae                plo FCALL_REG
   14a6   de                sep FCALL_REG
                            
   14a7                 HEXVIEW_CALLER_END
   14a7   8f                glo STACK_REG
   14a8   fc 08             adi 8
   14aa   af                plo STACK_REG
   14ab   9f                ghi STACK_REG
   14ac   7c 00             adci 0
   14ae   bf                phi STACK_REG
                            
   14af   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-TEST FUNCTION--------------------------------
   14b0                 TEST_STR1
   14b0   52 65 73 75       db "Result: ",0
   14b4   6c 74 3a 20   
   14b8   00            
                        
   14b9                 FUNC_TEST
   14b9   ef                sex STACK_REG
                            
   14ba   f8 00             ldi 0
   14bc   73                stxd
   14bd   73                stxd
   14be   73                stxd
   14bf   73                stxd    ;+1 result
                            
   14c0   8f                glo STACK_REG
   14c1   a5                plo R5
   14c2   9f                ghi STACK_REG
   14c3   b5                phi R5
   14c4   15                inc R5
                            
   14c5   f8 18             ldi EXPRESSION.0
   14c7   ad                plo CALL_REG
   14c8   f8 09             ldi EXPRESSION.1
   14ca   bd                phi CALL_REG
                            
   14cb   f8 00             ldi FCALL.0
   14cd   ae                plo FCALL_REG
   14ce   de                sep FCALL_REG
                            
   14cf   8f                glo STACK_REG
   14d0   a4                plo R4
   14d1   9f                ghi STACK_REG
   14d2   b4                phi R4
   14d3   14                inc R4
                        
   14d4   f8 00             ldi 0
   14d6   a5                plo R5
                            
   14d7   f8 ae             ldi PRINT_DEC.0     ;prepare to print the Decimal result.
   14d9   ad                plo CALL_REG
   14da   f8 04             ldi PRINT_DEC.1
   14dc   bd                phi CALL_REG
                            
   14dd   f8 00             ldi FCALL.0
   14df   ae                plo FCALL_REG
   14e0   de                sep FCALL_REG
                            
   14e1   f8 d6             ldi NEW_LINE.0  ;print newline
   14e3   a6                plo R6
   14e4   f8 15             ldi NEW_LINE.1
   14e6   b6                phi R6
                        	
   14e7   f8 52             ldi PRINT.0     ;prepare to call PRINT
   14e9   ad                plo CALL_REG
   14ea   f8 01             ldi PRINT.1
   14ec   bd                phi CALL_REG
                            
   14ed   f8 00             ldi FCALL.0
   14ef   ae                plo FCALL_REG
   14f0   de                sep FCALL_REG
                            
   14f1   8f                glo STACK_REG
   14f2   fc 04             adi 4
   14f4   af                plo STACK_REG
   14f5   9f                ghi STACK_REG
   14f6   7c 00             adci 0
   14f8   bf                phi STACK_REG
                            
   14f9   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-COMMAND-CHECK--------------------------------
                        ;-R4-input string------------------------------
   14fa                 COMMAND_CHECK
   14fa   f8 0a             ldi COMMAND_FUNC_LIST.0
   14fc   a5                plo R5
   14fd   f8 16             ldi COMMAND_FUNC_LIST.1
   14ff   b5                phi R5
                            
   1500   f8 d9             ldi COMMAND_LIST.0
   1502   a9                plo R9
   1503   f8 15             ldi COMMAND_LIST.1
   1505   b9                phi R9
                            
   1506   84                glo R4
   1507   a6                plo R6
   1508   94                ghi R4
   1509   b6                phi R6
                            
   150a                 COMMAND_CHECK_GOTOSPACE
   150a   46                lda R6
   150b   c2 15 16          lbz COMMAND_CHECK_INSERTZERO
   150e   fb 20             xri 32
   1510   c2 15 17          lbz COMMAND_CHECK_REPLACESPACE
   1513   c0 15 0a          lbr COMMAND_CHECK_GOTOSPACE
                            
   1516                 COMMAND_CHECK_INSERTZERO
   1516   56                str R6
   1517                 COMMAND_CHECK_REPLACESPACE
   1517   26                dec R6
   1518   56                str R6
   1519   16                inc R6
                            
   151a                 COMMAND_CHECK_LOOP
   151a   84                glo R4
   151b   a8                plo R8
   151c   94                ghi R4
   151d   b8                phi R8
                            
   151e   09                ldn R9
   151f   c2 15 47          lbz COMMAND_CHECK_END
                        
   1522   f8 c0             ldi STR_COMPARATOR.0
   1524   ad                plo CALL_REG
   1525   f8 01             ldi STR_COMPARATOR.1
   1527   bd                phi CALL_REG
                            
   1528   f8 00             ldi FCALL.0
   152a   ae                plo FCALL_REG
   152b   de                sep FCALL_REG
                            
   152c   8a                glo R10
   152d   ca 15 3a          lbnz COMMAND_CHECK_EXEC
                            
   1530                 COMMAND_CHECK_STR_END
   1530   09                ldn R9
   1531   19                inc R9
   1532   ca 15 30          lbnz COMMAND_CHECK_STR_END
                            
   1535   15                inc R5
   1536   15                inc R5
   1537   c0 15 1a          lbr COMMAND_CHECK_LOOP
                            
   153a                 COMMAND_CHECK_EXEC
   153a   86                glo R6
   153b   a4                plo R4
   153c   96                ghi R6
   153d   b4                phi R4
                            
   153e   45                lda R5
   153f   ad                plo CALL_REG
   1540   05                ldn R5
   1541   bd                phi CALL_REG
                            
   1542   f8 00             ldi FCALL.0
   1544   ae                plo FCALL_REG
   1545   de                sep FCALL_REG
                            
   1546   de                sep RETURN
                            
   1547                 COMMAND_CHECK_END
   1547   f8 16             ldi UNKNOWN_COMMAND.0  ;set the address of the boot msg in R6
   1549   a6                plo R6
   154a   f8 16             ldi UNKNOWN_COMMAND.1
   154c   b6                phi R6
                        	
   154d   f8 52             ldi PRINT.0     ;prepare to call PRINT
   154f   ad                plo CALL_REG
   1550   f8 01             ldi PRINT.1
   1552   bd                phi CALL_REG
                            
   1553   f8 00             ldi FCALL.0
   1555   ae                plo FCALL_REG
   1556   de                sep FCALL_REG   ;call PRINT
                            
   1557   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-MAIN-----------------------------------------
   1558                 MAIN_PROGRAM
   1558   f8 c3             ldi VAR_LIST_INIT.0       ;variable list init
   155a   ad                plo CALL_REG
   155b   f8 0d             ldi VAR_LIST_INIT.1
   155d   bd                phi CALL_REG
                            
   155e   f8 00             ldi FCALL.0
   1560   ae                plo FCALL_REG
   1561   de                sep FCALL_REG
                            
   1562   f8 13             ldi DYN_MEMORY_INIT.0     ;heap init
   1564   ad                plo CALL_REG
   1565   f8 0a             ldi DYN_MEMORY_INIT.1
   1567   bd                phi CALL_REG
                            
   1568   f8 00             ldi FCALL.0
   156a   ae                plo FCALL_REG
   156b   de                sep FCALL_REG   ;call heap init
                            
   156c   f8 af             ldi BOOT_MSG.0  ;set the address of the boot msg in R6
   156e   a6                plo R6
   156f   f8 15             ldi BOOT_MSG.1
   1571   b6                phi R6
                        	
   1572   f8 52             ldi PRINT.0     ;prepare to call PRINT
   1574   ad                plo CALL_REG
   1575   f8 01             ldi PRINT.1
   1577   bd                phi CALL_REG
                            
   1578   f8 00             ldi FCALL.0
   157a   ae                plo FCALL_REG
   157b   de                sep FCALL_REG   ;call PRINT
                        
   157c                 ASK_INPUT
   157c   f8 00             ldi INPUT_BUFF.0    ;load the address of the buffer to R7
   157e   a7                plo R7
   157f   f8 20             ldi INPUT_BUFF.1
   1581   b7                phi R7
                            
   1582   f8 68             ldi READLINE.0      ;prepare to call READLINE
   1584   ad                plo CALL_REG
   1585   f8 01             ldi READLINE.1
   1587   bd                phi CALL_REG
                            
   1588   f8 00             ldi FCALL.0
   158a   ae                plo FCALL_REG
   158b   de                sep FCALL_REG       ;call READLINE
                            
                            ;Program goes here
   158c   f8 00             ldi INPUT_BUFF.0
   158e   a4                plo R4
   158f   f8 20             ldi INPUT_BUFF.1
   1591   b4                phi R4
                            
   1592   f8 fa             ldi COMMAND_CHECK.0      ;prepare to call COMMAND_CHECK
   1594   ad                plo CALL_REG
   1595   f8 14             ldi COMMAND_CHECK.1
   1597   bd                phi CALL_REG
                            
   1598   f8 00             ldi FCALL.0
   159a   ae                plo FCALL_REG
   159b   de                sep FCALL_REG
                            ;Program ends here
                            
   159c   f8 d2             ldi ASK_IN.0        ;load the ASK_IN string's address to R6
   159e   a6                plo R6
   159f   f8 15             ldi ASK_IN.1
   15a1   b6                phi R6
                            
   15a2   f8 52             ldi PRINT.0         ;prepare to call PRINT
   15a4   ad                plo CALL_REG
   15a5   f8 01             ldi PRINT.1
   15a7   bd                phi CALL_REG
                            
   15a8   f8 00             ldi FCALL.0
   15aa   ae                plo FCALL_REG
   15ab   de                sep FCALL_REG       ;call PRINT
                        	
   15ac   c0 15 7c          lbr ASK_INPUT
                        ;----------------------------------------------
                        
                        ;-CONSTANT DATA--------------------------------
   15af                 BOOT_MSG
   15af   5a 4c 45 44       db "ZLED - CDP1802 Terminal.\r\n\r\nREADY\r\n"
   15b3   20 2d 20 43   
   15b7   44 50 31 38   
   15bb   30 32 20 54   
   15bf   65 72 6d 69   
   15c3   6e 61 6c 2e   
   15c7   0d 0a 0d 0a   
   15cb   52 45 41 44   
   15cf   59 0d 0a      
   15d2                 ASK_IN
   15d2   0d 0a 3e 00       db "\r\n>",0
   15d6                 NEW_LINE
   15d6   0d 0a 00          db "\r\n",0
   15d9                 COMMAND_LIST
   15d9   70 72 69 6e       db "print",0,"let",0,"mem_view",0,"mem_debug",0,"mem_alloc",0,"mem_free",0,0
   15dd   74 00 6c 65   
   15e1   74 00 6d 65   
   15e5   6d 5f 76 69   
   15e9   65 77 00 6d   
   15ed   65 6d 5f 64   
   15f1   65 62 75 67   
   15f5   00 6d 65 6d   
   15f9   5f 61 6c 6c   
   15fd   6f 63 00 6d   
   1601   65 6d 5f 66   
   1605   72 65 65 00   
   1609   00            
   160a                 COMMAND_FUNC_LIST
   160a   b9 14             db FUNC_TEST.0,FUNC_TEST.1
   160c   55 0e             db LET_STATEMENT.0,LET_STATEMENT.1
   160e   3e 14             db HEXVIEW_CALLER.0,HEXVIEW_CALLER.1
   1610   6b 0a             db DYN_MEMORY_DEBUG.0,DYN_MEMORY_DEBUG.1
   1612   80 12             db DYN_MEMORY_ALLOC_CALLER.0,DYN_MEMORY_ALLOC_CALLER.1
   1614   9b 13             db DYN_MEMORY_FREE_CALLER.0,DYN_MEMORY_FREE_CALLER.1
   1616                 UNKNOWN_COMMAND
   1616   55 6e 6b 6e       db "Unknown command.\r\n",0
   161a   6f 77 6e 20   
   161e   63 6f 6d 6d   
   1622   61 6e 64 2e   
   1626   0d 0a 00      
   1629                 TEST_RESP
   1629   45 76 65 72       db "Everything is ok!",0
   162d   79 74 68 69   
   1631   6e 67 20 69   
   1635   73 20 6f 6b   
   1639   21 00         
                        
   163b                     end
15d2  ASK_IN        157c  ASK_INPUT     0164  BACKSPACE_ACTION    15af  BOOT_MSG  
000d  CALL_REG      0283  CARRY_SHIFTING    14fa  COMMAND_CHECK    1547  COMMAND_CHECK_END
153a  COMMAND_CHECK_EXEC    150a  COMMAND_CHECK_GOTOSPACE    1516  COMMAND_CHECK_INSERTZERO    151a  COMMAND_CHECK_LOOP
1517  COMMAND_CHECK_REPLACESPACE    1530  COMMAND_CHECK_STR_END    160a  COMMAND_FUNC_LIST    15d9  COMMAND_LIST
028d  DIVISION_LOOP    3000  DMA_ADDRESS    0013  DMA_INIT      0000  DMA_REG   
0baa  DYN_MEMORY_ALLOC    1280  DYN_MEMORY_ALLOC_CALLER    1332  DYN_MEMORY_ALLOC_CALLER_END    12b5  DYN_MEMORY_ALLOC_CALLER_FAIL
1238  DYN_MEMORY_ALLOC_CALLER_STR1    126f  DYN_MEMORY_ALLOC_CALLER_STR2    12c8  DYN_MEMORY_ALLOC_CALLER_SUCCESS    0cf5  DYN_MEMORY_ALLOC_END
0be6  DYN_MEMORY_ALLOC_MAINLOOP    0cc0  DYN_MEMORY_ALLOC_NEXTADDRESS    0cda  DYN_MEMORY_ALLOC_NEXTPASS    0c35  DYN_MEMORY_ALLOC_SIZEBIGGER
0c22  DYN_MEMORY_ALLOC_SIZEEQ    0a6b  DYN_MEMORY_DEBUG    0ba1  DYN_MEMORY_DEBUG_END    0b66  DYN_MEMORY_DEBUG_FREE
0a85  DYN_MEMORY_DEBUG_MAINLOOP    0b6c  DYN_MEMORY_DEBUG_NEXTADDRESS    0ac8  DYN_MEMORY_DEBUG_PRINT    0a36  DYN_MEMORY_DEBUG_STR
0a5d  DYN_MEMORY_DEBUG_STR_FREE    0a64  DYN_MEMORY_DEBUG_STR_USED    0d0f  DYN_MEMORY_FREE    139b  DYN_MEMORY_FREE_CALLER
1435  DYN_MEMORY_FREE_CALLER_END    1425  DYN_MEMORY_FREE_CALLER_OUTOFRANGE    133b  DYN_MEMORY_FREE_CALLER_STR1    1370  DYN_MEMORY_FREE_CALLER_STR2
0da6  DYN_MEMORY_FREE_END    0d47  DYN_MEMORY_FREE_MERGE    0d67  DYN_MEMORY_FREE_MERGELOOP    0d38  DYN_MEMORY_FREE_NEXTCHECK
0d9f  DYN_MEMORY_FREE_SETPREVIOUS    0a13  DYN_MEMORY_INIT    017a  END_LINE      0918  EXPRESSION
094d  EXPRESSION_ADD    0987  EXPRESSION_ADD_LOOP    0a02  EXPRESSION_END    0939  EXPRESSION_MAIN
09fe  EXPRESSION_NEXT_CYCLE    0929  EXPRESSION_SKIPSPACES    09a6  EXPRESSION_SUB    09e0  EXPRESSION_SUB_LOOP
074e  FACTOR        07f2  FACTOR_END    0818  FACTOR_FINAL    080d  FACTOR_INVERTING
075a  FACTOR_MAIN    07e3  FACTOR_NEGATE    07ee  FACTOR_NEXT_CYCLE    07c9  FACTOR_PARENTHESIS
07d4  FACTOR_PARENTHESIS_SKIPSPACES    07ae  FACTOR_READ_DEC    07bb  FACTOR_READ_HEX    07a2  FACTOR_READ_NUMBER
0795  FACTOR_VAR    0100  FCALL         000e  FCALL_REG     031f  FINAL_CHECK
0343  FINAL_CHECK2    010a  FRETURN       14b9  FUNC_TEST     0dd5  GET_STRING
0e0f  GET_STRING_ADDLEN    0e1b  GET_STRING_ALLOCATE_MEM    0e32  GET_STRING_COPY    0e3f  GET_STRING_COPY_LOOP
0e49  GET_STRING_END    0de8  GET_STRING_LEN    0e14  GET_STRING_LEN_END    fc00  HEAP_END  
2106  HEAP_LASTADDRESS    2110  HEAP_START    0ff2  HEXVIEWER     122f  HEXVIEWER_END
1069  HEXVIEWER_MAINLOOP    10e5  HEXVIEWER_NEXT_HEX    11a4  HEXVIEWER_NEXT_STR    1091  HEXVIEWER_PRINT_HEX_LOOP
10d5  HEXVIEWER_PRINT_HEX_SPACES    1188  HEXVIEWER_PRINT_STR_DOT    1145  HEXVIEWER_PRINT_STR_LOOP    1197  HEXVIEWER_PRINT_STR_SPACE
143e  HEXVIEW_CALLER    14a7  HEXVIEW_CALLER_END    1488  HEXVIEW_CALLER_EXEC    1479  HEXVIEW_CALLER_NEXTARG
0f49  HEX_BASE_SRT    0412  HEX_CHARS     0f5c  HEX_HEADER_STR    0fed  HEX_LINECNT_SEPARATOR
2000  INPUT_BUFF    01d4  INTEGER_DIV    0224  INTEGER_DIV_INVERT_LOOP1    0234  INTEGER_DIV_NEXT_CHECK
0372  INTEGER_MUL    03d3  INTEGER_MUL_ADD    0409  INTEGER_MUL_END    039f  INTEGER_MUL_LOOP
03dc  INTEGER_MUL_SHIFT    03fd  INTEGER_MUL_SHMULTIPLICAND    03e9  INTEGER_MUL_SHMULTIPLIER    0262  INTEGER_SHIFT_DR
0001  INTP_REG      0002  INTX_REG      0253  INVERT_LOOP2    0337  INVERT_LOOP3
035e  INVERT_LOOP4    0e55  LET_STATEMENT    0ee4  LET_STATEMENT_ADDNODE    0ed5  LET_STATEMENT_ADDVAR
0e7f  LET_STATEMENT_CONTINUE1    0ea5  LET_STATEMENT_CONTINUE2    0f33  LET_STATEMENT_END    0eca  LET_STATEMENT_EXPRESSION
0f05  LET_STATEMENT_FIRSTNODE    0f21  LET_STATEMENT_FREENODE    0eba  LET_STATEMENT_MAINLOOP    0ec7  LET_STATEMENT_NEXTCHARACTER
0e8e  LET_STATEMENT_SKIPSPACES    1558  MAIN_PROGRAM    15d6  NEW_LINE      0307  NEXT_BIT  
0003  PC_REG        0152  PRINT         045e  PRINT_CHECK_DIGIT    04ae  PRINT_DEC 
0555  PRINT_DEC_END    055e  PRINT_DEC_FINAL    0502  PRINT_DEC_INVER_LOOP    050d  PRINT_DEC_MAIN_LOOP
0461  PRINT_DIGIT_LOOP    0422  PRINT_HEX     048f  PRINT_HEX_END    0473  PRINT_HEX_SHIFT_LOOP1
0449  PRINT_UNTIL_R    000a  R10           000b  R11           000c  R12       
0004  R4            0005  R5            0006  R6            0007  R7        
0008  R8            0009  R9            0168  READLINE      018e  READLINE_BACKSPACE
016b  READLINE_LOOP    058b  READ_DEC      061c  READ_DEC_END    05a5  READ_DEC_MAIN_LOOP
062e  READ_HEX      066a  READ_HEX_CONTINUE    069e  READ_HEX_END    068d  READ_HEX_HEXDIGIT
0696  READ_HEX_HEXDIGITLOWER    064b  READ_HEX_MAINLOOP    0699  READ_HEX_NEXTCHAR    066d  READ_HEX_SHIFTLOOP
06b0  READ_VAR      06cc  READ_VAR_CONTINUE    0740  READ_VAR_END    0712  READ_VAR_FOUND
06fe  READ_VAR_NEXTNODE    072b  READ_VAR_NOTFOUND    06de  READ_VAR_SEARCHLOOP    06e5  READ_VAR_SEARCHLOOP_CONTINUE
000e  RETURN        013f  SERIAL_NULL_BIT    012d  SERIAL_READ_START    0139  SERIAL_SAMPLE_BIT
0143  SERIAL_SAVE_BIT    011b  SERIAL_SEND_BIT    0113  SERIAL_SEND_START    0131  SERIAL_WAIT_START
02a5  SHIFTING_Q    0276  SHIFT_DR      0314  SHIFT_SUBTRACTOR    ffff  STACK_ADDRESS
000f  STACK_REG     0000  START         01aa  STORE_CHAR    01c3  STR_CHARCHECK
01c0  STR_COMPARATOR    01c9  STR_EQUAL     01d0  STR_INC       02fd  SUBTRACT_FOR_REAL
0821  TERM          0848  TERM_DIVIDE    0906  TERM_END      0834  TERM_MAIN 
08ad  TERM_MULTIPLY    0902  TERM_NEXT_CYCLE    1629  TEST_RESP     14b0  TEST_STR1 
0369  THE_END       02c7  TRY_SUBTRACTING    1616  UNKNOWN_COMMAND    2100  VARLIST_COUNT
2102  VARLIST_FIRSTNODE    2104  VARLIST_LASTNODE    0dc3  VAR_LIST_INIT    0dcc  VAR_LIST_INIT_LOOP
