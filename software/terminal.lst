                        
   0000                 DMA_REG EQU 0
   0001                 INTP_REG EQU 1
   0002                 INTX_REG EQU 2
   0003                 PC_REG EQU 3
   0004                 R4 EQU 4
   0005                 R5 EQU 5
   0006                 R6 EQU 6
   0007                 R7 EQU 7
   0008                 R8 EQU 8
   0009                 R9 EQU 9
   000a                 R10 EQU 10
   000b                 R11 EQU 11
   000c                 R12 EQU 12
   000d                 CALL_REG EQU 13
   000e                 FCALL_REG EQU 14
   000e                 RETURN EQU 14
   000f                 STACK_REG EQU 15
                        
   ffff                 STACK_ADDRESS EQU 0FFFFh
   3000                 DMA_ADDRESS EQU 03000h
                        
   2000                 INPUT_BUFF EQU 02000h
                        
   2100                 HEAP_LASTADDRESS EQU 02100h
   2110                 HEAP_START EQU 02110h
   fc00                 HEAP_END EQU 0FC00h
                        
                        
   0000                     org 00h
                        
   0000                 START
   0000   71                dis
   0001   00                idl
                            
   0002   7b                seq     ;set Q output to high
                            
   0003   f8 ff             ldi STACK_ADDRESS.0 ;setup the STACK pointer
   0005   af                plo STACK_REG
   0006   f8 ff             ldi STACK_ADDRESS.1
   0008   bf                phi STACK_REG
                            
   0009   f8 01             ldi FCALL.1         ;setup FCALL
   000b   be                phi FCALL_REG
                            
   000c   f8 13             ldi DMA_INIT.0      ;switch PC to R3 and init DMA
   000e   a3                plo PC_REG
   000f   f8 00             ldi DMA_INIT.1
   0011   b3                phi PC_REG
                            
   0012   d3                sep PC_REG
                            
   0013                 DMA_INIT
   0013   f8 00             ldi DMA_ADDRESS.0   ;setup DMA address
   0015   a0                plo DMA_REG
   0016   f8 30             ldi DMA_ADDRESS.1
   0018   b0                phi DMA_REG
                            
   0019   c0 12 e7          lbr MAIN_PROGRAM
                            
                        ;-FUNCTION CALL HELPER-------------------------
                        ;-WHERE TO JUMP-(CALL_REG)---------------------
   0100                     org 0100h
                            
   0100                 FCALL
   0100   ef                sex STACK_REG   ;set STACK as X register
   0101   93                ghi PC_REG      ;saving the PC value to stack
   0102   73                stxd
   0103   83                glo PC_REG
   0104   73                stxd
                            
   0105   8d                glo CALL_REG    ;put the new address in the PC
   0106   a3                plo PC_REG
   0107   9d                ghi CALL_REG
   0108   b3                phi PC_REG
   0109   d3                sep PC_REG      ;jumping to PC
                            
   010a                 FRETURN
   010a   1f                inc STACK_REG   ;increment the STACK register
   010b   ef                sex STACK_REG   ;set STACK as X register
   010c   72                ldxa            ;restoring PC from STACK
   010d   a3                plo PC_REG
   010e   f0                ldx
   010f   b3                phi PC_REG
   0110   d3                sep PC_REG      ;jumping to PC
   0111   30 0a             br FRETURN
                        ;----------------------------------------------
                        
                        ;-SERIAL SEND BYTE-----------------------------
                        ;-DATA-R4.1------------------------------------
   0113                 SERIAL_SEND_START
   0113   94                ghi R4      ;R4 high is the data, load it into the D reg
   0114   fb ff             xri 0FFh    ;invert it
   0116   b4                phi R4      ;put it back
   0117   f8 85             ldi 085h    ;load 0x85 to the D reg
   0119   fe                shl         ;shift it left so we get 0x0A and set the flag bit
   011a   a4                plo R4      ;put the 0x10 to R4 low, this will be our bit counter
                        
   011b                 SERIAL_SEND_BIT
   011b   c7                lsnf        ;24 - long skip if the flag is not set
   011c   7a                req         ;16 - reset Q if the flag is set
   011d   c8                lskp        ;24
   011e   7b                seq         ;16 - set Q if the flag is not set
   011f   c4                nop         ;24
                            
   0120   24                dec R4      ;16 - decrement R4, this will only affect the R4 lower 8bit
   0121   84                glo R4      ;16
   0122   c6                lsnz        ;24 - if R4 lower is not 0 then long skip
   0123   de                sep RETURN  ;--
   0124   c4                nop         ;--
   0125   94                ghi R4      ;16 - get R4 high
   0126   f6                shr         ;16 - shift it right to get LSB in the flag
   0127   b4                phi R4      ;16 - put it back
   0128   c4                nop         ;24
   0129   c4                nop         ;24
   012a   c4                nop         ;24
   012b   30 1b             br SERIAL_SEND_BIT ;16
                        ;----------------------------------------------
                        
                        ;-SERIAL READ BYTE-----------------------------
                        ;-RETURN R5.1----------------------------------
   012d                 SERIAL_READ_START
   012d   f8 00             ldi 00h     ;set input data register to 0
   012f   a5                plo R5
   0130   b5                phi R5
                            
   0131                 SERIAL_WAIT_START
   0131   3c 31             bn1 SERIAL_WAIT_START ;16 - loop until EF1 goes low
   0133   c4                nop         ;24
   0134   c4                nop         ;24
   0135   c4                nop         ;24
   0136   c4                nop         ;24
   0137   f9 00             ori 00h     ;16 - do nothing for 16 clock cycles
                        
   0139                 SERIAL_SAMPLE_BIT
   0139   34 3f             b1 SERIAL_NULL_BIT  ;16 - checking the EF1
   013b   f9 80             ori 080h            ;16 - if EF1 is high then set MSB to 1 in D register
   013d   30 43             br SERIAL_SAVE_BIT  ;16
                        
   013f                 SERIAL_NULL_BIT
   013f   f9 00             ori 00h         ;16 - of EF1 is low we do nothing
   0141   f9 00             ori 00h         ;16
                        
   0143                 SERIAL_SAVE_BIT
   0143   b5                phi R5          ;16 - put D in R5 high
   0144   15                inc R5          ;16 - increment R5, this will only affect R5 low 8bit
   0145   85                glo R5          ;16 - get R5 low to D register
   0146   fb 09             xri 09h         ;16 - D = D ^ 0x09
   0148   c6                lsnz            ;24 
   0149   de                sep RETURN      ;--
   014a   c4                nop             ;--
   014b   95                ghi R5          ;16 - get R5 high
   014c   f6                shr             ;16 - shift it righ
   014d   c4                nop             ;24
   014e   c4                nop             ;24
   014f   c4                nop             ;24
   0150   30 39             br SERIAL_SAMPLE_BIT ;16
                        ;----------------------------------------------
                        
                        ;-PRINT----------------------------------------
                        ;-FIRST CHAR-R6--------------------------------
   0152                 PRINT
   0152   e6                sex R6          ;set X register to R6
   0153   72                ldxa            ;load data to D and increment R6
   0154   c6                lsnz            ;if it is not zero then long skip
   0155   de                sep RETURN
   0156   c4                nop
                            
   0157   b4                phi R4          ;put D register to R4 to send it
                            
   0158   f8 13             ldi SERIAL_SEND_START.0     ;prepare to call SERIAL_SEND
   015a   ad                plo CALL_REG
   015b   f8 01             ldi SERIAL_SEND_START.1
   015d   bd                phi CALL_REG
                            
   015e   f8 00             ldi FCALL.0
   0160   ae                plo FCALL_REG
   0161   de                sep FCALL_REG   ;call SERIAL_SEND
   0162   30 52             br PRINT
                        ;----------------------------------------------
                        
   0164                 BACKSPACE_ACTION
   0164   08 20 08 00       db 8, 32, 8, 0
                        ;-READ LINE------------------------------------
                        ;-WHERE TO READ-R7-----------------------------
                        ;-R8.1-Character counter-------------------------
   0168                 READLINE
   0168   f8 00             ldi 0
   016a   a8                plo R8
                            
   016b                 READLINE_LOOP
   016b   f8 2d             ldi SERIAL_READ_START.0     ;prepare calling SERIAL_READ
   016d   ad                plo CALL_REG
   016e   f8 01             ldi SERIAL_READ_START.1
   0170   bd                phi CALL_REG
                            
   0171   f8 00             ldi FCALL.0
   0173   ae                plo FCALL_REG
   0174   de                sep FCALL_REG       ;call SERIAL_READ
                            
   0175   95                ghi R5              ;get the result of SERIAL_READ
   0176   fb 0d             xri 13              ;check if it is 13 (ENTER KEY)
   0178   3a 8e             bnz READLINE_BACKSPACE      ;if not jump to READLINE_BACKSPACE
                            
   017a                 END_LINE
   017a   f8 00             ldi 00h             ;put 0 to the endof the string
   017c   57                str R7
                            
   017d   f8 5b             ldi NEW_LINE.0      ;load the address of CRLF string
   017f   a6                plo R6
   0180   f8 13             ldi NEW_LINE.1
   0182   b6                phi R6
                            
   0183   f8 52             ldi PRINT.0         ;prepare to call PRINT
   0185   ad                plo CALL_REG
   0186   f8 01             ldi PRINT.1
   0188   bd                phi CALL_REG
                            
   0189   f8 00             ldi FCALL.0
   018b   ae                plo FCALL_REG
   018c   de                sep FCALL_REG       ;call PRINT
                            
   018d   de                sep RETURN          ;RETURN from READLINE
                            
   018e                 READLINE_BACKSPACE
   018e   95                ghi R5              ;get the result of SERIAL_READ
   018f   fb 7f             xri 127             ;check if it is 127 (DEL)
   0191   3a aa             bnz STORE_CHAR      ;if not jump to STORE_CHAR
                            
   0193   88                glo R8
   0194   32 6b             bz READLINE_LOOP
                            
   0196   f8 64             ldi BACKSPACE_ACTION.0      ;load the address of the backspace action
   0198   a6                plo R6
   0199   f8 01             ldi BACKSPACE_ACTION.1
   019b   b6                phi R6
                            
   019c   f8 52             ldi PRINT.0                 ;prepare to call PRINT
   019e   ad                plo CALL_REG
   019f   f8 01             ldi PRINT.1
   01a1   bd                phi CALL_REG
                            
   01a2   f8 00             ldi FCALL.0
   01a4   ae                plo FCALL_REG
   01a5   de                sep FCALL_REG               ;call PRINT
                            
   01a6   27                dec R7
   01a7   28                dec R8
                            
   01a8   30 6b             br READLINE_LOOP
                            
   01aa                 STORE_CHAR
   01aa   88                glo R8
   01ab   fb ff             xri 0FFh
   01ad   32 6b             bz READLINE_LOOP
                            
   01af   95                ghi R5              ;get the result of the SERIAL_READ again
   01b0   57                str R7              ;store it where R7 pointing
   01b1   17                inc R7              ;increment R7
   01b2   18                inc R8
                            
   01b3   b4                phi R4              ;load the result to R4 to Echo it back
                            
   01b4   f8 13             ldi SERIAL_SEND_START.0     ;prepare to call SERIAL_SEND
   01b6   ad                plo CALL_REG
   01b7   f8 01             ldi SERIAL_SEND_START.1
   01b9   bd                phi CALL_REG
                            
   01ba   f8 00             ldi FCALL.0
   01bc   ae                plo FCALL_REG
   01bd   de                sep FCALL_REG       ;call SERIAL_SEND
   01be   30 6b             br READLINE_LOOP
                        ;----------------------------------------------
                        
                        ;-STR COMPARATOR-------------------------------
                        ;-R8 stringA-R9 stringB------------------------
                        ;-RETURN R10.0---------------------------------
   01c0                 STR_COMPARATOR
   01c0   f8 00             ldi 0           ;R10 low is the result, set it to 0
   01c2   aa                plo R10
                        	
   01c3                 STR_CHARCHECK
   01c3   08                ldn R8          ;load value from RAM[R8] to D register
   01c4   e9                sex R9          ;set X pointer to R9
   01c5   f3                xor             ;D = D ^ RAM[R9]
                            
   01c6   32 c9             bz STR_EQUAL    ;if D == 0 jump to STR_EQUAL
   01c8   de                sep RETURN      ;RETURN
                            
   01c9                 STR_EQUAL 
   01c9   08            	ldn R8          ;load value from RAM[R8] to D register again
   01ca   3a d0         	bnz STR_INC     ;if D != 0 jump to STR_INC
   01cc   f8 01         	ldi 1           ;set R10 to 1 and return
   01ce   aa            	plo R10
   01cf   de            	sep RETURN
                        	
   01d0                 STR_INC
   01d0   18            	inc R8          ;increment both address by 1
   01d1   19            	inc R9
   01d2   30 c3         	br STR_CHARCHECK
                        ;----------------------------------------------
                        
                        ;-INTEGER DIV----------------------------------
                        ;-R4 pointing to divident----------------------
                        ;-R5 pointing to divider-----------------------
                        ;-R6 pointing to quotient----------------------
                        ;-R7 pointing to remainder---------------------
                        ;-R8.0 bitcnt, R8.1 flags----------------------
                        ;-R9 general counter---------------------------
   01d4                 INTEGER_DIV
   01d4   ef                sex STACK_REG   ;set STACK_REG as data pointer to store variables in STACK
   01d5   f8 00             ldi 0           ;set bitcnt and flags to 0
   01d7   a8                plo R8
   01d8   b8                phi R8
                            
   01d9   15                inc R5          ;increment R5 to the MSB because we want to store the divider it in little-endian format
   01da   15                inc R5
   01db   15                inc R5
                            
   01dc   05                ldn R5          ;copying starts here
   01dd   73                stxd
   01de   25                dec R5
                            
   01df   05                ldn R5
   01e0   73                stxd
   01e1   25                dec R5
                            
   01e2   05                ldn R5
   01e3   73                stxd
   01e4   25                dec R5
                            
   01e5   05                ldn R5
   01e6   73                stxd            ;+11 divider, +11 shows the start of the data from the STACK pointer
                            
   01e7   f8 00             ldi 0           ;storing 0 for the subtractor
   01e9   73                stxd
   01ea   73                stxd
   01eb   73                stxd
   01ec   73                stxd            ;+7 subtractor
                            
   01ed   96                ghi R6          ;saving the quotient pointer
   01ee   73                stxd
   01ef   86                glo R6
   01f0   73                stxd            ;+5 quotient pointer
                        
   01f1   97                ghi R7          ;saving the remainder
   01f2   73                stxd
   01f3   87                glo R7
   01f4   73                stxd            ;+3 remainder pointer
                            
   01f5   94                ghi R4          ;saving the dividend pointer
   01f6   73                stxd
   01f7   84                glo R4
   01f8   73                stxd            ;+1 dividend pointer
                            
   01f9   e4                sex R4
                            
   01fa   72                ldxa            ;copy dividend to remainder
   01fb   57                str R7
   01fc   17                inc R7
                            
   01fd   72                ldxa
   01fe   57                str R7
   01ff   17                inc R7
                            
   0200   72                ldxa
   0201   57                str R7
   0202   17                inc R7
                            
   0203   f0                ldx
   0204   57                str R7
                            
   0205   f8 00             ldi 0
   0207   56                str R6
   0208   16                inc R6
   0209   56                str R6
   020a   16                inc R6
   020b   56                str R6
   020c   16                inc R6
   020d   56                str R6
                        
   020e   8f                glo STACK_REG   ;get the STACK_REG pointer to position it to the divider MSB
   020f   fc 0e             adi 14          ;add 14 to it
   0211   a5                plo R5          ;store the new pointer to R5
   0212   9f                ghi STACK_REG   ;get the STACK_REG high part to add the carry to it
   0213   7c 00             adci 0          ;adding the carry
   0215   b5                phi R5          ;store the new high part to R5
                            
   0216   e5                sex R5          ;set X data pointer to R5
   0217   f0                ldx             ;load data from RAM[R5]
   0218   25                dec R5          ;decrement R5 to set it back to the divider's LSB
   0219   25                dec R5
   021a   25                dec R5
   021b   fa 80             ani 080h        ;check if sign bit is set
                            
   021d   c2 02 34          lbz INTEGER_DIV_NEXT_CHECK
                            
   0220   f8 82             ldi 082h        ;load 0x82 to the D register
   0222   fe                shl             ;shit it left so it will set the carry flag and the D registre will be 4
   0223   a9                plo R9          ;store it to R9 low
                            
   0224                 INTEGER_DIV_INVERT_LOOP1
   0224   f0                ldx             ;load data from RAM[R5]
   0225   fb ff             xri 0FFh        ;xor D with 0xFF to invert it
   0227   7c 00             adci 0          ;add the carry for to the result (inver+1)
   0229   55                str R5          ;store the result to RAM[R5]
   022a   60                irx             ;increment R5
                        
   022b   29                dec R9          ;decrement R8
   022c   89                glo R9          ;get R8 low, and if it's not 0 then do the loop
   022d   ca 02 24          lbnz INTEGER_DIV_INVERT_LOOP1
                            
   0230   98                ghi R8          ;set the flag
   0231   f9 01             ori 1
   0233   b8                phi R8
                            
   0234                 INTEGER_DIV_NEXT_CHECK
   0234   8f                glo STACK_REG
   0235   fc 03             adi 3
   0237   a9                plo R9
   0238   9f                ghi STACK_REG
   0239   7c 00             adci 0
   023b   b9                phi R9
                            
   023c   09                ldn R9              ;restore and get remainder MSB
   023d   fc 03             adi 3
   023f   a4                plo R4
   0240   19                inc R9
   0241   09                ldn R9
   0242   7c 00             adci 0
   0244   b4                phi R4
                            
   0245   e4                sex R4
   0246   f0                ldx
   0247   24                dec R4
   0248   24                dec R4
   0249   24                dec R4
   024a   fa 80             ani 080h            ;check if sign bit is set
                            
   024c   c2 02 62          lbz INTEGER_SHIFT_DR
                            
   024f   f8 82             ldi 082h
   0251   fe                shl
   0252   a9                plo R9
                            
   0253                 INVERT_LOOP2
   0253   f0                ldx         ;invert byte 3
   0254   fb ff             xri 0FFh
   0256   7c 00             adci 0
   0258   54                str R4
   0259   60                irx
                        
   025a   29                dec R9
   025b   89                glo R9
   025c   3a 53             bnz INVERT_LOOP2
                            
   025e   98                ghi R8      ;set the flag
   025f   f9 02             ori 2
   0261   b8                phi R8
                            
   0262                 INTEGER_SHIFT_DR
   0262   8f                glo STACK_REG ;get divider MSB
   0263   fc 0b             adi 11
   0265   a5                plo R5
   0266   9f                ghi STACK_REG
   0267   7c 00             adci 0
   0269   b5                phi R5
                            
   026a   f8 00             ldi 0
   026c   e5                sex R5
   026d   f1                or
   026e   60                irx
   026f   f1                or
   0270   60                irx
   0271   f1                or
   0272   60                irx
   0273   f1                or
   0274   32 8d             bz DIVISION_LOOP
                            
   0276                 SHIFT_DR
   0276   8f                glo STACK_REG ;get divider MSB
   0277   fc 0e             adi 14
   0279   a5                plo R5
   027a   9f                ghi STACK_REG
   027b   7c 00             adci 0
   027d   b5                phi R5
                            
   027e   e5                sex R5
                            
   027f   f8 04             ldi 4
   0281   fe                shl
   0282   a9                plo R9
                            
   0283                 CARRY_SHIFTING
   0283   f0                ldx
   0284   76                shrc
   0285   73                stxd
                            
   0286   29                dec R9
   0287   89                glo R9
   0288   3a 83             bnz CARRY_SHIFTING
                            
   028a   18                inc R8
                            
   028b   30 62             br INTEGER_SHIFT_DR
                            
   028d                 DIVISION_LOOP
   028d   88                glo R8              ;get R8 low
   028e   fd 20             sdi 32              ;if larger than 32 then finish the loop
   0290   cb 03 1f          lbnf FINAL_CHECK
                        
   0293   8f                glo STACK_REG       ;restore quotient pointer to R6
   0294   fc 05             adi 5
   0296   a9                plo R9
   0297   9f                ghi STACK_REG
   0298   7c 00             adci 0
   029a   b9                phi R9
                            
   029b   09                ldn R9
   029c   a6                plo R6
   029d   19                inc R9
   029e   09                ldn R9
   029f   b6                phi R6
                            
   02a0   e6                sex R6
                            
   02a1   f8 02             ldi 2
   02a3   fe                shl
   02a4   a9                plo R9
                            
   02a5                 SHIFTING_Q
   02a5   f0                ldx                 ;shifting quotient to left
   02a6   7e                shlc
   02a7   56                str R6
   02a8   60                irx
                        
   02a9   29                dec R9
   02aa   89                glo R9
   02ab   3a a5             bnz SHIFTING_Q
                            
   02ad   8f                glo STACK_REG    ;restore remainder pointer to R4
   02ae   fc 03             adi 3
   02b0   a9                plo R9
   02b1   9f                ghi STACK_REG
   02b2   7c 00             adci 0
   02b4   b9                phi R9
                            
   02b5   09                ldn R9
   02b6   a4                plo R4
   02b7   19                inc R9
   02b8   09                ldn R9
   02b9   b4                phi R4
                            
   02ba   8f                glo STACK_REG    ;restore subtractor pointer to R5
   02bb   fc 07             adi 7
   02bd   a5                plo R5
   02be   9f                ghi STACK_REG
   02bf   7c 00             adci 0
   02c1   b5                phi R5
                            
   02c2   e4                sex R4
   02c3   f8 82             ldi 082h
   02c5   fe                shl
   02c6   a9                plo R9
                            
   02c7                 TRY_SUBTRACTING         ;try subtracting
   02c7   05                ldn R5
   02c8   75                sdb
   02c9   60                irx
   02ca   15                inc R5
                            
   02cb   29                dec R9
   02cc   89                glo R9
   02cd   3a c7             bnz TRY_SUBTRACTING
                            
   02cf   cb 03 07          lbnf NEXT_BIT        ;if subtracting unsuccesful, jump to NEXT_BIT
                            
   02d2   8f                glo STACK_REG
   02d3   fc 05             adi 5
   02d5   a9                plo R9
   02d6   9f                ghi STACK_REG
   02d7   7c 00             adci 0
   02d9   b9                phi R9
                            
   02da   09                ldn R9
   02db   a6                plo R6
   02dc   19                inc R9
   02dd   09                ldn R9
   02de   b6                phi R6
                            
   02df   06                ldn R6
   02e0   f9 01             ori 1
   02e2   56                str R6
                            
   02e3   8f                glo STACK_REG    ;restore remainder pointer
   02e4   fc 03             adi 3
   02e6   a9                plo R9
   02e7   9f                ghi STACK_REG
   02e8   7c 00             adci 0
   02ea   b9                phi R9
                            
   02eb   09                ldn R9
   02ec   a4                plo R4
   02ed   19                inc R9
   02ee   09                ldn R9
   02ef   b4                phi R4
                            
   02f0   8f                glo STACK_REG    ;restore subtractor's pointer to R5
   02f1   fc 07             adi 7
   02f3   a5                plo R5
   02f4   9f                ghi STACK_REG
   02f5   7c 00             adci 0
   02f7   b5                phi R5
                            
   02f8   e4                sex R4
                            
   02f9   f8 82             ldi 082h
   02fb   fe                shl
   02fc   a9                plo R9
                            
   02fd                 SUBTRACT_FOR_REAL
   02fd   05                ldn R5          ;subtract the subtractor from the remainder and store it
   02fe   75                sdb
   02ff   54                str R4
   0300   60                irx
   0301   15                inc R5
                            
   0302   29                dec R9
   0303   89                glo R9
   0304   ca 02 fd          lbnz SUBTRACT_FOR_REAL
                            
   0307                 NEXT_BIT
   0307   8f                glo STACK_REG    ;restore subtractor pointer to R5 and set it to MSB
   0308   fc 0a             adi 10
   030a   a5                plo R5
   030b   9f                ghi STACK_REG
   030c   7c 00             adci 0
   030e   b5                phi R5
                            
   030f   e5                sex R5
   0310   f8 02             ldi 2
   0312   fe                shl
   0313   a9                plo R9
                            
   0314                 SHIFT_SUBTRACTOR
   0314   f0                ldx
   0315   76                shrc
   0316   73                stxd
                            
   0317   29                dec R9
   0318   89                glo R9
   0319   3a 14             bnz SHIFT_SUBTRACTOR
                            
   031b   18                inc R8
   031c   c0 02 8d          lbr DIVISION_LOOP
                            
   031f                 FINAL_CHECK
   031f   98                ghi R8
   0320   fa 02             ani 2
   0322   c2 03 43          lbz FINAL_CHECK2
                            
   0325   8f                glo STACK_REG    ;restore remainder pointer to R4
   0326   fc 03             adi 3
   0328   a9                plo R9
   0329   9f                ghi STACK_REG
   032a   7c 00             adci 0
   032c   b9                phi R9
                            
   032d   09                ldn R9
   032e   a4                plo R4
   032f   19                inc R9
   0330   09                ldn R9
   0331   b4                phi R4
                            
   0332   e4                sex R4
                            
   0333   f8 82             ldi 082h
   0335   fe                shl
   0336   a9                plo R9
                            
   0337                 INVERT_LOOP3
   0337   f0                ldx
   0338   fb ff             xri 0FFh
   033a   7c 00             adci 0
   033c   54                str R4
   033d   60                irx
                            
   033e   29                dec R9
   033f   89                glo R9
   0340   ca 03 37          lbnz INVERT_LOOP3
                            
   0343                 FINAL_CHECK2
   0343   98                ghi R8
   0344   c2 03 69          lbz THE_END
   0347   fb 03             xri 3
   0349   c2 03 69          lbz THE_END
                            
   034c   8f                glo STACK_REG    ;restore quotient pointer to R6
   034d   fc 05             adi 5
   034f   a9                plo R9
   0350   9f                ghi STACK_REG
   0351   7c 00             adci 0
   0353   b9                phi R9
                            
   0354   09                ldn R9
   0355   a6                plo R6
   0356   19                inc R9
   0357   09                ldn R9
   0358   b6                phi R6
                            
   0359   e6                sex R6
                            
   035a   f8 82             ldi 082h
   035c   fe                shl
   035d   a9                plo R9
                            
   035e                 INVERT_LOOP4
   035e   f0                ldx
   035f   fb ff             xri 0FFh
   0361   7c 00             adci 0
   0363   56                str R6
   0364   60                irx
                            
   0365   29                dec R9
   0366   89                glo R9
   0367   3a 5e             bnz INVERT_LOOP4
                        
   0369                 THE_END
   0369   8f                glo STACK_REG       ;setting back the STACK_REG for return
   036a   fc 0e             adi 14
   036c   af                plo STACK_REG
   036d   9f                ghi STACK_REG
   036e   7c 00             adci 0
   0370   bf                phi STACK_REG
                            
   0371   de                sep RETURN          ;RETURN
                        ;----------------------------------------------
                        
                        ;-INTEGER MUL----------------------------------
                        ;-R4-multiplicand pointer----------------------
                        ;-R5-multiplier pointer------------------------
                        ;-R6-result pointer----------------------------
                        ;-R7-general register--------------------------
   0372                 INTEGER_MUL
   0372   ef                sex STACK_REG
                            
   0373   14                inc R4      ;increment R4 and R5 pointer to MSB
   0374   14                inc R4      ;to copy the values to the local variables
   0375   14                inc R4
                            
   0376   15                inc R5
   0377   15                inc R5
   0378   15                inc R5
                            
   0379   04                ldn R4      ;copying starts here
   037a   73                stxd
   037b   24                dec R4
                            
   037c   04                ldn R4
   037d   73                stxd
   037e   24                dec R4
                            
   037f   04                ldn R4
   0380   73                stxd
   0381   24                dec R4
                            
   0382   04                ldn R4
   0383   73                stxd        ;+7 multiplicand
                            
   0384   05                ldn R5
   0385   73                stxd
   0386   25                dec R5
                            
   0387   05                ldn R5
   0388   73                stxd
   0389   25                dec R5
                            
   038a   05                ldn R5
   038b   73                stxd
   038c   25                dec R5
                            
   038d   05                ldn R5
   038e   73                stxd        ;+3 multiplier
                            
   038f   96                ghi R6
   0390   73                stxd
   0391   86                glo R6
   0392   73                stxd        ;+1 result pointer
                        
   0393   f8 00             ldi 0       ;zeroing the result
                            
   0395   56                str R6
   0396   16                inc R6
                            
   0397   56                str R6
   0398   16                inc R6
                            
   0399   56                str R6
   039a   16                inc R6
                            
   039b   56                str R6
                            
   039c   26                dec R6
   039d   26                dec R6
   039e   26                dec R6
                        
   039f                 INTEGER_MUL_LOOP
   039f   8f                glo STACK_REG   ;restore multiplier pointer
   03a0   fc 03             adi 3
   03a2   a5                plo R5
   03a3   9f                ghi STACK_REG
   03a4   7c 00             adci 0
   03a6   b5                phi R5
                            
   03a7   e5                sex R5          ;check if multiplier is 0
   03a8   f8 00             ldi 0
   03aa   f1                or
   03ab   60                irx
   03ac   f1                or
   03ad   60                irx
   03ae   f1                or
   03af   60                irx
   03b0   f1                or
                            
   03b1   25                dec R5
   03b2   25                dec R5
   03b3   25                dec R5
                            
   03b4   c2 04 09          lbz INTEGER_MUL_END      ;if 0 then jump to the end
                            
   03b7   05                ldn R5                  ;load the multiplier's LSB
   03b8   fa 01             ani 1                   ;filter for the LSb
   03ba   32 dc             bz INTEGER_MUL_SHIFT    ;if zero, skip the addition
                            
   03bc   8f                glo STACK_REG           ;restore multiplicand pointer
   03bd   fc 07             adi 7
   03bf   a4                plo R4
   03c0   9f                ghi STACK_REG
   03c1   7c 00             adci 0
   03c3   b4                phi R4
                            
   03c4   8f                glo STACK_REG           ;restore result pointer
   03c5   a7                plo R7
   03c6   9f                ghi STACK_REG
   03c7   b7                phi R7
   03c8   17                inc R7
                            
   03c9   07                ldn R7
   03ca   a5                plo R5
   03cb   17                inc R7
   03cc   07                ldn R7
   03cd   b5                phi R5
                            
   03ce   e5                sex R5
                            
   03cf   f8 02             ldi 2                   ;prepare addition
   03d1   fe                shl
   03d2   a7                plo R7
                            
   03d3                 INTEGER_MUL_ADD
   03d3   04                ldn R4
   03d4   74                adc
   03d5   55                str R5
   03d6   60                irx
   03d7   14                inc R4
                            
   03d8   27                dec R7
   03d9   87                glo R7
   03da   3a d3             bnz INTEGER_MUL_ADD
                        
   03dc                 INTEGER_MUL_SHIFT
                        
   03dc   8f                glo STACK_REG           ;set multiplier's pointer to MSB
   03dd   fc 06             adi 6                   ;to shift it right
   03df   a5                plo R5
   03e0   9f                ghi STACK_REG
   03e1   7c 00             adci 0
   03e3   b5                phi R5
                            
   03e4   e5                sex R5
                            
   03e5   f8 02             ldi 2
   03e7   fe                shl
   03e8   a7                plo R7
                            
   03e9                 INTEGER_MUL_SHMULTIPLIER
   03e9   f0                ldx                     ;shifting right the multiplier
   03ea   76                shrc
   03eb   73                stxd
                            
   03ec   27                dec R7
   03ed   87                glo R7
   03ee   3a e9             bnz INTEGER_MUL_SHMULTIPLIER
                            
   03f0   8f                glo STACK_REG           ;restore multiplicand pointer
   03f1   fc 07             adi 7                   ;to shift it left
   03f3   a4                plo R4
   03f4   9f                ghi STACK_REG
   03f5   7c 00             adci 0
   03f7   b4                phi R4
                            
   03f8   e4                sex R4
                            
   03f9   f8 02             ldi 2
   03fb   fe                shl
   03fc   a7                plo R7
                            
   03fd                 INTEGER_MUL_SHMULTIPLICAND
   03fd   f0                ldx                     ;shifting the multiplicand left
   03fe   7e                shlc
   03ff   54                str R4
   0400   60                irx
                        
   0401   27                dec R7
   0402   87                glo R7
   0403   ca 03 fd          lbnz INTEGER_MUL_SHMULTIPLICAND
                            
   0406   c0 03 9f          lbr INTEGER_MUL_LOOP
                            
   0409                 INTEGER_MUL_END
   0409   8f                glo STACK_REG
   040a   fc 0a             adi 10
   040c   af                plo STACK_REG
   040d   9f                ghi STACK_REG
   040e   7c 00             adci 0
   0410   bf                phi STACK_REG
                            
   0411   de                sep RETURN          ;RETURN    
                        ;----------------------------------------------
                        
                        ;-PRINT HEX------------------------------------
                        ;-R4-int pointer-------------------------------
                        ;-R5.0-number of digits------------------------
                        ;-Local registers------------------------------
                        ;-R5.1-flag, R6--------------------------------
   0412                 HEX_CHARS
   0412   30 31 32 33       db "0123456789ABCDEF"
   0416   34 35 36 37   
   041a   38 39 41 42   
   041e   43 44 45 46   
                        ;----------------------------------------------
   0422                 PRINT_HEX
   0422   ef                sex STACK_REG
                            
   0423   95                ghi R5  ;saving the state of the local registers
   0424   73                stxd
                            
   0425   96                ghi R6
   0426   73                stxd
   0427   86                glo R6
   0428   73                stxd
                            
   0429   14                inc R4  ;making a copy of the Integer
   042a   14                inc R4
   042b   14                inc R4
                            
   042c   04                ldn R4
   042d   73                stxd
   042e   24                dec R4
   042f   04                ldn R4
   0430   73                stxd
   0431   24                dec R4
   0432   04                ldn R4
   0433   73                stxd
   0434   24                dec R4
   0435   04                ldn R4
   0436   73                stxd    ;+2 the integer
                            
   0437   f8 00             ldi 0   ;+1 
   0439   73                stxd
                            
   043a   8f                glo STACK_REG   ;set R4 to point to the Integer
   043b   a4                plo R4
   043c   9f                ghi STACK_REG
   043d   b4                phi R4
   043e   14                inc R4
   043f   14                inc R4
                            
   0440   f8 00             ldi 0           ;set R5 flags to 0
   0442   b5                phi R5
   0443   85                glo R5              
   0444   3a 49             bnz PRINT_UNTIL_R
   0446   f8 01             ldi 1           ;if R5 low, the number of digits, is zero, then set R5 flag
   0448   b5                phi R5
                        
   0449                 PRINT_UNTIL_R
   0449   95                ghi R5                  ;check the flag if set or not
   044a   32 5e             bz PRINT_CHECK_DIGIT    
   044c   e4                sex R4              ;checking the integer if it's zero
   044d   f8 00             ldi 0
   044f   f1                or
   0450   60                irx
   0451   f1                or
   0452   60                irx
   0453   f1                or
   0454   60                irx
   0455   f1                or
                            
   0456   24                dec R4
   0457   24                dec R4
   0458   24                dec R4
                            
   0459   ef                sex STACK_REG    
   045a   3a 61             bnz PRINT_DIGIT_LOOP
   045c   30 8f             br PRINT_HEX_END
                            
   045e                 PRINT_CHECK_DIGIT
   045e   85                glo R5
   045f   32 8f             bz PRINT_HEX_END
                        
   0461                 PRINT_DIGIT_LOOP
   0461   04                ldn R4
   0462   fa 0f             ani 0Fh
   0464   5f                str STACK_REG
   0465   f8 12             ldi HEX_CHARS.0
   0467   f4                add
   0468   a6                plo R6
   0469   f8 04             ldi HEX_CHARS.1
   046b   7c 00             adci 0
   046d   b6                phi R6
                            
   046e   06                ldn R6
   046f   73                stxd
                            
   0470   f8 04             ldi 4
   0472   a6                plo R6
                            
   0473                 PRINT_HEX_SHIFT_LOOP1
   0473   14                inc R4
   0474   14                inc R4
   0475   14                inc R4
                            
   0476   04                ldn R4
   0477   f6                shr
   0478   54                str R4
   0479   24                dec R4
                            
   047a   04                ldn R4
   047b   76                shrc
   047c   54                str R4
   047d   24                dec R4
                            
   047e   04                ldn R4
   047f   76                shrc
   0480   54                str R4
   0481   24                dec R4
                            
   0482   04                ldn R4
   0483   76                shrc
   0484   54                str R4
                            
   0485   26                dec R6
   0486   86                glo R6
   0487   3a 73             bnz PRINT_HEX_SHIFT_LOOP1
                            
   0489   95                ghi R5      ;check if R5 flag is set, if set then skip decrementing.
   048a   c6                lsnz
   048b   25                dec R5
   048c   c4                nop
   048d   30 49             br PRINT_UNTIL_R
                        
   048f                 PRINT_HEX_END
   048f   8f                glo STACK_REG
   0490   a6                plo R6
   0491   9f                ghi STACK_REG
   0492   b6                phi R6
   0493   16                inc R6
                            
   0494   f8 52             ldi PRINT.0     ;prepare to call PRINT
   0496   ad                plo CALL_REG
   0497   f8 01             ldi PRINT.1
   0499   bd                phi CALL_REG
                            
   049a   f8 00             ldi FCALL.0
   049c   ae                plo FCALL_REG
   049d   de                sep FCALL_REG
                            
   049e   86                glo R6
   049f   fc 04             adi 4
   04a1   af                plo STACK_REG
   04a2   96                ghi R6
   04a3   7c 00             adci 0
   04a5   bf                phi STACK_REG
                            
   04a6   ef                sex STACK_REG   ;restore local registers
   04a7   72                ldxa
   04a8   a6                plo R6
   04a9   72                ldxa
   04aa   b6                phi R6
   04ab   f0                ldx
   04ac   b5                phi R5
                            
   04ad   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-PRINT DEC------------------------------------
                        ;-R4-int pointer-------------------------------
                        ;-Local registers------------------------------
                        ;-R5-R6-R7-R10-R12-----------------------------
                        ;-R10-flags------------------------------------
   04ae                 PRINT_DEC
   04ae   ef                sex STACK_REG
                            
   04af   95                ghi R5          ;saving local registers
   04b0   73                stxd
   04b1   85                glo R5
   04b2   73                stxd
                            
   04b3   96                ghi R6
   04b4   73                stxd
   04b5   86                glo R6
   04b6   73                stxd
                            
   04b7   97                ghi R7
   04b8   73                stxd
   04b9   87                glo R7
   04ba   73                stxd
                        
   04bb   9a                ghi R10
   04bc   73                stxd
   04bd   8a                glo R10
   04be   73                stxd
                            
   04bf   9c                ghi R12
   04c0   73                stxd
   04c1   8c                glo R12
   04c2   73                stxd
                            
   04c3   f8 00             ldi 0
   04c5   aa                plo R10
   04c6   ba                phi R10
                            
   04c7   14                inc R4
   04c8   14                inc R4
   04c9   14                inc R4
                            
   04ca   04                ldn R4
   04cb   73                stxd
   04cc   24                dec R4
   04cd   04                ldn R4
   04ce   73                stxd
   04cf   24                dec R4
   04d0   04                ldn R4
   04d1   73                stxd
   04d2   24                dec R4
   04d3   04                ldn R4
   04d4   73                stxd        ;+10 the integer
                            
   04d5   f8 00             ldi 0
   04d7   73                stxd
   04d8   73                stxd
   04d9   73                stxd
   04da   f8 0a             ldi 0Ah
   04dc   73                stxd        ;+6 divider
                            
   04dd   f8 00             ldi 0
   04df   73                stxd
   04e0   73                stxd
   04e1   73                stxd
   04e2   73                stxd        ;+2 remainder
                            
   04e3   73                stxd        ;+1 output string buffer end
                            
   04e4   8f                glo STACK_REG
   04e5   ac                plo R12
   04e6   9f                ghi STACK_REG
   04e7   bc                phi R12
                            
   04e8   8c                glo R12
   04e9   fc 0d             adi 13
   04eb   a4                plo R4
   04ec   9c                ghi R12
   04ed   7c 00             adci 0
   04ef   b4                phi R4
                            
   04f0   e4                sex R4
   04f1   f0                ldx
   04f2   fa 80             ani 080h
   04f4   c2 05 0d          lbz PRINT_DEC_MAIN_LOOP
                            
   04f7   8a                glo R10
   04f8   f9 01             ori 1
   04fa   aa                plo R10
                            
   04fb   24                dec R4
   04fc   24                dec R4
   04fd   24                dec R4
                            
   04fe   f8 82             ldi 082h
   0500   fe                shl
   0501   a6                plo R6
                            
   0502                 PRINT_DEC_INVER_LOOP
   0502   f0                ldx
   0503   fb ff             xri 0FFh
   0505   7c 00             adci 0
   0507   54                str R4
   0508   14                inc R4
                            
   0509   26                dec R6
   050a   86                glo R6
   050b   3a 02             bnz PRINT_DEC_INVER_LOOP
                            
   050d                 PRINT_DEC_MAIN_LOOP    
   050d   8c                glo R12
   050e   fc 0a             adi 10
   0510   a4                plo R4
   0511   a6                plo R6
   0512   9c                ghi R12
   0513   7c 00             adci 0
   0515   b4                phi R4
   0516   b6                phi R6
                            
   0517   8c                glo R12
   0518   fc 06             adi 6
   051a   a5                plo R5
   051b   9c                ghi R12
   051c   7c 00             adci 0
   051e   b5                phi R5
                            
   051f   8c                glo R12
   0520   fc 02             adi 2
   0522   a7                plo R7
   0523   9c                ghi R12
   0524   7c 00             adci 0
   0526   b7                phi R7
                            
   0527   f8 d4             ldi INTEGER_DIV.0
   0529   ad                plo CALL_REG
   052a   f8 01             ldi INTEGER_DIV.1
   052c   bd                phi CALL_REG
                            
   052d   f8 00             ldi FCALL.0
   052f   ae                plo FCALL_REG
   0530   de                sep FCALL_REG
                            
   0531   ef                sex STACK_REG
                            
   0532   8c                glo R12
   0533   fc 02             adi 2
   0535   a7                plo R7
   0536   9c                ghi R12
   0537   7c 00             adci 0
   0539   b7                phi R7
                            
   053a   07                ldn R7
   053b   fc 30             adi 48
   053d   73                stxd
                            
   053e   8c                glo R12
   053f   fc 0a             adi 10
   0541   a4                plo R4
   0542   9c                ghi R12
   0543   7c 00             adci 0
   0545   b4                phi R4
                            
   0546   e4                sex R4
                            
   0547   f8 00             ldi 0
   0549   f1                or
   054a   60                irx
   054b   f1                or
   054c   60                irx
   054d   f1                or
   054e   60                irx
   054f   f1                or
                            
   0550   32 55             bz PRINT_DEC_END
   0552   c0 05 0d          lbr PRINT_DEC_MAIN_LOOP
                        
   0555                 PRINT_DEC_END
   0555   8a                glo R10
   0556   fa 01             ani 1
   0558   32 5e             bz PRINT_DEC_FINAL
                            
   055a   ef                sex STACK_REG
   055b   f8 2d             ldi 45
   055d   73                stxd
                        
   055e                 PRINT_DEC_FINAL
   055e   8f                glo STACK_REG
   055f   a6                plo R6
   0560   9f                ghi STACK_REG
   0561   b6                phi R6
   0562   16                inc R6
                            
   0563   f8 52             ldi PRINT.0
   0565   ad                plo CALL_REG
   0566   f8 01             ldi PRINT.1
   0568   bd                phi CALL_REG
                            
   0569   f8 00             ldi FCALL.0
   056b   ae                plo FCALL_REG
   056c   de                sep FCALL_REG
                            
   056d   8c                glo R12
   056e   fc 0e             adi 14
   0570   af                plo STACK_REG
   0571   9c                ghi R12
   0572   7c 00             adci 0
   0574   bf                phi STACK_REG
                            
   0575   ef                sex STACK_REG
                            
   0576   72                ldxa
   0577   ac                plo R12
   0578   72                ldxa
   0579   bc                phi R12
                            
   057a   72                ldxa
   057b   aa                plo R10
   057c   72                ldxa
   057d   ba                phi R10
                            
   057e   72                ldxa
   057f   a7                plo R7
   0580   72                ldxa
   0581   b7                phi R7
                            
   0582   72                ldxa
   0583   a6                plo R6
   0584   72                ldxa
   0585   b6                phi R6
                            
   0586   72                ldxa
   0587   a5                plo R5
   0588   f0                ldx
   0589   b5                phi R5
                            
   058a   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-READ DEC-------------------------------------
                        ;-R4-string pointer----------------------------
                        ;-R5-result pointer----------------------------
   058b                 READ_DEC
   058b   ef                sex STACK_REG
                            
   058c   94                ghi R4
   058d   73                stxd
   058e   84                glo R4
   058f   73                stxd        ;+7 string pointer
                            
   0590   95                ghi R5
   0591   73                stxd
   0592   85                glo R5
   0593   73                stxd        ;+5 result pointer
                            
   0594   f8 00             ldi 0
   0596   73                stxd
   0597   73                stxd
   0598   73                stxd
   0599   f8 0a             ldi 0Ah
   059b   73                stxd        ;+1 multiplier
                            
   059c   f8 00             ldi 0       ;set result to 0
   059e   55                str R5
   059f   15                inc R5
   05a0   55                str R5
   05a1   15                inc R5
   05a2   55                str R5
   05a3   15                inc R5
   05a4   55                str R5
                            
   05a5                 READ_DEC_MAIN_LOOP
   05a5   8f                glo STACK_REG
   05a6   fc 07             adi 7
   05a8   a6                plo R6
   05a9   9f                ghi STACK_REG
   05aa   7c 00             adci 0
   05ac   b6                phi R6
                            
   05ad   06                ldn R6
   05ae   a4                plo R4
   05af   16                inc R6
   05b0   06                ldn R6
   05b1   b4                phi R4
                            
   05b2   04                ldn R4
   05b3   ff 30             smi 48
   05b5   cb 06 1c          lbnf READ_DEC_END
   05b8   ff 0a             smi 10
   05ba   c3 06 1c          lbdf READ_DEC_END
                            
   05bd   8f                glo STACK_REG
   05be   fc 05             adi 5
   05c0   a6                plo R6
   05c1   9f                ghi STACK_REG
   05c2   7c 00             adci 0
   05c4   b6                phi R6
                            
   05c5   06                ldn R6
   05c6   a4                plo R4
   05c7   16                inc R6
   05c8   06                ldn R6
   05c9   b4                phi R4
                            
   05ca   b6                phi R6
   05cb   84                glo R4
   05cc   a6                plo R6
                            
   05cd   8f                glo STACK_REG
   05ce   a5                plo R5
   05cf   9f                ghi STACK_REG
   05d0   b5                phi R5
   05d1   15                inc R5
                            
   05d2   f8 72             ldi INTEGER_MUL.0     ;prepare to call INTEGER_MUL
   05d4   ad                plo CALL_REG
   05d5   f8 03             ldi INTEGER_MUL.1       
   05d7   bd                phi CALL_REG
                            
   05d8   f8 00             ldi FCALL.0
   05da   ae                plo FCALL_REG
   05db   de                sep FCALL_REG
                            
   05dc   8f                glo STACK_REG
   05dd   fc 07             adi 7
   05df   a6                plo R6
   05e0   9f                ghi STACK_REG
   05e1   7c 00             adci 0
   05e3   b6                phi R6
                            
   05e4   06                ldn R6
   05e5   a4                plo R4
   05e6   16                inc R6
   05e7   06                ldn R6
   05e8   b4                phi R4
                            
   05e9   8f                glo STACK_REG
   05ea   fc 05             adi 5
   05ec   a6                plo R6
   05ed   9f                ghi STACK_REG
   05ee   7c 00             adci 0
   05f0   b6                phi R6
                            
   05f1   06                ldn R6
   05f2   a5                plo R5
   05f3   16                inc R6
   05f4   06                ldn R6
   05f5   b5                phi R5
                            
   05f6   e5                sex R5
                            
   05f7   04                ldn R4
   05f8   ff 30             smi 48
                            
   05fa   f4                add
   05fb   55                str R5
   05fc   15                inc R5
                            
   05fd   f8 00             ldi 0
   05ff   74                adc
   0600   55                str R5
   0601   15                inc R5
                            
   0602   f8 00             ldi 0
   0604   74                adc
   0605   55                str R5
   0606   15                inc R5
                            
   0607   f8 00             ldi 0
   0609   74                adc
   060a   55                str R5
                        
   060b   14                inc R4
                            
   060c   8f                glo STACK_REG
   060d   fc 07             adi 7
   060f   a6                plo R6
   0610   9f                ghi STACK_REG
   0611   7c 00             adci 0
   0613   b6                phi R6
                            
   0614   84                glo R4
   0615   56                str R6
   0616   16                inc R6
   0617   94                ghi R4
   0618   56                str R6
                            
   0619   c0 05 a5          lbr READ_DEC_MAIN_LOOP
                           
   061c                 READ_DEC_END
   061c   8f                glo STACK_REG
   061d   fc 05             adi 5
   061f   af                plo STACK_REG
   0620   9f                ghi STACK_REG
   0621   7c 00             adci 0
   0623   bf                phi STACK_REG
                            
   0624   ef                sex STACK_REG
                            
   0625   72                ldxa            ;restore R4 and R5
   0626   a5                plo R5
   0627   72                ldxa
   0628   b5                phi R5
   0629   72                ldxa
   062a   a4                plo R4
   062b   f0                ldx
   062c   b4                phi R4
                            
   062d   de                sep RETURN      ;RETURN    
                        ;----------------------------------------------
                        
                        ;-READ HEX-------------------------------------
                        ;-R4-string pointer----------------------------
                        ;-R5-result pointer----------------------------
   062e                 READ_HEX
   062e   ef                sex STACK_REG
                            
   062f   96                ghi R6
   0630   73                stxd
   0631   86                glo R6
   0632   73                stxd
                            
   0633   97                ghi R7
   0634   73                stxd
   0635   87                glo R7
   0636   73                stxd
                            
   0637   94                ghi R4
   0638   73                stxd
   0639   84                glo R4
   063a   73                stxd        ;+3 string pointer
                            
   063b   95                ghi R5
   063c   73                stxd
   063d   85                glo R5
   063e   73                stxd        ;+1 result pointer
                            
   063f   f8 00             ldi 0       ;set result to 0
   0641   55                str R5
   0642   15                inc R5
   0643   55                str R5
   0644   15                inc R5
   0645   55                str R5
   0646   15                inc R5
   0647   55                str R5
                            
   0648   25                dec R5
   0649   25                dec R5
   064a   25                dec R5
                            
   064b                 READ_HEX_MAINLOOP
   064b   f8 00             ldi 0
   064d   a7                plo R7
                            
   064e   04                ldn R4
   064f   ff 30             smi 48
   0651   3b 9e             bm READ_HEX_END
   0653   17                inc R7
   0654   ff 0a             smi 10
   0656   3b 6a             bm READ_HEX_CONTINUE
   0658   ff 07             smi 7
   065a   3b 9e             bm READ_HEX_END
   065c   17                inc R7
   065d   ff 06             smi 6
   065f   3b 6a             bm READ_HEX_CONTINUE
   0661   ff 1a             smi 26
   0663   3b 9e             bm READ_HEX_END
   0665   17                inc R7
   0666   ff 06             smi 6
   0668   33 9e             bpz READ_HEX_END
                            
   066a                 READ_HEX_CONTINUE
   066a   f8 04             ldi 4
   066c   a6                plo R6
                        
   066d                 READ_HEX_SHIFTLOOP      ;result = result << 4
   066d   05                ldn R5
   066e   fe                shl
   066f   55                str R5
   0670   15                inc R5
                            
   0671   05                ldn R5
   0672   7e                shlc
   0673   55                str R5
   0674   15                inc R5
                            
   0675   05                ldn R5
   0676   7e                shlc
   0677   55                str R5
   0678   15                inc R5
                            
   0679   05                ldn R5
   067a   7e                shlc
   067b   55                str R5
                            
   067c   25                dec R5
   067d   25                dec R5
   067e   25                dec R5
                            
   067f   26                dec R6
   0680   86                glo R6
   0681   3a 6d             bnz READ_HEX_SHIFTLOOP
                            
   0683   e5                sex R5
                            
   0684   27                dec R7
   0685   87                glo R7
   0686   3a 8d             bnz READ_HEX_HEXDIGIT
   0688   04                ldn R4
   0689   ff 30             smi 48
   068b   30 99             br READ_HEX_NEXTCHAR
                        
   068d                 READ_HEX_HEXDIGIT   
   068d   27                dec R7
   068e   87                glo R7
   068f   3a 96             bnz READ_HEX_HEXDIGITLOWER
   0691   04                ldn R4
   0692   ff 37             smi 55
   0694   30 99             br READ_HEX_NEXTCHAR
                            
   0696                 READ_HEX_HEXDIGITLOWER
   0696   04                ldn R4
   0697   ff 57             smi 87
                            
   0699                 READ_HEX_NEXTCHAR
   0699   f4                add
   069a   55                str R5
   069b   14                inc R4
   069c   30 4b             br READ_HEX_MAINLOOP
                        
   069e                 READ_HEX_END
   069e   8f                glo STACK_REG
   069f   fc 05             adi 5
   06a1   af                plo STACK_REG
   06a2   9f                ghi STACK_REG
   06a3   7c 00             adci 0
   06a5   bf                phi STACK_REG
                            
   06a6   ef                sex STACK_REG
                            
   06a7   72                ldxa
   06a8   a7                plo R7
   06a9   72                ldxa
   06aa   b7                phi R7
                            
   06ab   72                ldxa
   06ac   a6                plo R6
   06ad   f0                ldx
   06ae   b6                phi R6
                            
   06af   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-FACTOR---------------------------------------
                        ;-R4-string pointer----------------------------
                        ;-R5-result pointer----------------------------
                        ;-R10-result code------------------------------
   06b0                 FACTOR
   06b0   ef                sex STACK_REG
                            
   06b1   94                ghi R4
   06b2   73                stxd
   06b3   84                glo R4
   06b4   73                stxd    ;+4 string pt
                            
   06b5   95                ghi R5
   06b6   73                stxd
   06b7   85                glo R5
   06b8   73                stxd    ;+2 result pt
                            
   06b9   f8 00             ldi 0
   06bb   73                stxd    ;+1 flag, indicates if the factor needs to be negated
                            
                            
   06bc                 FACTOR_MAIN
   06bc   04                ldn R4
   06bd   fb 20             xri 32
   06bf   c2 07 2b          lbz FACTOR_NEXT_CYCLE       ;if ' '
   06c2   04                ldn R4
   06c3   fb 2b             xri 43
   06c5   c2 07 2b          lbz FACTOR_NEXT_CYCLE       ;if '+'
   06c8   04                ldn R4
   06c9   fb 2d             xri 45
   06cb   c2 07 20          lbz FACTOR_NEGATE           ;if '-'
   06ce   04                ldn R4
   06cf   fb 28             xri 40
   06d1   c2 07 06          lbz FACTOR_PARENTHESIS      ;if '('
   06d4   04                ldn R4
   06d5   ff 30             smi 48
   06d7   cb 07 2f          lbnf FACTOR_END             ;if *R4 < '0'
   06da   ff 0a             smi 10
   06dc   c3 07 2f          lbdf FACTOR_END             ;if *R4 > '9'
                        
   06df   04                ldn R4
   06e0   fb 30             xri 48
   06e2   3a eb             bnz FACTOR_READ_DEC         ;if *R4 != '0'
                            
   06e4   14                inc R4                      ;increment R4 to get the next char
   06e5   04                ldn R4
   06e6   fb 78             xri 120
   06e8   32 f8             bz FACTOR_READ_HEX          ;if *R4 == 'x'
                            
   06ea   24                dec R4                      ;decrement R4 to step back
                        
   06eb                 FACTOR_READ_DEC    
   06eb   f8 8b             ldi READ_DEC.0
   06ed   ad                plo CALL_REG
   06ee   f8 05             ldi READ_DEC.1
   06f0   bd                phi CALL_REG
                            
   06f1   f8 00             ldi FCALL.0
   06f3   ae                plo FCALL_REG
   06f4   de                sep FCALL_REG
                            
   06f5   c0 07 2f          lbr FACTOR_END
                            
   06f8                 FACTOR_READ_HEX
   06f8   14                inc R4
                            
   06f9   f8 2e             ldi READ_HEX.0
   06fb   ad                plo CALL_REG
   06fc   f8 06             ldi READ_HEX.1
   06fe   bd                phi CALL_REG
                            
   06ff   f8 00             ldi FCALL.0
   0701   ae                plo FCALL_REG
   0702   de                sep FCALL_REG
                            
   0703   c0 07 2f          lbr FACTOR_END
                            
   0706                 FACTOR_PARENTHESIS
   0706   14                inc R4
                            
   0707   f8 55             ldi EXPRESSION.0
   0709   ad                plo CALL_REG
   070a   f8 08             ldi EXPRESSION.1
   070c   bd                phi CALL_REG
                            
   070d   f8 00             ldi FCALL.0
   070f   ae                plo FCALL_REG
   0710   de                sep FCALL_REG
                        
   0711                 FACTOR_PARENTHESIS_SKIPSPACES
   0711   44                lda R4
   0712   fb 20             xri 32
   0714   32 11             bz FACTOR_PARENTHESIS_SKIPSPACES
   0716   24                dec R4
                            
   0717   44                lda R4
   0718   fb 29             xri 41
   071a   c2 07 2f          lbz FACTOR_END
                            
   071d   c0 06 bc          lbr FACTOR_MAIN
                            
   0720                 FACTOR_NEGATE
   0720   8f                glo STACK_REG
   0721   a6                plo R6
   0722   9f                ghi STACK_REG
   0723   b6                phi R6
   0724   16                inc R6
                            
   0725   06                ldn R6
   0726   fb ff             xri 0FFh
   0728   fa 01             ani 1
   072a   56                str R6
                            
   072b                 FACTOR_NEXT_CYCLE
   072b   14                inc R4
   072c   c0 06 bc          lbr FACTOR_MAIN
                            
   072f                 FACTOR_END
   072f   8f                glo STACK_REG
   0730   a6                plo R6
   0731   9f                ghi STACK_REG
   0732   b6                phi R6
   0733   16                inc R6
                            
   0734   06                ldn R6
   0735   c2 07 55          lbz FACTOR_FINAL
                            
   0738   8f                glo STACK_REG
   0739   fc 02             adi 2
   073b   a6                plo R6
   073c   9f                ghi STACK_REG
   073d   7c 00             adci 0
   073f   b6                phi R6
                            
   0740   06                ldn R6
   0741   a5                plo R5
   0742   16                inc R6
   0743   06                ldn R6
   0744   b5                phi R5
                            
   0745   e5                sex R5
                            
   0746   f8 82             ldi 082h
   0748   fe                shl
   0749   a6                plo R6
                            
   074a                 FACTOR_INVERTING
   074a   f0                ldx
   074b   fb ff             xri 0FFh
   074d   7c 00             adci 0
   074f   55                str R5
   0750   60                irx
                            
   0751   26                dec R6
   0752   86                glo R6
   0753   3a 4a             bnz FACTOR_INVERTING
                            
   0755                 FACTOR_FINAL
   0755   8f                glo STACK_REG
   0756   fc 05             adi 5
   0758   af                plo STACK_REG
   0759   9f                ghi STACK_REG
   075a   7c 00             adci 0
   075c   bf                phi STACK_REG
                            
   075d   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-TERM-----------------------------------------
                        ;-R4-string pointer----------------------------
                        ;-R5-result------------------------------------
   075e                 TERM
   075e   ef                sex STACK_REG
                            
   075f   94                ghi R4
   0760   73                stxd
   0761   84                glo R4
   0762   73                stxd
                            
   0763   95                ghi R5
   0764   73                stxd
   0765   85                glo R5
   0766   73                stxd
                            
   0767   f8 b0             ldi FACTOR.0
   0769   ad                plo CALL_REG
   076a   f8 06             ldi FACTOR.1
   076c   bd                phi CALL_REG
                            
   076d   f8 00             ldi FCALL.0
   076f   ae                plo FCALL_REG
   0770   de                sep FCALL_REG
                            
   0771                 TERM_MAIN
   0771   04                ldn R4
   0772   fb 20             xri 32
   0774   c2 08 3f          lbz TERM_NEXT_CYCLE
   0777   04                ldn R4
   0778   fb 2a             xri 42
   077a   c2 07 ea          lbz TERM_MULTIPLY       ;if '*'
   077d   04                ldn R4
   077e   fb 2f             xri 47
   0780   32 85             bz TERM_DIVIDE          ;if '/'
                            
   0782   c0 08 43          lbr TERM_END
                            
   0785                 TERM_DIVIDE
   0785   14                inc R4
                            
   0786   f8 00             ldi 0
   0788   73                stxd
   0789   73                stxd
   078a   73                stxd
   078b   73                stxd    ;+5 remainder
                            
   078c   73                stxd
   078d   73                stxd
   078e   73                stxd
   078f   73                stxd    ;+1 divider
                            
   0790   8f                glo STACK_REG
   0791   a5                plo R5
   0792   9f                ghi STACK_REG
   0793   b5                phi R5
   0794   15                inc R5
                            
   0795   f8 b0             ldi FACTOR.0
   0797   ad                plo CALL_REG
   0798   f8 06             ldi FACTOR.1
   079a   bd                phi CALL_REG
                            
   079b   f8 00             ldi FCALL.0
   079d   ae                plo FCALL_REG
   079e   de                sep FCALL_REG
                            
   079f   8f                glo STACK_REG ;save R4 pointer
   07a0   fc 0b             adi 11
   07a2   a6                plo R6
   07a3   9f                ghi STACK_REG
   07a4   7c 00             adci 0
   07a6   b6                phi R6
                            
   07a7   84                glo R4
   07a8   56                str R6
   07a9   16                inc R6
   07aa   94                ghi R4
   07ab   56                str R6
                            
   07ac   8f                glo STACK_REG
   07ad   fc 09             adi 9
   07af   a8                plo R8
   07b0   9f                ghi STACK_REG
   07b1   7c 00             adci 0
   07b3   b8                phi R8
                            
   07b4   08                ldn R8
   07b5   a4                plo R4
   07b6   a6                plo R6
   07b7   18                inc R8
   07b8   08                ldn R8
   07b9   b4                phi R4
   07ba   b6                phi R6
                            
   07bb   8f                glo STACK_REG
   07bc   a5                plo R5
   07bd   9f                ghi STACK_REG
   07be   b5                phi R5
   07bf   15                inc R5
                            
   07c0   8f                glo STACK_REG
   07c1   fc 05             adi 5
   07c3   a7                plo R7
   07c4   9f                ghi STACK_REG
   07c5   7c 00             adci 0
   07c7   b7                phi R7
                            
   07c8   f8 d4             ldi INTEGER_DIV.0
   07ca   ad                plo CALL_REG
   07cb   f8 01             ldi INTEGER_DIV.1
   07cd   bd                phi CALL_REG
                            
   07ce   f8 00             ldi FCALL.0
   07d0   ae                plo FCALL_REG
   07d1   de                sep FCALL_REG
                            
   07d2   8f                glo STACK_REG
   07d3   fc 0b             adi 11
   07d5   a6                plo R6
   07d6   9f                ghi STACK_REG
   07d7   7c 00             adci 0
   07d9   b6                phi R6
                            
   07da   06                ldn R6
   07db   a4                plo R4
   07dc   16                inc R6
   07dd   06                ldn R6
   07de   b4                phi R4
                            
   07df   8f                glo STACK_REG
   07e0   fc 08             adi 8
   07e2   af                plo STACK_REG
   07e3   9f                ghi STACK_REG
   07e4   7c 00             adci 0
   07e6   bf                phi STACK_REG
                        
   07e7   c0 07 71          lbr TERM_MAIN
                            
   07ea                 TERM_MULTIPLY
   07ea   14                inc R4
                            
   07eb   f8 00             ldi 0
   07ed   73                stxd
   07ee   73                stxd
   07ef   73                stxd
   07f0   73                stxd
                            
   07f1   8f                glo STACK_REG
   07f2   a5                plo R5
   07f3   9f                ghi STACK_REG
   07f4   b5                phi R5
   07f5   15                inc R5
                            
   07f6   f8 b0             ldi FACTOR.0
   07f8   ad                plo CALL_REG
   07f9   f8 06             ldi FACTOR.1
   07fb   bd                phi CALL_REG
                            
   07fc   f8 00             ldi FCALL.0
   07fe   ae                plo FCALL_REG
   07ff   de                sep FCALL_REG
                            
   0800   8f                glo STACK_REG
   0801   fc 07             adi 7
   0803   a6                plo R6
   0804   9f                ghi STACK_REG
   0805   7c 00             adci 0
   0807   b6                phi R6
                            
   0808   84                glo R4
   0809   56                str R6
   080a   16                inc R6
   080b   94                ghi R4
   080c   56                str R6
                            
   080d   8f                glo STACK_REG
   080e   fc 05             adi 5
   0810   a8                plo R8
   0811   9f                ghi STACK_REG
   0812   7c 00             adci 0
   0814   b8                phi R8
                            
   0815   08                ldn R8
   0816   a4                plo R4
   0817   a6                plo R6
   0818   18                inc R8
   0819   08                ldn R8
   081a   b4                phi R4
   081b   b6                phi R6
                            
   081c   8f                glo STACK_REG
   081d   a5                plo R5
   081e   9f                ghi STACK_REG
   081f   b5                phi R5
   0820   15                inc R5
                            
   0821   f8 72             ldi INTEGER_MUL.0
   0823   ad                plo CALL_REG
   0824   f8 03             ldi INTEGER_MUL.1
   0826   bd                phi CALL_REG
                            
   0827   f8 00             ldi FCALL.0
   0829   ae                plo FCALL_REG
   082a   de                sep FCALL_REG
                            
   082b   8f                glo STACK_REG
   082c   fc 07             adi 7
   082e   a6                plo R6
   082f   9f                ghi STACK_REG
   0830   7c 00             adci 0
   0832   b6                phi R6
                            
   0833   06                ldn R6
   0834   a4                plo R4
   0835   16                inc R6
   0836   06                ldn R6
   0837   b4                phi R4
                            
   0838   1f                inc STACK_REG
   0839   1f                inc STACK_REG
   083a   1f                inc STACK_REG
   083b   1f                inc STACK_REG
                        
   083c   c0 07 71          lbr TERM_MAIN
                            
   083f                 TERM_NEXT_CYCLE
   083f   14                inc R4
   0840   c0 07 71          lbr TERM_MAIN
                            
   0843                 TERM_END
   0843   8f                glo STACK_REG
   0844   a6                plo R6
   0845   9f                ghi STACK_REG
   0846   b6                phi R6
   0847   16                inc R6
                            
   0848   46                lda R6
   0849   a5                plo R5
   084a   46                lda R6
   084b   b5                phi R5
                            
   084c   8f                glo STACK_REG
   084d   fc 04             adi 4
   084f   af                plo STACK_REG
   0850   9f                ghi STACK_REG
   0851   7c 00             adci 0
   0853   bf                phi STACK_REG
                            
   0854   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-EXPRESSION-----------------------------------
                        ;-R4-string pointer----------------------------
                        ;-R5-result pointer----------------------------
                        ;-Local registers------------------------------
                        ;-R6-R7----------------------------------------
   0855                 EXPRESSION
   0855   ef                sex STACK_REG
                            
   0856   97                ghi R7      ;saving local registers
   0857   73                stxd
   0858   87                glo R7
   0859   73                stxd
                            
   085a   96                ghi R6
   085b   73                stxd
   085c   86                glo R6
   085d   73                stxd
                            
   085e   94                ghi R4      ;R4 pointer to input string 
   085f   73                stxd
   0860   84                glo R4
   0861   73                stxd        ;+3 input string pointer
                            
   0862   95                ghi R5      ;R5 pointer to result
   0863   73                stxd
   0864   85                glo R5
   0865   73                stxd        ;+1 result pointer
                            
   0866                 EXPRESSION_SKIPSPACES           ;skip spaces
   0866   44                lda R4
   0867   fb 20             xri 32
   0869   32 66             bz EXPRESSION_SKIPSPACES
   086b   24                dec R4
                            
   086c   f8 5e             ldi TERM.0                  ;read TERM
   086e   ad                plo CALL_REG
   086f   f8 07             ldi TERM.1
   0871   bd                phi CALL_REG
                            
   0872   f8 00             ldi FCALL.0
   0874   ae                plo FCALL_REG
   0875   de                sep FCALL_REG
                            
   0876                 EXPRESSION_MAIN
   0876   04                ldn R4
   0877   fb 20             xri 32                      ;if ' '
   0879   c2 09 3b          lbz EXPRESSION_NEXT_CYCLE
   087c   04                ldn R4
   087d   fb 2b             xri 43                      ;if '+'
   087f   32 8a             bz EXPRESSION_ADD
   0881   04                ldn R4
   0882   fb 2d             xri 45                      ;if '-'
   0884   c2 08 e3          lbz EXPRESSION_SUB
                            
                            
   0887   c0 09 3f          lbr EXPRESSION_END
                            
   088a                 EXPRESSION_ADD
   088a   14                inc R4
                            
   088b   f8 00             ldi 0               ;new result
   088d   73                stxd
   088e   73                stxd
   088f   73                stxd
   0890   73                stxd
                            
   0891   8f                glo STACK_REG       ;set R5 pointer to new result
   0892   a5                plo R5
   0893   9f                ghi STACK_REG
   0894   b5                phi R5
   0895   15                inc R5
                            
   0896   f8 5e             ldi TERM.0          ;read TERM
   0898   ad                plo CALL_REG
   0899   f8 07             ldi TERM.1
   089b   bd                phi CALL_REG
                            
   089c   f8 00             ldi FCALL.0
   089e   ae                plo FCALL_REG
   089f   de                sep FCALL_REG
                            
   08a0   8f                glo STACK_REG       ; set R6 register to point to the input string pointer
   08a1   fc 07             adi 7
   08a3   a6                plo R6
   08a4   9f                ghi STACK_REG
   08a5   7c 00             adci 0
   08a7   b6                phi R6
                            
   08a8   84                glo R4              ;input string pointer = R4
   08a9   56                str R6
   08aa   16                inc R6
   08ab   94                ghi R4
   08ac   56                str R6
                            
   08ad   8f                glo STACK_REG       ;set R5 register to point to result
   08ae   a5                plo R5
   08af   9f                ghi STACK_REG
   08b0   b5                phi R5
   08b1   15                inc R5
                            
   08b2   8f                glo STACK_REG       ;set R6 register to point to the result pointer
   08b3   fc 05             adi 5
   08b5   a6                plo R6
   08b6   9f                ghi STACK_REG
   08b7   7c 00             adci 0
   08b9   b6                phi R6
                            
   08ba   06                ldn R6              ;R4 = result pointer
   08bb   a4                plo R4
   08bc   16                inc R6
   08bd   06                ldn R6
   08be   b4                phi R4
                            
   08bf   e4                sex R4
                            
   08c0   f8 02             ldi 2
   08c2   fe                shl
   08c3   a7                plo R7
                            
   08c4                 EXPRESSION_ADD_LOOP     ;*result pointer += result;
   08c4   05                ldn R5
   08c5   74                adc
   08c6   54                str R4
   08c7   15                inc R5
   08c8   60                irx
                            
   08c9   27                dec R7
   08ca   87                glo R7
   08cb   ca 08 c4          lbnz EXPRESSION_ADD_LOOP
                            
   08ce   ef                sex STACK_REG
                            
   08cf   8f                glo STACK_REG       
   08d0   fc 07             adi 7
   08d2   a6                plo R6
   08d3   9f                ghi STACK_REG
   08d4   7c 00             adci 0
   08d6   b6                phi R6
                            
   08d7   06                ldn R6              ;R4 = input string pointer
   08d8   a4                plo R4
   08d9   16                inc R6
   08da   06                ldn R6
   08db   b4                phi R4
                            
   08dc   1f                inc STACK_REG
   08dd   1f                inc STACK_REG
   08de   1f                inc STACK_REG
   08df   1f                inc STACK_REG
                        
   08e0   c0 08 76          lbr EXPRESSION_MAIN
                        
   08e3                 EXPRESSION_SUB
   08e3   14                inc R4
                            
   08e4   f8 00             ldi 0
   08e6   73                stxd
   08e7   73                stxd
   08e8   73                stxd
   08e9   73                stxd
                            
   08ea   8f                glo STACK_REG
   08eb   a5                plo R5
   08ec   9f                ghi STACK_REG
   08ed   b5                phi R5
   08ee   15                inc R5
                            
   08ef   f8 5e             ldi TERM.0
   08f1   ad                plo CALL_REG
   08f2   f8 07             ldi TERM.1
   08f4   bd                phi CALL_REG
                            
   08f5   f8 00             ldi FCALL.0
   08f7   ae                plo FCALL_REG
   08f8   de                sep FCALL_REG
                            
   08f9   8f                glo STACK_REG
   08fa   fc 07             adi 7
   08fc   a6                plo R6
   08fd   9f                ghi STACK_REG
   08fe   7c 00             adci 0
   0900   b6                phi R6
                            
   0901   84                glo R4
   0902   56                str R6
   0903   16                inc R6
   0904   94                ghi R4
   0905   56                str R6
                            
   0906   8f                glo STACK_REG
   0907   a5                plo R5
   0908   9f                ghi STACK_REG
   0909   b5                phi R5
   090a   15                inc R5
                            
   090b   8f                glo STACK_REG
   090c   fc 05             adi 5
   090e   a6                plo R6
   090f   9f                ghi STACK_REG
   0910   7c 00             adci 0
   0912   b6                phi R6
                            
   0913   06                ldn R6
   0914   a4                plo R4
   0915   16                inc R6
   0916   06                ldn R6
   0917   b4                phi R4
                            
   0918   e4                sex R4
                            
   0919   f8 82             ldi 082h
   091b   fe                shl
   091c   a7                plo R7
                            
   091d                 EXPRESSION_SUB_LOOP
   091d   05                ldn R5
   091e   75                sdb
   091f   54                str R4
   0920   15                inc R5
   0921   60                irx
                            
   0922   27                dec R7
   0923   87                glo R7
   0924   3a 1d             bnz EXPRESSION_SUB_LOOP
                            
   0926   ef                sex STACK_REG
                            
   0927   8f                glo STACK_REG
   0928   fc 07             adi 7
   092a   a6                plo R6
   092b   9f                ghi STACK_REG
   092c   7c 00             adci 0
   092e   b6                phi R6
                            
   092f   06                ldn R6
   0930   a4                plo R4
   0931   16                inc R6
   0932   06                ldn R6
   0933   b4                phi R4
                            
   0934   1f                inc STACK_REG
   0935   1f                inc STACK_REG
   0936   1f                inc STACK_REG
   0937   1f                inc STACK_REG
                        
   0938   c0 08 76          lbr EXPRESSION_MAIN
                        
   093b                 EXPRESSION_NEXT_CYCLE    
   093b   14                inc R4
   093c   c0 08 76          lbr EXPRESSION_MAIN
                            
   093f                 EXPRESSION_END
   093f   ef                sex STACK_REG
   0940   60                irx
                            
   0941   72                ldxa            ;restoring registers
   0942   a5                plo R5
   0943   72                ldxa
   0944   b5                phi R5
   0945   60                irx
   0946   60                irx
   0947   72                ldxa
   0948   a6                plo R6
   0949   72                ldxa
   094a   b6                phi R6
   094b   72                ldxa
   094c   a7                plo R7
   094d   f0                ldx
   094e   b7                phi R7
                            
   094f   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-DYN MEMORY INIT------------------------------
   0950                 DYN_MEMORY_INIT
   0950   f8 00             ldi HEAP_LASTADDRESS.0
   0952   a4                plo R4
   0953   f8 21             ldi HEAP_LASTADDRESS.1
   0955   b4                phi R4
                            
   0956   f8 10             ldi HEAP_START.0
   0958   54                str R4
   0959   14                inc R4
   095a   f8 21             ldi HEAP_START.1
   095c   54                str R4
                            
   095d   f8 10             ldi HEAP_START.0
   095f   a4                plo R4
   0960   f8 21             ldi HEAP_START.1
   0962   b4                phi R4
                            
   0963   f8 eb             ldi (HEAP_END - HEAP_START - 5).0
   0965   54                str R4
   0966   14                inc R4
   0967   f8 da             ldi (HEAP_END - HEAP_START - 5).1
   0969   54                str R4
   096a   14                inc R4
                            
   096b   f8 00             ldi 0
   096d   54                str R4
   096e   14                inc R4
   096f   54                str R4
   0970   14                inc R4
   0971   54                str R4
                            
   0972   de                sep RETURN
                        ;----------------------------------------------
                        
   0973                 DYN_MEMORY_DEBUG_STR
   0973   20 2d 3e 20       db " -> size: ",0,", address: ",0,", previous: ",0,", ",0
   0977   73 69 7a 65   
   097b   3a 20 00 2c   
   097f   20 61 64 64   
   0983   72 65 73 73   
   0987   3a 20 00 2c   
   098b   20 70 72 65   
   098f   76 69 6f 75   
   0993   73 3a 20 00   
   0997   2c 20 00      
   099a                 DYN_MEMORY_DEBUG_STR_FREE
   099a   46 52 45 45       db "FREE\r\n",0
   099e   0d 0a 00      
   09a1                 DYN_MEMORY_DEBUG_STR_USED
   09a1   55 53 45 44       db "USED\r\n",0
   09a5   0d 0a 00      
                        ;-DYN MEMORY DEBUG-----------------------------
   09a8                 DYN_MEMORY_DEBUG
   09a8   ef                sex STACK_REG
                            
   09a9   f8 00             ldi 0
   09ab   73                stxd
   09ac   73                stxd
   09ad   73                stxd
   09ae   73                stxd                    ;+14 address + 5
                            
   09af   73                stxd
   09b0   73                stxd
   09b1   f8 21             ldi HEAP_START.1
   09b3   73                stxd
   09b4   f8 10             ldi HEAP_START.0
   09b6   73                stxd                    ;+10 address
                            
   09b7   f8 00             ldi 0
   09b9   73                stxd                    ;+9 used
                            
   09ba   73                stxd
   09bb   73                stxd
   09bc   73                stxd
   09bd   73                stxd                    ;+5 previous
                            
   09be   73                stxd
   09bf   73                stxd
   09c0   73                stxd
   09c1   73                stxd                    ;+1 size
                            
   09c2                 DYN_MEMORY_DEBUG_MAINLOOP
   09c2   8f                glo STACK_REG
   09c3   fc 0a             adi 10
   09c5   a4                plo R4
   09c6   9f                ghi STACK_REG
   09c7   7c 00             adci 0
   09c9   b4                phi R4
                            
   09ca   e4                sex R4
                            
   09cb   f8 00             ldi HEAP_END.0
   09cd   f5                sd
   09ce   14                inc R4
   09cf   f8 fc             ldi HEAP_END.1
   09d1   75                sdb
                            
   09d2   c3 0a de          lbdf DYN_MEMORY_DEBUG_END    ;if address >= HEAP_END
                            
   09d5   8f                glo STACK_REG
   09d6   fc 0a             adi 10
   09d8   a4                plo R4
   09d9   9f                ghi STACK_REG
   09da   7c 00             adci 0
   09dc   b4                phi R4
                            
   09dd   44                lda R4                      ;R5 = address
   09de   a5                plo R5
   09df   44                lda R4
   09e0   b5                phi R5
                            
   09e1   8f                glo STACK_REG
   09e2   a4                plo R4
   09e3   9f                ghi STACK_REG
   09e4   b4                phi R4
   09e5   14                inc R4
                            
   09e6   45                lda R5
   09e7   54                str R4
   09e8   14                inc R4
                            
   09e9   45                lda R5
   09ea   54                str R4
   09eb   14                inc R4
                            
   09ec   14                inc R4
   09ed   14                inc R4
                            
   09ee   45                lda R5
   09ef   54                str R4
   09f0   14                inc R4
                            
   09f1   45                lda R5
   09f2   54                str R4
   09f3   14                inc R4
                            
   09f4   14                inc R4
   09f5   14                inc R4
                            
   09f6   45                lda R5
   09f7   54                str R4
                            
   09f8   8f                glo STACK_REG
   09f9   fc 0e             adi 14
   09fb   a4                plo R4
   09fc   9f                ghi STACK_REG
   09fd   7c 00             adci 0
   09ff   b4                phi R4
                            
   0a00   85                glo R5
   0a01   54                str R4
   0a02   14                inc R4
                            
   0a03   95                ghi R5
   0a04   54                str R4
                            
   0a05                 DYN_MEMORY_DEBUG_PRINT
   0a05   8f                glo STACK_REG               ;set R4 to address
   0a06   fc 0a             adi 10
   0a08   a4                plo R4
   0a09   9f                ghi STACK_REG
   0a0a   7c 00             adci 0
   0a0c   b4                phi R4
                        
   0a0d   f8 ae             ldi PRINT_DEC.0             ;print address in decimal
   0a0f   ad                plo CALL_REG
   0a10   f8 04             ldi PRINT_DEC.1
   0a12   bd                phi CALL_REG
                            
   0a13   f8 00             ldi FCALL.0
   0a15   ae                plo FCALL_REG
   0a16   de                sep FCALL_REG
                            
   0a17   f8 73             ldi DYN_MEMORY_DEBUG_STR.0      ;print the debug string
   0a19   a6                plo R6
   0a1a   f8 09             ldi DYN_MEMORY_DEBUG_STR.1
   0a1c   b6                phi R6
                            
   0a1d   f8 52             ldi PRINT.0         ;prepare to call PRINT
   0a1f   ad                plo CALL_REG
   0a20   f8 01             ldi PRINT.1
   0a22   bd                phi CALL_REG
                            
   0a23   f8 00             ldi FCALL.0
   0a25   ae                plo FCALL_REG
   0a26   de                sep FCALL_REG       ;call PRINT
                            
   0a27   86                glo R6                  ;save R6 value
   0a28   a7                plo R7
   0a29   96                ghi R6
   0a2a   b7                phi R7
                            
   0a2b   8f                glo STACK_REG           ;set R4 to size
   0a2c   a4                plo R4
   0a2d   9f                ghi STACK_REG
   0a2e   b4                phi R4
   0a2f   14                inc R4
                        
   0a30   f8 ae             ldi PRINT_DEC.0         ;print size in decimal
   0a32   ad                plo CALL_REG
   0a33   f8 04             ldi PRINT_DEC.1
   0a35   bd                phi CALL_REG
                            
   0a36   f8 00             ldi FCALL.0
   0a38   ae                plo FCALL_REG
   0a39   de                sep FCALL_REG
                            
   0a3a   87                glo R7                  ;continue printing the debug string
   0a3b   a6                plo R6
   0a3c   97                ghi R7
   0a3d   b6                phi R6
                            
   0a3e   f8 52             ldi PRINT.0             ;prepare to call PRINT
   0a40   ad                plo CALL_REG
   0a41   f8 01             ldi PRINT.1
   0a43   bd                phi CALL_REG
                            
   0a44   f8 00             ldi FCALL.0
   0a46   ae                plo FCALL_REG
   0a47   de                sep FCALL_REG           ;call PRINT
                            
   0a48   86                glo R6                  ;save R6 value
   0a49   a7                plo R7
   0a4a   96                ghi R6
   0a4b   b7                phi R7
                            
   0a4c   8f                glo STACK_REG           ;set R4 to address+5
   0a4d   fc 0e             adi 14
   0a4f   a4                plo R4
   0a50   9f                ghi STACK_REG
   0a51   7c 00             adci 0
   0a53   b4                phi R4
                            
   0a54   f8 ae             ldi PRINT_DEC.0         ;print address+5 in decimal
   0a56   ad                plo CALL_REG
   0a57   f8 04             ldi PRINT_DEC.1
   0a59   bd                phi CALL_REG
                            
   0a5a   f8 00             ldi FCALL.0
   0a5c   ae                plo FCALL_REG
   0a5d   de                sep FCALL_REG
                            
   0a5e   87                glo R7                  ;continue printing the debug string
   0a5f   a6                plo R6
   0a60   97                ghi R7
   0a61   b6                phi R6
                            
   0a62   f8 52             ldi PRINT.0             ;prepare to call PRINT
   0a64   ad                plo CALL_REG
   0a65   f8 01             ldi PRINT.1
   0a67   bd                phi CALL_REG
                            
   0a68   f8 00             ldi FCALL.0
   0a6a   ae                plo FCALL_REG
   0a6b   de                sep FCALL_REG           ;call PRINT
                            
   0a6c   86                glo R6                  ;save R6 value
   0a6d   a7                plo R7
   0a6e   96                ghi R6
   0a6f   b7                phi R7
                            
   0a70   8f                glo STACK_REG           ;set R4 to previous
   0a71   fc 05             adi 5
   0a73   a4                plo R4
   0a74   9f                ghi STACK_REG
   0a75   7c 00             adci 0
   0a77   b4                phi R4
                            
   0a78   f8 ae             ldi PRINT_DEC.0         ;print previous in decimal
   0a7a   ad                plo CALL_REG
   0a7b   f8 04             ldi PRINT_DEC.1
   0a7d   bd                phi CALL_REG
                            
   0a7e   f8 00             ldi FCALL.0
   0a80   ae                plo FCALL_REG
   0a81   de                sep FCALL_REG
                            
   0a82   87                glo R7                  ;continue printing the debug string
   0a83   a6                plo R6
   0a84   97                ghi R7
   0a85   b6                phi R6
                            
   0a86   f8 52             ldi PRINT.0             ;prepare to call PRINT
   0a88   ad                plo CALL_REG
   0a89   f8 01             ldi PRINT.1
   0a8b   bd                phi CALL_REG
                            
   0a8c   f8 00             ldi FCALL.0
   0a8e   ae                plo FCALL_REG
   0a8f   de                sep FCALL_REG           ;call PRINT
                            
   0a90   8f                glo STACK_REG           ;set R4 to previous
   0a91   fc 09             adi 9
   0a93   a4                plo R4
   0a94   9f                ghi STACK_REG
   0a95   7c 00             adci 0
   0a97   b4                phi R4
                            
   0a98   04                ldn R4
   0a99   32 a3             bz DYN_MEMORY_DEBUG_FREE
                            
   0a9b   f8 a1             ldi DYN_MEMORY_DEBUG_STR_USED.0
   0a9d   a6                plo R6
   0a9e   f8 09             ldi DYN_MEMORY_DEBUG_STR_USED.1
   0aa0   b6                phi R6
                            
   0aa1   30 a9             br DYN_MEMORY_DEBUG_NEXTADDRESS
                            
   0aa3                 DYN_MEMORY_DEBUG_FREE
   0aa3   f8 9a             ldi DYN_MEMORY_DEBUG_STR_FREE.0
   0aa5   a6                plo R6
   0aa6   f8 09             ldi DYN_MEMORY_DEBUG_STR_FREE.1
   0aa8   b6                phi R6
                            
   0aa9                 DYN_MEMORY_DEBUG_NEXTADDRESS
   0aa9   f8 52             ldi PRINT.0             ;prepare to call PRINT
   0aab   ad                plo CALL_REG
   0aac   f8 01             ldi PRINT.1
   0aae   bd                phi CALL_REG
                            
   0aaf   f8 00             ldi FCALL.0
   0ab1   ae                plo FCALL_REG
   0ab2   de                sep FCALL_REG           ;call PRINT
                            
   0ab3   8f                glo STACK_REG           ;set R4 to address
   0ab4   fc 0a             adi 10
   0ab6   a4                plo R4
   0ab7   9f                ghi STACK_REG
   0ab8   7c 00             adci 0
   0aba   b4                phi R4
                            
   0abb   8f                glo STACK_REG           ;set R5 to address+5
   0abc   fc 0e             adi 14
   0abe   a5                plo R5
   0abf   9f                ghi STACK_REG
   0ac0   7c 00             adci 0
   0ac2   b5                phi R5
                            
   0ac3   8f                glo STACK_REG           ;set R6 to size
   0ac4   a6                plo R6
   0ac5   9f                ghi STACK_REG
   0ac6   b6                phi R6
   0ac7   16                inc R6
                            
   0ac8   e6                sex R6
                            
   0ac9   45                lda R5
   0aca   f4                add
   0acb   60                irx
   0acc   54                str R4
   0acd   14                inc R4
                            
   0ace   45                lda R5
   0acf   74                adc
   0ad0   60                irx
   0ad1   54                str R4
   0ad2   14                inc R4
                            
   0ad3   45                lda R5
   0ad4   74                adc
   0ad5   60                irx
   0ad6   54                str R4
   0ad7   14                inc R4
                            
   0ad8   45                lda R5
   0ad9   74                adc
   0ada   54                str R4
                            
   0adb   c0 09 c2          lbr DYN_MEMORY_DEBUG_MAINLOOP
                        
   0ade                 DYN_MEMORY_DEBUG_END
   0ade   8f                glo STACK_REG           ;set R6 to size
   0adf   fc 11             adi 17
   0ae1   af                plo STACK_REG
   0ae2   9f                ghi STACK_REG
   0ae3   7c 00             adci 0
   0ae5   bf                phi STACK_REG
                            
   0ae6   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-DYN MEMORY ALLOCATION------------------------
                        ;-R4-Size--------------------------------------
                        ;-R5-currentAddress----------------------------
                        ;-R10-return address---------------------------
   0ae7                 DYN_MEMORY_ALLOC
   0ae7   ef                sex STACK_REG
                            
   0ae8   f8 00             ldi 0
   0aea   73                stxd
   0aeb   73                stxd                ;+7 currentSize
                            
   0aec   94                ghi R4
   0aed   73                stxd
   0aee   84                glo R4
   0aef   73                stxd                ;+5 size
                            
   0af0   84                glo R4              ;R4 += 5
   0af1   fc 05             adi 5
   0af3   a4                plo R4
   0af4   94                ghi R4
   0af5   7c 00             adci 0
   0af7   b4                phi R4
                            
   0af8   94                ghi R4
   0af9   73                stxd
   0afa   84                glo R4              ;newSize is initialized to size+5 for further calculation
   0afb   73                stxd                ;+3 newSize
                        
   0afc   f8 fc             ldi HEAP_END.1
   0afe   73                stxd
   0aff   f8 00             ldi HEAP_END.0
   0b01   73                stxd                ;+1 endAddress = HEAP_END
                            
   0b02   f8 00             ldi HEAP_LASTADDRESS.0
   0b04   a4                plo R4
   0b05   f8 21             ldi HEAP_LASTADDRESS.1
   0b07   b4                phi R4
                            
   0b08   44                lda R4
   0b09   a5                plo R5
   0b0a   44                lda R4
   0b0b   b5                phi R5              ;R5 = lastAddress
                            
   0b0c   f8 00             ldi 0               ;R10 = 0
   0b0e   aa                plo R10
   0b0f   ba                phi R10
                            
   0b10   f8 02             ldi 2               ;R8 = 2
   0b12   a8                plo R8
                            
   0b13                 DYN_MEMORY_ALLOC_MAINLOOP
   0b13   8f                glo STACK_REG       ;set R4 pointer to endAddress
   0b14   a4                plo R4
   0b15   9f                ghi STACK_REG
   0b16   b4                phi R4
   0b17   14                inc R4
                            
   0b18   e4                sex R4
                            
   0b19   85                glo R5              ;currentAddress - endAddress
   0b1a   f7                sm
   0b1b   60                irx
   0b1c   95                ghi R5
   0b1d   77                smb
                            
   0b1e   c3 0c 05          lbdf DYN_MEMORY_ALLOC_NEXTPASS      ;if currentAddress >= endAddress
                            
   0b21   8f                glo STACK_REG                       ;set R4 pointer to currentSize
   0b22   fc 07             adi 7
   0b24   a4                plo R4
   0b25   9f                ghi STACK_REG
   0b26   7c 00             adci 0
   0b28   b4                phi R4
                            
   0b29   85                glo R5                              ;R6 = R5 (currentAddress)
   0b2a   a6                plo R6
   0b2b   95                ghi R5
   0b2c   b6                phi R6
                            
   0b2d   46                lda R6                              ;currentSize = block size
   0b2e   54                str R4
   0b2f   14                inc R4
                            
   0b30   46                lda R6
   0b31   54                str R4
                            
   0b32   16                inc R6
   0b33   16                inc R6
                                
   0b34   06                ldn R6
   0b35   ca 0b eb          lbnz DYN_MEMORY_ALLOC_NEXTADDRESS   ;if the current block is USED
                            
   0b38   24                dec R4
                            
   0b39   8f                glo STACK_REG                   ;R6 pointer set to size
   0b3a   fc 05             adi 5
   0b3c   a6                plo R6
   0b3d   9f                ghi STACK_REG
   0b3e   7c 00             adci 0
   0b40   b6                phi R6
                            
   0b41   46                lda R6                          ;currentSize == size
   0b42   f3                xor
   0b43   60                irx
   0b44   e6                sex R6
   0b45   f1                or
   0b46   e4                sex R4
   0b47   f3                xor
                            
   0b48   26                dec R6                              ;set back R6
   0b49   24                dec R4                              ;set back R4
                            
   0b4a   ca 0b 60          lbnz DYN_MEMORY_ALLOC_SIZEBIGGER    ;if currentSize != size
                        
   0b4d                 DYN_MEMORY_ALLOC_SIZEEQ
   0b4d   85                glo R5                              ;R6 = currentAddress + 4
   0b4e   fc 04             adi 4
   0b50   a6                plo R6
   0b51   95                ghi R5
   0b52   7c 00             adci 0
   0b54   b6                phi R6
                            
   0b55   f8 01             ldi 1
   0b57   56                str R6                              ;used = 1
                            
   0b58   16                inc R6                              ;R6++
   0b59   86                glo R6
   0b5a   aa                plo R10                             ;R10 = R6
   0b5b   96                ghi R6
   0b5c   ba                phi R10
                            
   0b5d   c0 0c 20          lbr DYN_MEMORY_ALLOC_END            ;RETURN
                        
   0b60                 DYN_MEMORY_ALLOC_SIZEBIGGER
   0b60   8f                glo STACK_REG                   ;R6 pinter set to newSize (size+5)
   0b61   fc 03             adi 3
   0b63   a6                plo R6
   0b64   9f                ghi STACK_REG
   0b65   7c 00             adci 0
   0b67   b6                phi R6
                            
   0b68   46                lda R6                          ;currentSize - newSize (size+5)
   0b69   f5                sd
   0b6a   60                irx
   0b6b   46                lda R6
   0b6c   75                sdb
                            
   0b6d   26                dec R6                              ;set back R6
   0b6e   26                dec R6
                               
   0b6f   cb 0b eb          lbnf DYN_MEMORY_ALLOC_NEXTADDRESS   ;if currentSize < newSize (size+5)
                            
   0b72   24                dec R4                              ;R4 pointer to size
   0b73   24                dec R4
   0b74   24                dec R4
                            
   0b75   85                glo R5                              ;R6 = R5 (currentAddress)
   0b76   a6                plo R6
   0b77   95                ghi R5
   0b78   b6                phi R6
                            
   0b79   44                lda R4                              ;set current block size to size
   0b7a   56                str R6
   0b7b   16                inc R6
                            
   0b7c   44                lda R4
   0b7d   56                str R6
   0b7e   16                inc R6
                            
   0b7f   16                inc R6                              ;R6 += 2
   0b80   16                inc R6
                            
   0b81   f8 01             ldi 1                               ;set used to 1
   0b83   56                str R6
                            
   0b84   16                inc R6                              ;R6++
   0b85   86                glo R6
   0b86   aa                plo R10                             ;R10 = R6
   0b87   96                ghi R6                              ;R10 is set for return
   0b88   ba                phi R10
                            
   0b89   8f                glo STACK_REG                   ;R4 pinter set to newSize (size+5)
   0b8a   fc 03             adi 3
   0b8c   a4                plo R4
   0b8d   9f                ghi STACK_REG
   0b8e   7c 00             adci 0
   0b90   b4                phi R4
                            
   0b91   85                glo R5                          ;R7 = currentAddress + size + 5
   0b92   f4                add
   0b93   60                irx
   0b94   a7                plo R7
   0b95   95                ghi R5
   0b96   74                adc
   0b97   b7                phi R7                          ;R7 is the newAddress
                            
   0b98   f8 00             ldi HEAP_LASTADDRESS.0
   0b9a   a4                plo R4
   0b9b   f8 21             ldi HEAP_LASTADDRESS.1
   0b9d   b4                phi R4
                            
   0b9e   87                glo R7                          ;lastAddress = R7
   0b9f   54                str R4
   0ba0   14                inc R4
                            
   0ba1   97                ghi R7
   0ba2   54                str R4
                        
   0ba3   8f                glo STACK_REG                   ;R4 pinter set to newSize
   0ba4   fc 03             adi 3
   0ba6   a4                plo R4
   0ba7   9f                ghi STACK_REG
   0ba8   7c 00             adci 0
   0baa   b4                phi R4
                            
   0bab   8f                glo STACK_REG                   ;R4 pinter set to currentSize
   0bac   fc 07             adi 7
   0bae   a6                plo R6
   0baf   9f                ghi STACK_REG
   0bb0   7c 00             adci 0
   0bb2   b6                phi R6
                            
   0bb3   46                lda R6                          ;newSize = currentSize - (size + 5)
   0bb4   f7                sm
   0bb5   54                str R4
   0bb6   60                irx
                            
   0bb7   46                lda R6
   0bb8   77                smb
   0bb9   54                str R4
                            
   0bba   24                dec R4                          ;set back R4 to newSize
                            
   0bbb   87                glo R7                          ;R6 = R7 (newAddress)
   0bbc   a6                plo R6
   0bbd   97                ghi R7
   0bbe   b6                phi R6
                            
   0bbf   44                lda R4                          ;new block size = newSize
   0bc0   56                str R6
   0bc1   16                inc R6
                            
   0bc2   44                lda R4
   0bc3   56                str R6
   0bc4   16                inc R6
                            
   0bc5   85                glo R5                          ;new block previous address = currentAddress
   0bc6   56                str R6
   0bc7   16                inc R6
                            
   0bc8   95                ghi R5
   0bc9   56                str R6
   0bca   16                inc R6
                            
   0bcb   f8 00             ldi 0                           ;new block used = 0
   0bcd   56                str R6
   0bce   16                inc R6
                            
   0bcf   24                dec R4
   0bd0   24                dec R4
                            
   0bd1   86                glo R6                          ;R6 = R6 + newSize
   0bd2   f4                add
   0bd3   60                irx
   0bd4   a6                plo R6
   0bd5   96                ghi R6
   0bd6   74                adc
   0bd7   b6                phi R6
                            
   0bd8   16                inc R6                          ;R6 += 2
   0bd9   16                inc R6
                            
   0bda   86                glo R6
   0bdb   ff 00             smi HEAP_END.0
   0bdd   96                ghi R6
   0bde   7f fc             smbi HEAP_END.1
                            
   0be0   c3 0c 20          lbdf DYN_MEMORY_ALLOC_END
                            
   0be3   87                glo R7                          ;next block previous address = R7
   0be4   56                str R6
   0be5   16                inc R6
                            
   0be6   97                ghi R7
   0be7   56                str R6
                            
   0be8   c0 0c 20          lbr DYN_MEMORY_ALLOC_END
                            
   0beb                 DYN_MEMORY_ALLOC_NEXTADDRESS
   0beb   8f                glo STACK_REG               ;set R4 pointer to currentSize
   0bec   fc 07             adi 7
   0bee   a4                plo R4
   0bef   9f                ghi STACK_REG
   0bf0   7c 00             adci 0
   0bf2   b4                phi R4
                            
   0bf3   85                glo R5
   0bf4   f4                add
   0bf5   60                irx
   0bf6   a5                plo R5
   0bf7   95                ghi R5
   0bf8   74                adc
   0bf9   b5                phi R5                          ;currentAddress += size
                            
   0bfa   85                glo R5
   0bfb   fc 05             adi 5
   0bfd   a5                plo R5
   0bfe   95                ghi R5
   0bff   7c 00             adci 0
   0c01   b5                phi R5                          ;currentAddress += 5
                            
   0c02   c0 0b 13          lbr DYN_MEMORY_ALLOC_MAINLOOP
                            
   0c05                 DYN_MEMORY_ALLOC_NEXTPASS
   0c05   f8 10             ldi HEAP_START.0
   0c07   a5                plo R5
   0c08   f8 21             ldi HEAP_START.1
   0c0a   b5                phi R5
                            
   0c0b   8f                glo STACK_REG                       ;set R4 pointer to endAddress
   0c0c   a4                plo R4
   0c0d   9f                ghi STACK_REG
   0c0e   b4                phi R4
   0c0f   14                inc R4
                            
   0c10   f8 00             ldi HEAP_LASTADDRESS.0
   0c12   a6                plo R6
   0c13   f8 21             ldi HEAP_LASTADDRESS.1
   0c15   b6                phi R6
                            
   0c16   46                lda R6
   0c17   54                str R4
   0c18   14                inc R4
                            
   0c19   46                lda R6
   0c1a   54                str R4
                        
   0c1b   28                dec R8
   0c1c   88                glo R8
   0c1d   ca 0b 13          lbnz DYN_MEMORY_ALLOC_MAINLOOP
                            
   0c20                 DYN_MEMORY_ALLOC_END
   0c20   8f                glo STACK_REG
   0c21   fc 08             adi 8
   0c23   af                plo STACK_REG
   0c24   9f                ghi STACK_REG
   0c25   7c 00             adci 0
   0c27   bf                phi STACK_REG
                            
   0c28   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-DYN MEMORY FREE------------------------------
                        ;-R4-address-----------------------------------
                        ;-Local registers------------------------------
                        ;-R5-R6----------------------------------------
   0c29                 DYN_MEMORY_FREE
   0c29   ef                sex STACK_REG
                            
   0c2a   95                ghi R5      ;saving local registers
   0c2b   73                stxd
   0c2c   85                glo R5
   0c2d   73                stxd
                            
   0c2e   96                ghi R6
   0c2f   73                stxd
   0c30   86                glo R6
   0c31   73                stxd
                            
   0c32   f8 00             ldi 0
   0c34   73                stxd
   0c35   73                stxd
   0c36   73                stxd
   0c37   73                stxd        ;+5 size
                            
   0c38   73                stxd
   0c39   73                stxd
   0c3a   73                stxd
   0c3b   73                stxd        ;+1 nextSize
                            
   0c3c   24                dec R4      ;R4-- (address--)
   0c3d   54                str R4      ;set current block to free
                            
   0c3e   24                dec R4
   0c3f   24                dec R4
                            
   0c40   44                lda R4      ;R6 = previous block address
   0c41   a6                plo R6
   0c42   44                lda R4
   0c43   b6                phi R6
                            
   0c44   24                dec R4      ;set R4 to the beginning of the current block
   0c45   24                dec R4
   0c46   24                dec R4
   0c47   24                dec R4
                            
   0c48   86                glo R6
   0c49   ca 0c 52          lbnz DYN_MEMORY_FREE_NEXTCHECK
   0c4c   96                ghi R6
   0c4d   ca 0c 52          lbnz DYN_MEMORY_FREE_NEXTCHECK      ;if previousAddress != 0
                            
   0c50   30 61             br DYN_MEMORY_FREE_MERGE
                        
   0c52                 DYN_MEMORY_FREE_NEXTCHECK
   0c52   86                glo R6                              ;set R5 pointer to previous block used
   0c53   fc 04             adi 4
   0c55   a5                plo R5
   0c56   96                ghi R6
   0c57   7c 00             adci 0
   0c59   b5                phi R5
                            
   0c5a   05                ldn R5
   0c5b   3a 61             bnz DYN_MEMORY_FREE_MERGE           ;if used != 0
                            
   0c5d   86                glo R6                              ;set R4 to previous block
   0c5e   a4                plo R4
   0c5f   96                ghi R6
   0c60   b4                phi R4
                            
   0c61                 DYN_MEMORY_FREE_MERGE
   0c61   8f                glo STACK_REG                       ;set R5 pointer to size
   0c62   fc 05             adi 5
   0c64   a5                plo R5
   0c65   9f                ghi STACK_REG
   0c66   7c 00             adci 0
   0c68   b5                phi R5
                            
   0c69   e5                sex R5                              ;set R5 to pointer
                            
   0c6a   44                lda R4                              ;load block size to size
   0c6b   55                str R5
   0c6c   15                inc R5
                            
   0c6d   44                lda R4
   0c6e   55                str R5
                            
   0c6f   24                dec R4
   0c70   24                dec R4                              ;set back R4 and R5
   0c71   25                dec R5
                            
   0c72   84                glo R4                              ;R6 (nextAddress) = address + 5 
   0c73   fc 05             adi 5
   0c75   a6                plo R6
   0c76   94                ghi R4
   0c77   7c 00             adci 0
   0c79   b6                phi R6
                            
   0c7a   86                glo R6                              ;R6 += size
   0c7b   f4                add
   0c7c   60                irx
   0c7d   a6                plo R6
   0c7e   96                ghi R6
   0c7f   74                adc
   0c80   b6                phi R6
                            
   0c81                 DYN_MEMORY_FREE_MERGELOOP
   0c81   86                glo R6
   0c82   ff 00             smi HEAP_END.0
   0c84   96                ghi R6
   0c85   7f fc             smbi HEAP_END.1
                            
   0c87   c3 0c c0          lbdf DYN_MEMORY_FREE_END            ;if nextAddress - HEAP_END >= 0
                            
   0c8a   86                glo R6                              ;set R5 to nextAddress used
   0c8b   fc 04             adi 4
   0c8d   a5                plo R5
   0c8e   96                ghi R6
   0c8f   7c 00             adci 0
   0c91   b5                phi R5
                            
   0c92   05                ldn R5
   0c93   ca 0c b9          lbnz DYN_MEMORY_FREE_SETPREVIOUS    ;if used != 0
                            
   0c96   8f                glo STACK_REG                       ;set R5 pointer to nextSize
   0c97   a5                plo R5
   0c98   9f                ghi STACK_REG
   0c99   b5                phi R5
   0c9a   15                inc R5
                            
   0c9b   46                lda R6                              ;load size + 5 to nextSize 
   0c9c   fc 05             adi 5
   0c9e   55                str R5
   0c9f   60                irx
                            
   0ca0   06                ldn R6
   0ca1   7c 00             adci 0
   0ca3   55                str R5
                            
   0ca4   25                dec R5                              ;set back R5 and R6
   0ca5   26                dec R6
                            
   0ca6   04                ldn R4                              ;current block size += nextSize
   0ca7   f4                add
   0ca8   54                str R4
   0ca9   60                irx
   0caa   14                inc R4
                            
   0cab   04                ldn R4
   0cac   74                adc
   0cad   54                str R4
                            
   0cae   25                dec R5                              ;set back R4 and R5
   0caf   24                dec R4
                            
   0cb0   86                glo R6                              ;R6 (nextAddress) += nextSize
   0cb1   f4                add
   0cb2   a6                plo R6
   0cb3   60                irx
   0cb4   96                ghi R6
   0cb5   74                adc
   0cb6   b6                phi R6
                            
   0cb7   30 81             br DYN_MEMORY_FREE_MERGELOOP
                        
   0cb9                 DYN_MEMORY_FREE_SETPREVIOUS    
   0cb9   16                inc R6                              ;increment nextAddress to previous address section
   0cba   16                inc R6
                            
   0cbb   84                glo R4                              ;set previous address to R4 value
   0cbc   56                str R6
   0cbd   16                inc R6
   0cbe   94                ghi R4
   0cbf   56                str R6
                        
   0cc0                 DYN_MEMORY_FREE_END
   0cc0   8f                glo STACK_REG
   0cc1   fc 09             adi 9
   0cc3   af                plo STACK_REG
   0cc4   9f                ghi STACK_REG
   0cc5   7c 00             adci 0
   0cc7   bf                phi STACK_REG
                            
   0cc8   ef                sex STACK_REG
                            
   0cc9   f8 00             ldi HEAP_LASTADDRESS.0
   0ccb   a5                plo R5
   0ccc   f8 21             ldi HEAP_LASTADDRESS.1
   0cce   b5                phi R5
                            
   0ccf   84                glo R4
   0cd0   55                str R5
   0cd1   15                inc R5
                            
   0cd2   94                ghi R4
   0cd3   55                str R5
                            
   0cd4   72                ldxa            ;restoring local registers
   0cd5   a6                plo R6
   0cd6   72                ldxa
   0cd7   b6                phi R6
                            
   0cd8   72                ldxa
   0cd9   a5                plo R5
   0cda   f0                ldx
   0cdb   b5                phi R5
                            
   0cdc   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-HEXVIEWER------------------------------------
                        ;-R4-Start address-----------------------------
                        ;-R5-Count-------------------------------------
   0cdd                 HEX_BASE_SRT
   0cdd   0d 0a 42 61       db "\r\nBase address: 0x",0
   0ce1   73 65 20 61   
   0ce5   64 64 72 65   
   0ce9   73 73 3a 20   
   0ced   30 78 00      
   0cf0                 HEX_HEADER_STR
   0cf0   0d 0a 0d 0a       db "\r\n\r\nOffset  00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F  String\r\n"
   0cf4   4f 66 66 73   
   0cf8   65 74 20 20   
   0cfc   30 30 20 30   
   0d00   31 20 30 32   
   0d04   20 30 33 20   
   0d08   30 34 20 30   
   0d0c   35 20 30 36   
   0d10   20 30 37 20   
   0d14   30 38 20 30   
   0d18   39 20 30 41   
   0d1c   20 30 42 20   
   0d20   30 43 20 30   
   0d24   44 20 30 45   
   0d28   20 30 46 20   
   0d2c   20 53 74 72   
   0d30   69 6e 67 0d   
   0d34   0a            
   0d35   2d 2d 2d 2d       db         "-------------------------------------------------------------------------\r\n",0
   0d39   2d 2d 2d 2d   
   0d3d   2d 2d 2d 2d   
   0d41   2d 2d 2d 2d   
   0d45   2d 2d 2d 2d   
   0d49   2d 2d 2d 2d   
   0d4d   2d 2d 2d 2d   
   0d51   2d 2d 2d 2d   
   0d55   2d 2d 2d 2d   
   0d59   2d 2d 2d 2d   
   0d5d   2d 2d 2d 2d   
   0d61   2d 2d 2d 2d   
   0d65   2d 2d 2d 2d   
   0d69   2d 2d 2d 2d   
   0d6d   2d 2d 2d 2d   
   0d71   2d 2d 2d 2d   
   0d75   2d 2d 2d 2d   
   0d79   2d 2d 2d 2d   
   0d7d   2d 0d 0a 00   
                        ;              "0000:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................"
   0d81                 HEX_LINECNT_SEPARATOR
   0d81   3a 20 20 20       db ":   ",0
   0d85   00            
                            
   0d86                 HEXVIEWER
   0d86   ef                sex STACK_REG
                            
   0d87   f8 00             ldi 0
   0d89   73                stxd
   0d8a   73                stxd
   0d8b   94                ghi R4
   0d8c   73                stxd
   0d8d   84                glo R4
   0d8e   73                stxd    ;+17 current address
                            
   0d8f   f8 00             ldi 0
   0d91   73                stxd
   0d92   73                stxd
   0d93   94                ghi R4
   0d94   73                stxd
   0d95   84                glo R4
   0d96   73                stxd    ;+13 start address
                            
   0d97   f8 00             ldi 0
   0d99   73                stxd
   0d9a   73                stxd
   0d9b   95                ghi R5
   0d9c   73                stxd
   0d9d   85                glo R5
   0d9e   73                stxd    ;+9 last address
                            
   0d9f   f8 00             ldi 0
   0da1   73                stxd
   0da2   73                stxd
   0da3   73                stxd
   0da4   73                stxd    ;+5 line counter
                            
   0da5   73                stxd
   0da6   73                stxd
   0da7   73                stxd
   0da8   73                stxd    ;+1 temp for hex digits
                            
   0da9   8f                glo STACK_REG
   0daa   fc 0d             adi 13
   0dac   a4                plo R4
   0dad   9f                ghi STACK_REG
   0dae   7c 00             adci 0
   0db0   b4                phi R4
                            
   0db1   8f                glo STACK_REG
   0db2   fc 09             adi 9
   0db4   a6                plo R6
   0db5   9f                ghi STACK_REG
   0db6   7c 00             adci 0
   0db8   b6                phi R6
                            
   0db9   e4                sex R4
                            
   0dba   85                glo R5      ;adding R5 value to start address and store it to last address
   0dbb   f4                add
   0dbc   56                str R6
   0dbd   60                irx
   0dbe   16                inc R6
   0dbf   95                ghi R5
   0dc0   74                adc
   0dc1   56                str R6
   0dc2   60                irx
   0dc3   16                inc R6
   0dc4   f8 00             ldi 0
   0dc6   74                adc
   0dc7   56                str R6
                            
   0dc8   f8 dd             ldi HEX_BASE_SRT.0     ;prepare to print base address
   0dca   a6                plo R6
   0dcb   f8 0c             ldi HEX_BASE_SRT.1
   0dcd   b6                phi R6
                        	
   0dce   f8 52             ldi PRINT.0         ;prepare to call PRINT
   0dd0   ad                plo CALL_REG
   0dd1   f8 01             ldi PRINT.1
   0dd3   bd                phi CALL_REG
                            
   0dd4   f8 00             ldi FCALL.0
   0dd6   ae                plo FCALL_REG
   0dd7   de                sep FCALL_REG
                            
   0dd8   8f                glo STACK_REG       ;prepare to print the address in hex
   0dd9   fc 0d             adi 13
   0ddb   a4                plo R4
   0ddc   9f                ghi STACK_REG
   0ddd   7c 00             adci 0
   0ddf   b4                phi R4
                            
   0de0   f8 04             ldi 4               ;with 4 digits
   0de2   a5                plo R5
                            
   0de3   f8 22             ldi PRINT_HEX.0     ;prepare to call PRINT_HEX
   0de5   ad                plo CALL_REG
   0de6   f8 04             ldi PRINT_HEX.1
   0de8   bd                phi CALL_REG
                            
   0de9   f8 00             ldi FCALL.0
   0deb   ae                plo FCALL_REG
   0dec   de                sep FCALL_REG
                            
   0ded   f8 f0             ldi HEX_HEADER_STR.0     ;prepare to print the header
   0def   a6                plo R6
   0df0   f8 0c             ldi HEX_HEADER_STR.1
   0df2   b6                phi R6
                        	
   0df3   f8 52             ldi PRINT.0         ;prepare to call PRINT
   0df5   ad                plo CALL_REG
   0df6   f8 01             ldi PRINT.1
   0df8   bd                phi CALL_REG
                            
   0df9   f8 00             ldi FCALL.0
   0dfb   ae                plo FCALL_REG
   0dfc   de                sep FCALL_REG
                        
   0dfd                 HEXVIEWER_MAINLOOP
   0dfd   8f                glo STACK_REG       ;prepare to print the first address in hex
   0dfe   fc 05             adi 5
   0e00   a4                plo R4
   0e01   9f                ghi STACK_REG
   0e02   7c 00             adci 0
   0e04   b4                phi R4
                            
   0e05   f8 04             ldi 4               ;with 4 digits
   0e07   a5                plo R5
                            
   0e08   f8 22             ldi PRINT_HEX.0     ;prepare to call PRINT_HEX
   0e0a   ad                plo CALL_REG
   0e0b   f8 04             ldi PRINT_HEX.1
   0e0d   bd                phi CALL_REG
                            
   0e0e   f8 00             ldi FCALL.0
   0e10   ae                plo FCALL_REG
   0e11   de                sep FCALL_REG
                            
   0e12   f8 81             ldi HEX_LINECNT_SEPARATOR.0     ;prepare to print address separator
   0e14   a6                plo R6
   0e15   f8 0d             ldi HEX_LINECNT_SEPARATOR.1
   0e17   b6                phi R6
                        	
   0e18   f8 52             ldi PRINT.0         ;prepare to call PRINT
   0e1a   ad                plo CALL_REG
   0e1b   f8 01             ldi PRINT.1
   0e1d   bd                phi CALL_REG
                            
   0e1e   f8 00             ldi FCALL.0
   0e20   ae                plo FCALL_REG
   0e21   de                sep FCALL_REG
                            
   0e22   f8 10             ldi 16      ;set R8 low to 16 for counting the bytes
   0e24   a8                plo R8
                           
   0e25                 HEXVIEWER_PRINT_HEX_LOOP
   0e25   8f                glo STACK_REG       ;set R4 pointer to current address
   0e26   fc 11             adi 17
   0e28   a4                plo R4
   0e29   9f                ghi STACK_REG
   0e2a   7c 00             adci 0
   0e2c   b4                phi R4
                            
   0e2d   8f                glo STACK_REG       ;set R5 pointer to last address
   0e2e   fc 09             adi 9
   0e30   a5                plo R5
   0e31   9f                ghi STACK_REG
   0e32   7c 00             adci 0
   0e34   b5                phi R5
                        
   0e35   e4                sex R4          ;check if current address is >= last address
                            
   0e36   45                lda R5
   0e37   f5                sd
   0e38   60                irx
                            
   0e39   45                lda R5
   0e3a   75                sdb
   0e3b   60                irx
                            
   0e3c   45                lda R5
   0e3d   75                sdb
   0e3e   60                irx
                            
   0e3f   05                ldn R5
   0e40   75                sdb
                            
   0e41   c3 0e 69          lbdf HEXVIEWER_PRINT_HEX_SPACES   ;if current address >= last address then 
                        
   0e44   8f                glo STACK_REG       ;set R4 pointer to current address
   0e45   fc 11             adi 17
   0e47   a4                plo R4
   0e48   9f                ghi STACK_REG
   0e49   7c 00             adci 0
   0e4b   b4                phi R4
                            
   0e4c   44                lda R4              ;get current address and load it in R5
   0e4d   a5                plo R5
   0e4e   44                lda R4
   0e4f   b5                phi R5
                            
   0e50   05                ldn R5              ;get data from R5 address
   0e51   a5                plo R5              ;store data in R5 low
                            
   0e52   8f                glo STACK_REG       ;set R4 pointer to temp
   0e53   a4                plo R4
   0e54   9f                ghi STACK_REG
   0e55   b4                phi R4
   0e56   14                inc R4
                            
   0e57   85                glo R5              ;get data from R5 low
   0e58   54                str R4              ;store data to temp
                           
   0e59   f8 02             ldi 2
   0e5b   a5                plo R5              ;set R5 low to 2 digits
                            
   0e5c   f8 22             ldi PRINT_HEX.0     ;prepare to call PRINT_HEX
   0e5e   ad                plo CALL_REG
   0e5f   f8 04             ldi PRINT_HEX.1
   0e61   bd                phi CALL_REG
                            
   0e62   f8 00             ldi FCALL.0
   0e64   ae                plo FCALL_REG
   0e65   de                sep FCALL_REG
                            
   0e66   c0 0e 79          lbr HEXVIEWER_NEXT_HEX
                            
   0e69                 HEXVIEWER_PRINT_HEX_SPACES
   0e69   f8 83             ldi HEX_LINECNT_SEPARATOR+2.0     ;prepare to print two space
   0e6b   a6                plo R6
   0e6c   f8 0d             ldi HEX_LINECNT_SEPARATOR+2.1
   0e6e   b6                phi R6
                        	
   0e6f   f8 52             ldi PRINT.0         ;prepare to call PRINT
   0e71   ad                plo CALL_REG
   0e72   f8 01             ldi PRINT.1
   0e74   bd                phi CALL_REG
                            
   0e75   f8 00             ldi FCALL.0
   0e77   ae                plo FCALL_REG
   0e78   de                sep FCALL_REG
                        
   0e79                 HEXVIEWER_NEXT_HEX
   0e79   f8 84             ldi HEX_LINECNT_SEPARATOR+3.0     ;prepare to print a space
   0e7b   a6                plo R6
   0e7c   f8 0d             ldi HEX_LINECNT_SEPARATOR+3.1
   0e7e   b6                phi R6
                        	
   0e7f   f8 52             ldi PRINT.0         ;prepare to call PRINT
   0e81   ad                plo CALL_REG
   0e82   f8 01             ldi PRINT.1
   0e84   bd                phi CALL_REG
                            
   0e85   f8 00             ldi FCALL.0
   0e87   ae                plo FCALL_REG
   0e88   de                sep FCALL_REG
                            
   0e89   8f                glo STACK_REG       ;set R4 pointer to current address
   0e8a   fc 11             adi 17
   0e8c   a4                plo R4
   0e8d   9f                ghi STACK_REG
   0e8e   7c 00             adci 0
   0e90   b4                phi R4
                            
   0e91   e4                sex R4
   0e92   f8 01             ldi 1
   0e94   f4                add
   0e95   54                str R4
   0e96   60                irx
                            
   0e97   f8 00             ldi 0
   0e99   74                adc
   0e9a   54                str R4
   0e9b   60                irx
                            
   0e9c   f8 00             ldi 0
   0e9e   74                adc
   0e9f   54                str R4
   0ea0   60                irx
                            
   0ea1   f8 00             ldi 0
   0ea3   74                adc
   0ea4   54                str R4
                            
   0ea5   28                dec R8
   0ea6   88                glo R8
   0ea7   ca 0e 25          lbnz HEXVIEWER_PRINT_HEX_LOOP
                            
   0eaa   f8 84             ldi HEX_LINECNT_SEPARATOR+3.0     ;prepare to print a space
   0eac   a6                plo R6
   0ead   f8 0d             ldi HEX_LINECNT_SEPARATOR+3.1
   0eaf   b6                phi R6
                        	
   0eb0   f8 52             ldi PRINT.0         ;prepare to call PRINT
   0eb2   ad                plo CALL_REG
   0eb3   f8 01             ldi PRINT.1
   0eb5   bd                phi CALL_REG
                            
   0eb6   f8 00             ldi FCALL.0
   0eb8   ae                plo FCALL_REG
   0eb9   de                sep FCALL_REG
                            
   0eba   8f                glo STACK_REG       ;set R4 pointer to current address
   0ebb   fc 11             adi 17
   0ebd   a4                plo R4
   0ebe   9f                ghi STACK_REG
   0ebf   7c 00             adci 0
   0ec1   b4                phi R4
                            
   0ec2   8f                glo STACK_REG       ;set R5 pointer to start address
   0ec3   fc 0d             adi 13
   0ec5   a5                plo R5
   0ec6   9f                ghi STACK_REG
   0ec7   7c 00             adci 0
   0ec9   b5                phi R5
                            
   0eca   e5                sex R5
                            
   0ecb   72                ldxa
   0ecc   54                str R4
   0ecd   14                inc R4
                            
   0ece   72                ldxa
   0ecf   54                str R4
   0ed0   14                inc R4
                            
   0ed1   72                ldxa
   0ed2   54                str R4
   0ed3   14                inc R4
                            
   0ed4   72                ldxa
   0ed5   54                str R4
                            
   0ed6   f8 10             ldi 16      ;set R8 low to 16 for counting the bytes
   0ed8   a8                plo R8
                        
   0ed9                 HEXVIEWER_PRINT_STR_LOOP
   0ed9   8f                glo STACK_REG       ;set R4 pointer to current address
   0eda   fc 11             adi 17
   0edc   a4                plo R4
   0edd   9f                ghi STACK_REG
   0ede   7c 00             adci 0
   0ee0   b4                phi R4
                            
   0ee1   8f                glo STACK_REG       ;set R5 pointer to last address
   0ee2   fc 09             adi 9
   0ee4   a5                plo R5
   0ee5   9f                ghi STACK_REG
   0ee6   7c 00             adci 0
   0ee8   b5                phi R5
                        
   0ee9   e4                sex R4          ;check if current address is <= last address
                            
   0eea   45                lda R5
   0eeb   f5                sd
   0eec   60                irx
                            
   0eed   45                lda R5
   0eee   75                sdb
   0eef   60                irx
                            
   0ef0   45                lda R5
   0ef1   75                sdb
   0ef2   60                irx
                            
   0ef3   05                ldn R5
   0ef4   75                sdb
                            
   0ef5   c3 0f 2b          lbdf HEXVIEWER_PRINT_STR_SPACE   ;if current address >= last address then 
                            
   0ef8   8f                glo STACK_REG       ;set R4 pointer to current address
   0ef9   fc 11             adi 17
   0efb   a4                plo R4
   0efc   9f                ghi STACK_REG
   0efd   7c 00             adci 0
   0eff   b4                phi R4
                            
   0f00   44                lda R4              ;get current address and load it in R5
   0f01   a5                plo R5
   0f02   44                lda R4
   0f03   b5                phi R5
                            
   0f04   05                ldn R5              ;get data from R5 address
   0f05   a5                plo R5              ;store data in R5 low
                            
   0f06   ff 20             smi 32
   0f08   3b 1c             bm HEXVIEWER_PRINT_STR_DOT
   0f0a   ff 5f             smi 95
   0f0c   33 1c             bpz HEXVIEWER_PRINT_STR_DOT
                            
   0f0e   85                glo R5
   0f0f   b4                phi R4
                            
   0f10   f8 13             ldi SERIAL_SEND_START.0         ;prepare to call SERIAL_SEND_START to send one char
   0f12   ad                plo CALL_REG
   0f13   f8 01             ldi SERIAL_SEND_START.1
   0f15   bd                phi CALL_REG
                            
   0f16   f8 00             ldi FCALL.0
   0f18   ae                plo FCALL_REG
   0f19   de                sep FCALL_REG
                            
   0f1a   30 38             br HEXVIEWER_NEXT_STR
                            
   0f1c                 HEXVIEWER_PRINT_STR_DOT
   0f1c   f8 2e             ldi 46
   0f1e   b4                phi R4
                            
   0f1f   f8 13             ldi SERIAL_SEND_START.0         ;prepare to call SERIAL_SEND_START to send one char
   0f21   ad                plo CALL_REG
   0f22   f8 01             ldi SERIAL_SEND_START.1
   0f24   bd                phi CALL_REG
                            
   0f25   f8 00             ldi FCALL.0
   0f27   ae                plo FCALL_REG
   0f28   de                sep FCALL_REG
                            
   0f29   30 38             br HEXVIEWER_NEXT_STR
                        
   0f2b                 HEXVIEWER_PRINT_STR_SPACE
   0f2b   f8 20             ldi 32
   0f2d   b4                phi R4
                            
   0f2e   f8 13             ldi SERIAL_SEND_START.0         ;prepare to call SERIAL_SEND_START to send one char
   0f30   ad                plo CALL_REG
   0f31   f8 01             ldi SERIAL_SEND_START.1
   0f33   bd                phi CALL_REG
                            
   0f34   f8 00             ldi FCALL.0
   0f36   ae                plo FCALL_REG
   0f37   de                sep FCALL_REG
                            
   0f38                 HEXVIEWER_NEXT_STR
   0f38   8f                glo STACK_REG       ;set R4 pointer to current address
   0f39   fc 11             adi 17
   0f3b   a4                plo R4
   0f3c   9f                ghi STACK_REG
   0f3d   7c 00             adci 0
   0f3f   b4                phi R4
                            
   0f40   e4                sex R4
   0f41   f8 01             ldi 1
   0f43   f4                add
   0f44   54                str R4
   0f45   60                irx
                            
   0f46   f8 00             ldi 0
   0f48   74                adc
   0f49   54                str R4
   0f4a   60                irx
                            
   0f4b   f8 00             ldi 0
   0f4d   74                adc
   0f4e   54                str R4
   0f4f   60                irx
                            
   0f50   f8 00             ldi 0
   0f52   74                adc
   0f53   54                str R4
                            
   0f54   28                dec R8
   0f55   88                glo R8
   0f56   ca 0e d9          lbnz HEXVIEWER_PRINT_STR_LOOP
                            
   0f59   f8 5b             ldi NEW_LINE.0     ;prepare to print a space
   0f5b   a6                plo R6
   0f5c   f8 13             ldi NEW_LINE.1
   0f5e   b6                phi R6
                        	
   0f5f   f8 52             ldi PRINT.0         ;prepare to call PRINT
   0f61   ad                plo CALL_REG
   0f62   f8 01             ldi PRINT.1
   0f64   bd                phi CALL_REG
                            
   0f65   f8 00             ldi FCALL.0
   0f67   ae                plo FCALL_REG
   0f68   de                sep FCALL_REG
                            
   0f69   8f                glo STACK_REG       ;set R4 pointer to current address
   0f6a   fc 11             adi 17
   0f6c   a4                plo R4
   0f6d   9f                ghi STACK_REG
   0f6e   7c 00             adci 0
   0f70   b4                phi R4
                            
   0f71   8f                glo STACK_REG       ;set R5 pointer to last address
   0f72   fc 09             adi 9
   0f74   a5                plo R5
   0f75   9f                ghi STACK_REG
   0f76   7c 00             adci 0
   0f78   b5                phi R5
                        
   0f79   e4                sex R4          ;check if current address is >= last address
                            
   0f7a   45                lda R5
   0f7b   f5                sd
   0f7c   60                irx
                            
   0f7d   45                lda R5
   0f7e   75                sdb
   0f7f   60                irx
                            
   0f80   45                lda R5
   0f81   75                sdb
   0f82   60                irx
                            
   0f83   05                ldn R5
   0f84   75                sdb
                            
   0f85   c3 0f c3          lbdf HEXVIEWER_END
                            
   0f88   8f                glo STACK_REG       ;set R4 pointer to line counter
   0f89   fc 05             adi 5
   0f8b   a4                plo R4
   0f8c   9f                ghi STACK_REG
   0f8d   7c 00             adci 0
   0f8f   b4                phi R4
                            
   0f90   e4                sex R4
                            
   0f91   f8 10             ldi 16
   0f93   f4                add
   0f94   54                str R4
   0f95   60                irx
                            
   0f96   f8 00             ldi 0
   0f98   74                adc
   0f99   54                str R4
   0f9a   60                irx
                            
   0f9b   f8 00             ldi 0
   0f9d   74                adc
   0f9e   54                str R4
   0f9f   60                irx
                            
   0fa0   f8 00             ldi 0
   0fa2   74                adc
   0fa3   54                str R4
                            
   0fa4   8f                glo STACK_REG       ;set R4 pointer to current address
   0fa5   fc 11             adi 17
   0fa7   a4                plo R4
   0fa8   9f                ghi STACK_REG
   0fa9   7c 00             adci 0
   0fab   b4                phi R4
                            
   0fac   8f                glo STACK_REG       ;set R5 pointer to start address
   0fad   fc 0d             adi 13
   0faf   a5                plo R5
   0fb0   9f                ghi STACK_REG
   0fb1   7c 00             adci 0
   0fb3   b5                phi R5
                            
   0fb4   e4                sex R4
                            
   0fb5   72                ldxa
   0fb6   55                str R5
   0fb7   15                inc R5
                            
   0fb8   72                ldxa
   0fb9   55                str R5
   0fba   15                inc R5
                            
   0fbb   72                ldxa
   0fbc   55                str R5
   0fbd   15                inc R5
                            
   0fbe   72                ldxa
   0fbf   55                str R5
                            
   0fc0   c0 0d fd          lbr HEXVIEWER_MAINLOOP
                        
   0fc3                 HEXVIEWER_END
   0fc3   8f                glo STACK_REG
   0fc4   fc 14             adi 20
   0fc6   af                plo STACK_REG
   0fc7   9f                ghi STACK_REG
   0fc8   7c 00             adci 0
   0fca   bf                phi STACK_REG
                            
   0fcb   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-DYN MEMORY ALLOC CALLER----------------------
   0fcc                 DYN_MEMORY_ALLOC_CALLER_STR1
   0fcc   20 62 79 74       db " bytes of memory allocated at memory address ",0," (0x",0,")\r\n",0
   0fd0   65 73 20 6f   
   0fd4   66 20 6d 65   
   0fd8   6d 6f 72 79   
   0fdc   20 61 6c 6c   
   0fe0   6f 63 61 74   
   0fe4   65 64 20 61   
   0fe8   74 20 6d 65   
   0fec   6d 6f 72 79   
   0ff0   20 61 64 64   
   0ff4   72 65 73 73   
   0ff8   20 00 20 28   
   0ffc   30 78 00 29   
   1000   0d 0a 00      
   1003                 DYN_MEMORY_ALLOC_CALLER_STR2
   1003   4f 75 74 20       db "Out of memory!\r\n",0
   1007   6f 66 20 6d   
   100b   65 6d 6f 72   
   100f   79 21 0d 0a   
   1013   00            
                        
   1014                 DYN_MEMORY_ALLOC_CALLER
   1014   ef                sex STACK_REG
                            
   1015   f8 00             ldi 0
   1017   73                stxd
   1018   73                stxd
   1019   73                stxd
   101a   73                stxd                        ;+5 address
                            
   101b   73                stxd
   101c   73                stxd
   101d   73                stxd
   101e   73                stxd                        ;+1 size
                            
   101f   8f                glo STACK_REG               ;set R5 pointer to size
   1020   a5                plo R5
   1021   9f                ghi STACK_REG
   1022   b5                phi R5
   1023   15                inc R5
                            
   1024   f8 55             ldi EXPRESSION.0            ;evaluate expression
   1026   ad                plo CALL_REG
   1027   f8 08             ldi EXPRESSION.1
   1029   bd                phi CALL_REG
                            
   102a   f8 00             ldi FCALL.0
   102c   ae                plo FCALL_REG
   102d   de                sep FCALL_REG
                            
   102e   8f                glo STACK_REG               ;set R5 pointer to size
   102f   a5                plo R5
   1030   9f                ghi STACK_REG
   1031   b5                phi R5
   1032   15                inc R5
                            
   1033   45                lda R5                      ;R4 = size
   1034   a4                plo R4
   1035   45                lda R5
   1036   b4                phi R4
                            
   1037   f8 e7             ldi DYN_MEMORY_ALLOC.0      ;call memory allocation
   1039   ad                plo CALL_REG
   103a   f8 0a             ldi DYN_MEMORY_ALLOC.1
   103c   bd                phi CALL_REG
                            
   103d   f8 00             ldi FCALL.0
   103f   ae                plo FCALL_REG
   1040   de                sep FCALL_REG
                            
   1041   8a                glo R10                                 ;check if R10 has a value, if it is 0 then it failed
   1042   3a 5a             bnz DYN_MEMORY_ALLOC_CALLER_SUCCESS
   1044   9a                ghi R10
   1045   3a 5a             bnz DYN_MEMORY_ALLOC_CALLER_SUCCESS
                            
   1047                 DYN_MEMORY_ALLOC_CALLER_FAIL
   1047   f8 03             ldi DYN_MEMORY_ALLOC_CALLER_STR2.0      ;print out of memory
   1049   a6                plo R6
   104a   f8 10             ldi DYN_MEMORY_ALLOC_CALLER_STR2.1
   104c   b6                phi R6
                            
   104d   f8 52             ldi PRINT.0                             ;prepare to call PRINT
   104f   ad                plo CALL_REG
   1050   f8 01             ldi PRINT.1
   1052   bd                phi CALL_REG
                            
   1053   f8 00             ldi FCALL.0
   1055   ae                plo FCALL_REG
   1056   de                sep FCALL_REG                           ;call PRINT
                        	
   1057   c0 10 c4          lbr DYN_MEMORY_ALLOC_CALLER_END         ;return
                        
   105a                 DYN_MEMORY_ALLOC_CALLER_SUCCESS
   105a   8f                glo STACK_REG                           ;set R5 pointer to address
   105b   fc 05             adi 5
   105d   a4                plo R4
   105e   9f                ghi STACK_REG
   105f   7c 00             adci 0
   1061   b4                phi R4
                            
   1062   8a                glo R10                                 ;copy R10 value to address
   1063   54                str R4
   1064   14                inc R4
                            
   1065   9a                ghi R10
   1066   54                str R4
                            
   1067   8f                glo STACK_REG                           ;set R4 pointor to size
   1068   a4                plo R4
   1069   9f                ghi STACK_REG
   106a   b4                phi R4
   106b   14                inc R4
                            
   106c   f8 ae             ldi PRINT_DEC.0                         ;print size in decimal
   106e   ad                plo CALL_REG
   106f   f8 04             ldi PRINT_DEC.1
   1071   bd                phi CALL_REG
                            
   1072   f8 00             ldi FCALL.0
   1074   ae                plo FCALL_REG
   1075   de                sep FCALL_REG
                            
   1076   f8 cc             ldi DYN_MEMORY_ALLOC_CALLER_STR1.0      ;print the first part of the allocation message
   1078   a6                plo R6
   1079   f8 0f             ldi DYN_MEMORY_ALLOC_CALLER_STR1.1
   107b   b6                phi R6
                            
   107c   f8 52             ldi PRINT.0                             ;prepare to call PRINT
   107e   ad                plo CALL_REG    
   107f   f8 01             ldi PRINT.1
   1081   bd                phi CALL_REG
                            
   1082   f8 00             ldi FCALL.0
   1084   ae                plo FCALL_REG
   1085   de                sep FCALL_REG                           ;call PRINT
                            
   1086   8f                glo STACK_REG                           ;set R4 pointer to address
   1087   fc 05             adi 5
   1089   a4                plo R4
   108a   9f                ghi STACK_REG
   108b   7c 00             adci 0
   108d   b4                phi R4
                            
   108e   f8 ae             ldi PRINT_DEC.0                         ;print address in decimal
   1090   ad                plo CALL_REG
   1091   f8 04             ldi PRINT_DEC.1
   1093   bd                phi CALL_REG
                            
   1094   f8 00             ldi FCALL.0
   1096   ae                plo FCALL_REG
   1097   de                sep FCALL_REG
                            
   1098   f8 52             ldi PRINT.0                             ;print the second part of the allocation message
   109a   ad                plo CALL_REG
   109b   f8 01             ldi PRINT.1
   109d   bd                phi CALL_REG
                            
   109e   f8 00             ldi FCALL.0
   10a0   ae                plo FCALL_REG
   10a1   de                sep FCALL_REG                           ;call PRINT
                            
   10a2   8f                glo STACK_REG                           ;reset R4 pointer to address
   10a3   fc 05             adi 5
   10a5   a4                plo R4
   10a6   9f                ghi STACK_REG
   10a7   7c 00             adci 0
   10a9   b4                phi R4
                            
   10aa   f8 04             ldi 4                                   ;set number of digits to 4
   10ac   a5                plo R5
   10ad   f8 00             ldi 0
   10af   b5                phi R5
                            
   10b0   f8 22             ldi PRINT_HEX.0                         ;print address in hexadecimal
   10b2   ad                plo CALL_REG
   10b3   f8 04             ldi PRINT_HEX.1
   10b5   bd                phi CALL_REG
                            
   10b6   f8 00             ldi FCALL.0
   10b8   ae                plo FCALL_REG
   10b9   de                sep FCALL_REG
                            
   10ba   f8 52             ldi PRINT.0                             ;print the last part of the allocation message
   10bc   ad                plo CALL_REG
   10bd   f8 01             ldi PRINT.1
   10bf   bd                phi CALL_REG
                            
   10c0   f8 00             ldi FCALL.0
   10c2   ae                plo FCALL_REG
   10c3   de                sep FCALL_REG                           ;call PRINT
                        
   10c4                 DYN_MEMORY_ALLOC_CALLER_END
   10c4   8f                glo STACK_REG
   10c5   fc 08             adi 8
   10c7   af                plo STACK_REG
   10c8   9f                ghi STACK_REG
   10c9   7c 00             adci 0
   10cb   bf                phi STACK_REG
                            
   10cc   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-DYN MEMORY FREE CALLER-----------------------
   10cd                 DYN_MEMORY_FREE_CALLER_STR1
   10cd   41 6c 6c 6f       db "Allocated memory has been freed at address ",0," (0x",0,")\r\n",0
   10d1   63 61 74 65   
   10d5   64 20 6d 65   
   10d9   6d 6f 72 79   
   10dd   20 68 61 73   
   10e1   20 62 65 65   
   10e5   6e 20 66 72   
   10e9   65 65 64 20   
   10ed   61 74 20 61   
   10f1   64 64 72 65   
   10f5   73 73 20 00   
   10f9   20 28 30 78   
   10fd   00 29 0d 0a   
   1101   00            
   1102                 DYN_MEMORY_FREE_CALLER_STR2
   1102   4d 65 6d 6f       db "Memory address is out of the heap range!\r\n",0
   1106   72 79 20 61   
   110a   64 64 72 65   
   110e   73 73 20 69   
   1112   73 20 6f 75   
   1116   74 20 6f 66   
   111a   20 74 68 65   
   111e   20 68 65 61   
   1122   70 20 72 61   
   1126   6e 67 65 21   
   112a   0d 0a 00      
                            
   112d                 DYN_MEMORY_FREE_CALLER
   112d   ef                sex STACK_REG
                            
   112e   f8 00             ldi 0
   1130   73                stxd
   1131   73                stxd
   1132   73                stxd
   1133   73                stxd                    ;+1 address
                            
   1134   8f                glo STACK_REG
   1135   a5                plo R5
   1136   9f                ghi STACK_REG
   1137   b5                phi R5
   1138   15                inc R5
                            
   1139   f8 55             ldi EXPRESSION.0
   113b   ad                plo CALL_REG
   113c   f8 08             ldi EXPRESSION.1
   113e   bd                phi CALL_REG
                            
   113f   f8 00             ldi FCALL.0
   1141   ae                plo FCALL_REG
   1142   de                sep FCALL_REG
                            
   1143   8f                glo STACK_REG
   1144   a5                plo R5
   1145   9f                ghi STACK_REG
   1146   b5                phi R5
   1147   15                inc R5
                            
   1148   e5                sex R5
                            
   1149   f8 10             ldi HEAP_START.0
   114b   f5                sd
   114c   60                irx
   114d   f8 21             ldi HEAP_START.1
   114f   75                sdb
                            
   1150   25                dec R5
                            
   1151   3b b4             bm DYN_MEMORY_FREE_CALLER_OUTOFRANGE
                            
   1153   f8 00             ldi HEAP_END.0
   1155   f5                sd
   1156   60                irx
   1157   f8 fc             ldi HEAP_END.1
   1159   75                sdb
                            
   115a   25                dec R5
                            
   115b   33 b4             bpz DYN_MEMORY_FREE_CALLER_OUTOFRANGE
                            
   115d   72                ldxa
   115e   a4                plo R4
   115f   f0                ldx
   1160   b4                phi R4
                            
   1161   25                dec R5
                            
   1162   f8 29             ldi DYN_MEMORY_FREE.0                 ;call free
   1164   ad                plo CALL_REG
   1165   f8 0c             ldi DYN_MEMORY_FREE.1
   1167   bd                phi CALL_REG
                            
   1168   f8 00             ldi FCALL.0
   116a   ae                plo FCALL_REG
   116b   de                sep FCALL_REG
                            
   116c   f8 cd             ldi DYN_MEMORY_FREE_CALLER_STR1.0
   116e   a6                plo R6
   116f   f8 10             ldi DYN_MEMORY_FREE_CALLER_STR1.1
   1171   b6                phi R6
                            
   1172   f8 52             ldi PRINT.0                             ;print the success message 1st part
   1174   ad                plo CALL_REG
   1175   f8 01             ldi PRINT.1
   1177   bd                phi CALL_REG
                            
   1178   f8 00             ldi FCALL.0
   117a   ae                plo FCALL_REG
   117b   de                sep FCALL_REG
                            
   117c   85                glo R5
   117d   a4                plo R4
   117e   95                ghi R5
   117f   b4                phi R4
                            
   1180   f8 ae             ldi PRINT_DEC.0                         ;print address in decimal
   1182   ad                plo CALL_REG
   1183   f8 04             ldi PRINT_DEC.1
   1185   bd                phi CALL_REG
                            
   1186   f8 00             ldi FCALL.0
   1188   ae                plo FCALL_REG
   1189   de                sep FCALL_REG
                            
   118a   f8 52             ldi PRINT.0                             ;print the success message 2nd part
   118c   ad                plo CALL_REG
   118d   f8 01             ldi PRINT.1
   118f   bd                phi CALL_REG
                            
   1190   f8 00             ldi FCALL.0
   1192   ae                plo FCALL_REG
   1193   de                sep FCALL_REG
                            
   1194   85                glo R5
   1195   a4                plo R4
   1196   95                ghi R5
   1197   b4                phi R4
                            
   1198   f8 04             ldi 4
   119a   a5                plo R5
   119b   f8 00             ldi 0
   119d   b5                phi R5
                            
   119e   f8 22             ldi PRINT_HEX.0                         ;print address in hexadecimal
   11a0   ad                plo CALL_REG
   11a1   f8 04             ldi PRINT_HEX.1
   11a3   bd                phi CALL_REG
                            
   11a4   f8 00             ldi FCALL.0
   11a6   ae                plo FCALL_REG
   11a7   de                sep FCALL_REG
                            
   11a8   f8 52             ldi PRINT.0                             ;print the success message 2nd part
   11aa   ad                plo CALL_REG
   11ab   f8 01             ldi PRINT.1
   11ad   bd                phi CALL_REG
                            
   11ae   f8 00             ldi FCALL.0
   11b0   ae                plo FCALL_REG
   11b1   de                sep FCALL_REG
                            
   11b2   30 c4             br DYN_MEMORY_FREE_CALLER_END
                            
   11b4                 DYN_MEMORY_FREE_CALLER_OUTOFRANGE
   11b4   f8 02             ldi DYN_MEMORY_FREE_CALLER_STR2.0
   11b6   a6                plo R6
   11b7   f8 11             ldi DYN_MEMORY_FREE_CALLER_STR2.1
   11b9   b6                phi R6
                            
   11ba   f8 52             ldi PRINT.0                             ;print the out of range message
   11bc   ad                plo CALL_REG
   11bd   f8 01             ldi PRINT.1
   11bf   bd                phi CALL_REG
                            
   11c0   f8 00             ldi FCALL.0
   11c2   ae                plo FCALL_REG
   11c3   de                sep FCALL_REG                           ;call PRINT
                            
   11c4                 DYN_MEMORY_FREE_CALLER_END
   11c4   8f                glo STACK_REG
   11c5   fc 04             adi 4
   11c7   af                plo STACK_REG
   11c8   9f                ghi STACK_REG
   11c9   7c 00             adci 0
   11cb   bf                phi STACK_REG
                            
   11cc   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-HEXVIEW_CALLER-------------------------------
   11cd                 HEXVIEW_CALLER
   11cd   ef                sex STACK_REG
                            
   11ce   f8 00             ldi 0
   11d0   73                stxd
   11d1   73                stxd
   11d2   73                stxd
   11d3   73                stxd    ;+5 first arg
                            
   11d4   73                stxd
   11d5   73                stxd
   11d6   f8 01             ldi 1
   11d8   73                stxd
   11d9   f8 00             ldi 0
   11db   73                stxd    ;+1 second arg
                            
   11dc   8f                glo STACK_REG
   11dd   fc 05             adi 5
   11df   a5                plo R5
   11e0   9f                ghi STACK_REG
   11e1   7c 00             adci 0
   11e3   b5                phi R5
                            
   11e4   f8 55             ldi EXPRESSION.0
   11e6   ad                plo CALL_REG
   11e7   f8 08             ldi EXPRESSION.1
   11e9   bd                phi CALL_REG
                            
   11ea   f8 00             ldi FCALL.0
   11ec   ae                plo FCALL_REG
   11ed   de                sep FCALL_REG
                            
   11ee   44                lda R4
   11ef   fb 2c             xri 44
   11f1   c2 12 08          lbz HEXVIEW_CALLER_NEXTARG
   11f4   24                dec R4
   11f5   44                lda R4
   11f6   c2 12 17          lbz HEXVIEW_CALLER_EXEC
   11f9   24                dec R4
                            
   11fa   04                ldn R4
   11fb   b4                phi R4
                            
   11fc   f8 13             ldi SERIAL_SEND_START.0
   11fe   ad                plo CALL_REG
   11ff   f8 01             ldi SERIAL_SEND_START.1
   1201   bd                phi CALL_REG
                            
   1202   f8 00             ldi FCALL.0
   1204   ae                plo FCALL_REG
   1205   de                sep FCALL_REG
                            
   1206   30 36             br HEXVIEW_CALLER_END
                            
   1208                 HEXVIEW_CALLER_NEXTARG
   1208   8f                glo STACK_REG
   1209   a5                plo R5
   120a   9f                ghi STACK_REG
   120b   b5                phi R5
   120c   15                inc R5
                            
   120d   f8 55             ldi EXPRESSION.0
   120f   ad                plo CALL_REG
   1210   f8 08             ldi EXPRESSION.1
   1212   bd                phi CALL_REG
                            
   1213   f8 00             ldi FCALL.0
   1215   ae                plo FCALL_REG
   1216   de                sep FCALL_REG
                            
   1217                 HEXVIEW_CALLER_EXEC
   1217   8f                glo STACK_REG
   1218   fc 05             adi 5
   121a   a5                plo R5
   121b   9f                ghi STACK_REG
   121c   7c 00             adci 0
   121e   b5                phi R5
                            
   121f   45                lda R5
   1220   a4                plo R4
   1221   45                lda R5
   1222   b4                phi R4
                            
   1223   8f                glo STACK_REG
   1224   a6                plo R6
   1225   9f                ghi STACK_REG
   1226   b6                phi R6
   1227   16                inc R6
                            
   1228   46                lda R6
   1229   a5                plo R5
   122a   46                lda R6
   122b   b5                phi R5
                            
   122c   f8 86             ldi HEXVIEWER.0
   122e   ad                plo CALL_REG
   122f   f8 0d             ldi HEXVIEWER.1
   1231   bd                phi CALL_REG
                            
   1232   f8 00             ldi FCALL.0
   1234   ae                plo FCALL_REG
   1235   de                sep FCALL_REG
                            
   1236                 HEXVIEW_CALLER_END
   1236   8f                glo STACK_REG
   1237   fc 08             adi 8
   1239   af                plo STACK_REG
   123a   9f                ghi STACK_REG
   123b   7c 00             adci 0
   123d   bf                phi STACK_REG
                            
   123e   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-TEST FUNCTION--------------------------------
   123f                 TEST_STR1
   123f   52 65 73 75       db "Result: ",0
   1243   6c 74 3a 20   
   1247   00            
                        
   1248                 FUNC_TEST
   1248   ef                sex STACK_REG
                            
   1249   f8 00             ldi 0
   124b   73                stxd
   124c   73                stxd
   124d   73                stxd
   124e   73                stxd    ;+1 result
                            
   124f   8f                glo STACK_REG
   1250   a5                plo R5
   1251   9f                ghi STACK_REG
   1252   b5                phi R5
   1253   15                inc R5
                            
   1254   f8 55             ldi EXPRESSION.0
   1256   ad                plo CALL_REG
   1257   f8 08             ldi EXPRESSION.1
   1259   bd                phi CALL_REG
                            
   125a   f8 00             ldi FCALL.0
   125c   ae                plo FCALL_REG
   125d   de                sep FCALL_REG
                            
   125e   8f                glo STACK_REG
   125f   a4                plo R4
   1260   9f                ghi STACK_REG
   1261   b4                phi R4
   1262   14                inc R4
                        
   1263   f8 00             ldi 0
   1265   a5                plo R5
                            
   1266   f8 ae             ldi PRINT_DEC.0     ;prepare to print the Decimal result.
   1268   ad                plo CALL_REG
   1269   f8 04             ldi PRINT_DEC.1
   126b   bd                phi CALL_REG
                            
   126c   f8 00             ldi FCALL.0
   126e   ae                plo FCALL_REG
   126f   de                sep FCALL_REG
                            
   1270   f8 5b             ldi NEW_LINE.0  ;print newline
   1272   a6                plo R6
   1273   f8 13             ldi NEW_LINE.1
   1275   b6                phi R6
                        	
   1276   f8 52             ldi PRINT.0     ;prepare to call PRINT
   1278   ad                plo CALL_REG
   1279   f8 01             ldi PRINT.1
   127b   bd                phi CALL_REG
                            
   127c   f8 00             ldi FCALL.0
   127e   ae                plo FCALL_REG
   127f   de                sep FCALL_REG
                            
   1280   8f                glo STACK_REG
   1281   fc 04             adi 4
   1283   af                plo STACK_REG
   1284   9f                ghi STACK_REG
   1285   7c 00             adci 0
   1287   bf                phi STACK_REG
                            
   1288   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-COMMAND-CHECK--------------------------------
                        ;-R4-input string------------------------------
   1289                 COMMAND_CHECK
   1289   f8 8b             ldi COMMAND_FUNC_LIST.0
   128b   a5                plo R5
   128c   f8 13             ldi COMMAND_FUNC_LIST.1
   128e   b5                phi R5
                            
   128f   f8 5e             ldi COMMAND_LIST.0
   1291   a9                plo R9
   1292   f8 13             ldi COMMAND_LIST.1
   1294   b9                phi R9
                            
   1295   84                glo R4
   1296   a6                plo R6
   1297   94                ghi R4
   1298   b6                phi R6
                            
   1299                 COMMAND_CHECK_GOTOSPACE
   1299   46                lda R6
   129a   c2 12 a5          lbz COMMAND_CHECK_INSERTZERO
   129d   fb 20             xri 32
   129f   c2 12 a6          lbz COMMAND_CHECK_REPLACESPACE
   12a2   c0 12 99          lbr COMMAND_CHECK_GOTOSPACE
                            
   12a5                 COMMAND_CHECK_INSERTZERO
   12a5   56                str R6
   12a6                 COMMAND_CHECK_REPLACESPACE
   12a6   26                dec R6
   12a7   56                str R6
   12a8   16                inc R6
                            
   12a9                 COMMAND_CHECK_LOOP
   12a9   84                glo R4
   12aa   a8                plo R8
   12ab   94                ghi R4
   12ac   b8                phi R8
                            
   12ad   09                ldn R9
   12ae   c2 12 d6          lbz COMMAND_CHECK_END
                        
   12b1   f8 c0             ldi STR_COMPARATOR.0
   12b3   ad                plo CALL_REG
   12b4   f8 01             ldi STR_COMPARATOR.1
   12b6   bd                phi CALL_REG
                            
   12b7   f8 00             ldi FCALL.0
   12b9   ae                plo FCALL_REG
   12ba   de                sep FCALL_REG
                            
   12bb   8a                glo R10
   12bc   ca 12 c9          lbnz COMMAND_CHECK_EXEC
                            
   12bf                 COMMAND_CHECK_STR_END
   12bf   09                ldn R9
   12c0   19                inc R9
   12c1   ca 12 bf          lbnz COMMAND_CHECK_STR_END
                            
   12c4   15                inc R5
   12c5   15                inc R5
   12c6   c0 12 a9          lbr COMMAND_CHECK_LOOP
                            
   12c9                 COMMAND_CHECK_EXEC
   12c9   86                glo R6
   12ca   a4                plo R4
   12cb   96                ghi R6
   12cc   b4                phi R4
                            
   12cd   45                lda R5
   12ce   ad                plo CALL_REG
   12cf   05                ldn R5
   12d0   bd                phi CALL_REG
                            
   12d1   f8 00             ldi FCALL.0
   12d3   ae                plo FCALL_REG
   12d4   de                sep FCALL_REG
                            
   12d5   de                sep RETURN
                            
   12d6                 COMMAND_CHECK_END
   12d6   f8 95             ldi UNKNOWN_COMMAND.0  ;set the address of the boot msg in R6
   12d8   a6                plo R6
   12d9   f8 13             ldi UNKNOWN_COMMAND.1
   12db   b6                phi R6
                        	
   12dc   f8 52             ldi PRINT.0     ;prepare to call PRINT
   12de   ad                plo CALL_REG
   12df   f8 01             ldi PRINT.1
   12e1   bd                phi CALL_REG
                            
   12e2   f8 00             ldi FCALL.0
   12e4   ae                plo FCALL_REG
   12e5   de                sep FCALL_REG   ;call PRINT
                            
   12e6   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-MAIN-----------------------------------------
   12e7                 MAIN_PROGRAM
   12e7   f8 50             ldi DYN_MEMORY_INIT.0     ;heap init
   12e9   ad                plo CALL_REG
   12ea   f8 09             ldi DYN_MEMORY_INIT.1
   12ec   bd                phi CALL_REG
                            
   12ed   f8 00             ldi FCALL.0
   12ef   ae                plo FCALL_REG
   12f0   de                sep FCALL_REG   ;call heap init
                            
   12f1   f8 34             ldi BOOT_MSG.0  ;set the address of the boot msg in R6
   12f3   a6                plo R6
   12f4   f8 13             ldi BOOT_MSG.1
   12f6   b6                phi R6
                        	
   12f7   f8 52             ldi PRINT.0     ;prepare to call PRINT
   12f9   ad                plo CALL_REG
   12fa   f8 01             ldi PRINT.1
   12fc   bd                phi CALL_REG
                            
   12fd   f8 00             ldi FCALL.0
   12ff   ae                plo FCALL_REG
   1300   de                sep FCALL_REG   ;call PRINT
                        
   1301                 ASK_INPUT
   1301   f8 00             ldi INPUT_BUFF.0    ;load the address of the buffer to R7
   1303   a7                plo R7
   1304   f8 20             ldi INPUT_BUFF.1
   1306   b7                phi R7
                            
   1307   f8 68             ldi READLINE.0      ;prepare to call READLINE
   1309   ad                plo CALL_REG
   130a   f8 01             ldi READLINE.1
   130c   bd                phi CALL_REG
                            
   130d   f8 00             ldi FCALL.0
   130f   ae                plo FCALL_REG
   1310   de                sep FCALL_REG       ;call READLINE
                            
                            ;Program goes here
   1311   f8 00             ldi INPUT_BUFF.0
   1313   a4                plo R4
   1314   f8 20             ldi INPUT_BUFF.1
   1316   b4                phi R4
                            
   1317   f8 89             ldi COMMAND_CHECK.0      ;prepare to call COMMAND_CHECK
   1319   ad                plo CALL_REG
   131a   f8 12             ldi COMMAND_CHECK.1
   131c   bd                phi CALL_REG
                            
   131d   f8 00             ldi FCALL.0
   131f   ae                plo FCALL_REG
   1320   de                sep FCALL_REG
                            ;Program ends here
                            
   1321   f8 57             ldi ASK_IN.0        ;load the ASK_IN string's address to R6
   1323   a6                plo R6
   1324   f8 13             ldi ASK_IN.1
   1326   b6                phi R6
                            
   1327   f8 52             ldi PRINT.0         ;prepare to call PRINT
   1329   ad                plo CALL_REG
   132a   f8 01             ldi PRINT.1
   132c   bd                phi CALL_REG
                            
   132d   f8 00             ldi FCALL.0
   132f   ae                plo FCALL_REG
   1330   de                sep FCALL_REG       ;call PRINT
                        	
   1331   c0 13 01          lbr ASK_INPUT
                        ;----------------------------------------------
                        
                        ;-CONSTANT DATA--------------------------------
   1334                 BOOT_MSG
   1334   5a 4c 45 44       db "ZLED - CDP1802 Terminal.\r\n\r\nREADY\r\n"
   1338   20 2d 20 43   
   133c   44 50 31 38   
   1340   30 32 20 54   
   1344   65 72 6d 69   
   1348   6e 61 6c 2e   
   134c   0d 0a 0d 0a   
   1350   52 45 41 44   
   1354   59 0d 0a      
   1357                 ASK_IN
   1357   0d 0a 3e 00       db "\r\n>",0
   135b                 NEW_LINE
   135b   0d 0a 00          db "\r\n",0
   135e                 COMMAND_LIST
   135e   70 72 69 6e       db "print",0,"mem_view",0,"mem_debug",0,"mem_alloc",0,"mem_free",0,0
   1362   74 00 6d 65   
   1366   6d 5f 76 69   
   136a   65 77 00 6d   
   136e   65 6d 5f 64   
   1372   65 62 75 67   
   1376   00 6d 65 6d   
   137a   5f 61 6c 6c   
   137e   6f 63 00 6d   
   1382   65 6d 5f 66   
   1386   72 65 65 00   
   138a   00            
   138b                 COMMAND_FUNC_LIST
   138b   48 12             db FUNC_TEST.0,FUNC_TEST.1
   138d   cd 11             db HEXVIEW_CALLER.0,HEXVIEW_CALLER.1
   138f   a8 09             db DYN_MEMORY_DEBUG.0,DYN_MEMORY_DEBUG.1
   1391   14 10             db DYN_MEMORY_ALLOC_CALLER.0,DYN_MEMORY_ALLOC_CALLER.1
   1393   2d 11             db DYN_MEMORY_FREE_CALLER.0,DYN_MEMORY_FREE_CALLER.1
   1395                 UNKNOWN_COMMAND
   1395   55 6e 6b 6e       db "Unknown command.\r\n",0
   1399   6f 77 6e 20   
   139d   63 6f 6d 6d   
   13a1   61 6e 64 2e   
   13a5   0d 0a 00      
   13a8                 TEST_RESP
   13a8   45 76 65 72       db "Everything is ok!",0
   13ac   79 74 68 69   
   13b0   6e 67 20 69   
   13b4   73 20 6f 6b   
   13b8   21 00         
                        
   13ba                     end
1357  ASK_IN        1301  ASK_INPUT     0164  BACKSPACE_ACTION    1334  BOOT_MSG  
000d  CALL_REG      0283  CARRY_SHIFTING    1289  COMMAND_CHECK    12d6  COMMAND_CHECK_END
12c9  COMMAND_CHECK_EXEC    1299  COMMAND_CHECK_GOTOSPACE    12a5  COMMAND_CHECK_INSERTZERO    12a9  COMMAND_CHECK_LOOP
12a6  COMMAND_CHECK_REPLACESPACE    12bf  COMMAND_CHECK_STR_END    138b  COMMAND_FUNC_LIST    135e  COMMAND_LIST
028d  DIVISION_LOOP    3000  DMA_ADDRESS    0013  DMA_INIT      0000  DMA_REG   
0ae7  DYN_MEMORY_ALLOC    1014  DYN_MEMORY_ALLOC_CALLER    10c4  DYN_MEMORY_ALLOC_CALLER_END    1047  DYN_MEMORY_ALLOC_CALLER_FAIL
0fcc  DYN_MEMORY_ALLOC_CALLER_STR1    1003  DYN_MEMORY_ALLOC_CALLER_STR2    105a  DYN_MEMORY_ALLOC_CALLER_SUCCESS    0c20  DYN_MEMORY_ALLOC_END
0b13  DYN_MEMORY_ALLOC_MAINLOOP    0beb  DYN_MEMORY_ALLOC_NEXTADDRESS    0c05  DYN_MEMORY_ALLOC_NEXTPASS    0b60  DYN_MEMORY_ALLOC_SIZEBIGGER
0b4d  DYN_MEMORY_ALLOC_SIZEEQ    09a8  DYN_MEMORY_DEBUG    0ade  DYN_MEMORY_DEBUG_END    0aa3  DYN_MEMORY_DEBUG_FREE
09c2  DYN_MEMORY_DEBUG_MAINLOOP    0aa9  DYN_MEMORY_DEBUG_NEXTADDRESS    0a05  DYN_MEMORY_DEBUG_PRINT    0973  DYN_MEMORY_DEBUG_STR
099a  DYN_MEMORY_DEBUG_STR_FREE    09a1  DYN_MEMORY_DEBUG_STR_USED    0c29  DYN_MEMORY_FREE    112d  DYN_MEMORY_FREE_CALLER
11c4  DYN_MEMORY_FREE_CALLER_END    11b4  DYN_MEMORY_FREE_CALLER_OUTOFRANGE    10cd  DYN_MEMORY_FREE_CALLER_STR1    1102  DYN_MEMORY_FREE_CALLER_STR2
0cc0  DYN_MEMORY_FREE_END    0c61  DYN_MEMORY_FREE_MERGE    0c81  DYN_MEMORY_FREE_MERGELOOP    0c52  DYN_MEMORY_FREE_NEXTCHECK
0cb9  DYN_MEMORY_FREE_SETPREVIOUS    0950  DYN_MEMORY_INIT    017a  END_LINE      0855  EXPRESSION
088a  EXPRESSION_ADD    08c4  EXPRESSION_ADD_LOOP    093f  EXPRESSION_END    0876  EXPRESSION_MAIN
093b  EXPRESSION_NEXT_CYCLE    0866  EXPRESSION_SKIPSPACES    08e3  EXPRESSION_SUB    091d  EXPRESSION_SUB_LOOP
06b0  FACTOR        072f  FACTOR_END    0755  FACTOR_FINAL    074a  FACTOR_INVERTING
06bc  FACTOR_MAIN    0720  FACTOR_NEGATE    072b  FACTOR_NEXT_CYCLE    0706  FACTOR_PARENTHESIS
0711  FACTOR_PARENTHESIS_SKIPSPACES    06eb  FACTOR_READ_DEC    06f8  FACTOR_READ_HEX    0100  FCALL     
000e  FCALL_REG     031f  FINAL_CHECK    0343  FINAL_CHECK2    010a  FRETURN   
1248  FUNC_TEST     fc00  HEAP_END      2100  HEAP_LASTADDRESS    2110  HEAP_START
0d86  HEXVIEWER     0fc3  HEXVIEWER_END    0dfd  HEXVIEWER_MAINLOOP    0e79  HEXVIEWER_NEXT_HEX
0f38  HEXVIEWER_NEXT_STR    0e25  HEXVIEWER_PRINT_HEX_LOOP    0e69  HEXVIEWER_PRINT_HEX_SPACES    0f1c  HEXVIEWER_PRINT_STR_DOT
0ed9  HEXVIEWER_PRINT_STR_LOOP    0f2b  HEXVIEWER_PRINT_STR_SPACE    11cd  HEXVIEW_CALLER    1236  HEXVIEW_CALLER_END
1217  HEXVIEW_CALLER_EXEC    1208  HEXVIEW_CALLER_NEXTARG    0cdd  HEX_BASE_SRT    0412  HEX_CHARS 
0cf0  HEX_HEADER_STR    0d81  HEX_LINECNT_SEPARATOR    2000  INPUT_BUFF    01d4  INTEGER_DIV
0224  INTEGER_DIV_INVERT_LOOP1    0234  INTEGER_DIV_NEXT_CHECK    0372  INTEGER_MUL    03d3  INTEGER_MUL_ADD
0409  INTEGER_MUL_END    039f  INTEGER_MUL_LOOP    03dc  INTEGER_MUL_SHIFT    03fd  INTEGER_MUL_SHMULTIPLICAND
03e9  INTEGER_MUL_SHMULTIPLIER    0262  INTEGER_SHIFT_DR    0001  INTP_REG      0002  INTX_REG  
0253  INVERT_LOOP2    0337  INVERT_LOOP3    035e  INVERT_LOOP4    12e7  MAIN_PROGRAM
135b  NEW_LINE      0307  NEXT_BIT      0003  PC_REG        0152  PRINT     
045e  PRINT_CHECK_DIGIT    04ae  PRINT_DEC     0555  PRINT_DEC_END    055e  PRINT_DEC_FINAL
0502  PRINT_DEC_INVER_LOOP    050d  PRINT_DEC_MAIN_LOOP    0461  PRINT_DIGIT_LOOP    0422  PRINT_HEX 
048f  PRINT_HEX_END    0473  PRINT_HEX_SHIFT_LOOP1    0449  PRINT_UNTIL_R    000a  R10       
000b  R11           000c  R12           0004  R4            0005  R5        
0006  R6            0007  R7            0008  R8            0009  R9        
0168  READLINE      018e  READLINE_BACKSPACE    016b  READLINE_LOOP    058b  READ_DEC  
061c  READ_DEC_END    05a5  READ_DEC_MAIN_LOOP    062e  READ_HEX      066a  READ_HEX_CONTINUE
069e  READ_HEX_END    068d  READ_HEX_HEXDIGIT    0696  READ_HEX_HEXDIGITLOWER    064b  READ_HEX_MAINLOOP
0699  READ_HEX_NEXTCHAR    066d  READ_HEX_SHIFTLOOP    000e  RETURN        013f  SERIAL_NULL_BIT
012d  SERIAL_READ_START    0139  SERIAL_SAMPLE_BIT    0143  SERIAL_SAVE_BIT    011b  SERIAL_SEND_BIT
0113  SERIAL_SEND_START    0131  SERIAL_WAIT_START    02a5  SHIFTING_Q    0276  SHIFT_DR  
0314  SHIFT_SUBTRACTOR    ffff  STACK_ADDRESS    000f  STACK_REG     0000  START     
01aa  STORE_CHAR    01c3  STR_CHARCHECK    01c0  STR_COMPARATOR    01c9  STR_EQUAL 
01d0  STR_INC       02fd  SUBTRACT_FOR_REAL    075e  TERM          0785  TERM_DIVIDE
0843  TERM_END      0771  TERM_MAIN     07ea  TERM_MULTIPLY    083f  TERM_NEXT_CYCLE
13a8  TEST_RESP     123f  TEST_STR1     0369  THE_END       02c7  TRY_SUBTRACTING
1395  UNKNOWN_COMMAND    
