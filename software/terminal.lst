                        
   0000                 DMA_REG EQU 0
   0001                 INTP_REG EQU 1
   0002                 INTX_REG EQU 2
   0003                 PC_REG EQU 3
   0004                 R4 EQU 4
   0005                 R5 EQU 5
   0006                 R6 EQU 6
   0007                 R7 EQU 7
   0008                 R8 EQU 8
   0009                 R9 EQU 9
   000a                 R10 EQU 10
   000b                 R11 EQU 11
   000c                 R12 EQU 12
   000d                 CALL_REG EQU 13
   000e                 FCALL_REG EQU 14
   000e                 RETURN EQU 14
   000f                 STACK_REG EQU 15
                        
   ffff                 STACK_ADDRESS EQU 0FFFFh
   3000                 DMA_ADDRESS EQU 03000h
                        
   2000                 INPUT_BUFF EQU 02000h
                        
   2100                 VARLIST_COUNT EQU 02100h
   2102                 VARLIST_FIRSTNODE EQU 02102h
   2104                 VARLIST_LASTNODE EQU 02104h
                        
   2106                 HEAP_LASTADDRESS EQU 02106h
   2110                 HEAP_START EQU 02110h
   fc00                 HEAP_END EQU 0FC00h
                        
                        
   0000                     org 00h
                        
   0000                 START
   0000   71                dis
   0001   00                idl
                            
   0002   7b                seq     ;set Q output to high
                            
   0003   f8 ff             ldi STACK_ADDRESS.0 ;setup the STACK pointer
   0005   af                plo STACK_REG
   0006   f8 ff             ldi STACK_ADDRESS.1
   0008   bf                phi STACK_REG
                            
   0009   f8 01             ldi FCALL.1         ;setup FCALL
   000b   be                phi FCALL_REG
                            
   000c   f8 13             ldi DMA_INIT.0      ;switch PC to R3 and init DMA
   000e   a3                plo PC_REG
   000f   f8 00             ldi DMA_INIT.1
   0011   b3                phi PC_REG
                            
   0012   d3                sep PC_REG
                            
   0013                 DMA_INIT
   0013   f8 00             ldi DMA_ADDRESS.0   ;setup DMA address
   0015   a0                plo DMA_REG
   0016   f8 30             ldi DMA_ADDRESS.1
   0018   b0                phi DMA_REG
                            
   0019   c0 15 2a          lbr MAIN_PROGRAM
                            
                        ;-FUNCTION CALL HELPER-------------------------
                        ;-WHERE TO JUMP-(CALL_REG)---------------------
   0100                     org 0100h
                            
   0100                 FCALL
   0100   ef                sex STACK_REG   ;set STACK as X register
   0101   93                ghi PC_REG      ;saving the PC value to stack
   0102   73                stxd
   0103   83                glo PC_REG
   0104   73                stxd
                            
   0105   8d                glo CALL_REG    ;put the new address in the PC
   0106   a3                plo PC_REG
   0107   9d                ghi CALL_REG
   0108   b3                phi PC_REG
   0109   d3                sep PC_REG      ;jumping to PC
                            
   010a                 FRETURN
   010a   1f                inc STACK_REG   ;increment the STACK register
   010b   ef                sex STACK_REG   ;set STACK as X register
   010c   72                ldxa            ;restoring PC from STACK
   010d   a3                plo PC_REG
   010e   f0                ldx
   010f   b3                phi PC_REG
   0110   d3                sep PC_REG      ;jumping to PC
   0111   30 0a             br FRETURN
                        ;----------------------------------------------
                        
                        ;-SERIAL SEND BYTE-----------------------------
                        ;-DATA-R4.1------------------------------------
   0113                 SERIAL_SEND_START
   0113   94                ghi R4      ;R4 high is the data, load it into the D reg
   0114   fb ff             xri 0FFh    ;invert it
   0116   b4                phi R4      ;put it back
   0117   f8 85             ldi 085h    ;load 0x85 to the D reg
   0119   fe                shl         ;shift it left so we get 0x0A and set the flag bit
   011a   a4                plo R4      ;put the 0x10 to R4 low, this will be our bit counter
                        
   011b                 SERIAL_SEND_BIT
   011b   c7                lsnf        ;24 - long skip if the flag is not set
   011c   7a                req         ;16 - reset Q if the flag is set
   011d   c8                lskp        ;24
   011e   7b                seq         ;16 - set Q if the flag is not set
   011f   c4                nop         ;24
                            
   0120   24                dec R4      ;16 - decrement R4, this will only affect the R4 lower 8bit
   0121   84                glo R4      ;16
   0122   c6                lsnz        ;24 - if R4 lower is not 0 then long skip
   0123   de                sep RETURN  ;--
   0124   c4                nop         ;--
   0125   94                ghi R4      ;16 - get R4 high
   0126   f6                shr         ;16 - shift it right to get LSB in the flag
   0127   b4                phi R4      ;16 - put it back
   0128   c4                nop         ;24
   0129   c4                nop         ;24
   012a   c4                nop         ;24
   012b   30 1b             br SERIAL_SEND_BIT ;16
                        ;----------------------------------------------
                        
                        ;-SERIAL READ BYTE-----------------------------
                        ;-RETURN R5.1----------------------------------
   012d                 SERIAL_READ_START
   012d   f8 00             ldi 00h     ;set input data register to 0
   012f   a5                plo R5
   0130   b5                phi R5
                            
   0131                 SERIAL_WAIT_START
   0131   3c 31             bn1 SERIAL_WAIT_START ;16 - loop until EF1 goes low
   0133   c4                nop         ;24
   0134   c4                nop         ;24
   0135   c4                nop         ;24
   0136   c4                nop         ;24
   0137   f9 00             ori 00h     ;16 - do nothing for 16 clock cycles
                        
   0139                 SERIAL_SAMPLE_BIT
   0139   34 3f             b1 SERIAL_NULL_BIT  ;16 - checking the EF1
   013b   f9 80             ori 080h            ;16 - if EF1 is high then set MSB to 1 in D register
   013d   30 43             br SERIAL_SAVE_BIT  ;16
                        
   013f                 SERIAL_NULL_BIT
   013f   f9 00             ori 00h         ;16 - of EF1 is low we do nothing
   0141   f9 00             ori 00h         ;16
                        
   0143                 SERIAL_SAVE_BIT
   0143   b5                phi R5          ;16 - put D in R5 high
   0144   15                inc R5          ;16 - increment R5, this will only affect R5 low 8bit
   0145   85                glo R5          ;16 - get R5 low to D register
   0146   fb 09             xri 09h         ;16 - D = D ^ 0x09
   0148   c6                lsnz            ;24 
   0149   de                sep RETURN      ;--
   014a   c4                nop             ;--
   014b   95                ghi R5          ;16 - get R5 high
   014c   f6                shr             ;16 - shift it righ
   014d   c4                nop             ;24
   014e   c4                nop             ;24
   014f   c4                nop             ;24
   0150   30 39             br SERIAL_SAMPLE_BIT ;16
                        ;----------------------------------------------
                        
                        ;-PRINT----------------------------------------
                        ;-FIRST CHAR-R6--------------------------------
   0152                 PRINT
   0152   e6                sex R6          ;set X register to R6
   0153   72                ldxa            ;load data to D and increment R6
   0154   c6                lsnz            ;if it is not zero then long skip
   0155   de                sep RETURN
   0156   c4                nop
                            
   0157   b4                phi R4          ;put D register to R4 to send it
                            
   0158   f8 13             ldi SERIAL_SEND_START.0     ;prepare to call SERIAL_SEND
   015a   ad                plo CALL_REG
   015b   f8 01             ldi SERIAL_SEND_START.1
   015d   bd                phi CALL_REG
                            
   015e   f8 00             ldi FCALL.0
   0160   ae                plo FCALL_REG
   0161   de                sep FCALL_REG   ;call SERIAL_SEND
   0162   30 52             br PRINT
                        ;----------------------------------------------
                        
   0164                 BACKSPACE_ACTION
   0164   08 20 08 00       db 8, 32, 8, 0
                        ;-READ LINE------------------------------------
                        ;-WHERE TO READ-R7-----------------------------
                        ;-R8.1-Character counter-------------------------
   0168                 READLINE
   0168   f8 00             ldi 0
   016a   a8                plo R8
                            
   016b                 READLINE_LOOP
   016b   f8 2d             ldi SERIAL_READ_START.0     ;prepare calling SERIAL_READ
   016d   ad                plo CALL_REG
   016e   f8 01             ldi SERIAL_READ_START.1
   0170   bd                phi CALL_REG
                            
   0171   f8 00             ldi FCALL.0
   0173   ae                plo FCALL_REG
   0174   de                sep FCALL_REG       ;call SERIAL_READ
                            
   0175   95                ghi R5              ;get the result of SERIAL_READ
   0176   fb 0d             xri 13              ;check if it is 13 (ENTER KEY)
   0178   3a 8e             bnz READLINE_BACKSPACE      ;if not jump to READLINE_BACKSPACE
                            
   017a                 END_LINE
   017a   f8 00             ldi 00h             ;put 0 to the endof the string
   017c   57                str R7
                            
   017d   f8 a8             ldi NEW_LINE.0      ;load the address of CRLF string
   017f   a6                plo R6
   0180   f8 15             ldi NEW_LINE.1
   0182   b6                phi R6
                            
   0183   f8 52             ldi PRINT.0         ;prepare to call PRINT
   0185   ad                plo CALL_REG
   0186   f8 01             ldi PRINT.1
   0188   bd                phi CALL_REG
                            
   0189   f8 00             ldi FCALL.0
   018b   ae                plo FCALL_REG
   018c   de                sep FCALL_REG       ;call PRINT
                            
   018d   de                sep RETURN          ;RETURN from READLINE
                            
   018e                 READLINE_BACKSPACE
   018e   95                ghi R5              ;get the result of SERIAL_READ
   018f   fb 7f             xri 127             ;check if it is 127 (DEL)
   0191   3a aa             bnz STORE_CHAR      ;if not jump to STORE_CHAR
                            
   0193   88                glo R8
   0194   32 6b             bz READLINE_LOOP
                            
   0196   f8 64             ldi BACKSPACE_ACTION.0      ;load the address of the backspace action
   0198   a6                plo R6
   0199   f8 01             ldi BACKSPACE_ACTION.1
   019b   b6                phi R6
                            
   019c   f8 52             ldi PRINT.0                 ;prepare to call PRINT
   019e   ad                plo CALL_REG
   019f   f8 01             ldi PRINT.1
   01a1   bd                phi CALL_REG
                            
   01a2   f8 00             ldi FCALL.0
   01a4   ae                plo FCALL_REG
   01a5   de                sep FCALL_REG               ;call PRINT
                            
   01a6   27                dec R7
   01a7   28                dec R8
                            
   01a8   30 6b             br READLINE_LOOP
                            
   01aa                 STORE_CHAR
   01aa   88                glo R8
   01ab   fb ff             xri 0FFh
   01ad   32 6b             bz READLINE_LOOP
                            
   01af   95                ghi R5              ;get the result of the SERIAL_READ again
   01b0   57                str R7              ;store it where R7 pointing
   01b1   17                inc R7              ;increment R7
   01b2   18                inc R8
                            
   01b3   b4                phi R4              ;load the result to R4 to Echo it back
                            
   01b4   f8 13             ldi SERIAL_SEND_START.0     ;prepare to call SERIAL_SEND
   01b6   ad                plo CALL_REG
   01b7   f8 01             ldi SERIAL_SEND_START.1
   01b9   bd                phi CALL_REG
                            
   01ba   f8 00             ldi FCALL.0
   01bc   ae                plo FCALL_REG
   01bd   de                sep FCALL_REG       ;call SERIAL_SEND
   01be   30 6b             br READLINE_LOOP
                        ;----------------------------------------------
                        
                        ;-STR COMPARATOR-------------------------------
                        ;-R8 stringA-R9 stringB------------------------
                        ;-RETURN R10.0---------------------------------
   01c0                 STR_COMPARATOR
   01c0   f8 00             ldi 0           ;R10 low is the result, set it to 0
   01c2   aa                plo R10
                        	
   01c3                 STR_CHARCHECK
   01c3   08                ldn R8          ;load value from RAM[R8] to D register
   01c4   e9                sex R9          ;set X pointer to R9
   01c5   f3                xor             ;D = D ^ RAM[R9]
                            
   01c6   32 c9             bz STR_EQUAL    ;if D == 0 jump to STR_EQUAL
   01c8   de                sep RETURN      ;RETURN
                            
   01c9                 STR_EQUAL 
   01c9   08            	ldn R8          ;load value from RAM[R8] to D register again
   01ca   3a d0         	bnz STR_INC     ;if D != 0 jump to STR_INC
   01cc   f8 01         	ldi 1           ;set R10 to 1 and return
   01ce   aa            	plo R10
   01cf   de            	sep RETURN
                        	
   01d0                 STR_INC
   01d0   18            	inc R8          ;increment both address by 1
   01d1   19            	inc R9
   01d2   30 c3         	br STR_CHARCHECK
                        ;----------------------------------------------
                        
                        ;-INTEGER DIV----------------------------------
                        ;-R4 pointing to divident----------------------
                        ;-R5 pointing to divider-----------------------
                        ;-R6 pointing to quotient----------------------
                        ;-R7 pointing to remainder---------------------
                        ;-R8.0 bitcnt, R8.1 flags----------------------
                        ;-R9 general counter---------------------------
   01d4                 INTEGER_DIV
   01d4   ef                sex STACK_REG   ;set STACK_REG as data pointer to store variables in STACK
   01d5   f8 00             ldi 0           ;set bitcnt and flags to 0
   01d7   a8                plo R8
   01d8   b8                phi R8
                            
   01d9   15                inc R5          ;increment R5 to the MSB because we want to store the divider it in little-endian format
   01da   15                inc R5
   01db   15                inc R5
                            
   01dc   05                ldn R5          ;copying starts here
   01dd   73                stxd
   01de   25                dec R5
                            
   01df   05                ldn R5
   01e0   73                stxd
   01e1   25                dec R5
                            
   01e2   05                ldn R5
   01e3   73                stxd
   01e4   25                dec R5
                            
   01e5   05                ldn R5
   01e6   73                stxd            ;+11 divider, +11 shows the start of the data from the STACK pointer
                            
   01e7   f8 00             ldi 0           ;storing 0 for the subtractor
   01e9   73                stxd
   01ea   73                stxd
   01eb   73                stxd
   01ec   73                stxd            ;+7 subtractor
                            
   01ed   96                ghi R6          ;saving the quotient pointer
   01ee   73                stxd
   01ef   86                glo R6
   01f0   73                stxd            ;+5 quotient pointer
                        
   01f1   97                ghi R7          ;saving the remainder
   01f2   73                stxd
   01f3   87                glo R7
   01f4   73                stxd            ;+3 remainder pointer
                            
   01f5   94                ghi R4          ;saving the dividend pointer
   01f6   73                stxd
   01f7   84                glo R4
   01f8   73                stxd            ;+1 dividend pointer
                            
   01f9   e4                sex R4
                            
   01fa   72                ldxa            ;copy dividend to remainder
   01fb   57                str R7
   01fc   17                inc R7
                            
   01fd   72                ldxa
   01fe   57                str R7
   01ff   17                inc R7
                            
   0200   72                ldxa
   0201   57                str R7
   0202   17                inc R7
                            
   0203   f0                ldx
   0204   57                str R7
                            
   0205   f8 00             ldi 0
   0207   56                str R6
   0208   16                inc R6
   0209   56                str R6
   020a   16                inc R6
   020b   56                str R6
   020c   16                inc R6
   020d   56                str R6
                        
   020e   8f                glo STACK_REG   ;get the STACK_REG pointer to position it to the divider MSB
   020f   fc 0e             adi 14          ;add 14 to it
   0211   a5                plo R5          ;store the new pointer to R5
   0212   9f                ghi STACK_REG   ;get the STACK_REG high part to add the carry to it
   0213   7c 00             adci 0          ;adding the carry
   0215   b5                phi R5          ;store the new high part to R5
                            
   0216   e5                sex R5          ;set X data pointer to R5
   0217   f0                ldx             ;load data from RAM[R5]
   0218   25                dec R5          ;decrement R5 to set it back to the divider's LSB
   0219   25                dec R5
   021a   25                dec R5
   021b   fa 80             ani 080h        ;check if sign bit is set
                            
   021d   c2 02 34          lbz INTEGER_DIV_NEXT_CHECK
                            
   0220   f8 82             ldi 082h        ;load 0x82 to the D register
   0222   fe                shl             ;shit it left so it will set the carry flag and the D registre will be 4
   0223   a9                plo R9          ;store it to R9 low
                            
   0224                 INTEGER_DIV_INVERT_LOOP1
   0224   f0                ldx             ;load data from RAM[R5]
   0225   fb ff             xri 0FFh        ;xor D with 0xFF to invert it
   0227   7c 00             adci 0          ;add the carry for to the result (inver+1)
   0229   55                str R5          ;store the result to RAM[R5]
   022a   60                irx             ;increment R5
                        
   022b   29                dec R9          ;decrement R8
   022c   89                glo R9          ;get R8 low, and if it's not 0 then do the loop
   022d   ca 02 24          lbnz INTEGER_DIV_INVERT_LOOP1
                            
   0230   98                ghi R8          ;set the flag
   0231   f9 01             ori 1
   0233   b8                phi R8
                            
   0234                 INTEGER_DIV_NEXT_CHECK
   0234   8f                glo STACK_REG
   0235   fc 03             adi 3
   0237   a9                plo R9
   0238   9f                ghi STACK_REG
   0239   7c 00             adci 0
   023b   b9                phi R9
                            
   023c   09                ldn R9              ;restore and get remainder MSB
   023d   fc 03             adi 3
   023f   a4                plo R4
   0240   19                inc R9
   0241   09                ldn R9
   0242   7c 00             adci 0
   0244   b4                phi R4
                            
   0245   e4                sex R4
   0246   f0                ldx
   0247   24                dec R4
   0248   24                dec R4
   0249   24                dec R4
   024a   fa 80             ani 080h            ;check if sign bit is set
                            
   024c   c2 02 62          lbz INTEGER_SHIFT_DR
                            
   024f   f8 82             ldi 082h
   0251   fe                shl
   0252   a9                plo R9
                            
   0253                 INVERT_LOOP2
   0253   f0                ldx         ;invert byte 3
   0254   fb ff             xri 0FFh
   0256   7c 00             adci 0
   0258   54                str R4
   0259   60                irx
                        
   025a   29                dec R9
   025b   89                glo R9
   025c   3a 53             bnz INVERT_LOOP2
                            
   025e   98                ghi R8      ;set the flag
   025f   f9 02             ori 2
   0261   b8                phi R8
                            
   0262                 INTEGER_SHIFT_DR
   0262   8f                glo STACK_REG ;get divider MSB
   0263   fc 0b             adi 11
   0265   a5                plo R5
   0266   9f                ghi STACK_REG
   0267   7c 00             adci 0
   0269   b5                phi R5
                            
   026a   f8 00             ldi 0
   026c   e5                sex R5
   026d   f1                or
   026e   60                irx
   026f   f1                or
   0270   60                irx
   0271   f1                or
   0272   60                irx
   0273   f1                or
   0274   32 8d             bz DIVISION_LOOP
                            
   0276                 SHIFT_DR
   0276   8f                glo STACK_REG ;get divider MSB
   0277   fc 0e             adi 14
   0279   a5                plo R5
   027a   9f                ghi STACK_REG
   027b   7c 00             adci 0
   027d   b5                phi R5
                            
   027e   e5                sex R5
                            
   027f   f8 04             ldi 4
   0281   fe                shl
   0282   a9                plo R9
                            
   0283                 CARRY_SHIFTING
   0283   f0                ldx
   0284   76                shrc
   0285   73                stxd
                            
   0286   29                dec R9
   0287   89                glo R9
   0288   3a 83             bnz CARRY_SHIFTING
                            
   028a   18                inc R8
                            
   028b   30 62             br INTEGER_SHIFT_DR
                            
   028d                 DIVISION_LOOP
   028d   88                glo R8              ;get R8 low
   028e   fd 20             sdi 32              ;if larger than 32 then finish the loop
   0290   cb 03 1f          lbnf FINAL_CHECK
                        
   0293   8f                glo STACK_REG       ;restore quotient pointer to R6
   0294   fc 05             adi 5
   0296   a9                plo R9
   0297   9f                ghi STACK_REG
   0298   7c 00             adci 0
   029a   b9                phi R9
                            
   029b   09                ldn R9
   029c   a6                plo R6
   029d   19                inc R9
   029e   09                ldn R9
   029f   b6                phi R6
                            
   02a0   e6                sex R6
                            
   02a1   f8 02             ldi 2
   02a3   fe                shl
   02a4   a9                plo R9
                            
   02a5                 SHIFTING_Q
   02a5   f0                ldx                 ;shifting quotient to left
   02a6   7e                shlc
   02a7   56                str R6
   02a8   60                irx
                        
   02a9   29                dec R9
   02aa   89                glo R9
   02ab   3a a5             bnz SHIFTING_Q
                            
   02ad   8f                glo STACK_REG    ;restore remainder pointer to R4
   02ae   fc 03             adi 3
   02b0   a9                plo R9
   02b1   9f                ghi STACK_REG
   02b2   7c 00             adci 0
   02b4   b9                phi R9
                            
   02b5   09                ldn R9
   02b6   a4                plo R4
   02b7   19                inc R9
   02b8   09                ldn R9
   02b9   b4                phi R4
                            
   02ba   8f                glo STACK_REG    ;restore subtractor pointer to R5
   02bb   fc 07             adi 7
   02bd   a5                plo R5
   02be   9f                ghi STACK_REG
   02bf   7c 00             adci 0
   02c1   b5                phi R5
                            
   02c2   e4                sex R4
   02c3   f8 82             ldi 082h
   02c5   fe                shl
   02c6   a9                plo R9
                            
   02c7                 TRY_SUBTRACTING         ;try subtracting
   02c7   05                ldn R5
   02c8   75                sdb
   02c9   60                irx
   02ca   15                inc R5
                            
   02cb   29                dec R9
   02cc   89                glo R9
   02cd   3a c7             bnz TRY_SUBTRACTING
                            
   02cf   cb 03 07          lbnf NEXT_BIT        ;if subtracting unsuccesful, jump to NEXT_BIT
                            
   02d2   8f                glo STACK_REG
   02d3   fc 05             adi 5
   02d5   a9                plo R9
   02d6   9f                ghi STACK_REG
   02d7   7c 00             adci 0
   02d9   b9                phi R9
                            
   02da   09                ldn R9
   02db   a6                plo R6
   02dc   19                inc R9
   02dd   09                ldn R9
   02de   b6                phi R6
                            
   02df   06                ldn R6
   02e0   f9 01             ori 1
   02e2   56                str R6
                            
   02e3   8f                glo STACK_REG    ;restore remainder pointer
   02e4   fc 03             adi 3
   02e6   a9                plo R9
   02e7   9f                ghi STACK_REG
   02e8   7c 00             adci 0
   02ea   b9                phi R9
                            
   02eb   09                ldn R9
   02ec   a4                plo R4
   02ed   19                inc R9
   02ee   09                ldn R9
   02ef   b4                phi R4
                            
   02f0   8f                glo STACK_REG    ;restore subtractor's pointer to R5
   02f1   fc 07             adi 7
   02f3   a5                plo R5
   02f4   9f                ghi STACK_REG
   02f5   7c 00             adci 0
   02f7   b5                phi R5
                            
   02f8   e4                sex R4
                            
   02f9   f8 82             ldi 082h
   02fb   fe                shl
   02fc   a9                plo R9
                            
   02fd                 SUBTRACT_FOR_REAL
   02fd   05                ldn R5          ;subtract the subtractor from the remainder and store it
   02fe   75                sdb
   02ff   54                str R4
   0300   60                irx
   0301   15                inc R5
                            
   0302   29                dec R9
   0303   89                glo R9
   0304   ca 02 fd          lbnz SUBTRACT_FOR_REAL
                            
   0307                 NEXT_BIT
   0307   8f                glo STACK_REG    ;restore subtractor pointer to R5 and set it to MSB
   0308   fc 0a             adi 10
   030a   a5                plo R5
   030b   9f                ghi STACK_REG
   030c   7c 00             adci 0
   030e   b5                phi R5
                            
   030f   e5                sex R5
   0310   f8 02             ldi 2
   0312   fe                shl
   0313   a9                plo R9
                            
   0314                 SHIFT_SUBTRACTOR
   0314   f0                ldx
   0315   76                shrc
   0316   73                stxd
                            
   0317   29                dec R9
   0318   89                glo R9
   0319   3a 14             bnz SHIFT_SUBTRACTOR
                            
   031b   18                inc R8
   031c   c0 02 8d          lbr DIVISION_LOOP
                            
   031f                 FINAL_CHECK
   031f   98                ghi R8
   0320   fa 02             ani 2
   0322   c2 03 43          lbz FINAL_CHECK2
                            
   0325   8f                glo STACK_REG    ;restore remainder pointer to R4
   0326   fc 03             adi 3
   0328   a9                plo R9
   0329   9f                ghi STACK_REG
   032a   7c 00             adci 0
   032c   b9                phi R9
                            
   032d   09                ldn R9
   032e   a4                plo R4
   032f   19                inc R9
   0330   09                ldn R9
   0331   b4                phi R4
                            
   0332   e4                sex R4
                            
   0333   f8 82             ldi 082h
   0335   fe                shl
   0336   a9                plo R9
                            
   0337                 INVERT_LOOP3
   0337   f0                ldx
   0338   fb ff             xri 0FFh
   033a   7c 00             adci 0
   033c   54                str R4
   033d   60                irx
                            
   033e   29                dec R9
   033f   89                glo R9
   0340   ca 03 37          lbnz INVERT_LOOP3
                            
   0343                 FINAL_CHECK2
   0343   98                ghi R8
   0344   c2 03 69          lbz THE_END
   0347   fb 03             xri 3
   0349   c2 03 69          lbz THE_END
                            
   034c   8f                glo STACK_REG    ;restore quotient pointer to R6
   034d   fc 05             adi 5
   034f   a9                plo R9
   0350   9f                ghi STACK_REG
   0351   7c 00             adci 0
   0353   b9                phi R9
                            
   0354   09                ldn R9
   0355   a6                plo R6
   0356   19                inc R9
   0357   09                ldn R9
   0358   b6                phi R6
                            
   0359   e6                sex R6
                            
   035a   f8 82             ldi 082h
   035c   fe                shl
   035d   a9                plo R9
                            
   035e                 INVERT_LOOP4
   035e   f0                ldx
   035f   fb ff             xri 0FFh
   0361   7c 00             adci 0
   0363   56                str R6
   0364   60                irx
                            
   0365   29                dec R9
   0366   89                glo R9
   0367   3a 5e             bnz INVERT_LOOP4
                        
   0369                 THE_END
   0369   8f                glo STACK_REG       ;setting back the STACK_REG for return
   036a   fc 0e             adi 14
   036c   af                plo STACK_REG
   036d   9f                ghi STACK_REG
   036e   7c 00             adci 0
   0370   bf                phi STACK_REG
                            
   0371   de                sep RETURN          ;RETURN
                        ;----------------------------------------------
                        
                        ;-INTEGER MUL----------------------------------
                        ;-R4-multiplicand pointer----------------------
                        ;-R5-multiplier pointer------------------------
                        ;-R6-result pointer----------------------------
                        ;-R7-general register--------------------------
   0372                 INTEGER_MUL
   0372   ef                sex STACK_REG
                            
   0373   14                inc R4      ;increment R4 and R5 pointer to MSB
   0374   14                inc R4      ;to copy the values to the local variables
   0375   14                inc R4
                            
   0376   15                inc R5
   0377   15                inc R5
   0378   15                inc R5
                            
   0379   04                ldn R4      ;copying starts here
   037a   73                stxd
   037b   24                dec R4
                            
   037c   04                ldn R4
   037d   73                stxd
   037e   24                dec R4
                            
   037f   04                ldn R4
   0380   73                stxd
   0381   24                dec R4
                            
   0382   04                ldn R4
   0383   73                stxd        ;+7 multiplicand
                            
   0384   05                ldn R5
   0385   73                stxd
   0386   25                dec R5
                            
   0387   05                ldn R5
   0388   73                stxd
   0389   25                dec R5
                            
   038a   05                ldn R5
   038b   73                stxd
   038c   25                dec R5
                            
   038d   05                ldn R5
   038e   73                stxd        ;+3 multiplier
                            
   038f   96                ghi R6
   0390   73                stxd
   0391   86                glo R6
   0392   73                stxd        ;+1 result pointer
                        
   0393   f8 00             ldi 0       ;zeroing the result
                            
   0395   56                str R6
   0396   16                inc R6
                            
   0397   56                str R6
   0398   16                inc R6
                            
   0399   56                str R6
   039a   16                inc R6
                            
   039b   56                str R6
                            
   039c   26                dec R6
   039d   26                dec R6
   039e   26                dec R6
                        
   039f                 INTEGER_MUL_LOOP
   039f   8f                glo STACK_REG   ;restore multiplier pointer
   03a0   fc 03             adi 3
   03a2   a5                plo R5
   03a3   9f                ghi STACK_REG
   03a4   7c 00             adci 0
   03a6   b5                phi R5
                            
   03a7   e5                sex R5          ;check if multiplier is 0
   03a8   f8 00             ldi 0
   03aa   f1                or
   03ab   60                irx
   03ac   f1                or
   03ad   60                irx
   03ae   f1                or
   03af   60                irx
   03b0   f1                or
                            
   03b1   25                dec R5
   03b2   25                dec R5
   03b3   25                dec R5
                            
   03b4   c2 04 09          lbz INTEGER_MUL_END      ;if 0 then jump to the end
                            
   03b7   05                ldn R5                  ;load the multiplier's LSB
   03b8   fa 01             ani 1                   ;filter for the LSb
   03ba   32 dc             bz INTEGER_MUL_SHIFT    ;if zero, skip the addition
                            
   03bc   8f                glo STACK_REG           ;restore multiplicand pointer
   03bd   fc 07             adi 7
   03bf   a4                plo R4
   03c0   9f                ghi STACK_REG
   03c1   7c 00             adci 0
   03c3   b4                phi R4
                            
   03c4   8f                glo STACK_REG           ;restore result pointer
   03c5   a7                plo R7
   03c6   9f                ghi STACK_REG
   03c7   b7                phi R7
   03c8   17                inc R7
                            
   03c9   07                ldn R7
   03ca   a5                plo R5
   03cb   17                inc R7
   03cc   07                ldn R7
   03cd   b5                phi R5
                            
   03ce   e5                sex R5
                            
   03cf   f8 02             ldi 2                   ;prepare addition
   03d1   fe                shl
   03d2   a7                plo R7
                            
   03d3                 INTEGER_MUL_ADD
   03d3   04                ldn R4
   03d4   74                adc
   03d5   55                str R5
   03d6   60                irx
   03d7   14                inc R4
                            
   03d8   27                dec R7
   03d9   87                glo R7
   03da   3a d3             bnz INTEGER_MUL_ADD
                        
   03dc                 INTEGER_MUL_SHIFT
                        
   03dc   8f                glo STACK_REG           ;set multiplier's pointer to MSB
   03dd   fc 06             adi 6                   ;to shift it right
   03df   a5                plo R5
   03e0   9f                ghi STACK_REG
   03e1   7c 00             adci 0
   03e3   b5                phi R5
                            
   03e4   e5                sex R5
                            
   03e5   f8 02             ldi 2
   03e7   fe                shl
   03e8   a7                plo R7
                            
   03e9                 INTEGER_MUL_SHMULTIPLIER
   03e9   f0                ldx                     ;shifting right the multiplier
   03ea   76                shrc
   03eb   73                stxd
                            
   03ec   27                dec R7
   03ed   87                glo R7
   03ee   3a e9             bnz INTEGER_MUL_SHMULTIPLIER
                            
   03f0   8f                glo STACK_REG           ;restore multiplicand pointer
   03f1   fc 07             adi 7                   ;to shift it left
   03f3   a4                plo R4
   03f4   9f                ghi STACK_REG
   03f5   7c 00             adci 0
   03f7   b4                phi R4
                            
   03f8   e4                sex R4
                            
   03f9   f8 02             ldi 2
   03fb   fe                shl
   03fc   a7                plo R7
                            
   03fd                 INTEGER_MUL_SHMULTIPLICAND
   03fd   f0                ldx                     ;shifting the multiplicand left
   03fe   7e                shlc
   03ff   54                str R4
   0400   60                irx
                        
   0401   27                dec R7
   0402   87                glo R7
   0403   ca 03 fd          lbnz INTEGER_MUL_SHMULTIPLICAND
                            
   0406   c0 03 9f          lbr INTEGER_MUL_LOOP
                            
   0409                 INTEGER_MUL_END
   0409   8f                glo STACK_REG
   040a   fc 0a             adi 10
   040c   af                plo STACK_REG
   040d   9f                ghi STACK_REG
   040e   7c 00             adci 0
   0410   bf                phi STACK_REG
                            
   0411   de                sep RETURN          ;RETURN    
                        ;----------------------------------------------
                        
                        ;-PRINT HEX------------------------------------
                        ;-R4-int pointer-------------------------------
                        ;-R5.0-number of digits------------------------
                        ;-Local registers------------------------------
                        ;-R5.1-flag, R6--------------------------------
   0412                 HEX_CHARS
   0412   30 31 32 33       db "0123456789ABCDEF"
   0416   34 35 36 37   
   041a   38 39 41 42   
   041e   43 44 45 46   
                        ;----------------------------------------------
   0422                 PRINT_HEX
   0422   ef                sex STACK_REG
                            
   0423   95                ghi R5  ;saving the state of the local registers
   0424   73                stxd
                            
   0425   96                ghi R6
   0426   73                stxd
   0427   86                glo R6
   0428   73                stxd
                            
   0429   14                inc R4  ;making a copy of the Integer
   042a   14                inc R4
   042b   14                inc R4
                            
   042c   04                ldn R4
   042d   73                stxd
   042e   24                dec R4
   042f   04                ldn R4
   0430   73                stxd
   0431   24                dec R4
   0432   04                ldn R4
   0433   73                stxd
   0434   24                dec R4
   0435   04                ldn R4
   0436   73                stxd    ;+2 the integer
                            
   0437   f8 00             ldi 0   ;+1 
   0439   73                stxd
                            
   043a   8f                glo STACK_REG   ;set R4 to point to the Integer
   043b   a4                plo R4
   043c   9f                ghi STACK_REG
   043d   b4                phi R4
   043e   14                inc R4
   043f   14                inc R4
                            
   0440   f8 00             ldi 0           ;set R5 flags to 0
   0442   b5                phi R5
   0443   85                glo R5              
   0444   3a 49             bnz PRINT_UNTIL_R
   0446   f8 01             ldi 1           ;if R5 low, the number of digits, is zero, then set R5 flag
   0448   b5                phi R5
                        
   0449                 PRINT_UNTIL_R
   0449   95                ghi R5                  ;check the flag if set or not
   044a   32 5e             bz PRINT_CHECK_DIGIT    
   044c   e4                sex R4              ;checking the integer if it's zero
   044d   f8 00             ldi 0
   044f   f1                or
   0450   60                irx
   0451   f1                or
   0452   60                irx
   0453   f1                or
   0454   60                irx
   0455   f1                or
                            
   0456   24                dec R4
   0457   24                dec R4
   0458   24                dec R4
                            
   0459   ef                sex STACK_REG    
   045a   3a 61             bnz PRINT_DIGIT_LOOP
   045c   30 8f             br PRINT_HEX_END
                            
   045e                 PRINT_CHECK_DIGIT
   045e   85                glo R5
   045f   32 8f             bz PRINT_HEX_END
                        
   0461                 PRINT_DIGIT_LOOP
   0461   04                ldn R4
   0462   fa 0f             ani 0Fh
   0464   5f                str STACK_REG
   0465   f8 12             ldi HEX_CHARS.0
   0467   f4                add
   0468   a6                plo R6
   0469   f8 04             ldi HEX_CHARS.1
   046b   7c 00             adci 0
   046d   b6                phi R6
                            
   046e   06                ldn R6
   046f   73                stxd
                            
   0470   f8 04             ldi 4
   0472   a6                plo R6
                            
   0473                 PRINT_HEX_SHIFT_LOOP1
   0473   14                inc R4
   0474   14                inc R4
   0475   14                inc R4
                            
   0476   04                ldn R4
   0477   f6                shr
   0478   54                str R4
   0479   24                dec R4
                            
   047a   04                ldn R4
   047b   76                shrc
   047c   54                str R4
   047d   24                dec R4
                            
   047e   04                ldn R4
   047f   76                shrc
   0480   54                str R4
   0481   24                dec R4
                            
   0482   04                ldn R4
   0483   76                shrc
   0484   54                str R4
                            
   0485   26                dec R6
   0486   86                glo R6
   0487   3a 73             bnz PRINT_HEX_SHIFT_LOOP1
                            
   0489   95                ghi R5      ;check if R5 flag is set, if set then skip decrementing.
   048a   c6                lsnz
   048b   25                dec R5
   048c   c4                nop
   048d   30 49             br PRINT_UNTIL_R
                        
   048f                 PRINT_HEX_END
   048f   8f                glo STACK_REG
   0490   a6                plo R6
   0491   9f                ghi STACK_REG
   0492   b6                phi R6
   0493   16                inc R6
                            
   0494   f8 52             ldi PRINT.0     ;prepare to call PRINT
   0496   ad                plo CALL_REG
   0497   f8 01             ldi PRINT.1
   0499   bd                phi CALL_REG
                            
   049a   f8 00             ldi FCALL.0
   049c   ae                plo FCALL_REG
   049d   de                sep FCALL_REG
                            
   049e   86                glo R6
   049f   fc 04             adi 4
   04a1   af                plo STACK_REG
   04a2   96                ghi R6
   04a3   7c 00             adci 0
   04a5   bf                phi STACK_REG
                            
   04a6   ef                sex STACK_REG   ;restore local registers
   04a7   72                ldxa
   04a8   a6                plo R6
   04a9   72                ldxa
   04aa   b6                phi R6
   04ab   f0                ldx
   04ac   b5                phi R5
                            
   04ad   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-PRINT DEC------------------------------------
                        ;-R4-int pointer-------------------------------
                        ;-Local registers------------------------------
                        ;-R5-R6-R7-R10-R12-----------------------------
                        ;-R10-flags------------------------------------
   04ae                 PRINT_DEC
   04ae   ef                sex STACK_REG
                            
   04af   95                ghi R5          ;saving local registers
   04b0   73                stxd
   04b1   85                glo R5
   04b2   73                stxd
                            
   04b3   96                ghi R6
   04b4   73                stxd
   04b5   86                glo R6
   04b6   73                stxd
                            
   04b7   97                ghi R7
   04b8   73                stxd
   04b9   87                glo R7
   04ba   73                stxd
                        
   04bb   9a                ghi R10
   04bc   73                stxd
   04bd   8a                glo R10
   04be   73                stxd
                            
   04bf   9c                ghi R12
   04c0   73                stxd
   04c1   8c                glo R12
   04c2   73                stxd
                            
   04c3   f8 00             ldi 0
   04c5   aa                plo R10
   04c6   ba                phi R10
                            
   04c7   14                inc R4
   04c8   14                inc R4
   04c9   14                inc R4
                            
   04ca   04                ldn R4
   04cb   73                stxd
   04cc   24                dec R4
   04cd   04                ldn R4
   04ce   73                stxd
   04cf   24                dec R4
   04d0   04                ldn R4
   04d1   73                stxd
   04d2   24                dec R4
   04d3   04                ldn R4
   04d4   73                stxd        ;+10 the integer
                            
   04d5   f8 00             ldi 0
   04d7   73                stxd
   04d8   73                stxd
   04d9   73                stxd
   04da   f8 0a             ldi 0Ah
   04dc   73                stxd        ;+6 divider
                            
   04dd   f8 00             ldi 0
   04df   73                stxd
   04e0   73                stxd
   04e1   73                stxd
   04e2   73                stxd        ;+2 remainder
                            
   04e3   73                stxd        ;+1 output string buffer end
                            
   04e4   8f                glo STACK_REG
   04e5   ac                plo R12
   04e6   9f                ghi STACK_REG
   04e7   bc                phi R12
                            
   04e8   8c                glo R12
   04e9   fc 0d             adi 13
   04eb   a4                plo R4
   04ec   9c                ghi R12
   04ed   7c 00             adci 0
   04ef   b4                phi R4
                            
   04f0   e4                sex R4
   04f1   f0                ldx
   04f2   fa 80             ani 080h
   04f4   c2 05 0d          lbz PRINT_DEC_MAIN_LOOP
                            
   04f7   8a                glo R10
   04f8   f9 01             ori 1
   04fa   aa                plo R10
                            
   04fb   24                dec R4
   04fc   24                dec R4
   04fd   24                dec R4
                            
   04fe   f8 82             ldi 082h
   0500   fe                shl
   0501   a6                plo R6
                            
   0502                 PRINT_DEC_INVER_LOOP
   0502   f0                ldx
   0503   fb ff             xri 0FFh
   0505   7c 00             adci 0
   0507   54                str R4
   0508   14                inc R4
                            
   0509   26                dec R6
   050a   86                glo R6
   050b   3a 02             bnz PRINT_DEC_INVER_LOOP
                            
   050d                 PRINT_DEC_MAIN_LOOP    
   050d   8c                glo R12
   050e   fc 0a             adi 10
   0510   a4                plo R4
   0511   a6                plo R6
   0512   9c                ghi R12
   0513   7c 00             adci 0
   0515   b4                phi R4
   0516   b6                phi R6
                            
   0517   8c                glo R12
   0518   fc 06             adi 6
   051a   a5                plo R5
   051b   9c                ghi R12
   051c   7c 00             adci 0
   051e   b5                phi R5
                            
   051f   8c                glo R12
   0520   fc 02             adi 2
   0522   a7                plo R7
   0523   9c                ghi R12
   0524   7c 00             adci 0
   0526   b7                phi R7
                            
   0527   f8 d4             ldi INTEGER_DIV.0
   0529   ad                plo CALL_REG
   052a   f8 01             ldi INTEGER_DIV.1
   052c   bd                phi CALL_REG
                            
   052d   f8 00             ldi FCALL.0
   052f   ae                plo FCALL_REG
   0530   de                sep FCALL_REG
                            
   0531   ef                sex STACK_REG
                            
   0532   8c                glo R12
   0533   fc 02             adi 2
   0535   a7                plo R7
   0536   9c                ghi R12
   0537   7c 00             adci 0
   0539   b7                phi R7
                            
   053a   07                ldn R7
   053b   fc 30             adi 48
   053d   73                stxd
                            
   053e   8c                glo R12
   053f   fc 0a             adi 10
   0541   a4                plo R4
   0542   9c                ghi R12
   0543   7c 00             adci 0
   0545   b4                phi R4
                            
   0546   e4                sex R4
                            
   0547   f8 00             ldi 0
   0549   f1                or
   054a   60                irx
   054b   f1                or
   054c   60                irx
   054d   f1                or
   054e   60                irx
   054f   f1                or
                            
   0550   32 55             bz PRINT_DEC_END
   0552   c0 05 0d          lbr PRINT_DEC_MAIN_LOOP
                        
   0555                 PRINT_DEC_END
   0555   8a                glo R10
   0556   fa 01             ani 1
   0558   32 5e             bz PRINT_DEC_FINAL
                            
   055a   ef                sex STACK_REG
   055b   f8 2d             ldi 45
   055d   73                stxd
                        
   055e                 PRINT_DEC_FINAL
   055e   8f                glo STACK_REG
   055f   a6                plo R6
   0560   9f                ghi STACK_REG
   0561   b6                phi R6
   0562   16                inc R6
                            
   0563   f8 52             ldi PRINT.0
   0565   ad                plo CALL_REG
   0566   f8 01             ldi PRINT.1
   0568   bd                phi CALL_REG
                            
   0569   f8 00             ldi FCALL.0
   056b   ae                plo FCALL_REG
   056c   de                sep FCALL_REG
                            
   056d   8c                glo R12
   056e   fc 0e             adi 14
   0570   af                plo STACK_REG
   0571   9c                ghi R12
   0572   7c 00             adci 0
   0574   bf                phi STACK_REG
                            
   0575   ef                sex STACK_REG
                            
   0576   72                ldxa
   0577   ac                plo R12
   0578   72                ldxa
   0579   bc                phi R12
                            
   057a   72                ldxa
   057b   aa                plo R10
   057c   72                ldxa
   057d   ba                phi R10
                            
   057e   72                ldxa
   057f   a7                plo R7
   0580   72                ldxa
   0581   b7                phi R7
                            
   0582   72                ldxa
   0583   a6                plo R6
   0584   72                ldxa
   0585   b6                phi R6
                            
   0586   72                ldxa
   0587   a5                plo R5
   0588   f0                ldx
   0589   b5                phi R5
                            
   058a   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-READ DEC-------------------------------------
                        ;-R4-string pointer----------------------------
                        ;-R5-result pointer----------------------------
   058b                 READ_DEC
   058b   ef                sex STACK_REG
                            
   058c   94                ghi R4
   058d   73                stxd
   058e   84                glo R4
   058f   73                stxd        ;+7 string pointer
                            
   0590   95                ghi R5
   0591   73                stxd
   0592   85                glo R5
   0593   73                stxd        ;+5 result pointer
                            
   0594   f8 00             ldi 0
   0596   73                stxd
   0597   73                stxd
   0598   73                stxd
   0599   f8 0a             ldi 0Ah
   059b   73                stxd        ;+1 multiplier
                            
   059c   f8 00             ldi 0       ;set result to 0
   059e   55                str R5
   059f   15                inc R5
   05a0   55                str R5
   05a1   15                inc R5
   05a2   55                str R5
   05a3   15                inc R5
   05a4   55                str R5
                            
   05a5                 READ_DEC_MAIN_LOOP
   05a5   8f                glo STACK_REG
   05a6   fc 07             adi 7
   05a8   a6                plo R6
   05a9   9f                ghi STACK_REG
   05aa   7c 00             adci 0
   05ac   b6                phi R6
                            
   05ad   06                ldn R6
   05ae   a4                plo R4
   05af   16                inc R6
   05b0   06                ldn R6
   05b1   b4                phi R4
                            
   05b2   04                ldn R4
   05b3   ff 30             smi 48
   05b5   cb 06 1c          lbnf READ_DEC_END
   05b8   ff 0a             smi 10
   05ba   c3 06 1c          lbdf READ_DEC_END
                            
   05bd   8f                glo STACK_REG
   05be   fc 05             adi 5
   05c0   a6                plo R6
   05c1   9f                ghi STACK_REG
   05c2   7c 00             adci 0
   05c4   b6                phi R6
                            
   05c5   06                ldn R6
   05c6   a4                plo R4
   05c7   16                inc R6
   05c8   06                ldn R6
   05c9   b4                phi R4
                            
   05ca   b6                phi R6
   05cb   84                glo R4
   05cc   a6                plo R6
                            
   05cd   8f                glo STACK_REG
   05ce   a5                plo R5
   05cf   9f                ghi STACK_REG
   05d0   b5                phi R5
   05d1   15                inc R5
                            
   05d2   f8 72             ldi INTEGER_MUL.0     ;prepare to call INTEGER_MUL
   05d4   ad                plo CALL_REG
   05d5   f8 03             ldi INTEGER_MUL.1       
   05d7   bd                phi CALL_REG
                            
   05d8   f8 00             ldi FCALL.0
   05da   ae                plo FCALL_REG
   05db   de                sep FCALL_REG
                            
   05dc   8f                glo STACK_REG
   05dd   fc 07             adi 7
   05df   a6                plo R6
   05e0   9f                ghi STACK_REG
   05e1   7c 00             adci 0
   05e3   b6                phi R6
                            
   05e4   06                ldn R6
   05e5   a4                plo R4
   05e6   16                inc R6
   05e7   06                ldn R6
   05e8   b4                phi R4
                            
   05e9   8f                glo STACK_REG
   05ea   fc 05             adi 5
   05ec   a6                plo R6
   05ed   9f                ghi STACK_REG
   05ee   7c 00             adci 0
   05f0   b6                phi R6
                            
   05f1   06                ldn R6
   05f2   a5                plo R5
   05f3   16                inc R6
   05f4   06                ldn R6
   05f5   b5                phi R5
                            
   05f6   e5                sex R5
                            
   05f7   04                ldn R4
   05f8   ff 30             smi 48
                            
   05fa   f4                add
   05fb   55                str R5
   05fc   15                inc R5
                            
   05fd   f8 00             ldi 0
   05ff   74                adc
   0600   55                str R5
   0601   15                inc R5
                            
   0602   f8 00             ldi 0
   0604   74                adc
   0605   55                str R5
   0606   15                inc R5
                            
   0607   f8 00             ldi 0
   0609   74                adc
   060a   55                str R5
                        
   060b   14                inc R4
                            
   060c   8f                glo STACK_REG
   060d   fc 07             adi 7
   060f   a6                plo R6
   0610   9f                ghi STACK_REG
   0611   7c 00             adci 0
   0613   b6                phi R6
                            
   0614   84                glo R4
   0615   56                str R6
   0616   16                inc R6
   0617   94                ghi R4
   0618   56                str R6
                            
   0619   c0 05 a5          lbr READ_DEC_MAIN_LOOP
                           
   061c                 READ_DEC_END
   061c   8f                glo STACK_REG
   061d   fc 05             adi 5
   061f   af                plo STACK_REG
   0620   9f                ghi STACK_REG
   0621   7c 00             adci 0
   0623   bf                phi STACK_REG
                            
   0624   ef                sex STACK_REG
                            
   0625   72                ldxa            ;restore R4 and R5
   0626   a5                plo R5
   0627   72                ldxa
   0628   b5                phi R5
   0629   72                ldxa
   062a   a4                plo R4
   062b   f0                ldx
   062c   b4                phi R4
                            
   062d   de                sep RETURN      ;RETURN    
                        ;----------------------------------------------
                        
                        ;-READ HEX-------------------------------------
                        ;-R4-string pointer----------------------------
                        ;-R5-result pointer----------------------------
   062e                 READ_HEX
   062e   ef                sex STACK_REG
                            
   062f   96                ghi R6
   0630   73                stxd
   0631   86                glo R6
   0632   73                stxd
                            
   0633   97                ghi R7
   0634   73                stxd
   0635   87                glo R7
   0636   73                stxd
                            
   0637   94                ghi R4
   0638   73                stxd
   0639   84                glo R4
   063a   73                stxd        ;+3 string pointer
                            
   063b   95                ghi R5
   063c   73                stxd
   063d   85                glo R5
   063e   73                stxd        ;+1 result pointer
                            
   063f   f8 00             ldi 0       ;set result to 0
   0641   55                str R5
   0642   15                inc R5
   0643   55                str R5
   0644   15                inc R5
   0645   55                str R5
   0646   15                inc R5
   0647   55                str R5
                            
   0648   25                dec R5
   0649   25                dec R5
   064a   25                dec R5
                            
   064b                 READ_HEX_MAINLOOP
   064b   f8 00             ldi 0
   064d   a7                plo R7
                            
   064e   04                ldn R4
   064f   ff 30             smi 48
   0651   3b 9e             bm READ_HEX_END
   0653   17                inc R7
   0654   ff 0a             smi 10
   0656   3b 6a             bm READ_HEX_CONTINUE
   0658   ff 07             smi 7
   065a   3b 9e             bm READ_HEX_END
   065c   17                inc R7
   065d   ff 06             smi 6
   065f   3b 6a             bm READ_HEX_CONTINUE
   0661   ff 1a             smi 26
   0663   3b 9e             bm READ_HEX_END
   0665   17                inc R7
   0666   ff 06             smi 6
   0668   33 9e             bpz READ_HEX_END
                            
   066a                 READ_HEX_CONTINUE
   066a   f8 04             ldi 4
   066c   a6                plo R6
                        
   066d                 READ_HEX_SHIFTLOOP      ;result = result << 4
   066d   05                ldn R5
   066e   fe                shl
   066f   55                str R5
   0670   15                inc R5
                            
   0671   05                ldn R5
   0672   7e                shlc
   0673   55                str R5
   0674   15                inc R5
                            
   0675   05                ldn R5
   0676   7e                shlc
   0677   55                str R5
   0678   15                inc R5
                            
   0679   05                ldn R5
   067a   7e                shlc
   067b   55                str R5
                            
   067c   25                dec R5
   067d   25                dec R5
   067e   25                dec R5
                            
   067f   26                dec R6
   0680   86                glo R6
   0681   3a 6d             bnz READ_HEX_SHIFTLOOP
                            
   0683   e5                sex R5
                            
   0684   27                dec R7
   0685   87                glo R7
   0686   3a 8d             bnz READ_HEX_HEXDIGIT
   0688   04                ldn R4
   0689   ff 30             smi 48
   068b   30 99             br READ_HEX_NEXTCHAR
                        
   068d                 READ_HEX_HEXDIGIT   
   068d   27                dec R7
   068e   87                glo R7
   068f   3a 96             bnz READ_HEX_HEXDIGITLOWER
   0691   04                ldn R4
   0692   ff 37             smi 55
   0694   30 99             br READ_HEX_NEXTCHAR
                            
   0696                 READ_HEX_HEXDIGITLOWER
   0696   04                ldn R4
   0697   ff 57             smi 87
                            
   0699                 READ_HEX_NEXTCHAR
   0699   f4                add
   069a   55                str R5
   069b   14                inc R4
   069c   30 4b             br READ_HEX_MAINLOOP
                        
   069e                 READ_HEX_END
   069e   8f                glo STACK_REG
   069f   fc 05             adi 5
   06a1   af                plo STACK_REG
   06a2   9f                ghi STACK_REG
   06a3   7c 00             adci 0
   06a5   bf                phi STACK_REG
                            
   06a6   ef                sex STACK_REG
                            
   06a7   72                ldxa
   06a8   a7                plo R7
   06a9   72                ldxa
   06aa   b7                phi R7
                            
   06ab   72                ldxa
   06ac   a6                plo R6
   06ad   f0                ldx
   06ae   b6                phi R6
                            
   06af   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-READ-VAR-------------------------------------
   06b0                 READ_VAR
   06b0   ef                sex STACK_REG
                            
   06b1   95                ghi R5
   06b2   73                stxd
   06b3   85                glo R5
   06b4   73                stxd                            ;+5 result pointer
                            
   06b5   f8 00             ldi 0
   06b7   73                stxd
   06b8   73                stxd                            ;+3 variableName address
                            
   06b9   73                stxd
   06ba   73                stxd                            ;+1 string address
                            
   06bb   f8 af             ldi GET_STRING.0                ;call GET_STRING
   06bd   ad                plo CALL_REG
   06be   f8 0d             ldi GET_STRING.1
   06c0   bd                phi CALL_REG
                            
   06c1   f8 00             ldi FCALL.0
   06c3   ae                plo FCALL_REG
   06c4   de                sep FCALL_REG
                            
   06c5   8a                glo R10                         ;if R10 == 0 then end, else continue
   06c6   3a cc             bnz READ_VAR_CONTINUE
   06c8   aa                plo R10
   06c9   c2 07 3f          lbz READ_VAR_END
                            
   06cc                 READ_VAR_CONTINUE
   06cc   8f                glo STACK_REG                   ;set R5 pointer to string address
   06cd   a5                plo R5
   06ce   9f                ghi STACK_REG
   06cf   b5                phi R5
   06d0   15                inc R5
                            
   06d1   8a                glo R10                         ;store string address and set R9
   06d2   a9                plo R9
   06d3   55                str R5
   06d4   15                inc R5
                            
   06d5   9a                ghi R10
   06d6   b9                phi R9
   06d7   55                str R5
                            
   06d8   f8 02             ldi VARLIST_FIRSTNODE.0         ;load the first node address
   06da   a5                plo R5
   06db   f8 21             ldi VARLIST_FIRSTNODE.1
   06dd   b5                phi R5
                            
   06de                 READ_VAR_SEARCHLOOP
   06de   85                glo R5                              ;test if the address in R5 is zero or not.
   06df   3a e5             bnz READ_VAR_SEARCHLOOP_CONTINUE
   06e1   95                ghi R5
   06e2   c2 07 3f          lbz READ_VAR_END
                            
   06e5                 READ_VAR_SEARCHLOOP_CONTINUE
   06e5   45                lda R5                              ;set R6 pointer to node address
   06e6   a6                plo R6
   06e7   45                lda R5
   06e8   b6                phi R6
                            
   06e9   16                inc R6                              ;skip next node
   06ea   16                inc R6
                            
   06eb   46                lda R6                              ;load variableNode->name address to R8
   06ec   a8                plo R8                              ;for comparing the strings
   06ed   46                lda R6
   06ee   b8                phi R8
                            
   06ef   f8 c0             ldi STR_COMPARATOR.0                ;call STR_COMPARATOR
   06f1   ad                plo CALL_REG
   06f2   f8 01             ldi STR_COMPARATOR.1
   06f4   bd                phi CALL_REG
                            
   06f5   f8 00             ldi FCALL.0
   06f7   ae                plo FCALL_REG
   06f8   de                sep FCALL_REG
                            
   06f9   8a                glo R10                             ;if R10 == 1 then READ_VAR_FOUND
   06fa   ca 07 11          lbnz READ_VAR_FOUND
                        
   06fd                 READ_VAR_NEXTNODE
   06fd   26                dec R6                              ;set back R6 to the base of the node
   06fe   26                dec R6
   06ff   26                dec R6
   0700   26                dec R6
                            
   0701   46                lda R6                              ;load next node address to R5
   0702   a5                plo R5
   0703   46                lda R6
   0704   b5                phi R5
                            
   0705   8f                glo STACK_REG                       ;set R6 pointer to string address
   0706   a6                plo R6
   0707   9f                ghi STACK_REG
   0708   b6                phi R6
   0709   16                inc R6
                            
   070a   46                lda R6                              ;load string address to R9
   070b   a9                plo R9
   070c   46                lda R6
   070d   b9                phi R9
                            
   070e   c0 06 de          lbr READ_VAR_SEARCHLOOP
                        
   0711                 READ_VAR_FOUND
   0711   8f                glo STACK_REG
   0712   fc 05             adi 5                               ;set R7 pointer to result pointer
   0714   a7                plo R7
   0715   9f                ghi STACK_REG
   0716   7c 00             adci 0
   0718   b7                phi R7
                            
   0719   47                lda R7
   071a   a5                plo R5
   071b   47                lda R7
   071c   b5                phi R5
                            
   071d   46                lda R6
   071e   55                str R5
   071f   15                inc R5
                            
   0720   46                lda R6
   0721   55                str R5
   0722   15                inc R5
                            
   0723   46                lda R6
   0724   55                str R5
   0725   15                inc R5
                            
   0726   46                lda R6
   0727   55                str R5
                            
   0728   30 3f             br READ_VAR_END
                            
   072a                 READ_VAR_NOTFOUND
   072a   8f                glo STACK_REG
   072b   fc 05             adi 5                               ;set R7 pointer to result pointer
   072d   a7                plo R7
   072e   9f                ghi STACK_REG
   072f   7c 00             adci 0
   0731   b7                phi R7
                            
   0732   47                lda R7
   0733   a5                plo R5
   0734   47                lda R7
   0735   b5                phi R5
                            
   0736   f8 00             ldi 0
   0738   55                str R5
   0739   15                inc R5
                            
   073a   55                str R5
   073b   15                inc R5
                            
   073c   55                str R5
   073d   15                inc R5
                            
   073e   55                str R5
                        
   073f                 READ_VAR_END
   073f   8f                glo STACK_REG
   0740   fc 05             adi 5
   0742   af                plo STACK_REG
   0743   9f                ghi STACK_REG
   0744   7c 00             adci 0
   0746   bf                phi STACK_REG
                            
   0747   ef                sex STACK_REG
                            
   0748   72                ldxa
   0749   a5                plo R5
   074a   f0                ldx
   074b   b5                phi R5
                            
   074c   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-FACTOR---------------------------------------
                        ;-R4-string pointer----------------------------
                        ;-R5-result pointer----------------------------
                        ;-R10-result code------------------------------
   074d                 FACTOR
   074d   ef                sex STACK_REG
                            
   074e   94                ghi R4
   074f   73                stxd
   0750   84                glo R4
   0751   73                stxd    ;+4 string pt
                            
   0752   95                ghi R5
   0753   73                stxd
   0754   85                glo R5
   0755   73                stxd    ;+2 result pt
                            
   0756   f8 00             ldi 0
   0758   73                stxd    ;+1 flag, indicates if the factor needs to be negated
                            
                            
   0759                 FACTOR_MAIN
   0759   04                ldn R4
   075a   fb 20             xri 32
   075c   c2 07 c8          lbz FACTOR_NEXT_CYCLE       ;if ' '
   075f   04                ldn R4
   0760   fb 2b             xri 43
   0762   c2 07 c8          lbz FACTOR_NEXT_CYCLE       ;if '+'
   0765   04                ldn R4
   0766   fb 2d             xri 45
   0768   c2 07 bd          lbz FACTOR_NEGATE           ;if '-'
   076b   04                ldn R4
   076c   fb 28             xri 40
   076e   c2 07 a3          lbz FACTOR_PARENTHESIS      ;if '('
   0771   04                ldn R4
   0772   ff 30             smi 48
   0774   cb 07 cc          lbnf FACTOR_END             ;if *R4 < '0'
   0777   ff 0a             smi 10
   0779   c3 07 cc          lbdf FACTOR_END             ;if *R4 > '9'
                        
   077c   04                ldn R4
   077d   fb 30             xri 48
   077f   3a 88             bnz FACTOR_READ_DEC         ;if *R4 != '0'
                            
   0781   14                inc R4                      ;increment R4 to get the next char
   0782   04                ldn R4
   0783   fb 78             xri 120
   0785   32 95             bz FACTOR_READ_HEX          ;if *R4 == 'x'
                            
   0787   24                dec R4                      ;decrement R4 to step back
                        
   0788                 FACTOR_READ_DEC    
   0788   f8 8b             ldi READ_DEC.0
   078a   ad                plo CALL_REG
   078b   f8 05             ldi READ_DEC.1
   078d   bd                phi CALL_REG
                            
   078e   f8 00             ldi FCALL.0
   0790   ae                plo FCALL_REG
   0791   de                sep FCALL_REG
                            
   0792   c0 07 cc          lbr FACTOR_END
                            
   0795                 FACTOR_READ_HEX
   0795   14                inc R4
                            
   0796   f8 2e             ldi READ_HEX.0
   0798   ad                plo CALL_REG
   0799   f8 06             ldi READ_HEX.1
   079b   bd                phi CALL_REG
                            
   079c   f8 00             ldi FCALL.0
   079e   ae                plo FCALL_REG
   079f   de                sep FCALL_REG
                            
   07a0   c0 07 cc          lbr FACTOR_END
                            
   07a3                 FACTOR_PARENTHESIS
   07a3   14                inc R4
                            
   07a4   f8 f2             ldi EXPRESSION.0
   07a6   ad                plo CALL_REG
   07a7   f8 08             ldi EXPRESSION.1
   07a9   bd                phi CALL_REG
                            
   07aa   f8 00             ldi FCALL.0
   07ac   ae                plo FCALL_REG
   07ad   de                sep FCALL_REG
                        
   07ae                 FACTOR_PARENTHESIS_SKIPSPACES
   07ae   44                lda R4
   07af   fb 20             xri 32
   07b1   32 ae             bz FACTOR_PARENTHESIS_SKIPSPACES
   07b3   24                dec R4
                            
   07b4   44                lda R4
   07b5   fb 29             xri 41
   07b7   c2 07 cc          lbz FACTOR_END
                            
   07ba   c0 07 59          lbr FACTOR_MAIN
                            
   07bd                 FACTOR_NEGATE
   07bd   8f                glo STACK_REG
   07be   a6                plo R6
   07bf   9f                ghi STACK_REG
   07c0   b6                phi R6
   07c1   16                inc R6
                            
   07c2   06                ldn R6
   07c3   fb ff             xri 0FFh
   07c5   fa 01             ani 1
   07c7   56                str R6
                            
   07c8                 FACTOR_NEXT_CYCLE
   07c8   14                inc R4
   07c9   c0 07 59          lbr FACTOR_MAIN
                            
   07cc                 FACTOR_END
   07cc   8f                glo STACK_REG
   07cd   a6                plo R6
   07ce   9f                ghi STACK_REG
   07cf   b6                phi R6
   07d0   16                inc R6
                            
   07d1   06                ldn R6
   07d2   c2 07 f2          lbz FACTOR_FINAL
                            
   07d5   8f                glo STACK_REG
   07d6   fc 02             adi 2
   07d8   a6                plo R6
   07d9   9f                ghi STACK_REG
   07da   7c 00             adci 0
   07dc   b6                phi R6
                            
   07dd   06                ldn R6
   07de   a5                plo R5
   07df   16                inc R6
   07e0   06                ldn R6
   07e1   b5                phi R5
                            
   07e2   e5                sex R5
                            
   07e3   f8 82             ldi 082h
   07e5   fe                shl
   07e6   a6                plo R6
                            
   07e7                 FACTOR_INVERTING
   07e7   f0                ldx
   07e8   fb ff             xri 0FFh
   07ea   7c 00             adci 0
   07ec   55                str R5
   07ed   60                irx
                            
   07ee   26                dec R6
   07ef   86                glo R6
   07f0   3a e7             bnz FACTOR_INVERTING
                            
   07f2                 FACTOR_FINAL
   07f2   8f                glo STACK_REG
   07f3   fc 05             adi 5
   07f5   af                plo STACK_REG
   07f6   9f                ghi STACK_REG
   07f7   7c 00             adci 0
   07f9   bf                phi STACK_REG
                            
   07fa   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-TERM-----------------------------------------
                        ;-R4-string pointer----------------------------
                        ;-R5-result------------------------------------
   07fb                 TERM
   07fb   ef                sex STACK_REG
                            
   07fc   94                ghi R4
   07fd   73                stxd
   07fe   84                glo R4
   07ff   73                stxd
                            
   0800   95                ghi R5
   0801   73                stxd
   0802   85                glo R5
   0803   73                stxd
                            
   0804   f8 4d             ldi FACTOR.0
   0806   ad                plo CALL_REG
   0807   f8 07             ldi FACTOR.1
   0809   bd                phi CALL_REG
                            
   080a   f8 00             ldi FCALL.0
   080c   ae                plo FCALL_REG
   080d   de                sep FCALL_REG
                            
   080e                 TERM_MAIN
   080e   04                ldn R4
   080f   fb 20             xri 32
   0811   c2 08 dc          lbz TERM_NEXT_CYCLE
   0814   04                ldn R4
   0815   fb 2a             xri 42
   0817   c2 08 87          lbz TERM_MULTIPLY       ;if '*'
   081a   04                ldn R4
   081b   fb 2f             xri 47
   081d   32 22             bz TERM_DIVIDE          ;if '/'
                            
   081f   c0 08 e0          lbr TERM_END
                            
   0822                 TERM_DIVIDE
   0822   14                inc R4
                            
   0823   f8 00             ldi 0
   0825   73                stxd
   0826   73                stxd
   0827   73                stxd
   0828   73                stxd    ;+5 remainder
                            
   0829   73                stxd
   082a   73                stxd
   082b   73                stxd
   082c   73                stxd    ;+1 divider
                            
   082d   8f                glo STACK_REG
   082e   a5                plo R5
   082f   9f                ghi STACK_REG
   0830   b5                phi R5
   0831   15                inc R5
                            
   0832   f8 4d             ldi FACTOR.0
   0834   ad                plo CALL_REG
   0835   f8 07             ldi FACTOR.1
   0837   bd                phi CALL_REG
                            
   0838   f8 00             ldi FCALL.0
   083a   ae                plo FCALL_REG
   083b   de                sep FCALL_REG
                            
   083c   8f                glo STACK_REG ;save R4 pointer
   083d   fc 0b             adi 11
   083f   a6                plo R6
   0840   9f                ghi STACK_REG
   0841   7c 00             adci 0
   0843   b6                phi R6
                            
   0844   84                glo R4
   0845   56                str R6
   0846   16                inc R6
   0847   94                ghi R4
   0848   56                str R6
                            
   0849   8f                glo STACK_REG
   084a   fc 09             adi 9
   084c   a8                plo R8
   084d   9f                ghi STACK_REG
   084e   7c 00             adci 0
   0850   b8                phi R8
                            
   0851   08                ldn R8
   0852   a4                plo R4
   0853   a6                plo R6
   0854   18                inc R8
   0855   08                ldn R8
   0856   b4                phi R4
   0857   b6                phi R6
                            
   0858   8f                glo STACK_REG
   0859   a5                plo R5
   085a   9f                ghi STACK_REG
   085b   b5                phi R5
   085c   15                inc R5
                            
   085d   8f                glo STACK_REG
   085e   fc 05             adi 5
   0860   a7                plo R7
   0861   9f                ghi STACK_REG
   0862   7c 00             adci 0
   0864   b7                phi R7
                            
   0865   f8 d4             ldi INTEGER_DIV.0
   0867   ad                plo CALL_REG
   0868   f8 01             ldi INTEGER_DIV.1
   086a   bd                phi CALL_REG
                            
   086b   f8 00             ldi FCALL.0
   086d   ae                plo FCALL_REG
   086e   de                sep FCALL_REG
                            
   086f   8f                glo STACK_REG
   0870   fc 0b             adi 11
   0872   a6                plo R6
   0873   9f                ghi STACK_REG
   0874   7c 00             adci 0
   0876   b6                phi R6
                            
   0877   06                ldn R6
   0878   a4                plo R4
   0879   16                inc R6
   087a   06                ldn R6
   087b   b4                phi R4
                            
   087c   8f                glo STACK_REG
   087d   fc 08             adi 8
   087f   af                plo STACK_REG
   0880   9f                ghi STACK_REG
   0881   7c 00             adci 0
   0883   bf                phi STACK_REG
                        
   0884   c0 08 0e          lbr TERM_MAIN
                            
   0887                 TERM_MULTIPLY
   0887   14                inc R4
                            
   0888   f8 00             ldi 0
   088a   73                stxd
   088b   73                stxd
   088c   73                stxd
   088d   73                stxd
                            
   088e   8f                glo STACK_REG
   088f   a5                plo R5
   0890   9f                ghi STACK_REG
   0891   b5                phi R5
   0892   15                inc R5
                            
   0893   f8 4d             ldi FACTOR.0
   0895   ad                plo CALL_REG
   0896   f8 07             ldi FACTOR.1
   0898   bd                phi CALL_REG
                            
   0899   f8 00             ldi FCALL.0
   089b   ae                plo FCALL_REG
   089c   de                sep FCALL_REG
                            
   089d   8f                glo STACK_REG
   089e   fc 07             adi 7
   08a0   a6                plo R6
   08a1   9f                ghi STACK_REG
   08a2   7c 00             adci 0
   08a4   b6                phi R6
                            
   08a5   84                glo R4
   08a6   56                str R6
   08a7   16                inc R6
   08a8   94                ghi R4
   08a9   56                str R6
                            
   08aa   8f                glo STACK_REG
   08ab   fc 05             adi 5
   08ad   a8                plo R8
   08ae   9f                ghi STACK_REG
   08af   7c 00             adci 0
   08b1   b8                phi R8
                            
   08b2   08                ldn R8
   08b3   a4                plo R4
   08b4   a6                plo R6
   08b5   18                inc R8
   08b6   08                ldn R8
   08b7   b4                phi R4
   08b8   b6                phi R6
                            
   08b9   8f                glo STACK_REG
   08ba   a5                plo R5
   08bb   9f                ghi STACK_REG
   08bc   b5                phi R5
   08bd   15                inc R5
                            
   08be   f8 72             ldi INTEGER_MUL.0
   08c0   ad                plo CALL_REG
   08c1   f8 03             ldi INTEGER_MUL.1
   08c3   bd                phi CALL_REG
                            
   08c4   f8 00             ldi FCALL.0
   08c6   ae                plo FCALL_REG
   08c7   de                sep FCALL_REG
                            
   08c8   8f                glo STACK_REG
   08c9   fc 07             adi 7
   08cb   a6                plo R6
   08cc   9f                ghi STACK_REG
   08cd   7c 00             adci 0
   08cf   b6                phi R6
                            
   08d0   06                ldn R6
   08d1   a4                plo R4
   08d2   16                inc R6
   08d3   06                ldn R6
   08d4   b4                phi R4
                            
   08d5   1f                inc STACK_REG
   08d6   1f                inc STACK_REG
   08d7   1f                inc STACK_REG
   08d8   1f                inc STACK_REG
                        
   08d9   c0 08 0e          lbr TERM_MAIN
                            
   08dc                 TERM_NEXT_CYCLE
   08dc   14                inc R4
   08dd   c0 08 0e          lbr TERM_MAIN
                            
   08e0                 TERM_END
   08e0   8f                glo STACK_REG
   08e1   a6                plo R6
   08e2   9f                ghi STACK_REG
   08e3   b6                phi R6
   08e4   16                inc R6
                            
   08e5   46                lda R6
   08e6   a5                plo R5
   08e7   46                lda R6
   08e8   b5                phi R5
                            
   08e9   8f                glo STACK_REG
   08ea   fc 04             adi 4
   08ec   af                plo STACK_REG
   08ed   9f                ghi STACK_REG
   08ee   7c 00             adci 0
   08f0   bf                phi STACK_REG
                            
   08f1   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-EXPRESSION-----------------------------------
                        ;-R4-string pointer----------------------------
                        ;-R5-result pointer----------------------------
                        ;-Local registers------------------------------
                        ;-R6-R7----------------------------------------
   08f2                 EXPRESSION
   08f2   ef                sex STACK_REG
                            
   08f3   97                ghi R7      ;saving local registers
   08f4   73                stxd
   08f5   87                glo R7
   08f6   73                stxd
                            
   08f7   96                ghi R6
   08f8   73                stxd
   08f9   86                glo R6
   08fa   73                stxd
                            
   08fb   94                ghi R4      ;R4 pointer to input string 
   08fc   73                stxd
   08fd   84                glo R4
   08fe   73                stxd        ;+3 input string pointer
                            
   08ff   95                ghi R5      ;R5 pointer to result
   0900   73                stxd
   0901   85                glo R5
   0902   73                stxd        ;+1 result pointer
                            
   0903                 EXPRESSION_SKIPSPACES           ;skip spaces
   0903   44                lda R4
   0904   fb 20             xri 32
   0906   32 03             bz EXPRESSION_SKIPSPACES
   0908   24                dec R4
                            
   0909   f8 fb             ldi TERM.0                  ;read TERM
   090b   ad                plo CALL_REG
   090c   f8 07             ldi TERM.1
   090e   bd                phi CALL_REG
                            
   090f   f8 00             ldi FCALL.0
   0911   ae                plo FCALL_REG
   0912   de                sep FCALL_REG
                            
   0913                 EXPRESSION_MAIN
   0913   04                ldn R4
   0914   fb 20             xri 32                      ;if ' '
   0916   c2 09 d8          lbz EXPRESSION_NEXT_CYCLE
   0919   04                ldn R4
   091a   fb 2b             xri 43                      ;if '+'
   091c   32 27             bz EXPRESSION_ADD
   091e   04                ldn R4
   091f   fb 2d             xri 45                      ;if '-'
   0921   c2 09 80          lbz EXPRESSION_SUB
                            
                            
   0924   c0 09 dc          lbr EXPRESSION_END
                            
   0927                 EXPRESSION_ADD
   0927   14                inc R4
                            
   0928   f8 00             ldi 0               ;new result
   092a   73                stxd
   092b   73                stxd
   092c   73                stxd
   092d   73                stxd
                            
   092e   8f                glo STACK_REG       ;set R5 pointer to new result
   092f   a5                plo R5
   0930   9f                ghi STACK_REG
   0931   b5                phi R5
   0932   15                inc R5
                            
   0933   f8 fb             ldi TERM.0          ;read TERM
   0935   ad                plo CALL_REG
   0936   f8 07             ldi TERM.1
   0938   bd                phi CALL_REG
                            
   0939   f8 00             ldi FCALL.0
   093b   ae                plo FCALL_REG
   093c   de                sep FCALL_REG
                            
   093d   8f                glo STACK_REG       ; set R6 register to point to the input string pointer
   093e   fc 07             adi 7
   0940   a6                plo R6
   0941   9f                ghi STACK_REG
   0942   7c 00             adci 0
   0944   b6                phi R6
                            
   0945   84                glo R4              ;input string pointer = R4
   0946   56                str R6
   0947   16                inc R6
   0948   94                ghi R4
   0949   56                str R6
                            
   094a   8f                glo STACK_REG       ;set R5 register to point to result
   094b   a5                plo R5
   094c   9f                ghi STACK_REG
   094d   b5                phi R5
   094e   15                inc R5
                            
   094f   8f                glo STACK_REG       ;set R6 register to point to the result pointer
   0950   fc 05             adi 5
   0952   a6                plo R6
   0953   9f                ghi STACK_REG
   0954   7c 00             adci 0
   0956   b6                phi R6
                            
   0957   06                ldn R6              ;R4 = result pointer
   0958   a4                plo R4
   0959   16                inc R6
   095a   06                ldn R6
   095b   b4                phi R4
                            
   095c   e4                sex R4
                            
   095d   f8 02             ldi 2
   095f   fe                shl
   0960   a7                plo R7
                            
   0961                 EXPRESSION_ADD_LOOP     ;*result pointer += result;
   0961   05                ldn R5
   0962   74                adc
   0963   54                str R4
   0964   15                inc R5
   0965   60                irx
                            
   0966   27                dec R7
   0967   87                glo R7
   0968   ca 09 61          lbnz EXPRESSION_ADD_LOOP
                            
   096b   ef                sex STACK_REG
                            
   096c   8f                glo STACK_REG       
   096d   fc 07             adi 7
   096f   a6                plo R6
   0970   9f                ghi STACK_REG
   0971   7c 00             adci 0
   0973   b6                phi R6
                            
   0974   06                ldn R6              ;R4 = input string pointer
   0975   a4                plo R4
   0976   16                inc R6
   0977   06                ldn R6
   0978   b4                phi R4
                            
   0979   1f                inc STACK_REG
   097a   1f                inc STACK_REG
   097b   1f                inc STACK_REG
   097c   1f                inc STACK_REG
                        
   097d   c0 09 13          lbr EXPRESSION_MAIN
                        
   0980                 EXPRESSION_SUB
   0980   14                inc R4
                            
   0981   f8 00             ldi 0
   0983   73                stxd
   0984   73                stxd
   0985   73                stxd
   0986   73                stxd
                            
   0987   8f                glo STACK_REG
   0988   a5                plo R5
   0989   9f                ghi STACK_REG
   098a   b5                phi R5
   098b   15                inc R5
                            
   098c   f8 fb             ldi TERM.0
   098e   ad                plo CALL_REG
   098f   f8 07             ldi TERM.1
   0991   bd                phi CALL_REG
                            
   0992   f8 00             ldi FCALL.0
   0994   ae                plo FCALL_REG
   0995   de                sep FCALL_REG
                            
   0996   8f                glo STACK_REG
   0997   fc 07             adi 7
   0999   a6                plo R6
   099a   9f                ghi STACK_REG
   099b   7c 00             adci 0
   099d   b6                phi R6
                            
   099e   84                glo R4
   099f   56                str R6
   09a0   16                inc R6
   09a1   94                ghi R4
   09a2   56                str R6
                            
   09a3   8f                glo STACK_REG
   09a4   a5                plo R5
   09a5   9f                ghi STACK_REG
   09a6   b5                phi R5
   09a7   15                inc R5
                            
   09a8   8f                glo STACK_REG
   09a9   fc 05             adi 5
   09ab   a6                plo R6
   09ac   9f                ghi STACK_REG
   09ad   7c 00             adci 0
   09af   b6                phi R6
                            
   09b0   06                ldn R6
   09b1   a4                plo R4
   09b2   16                inc R6
   09b3   06                ldn R6
   09b4   b4                phi R4
                            
   09b5   e4                sex R4
                            
   09b6   f8 82             ldi 082h
   09b8   fe                shl
   09b9   a7                plo R7
                            
   09ba                 EXPRESSION_SUB_LOOP
   09ba   05                ldn R5
   09bb   75                sdb
   09bc   54                str R4
   09bd   15                inc R5
   09be   60                irx
                            
   09bf   27                dec R7
   09c0   87                glo R7
   09c1   3a ba             bnz EXPRESSION_SUB_LOOP
                            
   09c3   ef                sex STACK_REG
                            
   09c4   8f                glo STACK_REG
   09c5   fc 07             adi 7
   09c7   a6                plo R6
   09c8   9f                ghi STACK_REG
   09c9   7c 00             adci 0
   09cb   b6                phi R6
                            
   09cc   06                ldn R6
   09cd   a4                plo R4
   09ce   16                inc R6
   09cf   06                ldn R6
   09d0   b4                phi R4
                            
   09d1   1f                inc STACK_REG
   09d2   1f                inc STACK_REG
   09d3   1f                inc STACK_REG
   09d4   1f                inc STACK_REG
                        
   09d5   c0 09 13          lbr EXPRESSION_MAIN
                        
   09d8                 EXPRESSION_NEXT_CYCLE    
   09d8   14                inc R4
   09d9   c0 09 13          lbr EXPRESSION_MAIN
                            
   09dc                 EXPRESSION_END
   09dc   ef                sex STACK_REG
   09dd   60                irx
                            
   09de   72                ldxa            ;restoring registers
   09df   a5                plo R5
   09e0   72                ldxa
   09e1   b5                phi R5
   09e2   60                irx
   09e3   60                irx
   09e4   72                ldxa
   09e5   a6                plo R6
   09e6   72                ldxa
   09e7   b6                phi R6
   09e8   72                ldxa
   09e9   a7                plo R7
   09ea   f0                ldx
   09eb   b7                phi R7
                            
   09ec   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-DYN MEMORY INIT------------------------------
   09ed                 DYN_MEMORY_INIT
   09ed   f8 06             ldi HEAP_LASTADDRESS.0
   09ef   a4                plo R4
   09f0   f8 21             ldi HEAP_LASTADDRESS.1
   09f2   b4                phi R4
                            
   09f3   f8 10             ldi HEAP_START.0
   09f5   54                str R4
   09f6   14                inc R4
   09f7   f8 21             ldi HEAP_START.1
   09f9   54                str R4
                            
   09fa   f8 10             ldi HEAP_START.0
   09fc   a4                plo R4
   09fd   f8 21             ldi HEAP_START.1
   09ff   b4                phi R4
                            
   0a00   f8 eb             ldi (HEAP_END - HEAP_START - 5).0
   0a02   54                str R4
   0a03   14                inc R4
   0a04   f8 da             ldi (HEAP_END - HEAP_START - 5).1
   0a06   54                str R4
   0a07   14                inc R4
                            
   0a08   f8 00             ldi 0
   0a0a   54                str R4
   0a0b   14                inc R4
   0a0c   54                str R4
   0a0d   14                inc R4
   0a0e   54                str R4
                            
   0a0f   de                sep RETURN
                        ;----------------------------------------------
                        
   0a10                 DYN_MEMORY_DEBUG_STR
   0a10   20 2d 3e 20       db " -> size: ",0,", address: ",0,", previous: ",0,", ",0
   0a14   73 69 7a 65   
   0a18   3a 20 00 2c   
   0a1c   20 61 64 64   
   0a20   72 65 73 73   
   0a24   3a 20 00 2c   
   0a28   20 70 72 65   
   0a2c   76 69 6f 75   
   0a30   73 3a 20 00   
   0a34   2c 20 00      
   0a37                 DYN_MEMORY_DEBUG_STR_FREE
   0a37   46 52 45 45       db "FREE\r\n",0
   0a3b   0d 0a 00      
   0a3e                 DYN_MEMORY_DEBUG_STR_USED
   0a3e   55 53 45 44       db "USED\r\n",0
   0a42   0d 0a 00      
                        ;-DYN MEMORY DEBUG-----------------------------
   0a45                 DYN_MEMORY_DEBUG
   0a45   ef                sex STACK_REG
                            
   0a46   f8 00             ldi 0
   0a48   73                stxd
   0a49   73                stxd
   0a4a   73                stxd
   0a4b   73                stxd                    ;+14 address + 5
                            
   0a4c   73                stxd
   0a4d   73                stxd
   0a4e   f8 21             ldi HEAP_START.1
   0a50   73                stxd
   0a51   f8 10             ldi HEAP_START.0
   0a53   73                stxd                    ;+10 address
                            
   0a54   f8 00             ldi 0
   0a56   73                stxd                    ;+9 used
                            
   0a57   73                stxd
   0a58   73                stxd
   0a59   73                stxd
   0a5a   73                stxd                    ;+5 previous
                            
   0a5b   73                stxd
   0a5c   73                stxd
   0a5d   73                stxd
   0a5e   73                stxd                    ;+1 size
                            
   0a5f                 DYN_MEMORY_DEBUG_MAINLOOP
   0a5f   8f                glo STACK_REG
   0a60   fc 0a             adi 10
   0a62   a4                plo R4
   0a63   9f                ghi STACK_REG
   0a64   7c 00             adci 0
   0a66   b4                phi R4
                            
   0a67   e4                sex R4
                            
   0a68   f8 00             ldi HEAP_END.0
   0a6a   f5                sd
   0a6b   14                inc R4
   0a6c   f8 fc             ldi HEAP_END.1
   0a6e   75                sdb
                            
   0a6f   c3 0b 7b          lbdf DYN_MEMORY_DEBUG_END    ;if address >= HEAP_END
                            
   0a72   8f                glo STACK_REG
   0a73   fc 0a             adi 10
   0a75   a4                plo R4
   0a76   9f                ghi STACK_REG
   0a77   7c 00             adci 0
   0a79   b4                phi R4
                            
   0a7a   44                lda R4                      ;R5 = address
   0a7b   a5                plo R5
   0a7c   44                lda R4
   0a7d   b5                phi R5
                            
   0a7e   8f                glo STACK_REG
   0a7f   a4                plo R4
   0a80   9f                ghi STACK_REG
   0a81   b4                phi R4
   0a82   14                inc R4
                            
   0a83   45                lda R5
   0a84   54                str R4
   0a85   14                inc R4
                            
   0a86   45                lda R5
   0a87   54                str R4
   0a88   14                inc R4
                            
   0a89   14                inc R4
   0a8a   14                inc R4
                            
   0a8b   45                lda R5
   0a8c   54                str R4
   0a8d   14                inc R4
                            
   0a8e   45                lda R5
   0a8f   54                str R4
   0a90   14                inc R4
                            
   0a91   14                inc R4
   0a92   14                inc R4
                            
   0a93   45                lda R5
   0a94   54                str R4
                            
   0a95   8f                glo STACK_REG
   0a96   fc 0e             adi 14
   0a98   a4                plo R4
   0a99   9f                ghi STACK_REG
   0a9a   7c 00             adci 0
   0a9c   b4                phi R4
                            
   0a9d   85                glo R5
   0a9e   54                str R4
   0a9f   14                inc R4
                            
   0aa0   95                ghi R5
   0aa1   54                str R4
                            
   0aa2                 DYN_MEMORY_DEBUG_PRINT
   0aa2   8f                glo STACK_REG               ;set R4 to address
   0aa3   fc 0a             adi 10
   0aa5   a4                plo R4
   0aa6   9f                ghi STACK_REG
   0aa7   7c 00             adci 0
   0aa9   b4                phi R4
                        
   0aaa   f8 ae             ldi PRINT_DEC.0             ;print address in decimal
   0aac   ad                plo CALL_REG
   0aad   f8 04             ldi PRINT_DEC.1
   0aaf   bd                phi CALL_REG
                            
   0ab0   f8 00             ldi FCALL.0
   0ab2   ae                plo FCALL_REG
   0ab3   de                sep FCALL_REG
                            
   0ab4   f8 10             ldi DYN_MEMORY_DEBUG_STR.0      ;print the debug string
   0ab6   a6                plo R6
   0ab7   f8 0a             ldi DYN_MEMORY_DEBUG_STR.1
   0ab9   b6                phi R6
                            
   0aba   f8 52             ldi PRINT.0         ;prepare to call PRINT
   0abc   ad                plo CALL_REG
   0abd   f8 01             ldi PRINT.1
   0abf   bd                phi CALL_REG
                            
   0ac0   f8 00             ldi FCALL.0
   0ac2   ae                plo FCALL_REG
   0ac3   de                sep FCALL_REG       ;call PRINT
                            
   0ac4   86                glo R6                  ;save R6 value
   0ac5   a7                plo R7
   0ac6   96                ghi R6
   0ac7   b7                phi R7
                            
   0ac8   8f                glo STACK_REG           ;set R4 to size
   0ac9   a4                plo R4
   0aca   9f                ghi STACK_REG
   0acb   b4                phi R4
   0acc   14                inc R4
                        
   0acd   f8 ae             ldi PRINT_DEC.0         ;print size in decimal
   0acf   ad                plo CALL_REG
   0ad0   f8 04             ldi PRINT_DEC.1
   0ad2   bd                phi CALL_REG
                            
   0ad3   f8 00             ldi FCALL.0
   0ad5   ae                plo FCALL_REG
   0ad6   de                sep FCALL_REG
                            
   0ad7   87                glo R7                  ;continue printing the debug string
   0ad8   a6                plo R6
   0ad9   97                ghi R7
   0ada   b6                phi R6
                            
   0adb   f8 52             ldi PRINT.0             ;prepare to call PRINT
   0add   ad                plo CALL_REG
   0ade   f8 01             ldi PRINT.1
   0ae0   bd                phi CALL_REG
                            
   0ae1   f8 00             ldi FCALL.0
   0ae3   ae                plo FCALL_REG
   0ae4   de                sep FCALL_REG           ;call PRINT
                            
   0ae5   86                glo R6                  ;save R6 value
   0ae6   a7                plo R7
   0ae7   96                ghi R6
   0ae8   b7                phi R7
                            
   0ae9   8f                glo STACK_REG           ;set R4 to address+5
   0aea   fc 0e             adi 14
   0aec   a4                plo R4
   0aed   9f                ghi STACK_REG
   0aee   7c 00             adci 0
   0af0   b4                phi R4
                            
   0af1   f8 ae             ldi PRINT_DEC.0         ;print address+5 in decimal
   0af3   ad                plo CALL_REG
   0af4   f8 04             ldi PRINT_DEC.1
   0af6   bd                phi CALL_REG
                            
   0af7   f8 00             ldi FCALL.0
   0af9   ae                plo FCALL_REG
   0afa   de                sep FCALL_REG
                            
   0afb   87                glo R7                  ;continue printing the debug string
   0afc   a6                plo R6
   0afd   97                ghi R7
   0afe   b6                phi R6
                            
   0aff   f8 52             ldi PRINT.0             ;prepare to call PRINT
   0b01   ad                plo CALL_REG
   0b02   f8 01             ldi PRINT.1
   0b04   bd                phi CALL_REG
                            
   0b05   f8 00             ldi FCALL.0
   0b07   ae                plo FCALL_REG
   0b08   de                sep FCALL_REG           ;call PRINT
                            
   0b09   86                glo R6                  ;save R6 value
   0b0a   a7                plo R7
   0b0b   96                ghi R6
   0b0c   b7                phi R7
                            
   0b0d   8f                glo STACK_REG           ;set R4 to previous
   0b0e   fc 05             adi 5
   0b10   a4                plo R4
   0b11   9f                ghi STACK_REG
   0b12   7c 00             adci 0
   0b14   b4                phi R4
                            
   0b15   f8 ae             ldi PRINT_DEC.0         ;print previous in decimal
   0b17   ad                plo CALL_REG
   0b18   f8 04             ldi PRINT_DEC.1
   0b1a   bd                phi CALL_REG
                            
   0b1b   f8 00             ldi FCALL.0
   0b1d   ae                plo FCALL_REG
   0b1e   de                sep FCALL_REG
                            
   0b1f   87                glo R7                  ;continue printing the debug string
   0b20   a6                plo R6
   0b21   97                ghi R7
   0b22   b6                phi R6
                            
   0b23   f8 52             ldi PRINT.0             ;prepare to call PRINT
   0b25   ad                plo CALL_REG
   0b26   f8 01             ldi PRINT.1
   0b28   bd                phi CALL_REG
                            
   0b29   f8 00             ldi FCALL.0
   0b2b   ae                plo FCALL_REG
   0b2c   de                sep FCALL_REG           ;call PRINT
                            
   0b2d   8f                glo STACK_REG           ;set R4 to previous
   0b2e   fc 09             adi 9
   0b30   a4                plo R4
   0b31   9f                ghi STACK_REG
   0b32   7c 00             adci 0
   0b34   b4                phi R4
                            
   0b35   04                ldn R4
   0b36   32 40             bz DYN_MEMORY_DEBUG_FREE
                            
   0b38   f8 3e             ldi DYN_MEMORY_DEBUG_STR_USED.0
   0b3a   a6                plo R6
   0b3b   f8 0a             ldi DYN_MEMORY_DEBUG_STR_USED.1
   0b3d   b6                phi R6
                            
   0b3e   30 46             br DYN_MEMORY_DEBUG_NEXTADDRESS
                            
   0b40                 DYN_MEMORY_DEBUG_FREE
   0b40   f8 37             ldi DYN_MEMORY_DEBUG_STR_FREE.0
   0b42   a6                plo R6
   0b43   f8 0a             ldi DYN_MEMORY_DEBUG_STR_FREE.1
   0b45   b6                phi R6
                            
   0b46                 DYN_MEMORY_DEBUG_NEXTADDRESS
   0b46   f8 52             ldi PRINT.0             ;prepare to call PRINT
   0b48   ad                plo CALL_REG
   0b49   f8 01             ldi PRINT.1
   0b4b   bd                phi CALL_REG
                            
   0b4c   f8 00             ldi FCALL.0
   0b4e   ae                plo FCALL_REG
   0b4f   de                sep FCALL_REG           ;call PRINT
                            
   0b50   8f                glo STACK_REG           ;set R4 to address
   0b51   fc 0a             adi 10
   0b53   a4                plo R4
   0b54   9f                ghi STACK_REG
   0b55   7c 00             adci 0
   0b57   b4                phi R4
                            
   0b58   8f                glo STACK_REG           ;set R5 to address+5
   0b59   fc 0e             adi 14
   0b5b   a5                plo R5
   0b5c   9f                ghi STACK_REG
   0b5d   7c 00             adci 0
   0b5f   b5                phi R5
                            
   0b60   8f                glo STACK_REG           ;set R6 to size
   0b61   a6                plo R6
   0b62   9f                ghi STACK_REG
   0b63   b6                phi R6
   0b64   16                inc R6
                            
   0b65   e6                sex R6
                            
   0b66   45                lda R5
   0b67   f4                add
   0b68   60                irx
   0b69   54                str R4
   0b6a   14                inc R4
                            
   0b6b   45                lda R5
   0b6c   74                adc
   0b6d   60                irx
   0b6e   54                str R4
   0b6f   14                inc R4
                            
   0b70   45                lda R5
   0b71   74                adc
   0b72   60                irx
   0b73   54                str R4
   0b74   14                inc R4
                            
   0b75   45                lda R5
   0b76   74                adc
   0b77   54                str R4
                            
   0b78   c0 0a 5f          lbr DYN_MEMORY_DEBUG_MAINLOOP
                        
   0b7b                 DYN_MEMORY_DEBUG_END
   0b7b   8f                glo STACK_REG           ;set R6 to size
   0b7c   fc 11             adi 17
   0b7e   af                plo STACK_REG
   0b7f   9f                ghi STACK_REG
   0b80   7c 00             adci 0
   0b82   bf                phi STACK_REG
                            
   0b83   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-DYN MEMORY ALLOCATION------------------------
                        ;-R4-Size--------------------------------------
                        ;-R10-return address---------------------------
                        ;-Local registers------------------------------
                        ;-R5-R6-R7-R8----------------------------------
   0b84                 DYN_MEMORY_ALLOC
   0b84   ef                sex STACK_REG
                            
   0b85   98                ghi R8
   0b86   73                stxd
   0b87   88                glo R8
   0b88   73                stxd
                            
   0b89   97                ghi R7
   0b8a   73                stxd
   0b8b   87                glo R7
   0b8c   73                stxd
                            
   0b8d   96                ghi R6
   0b8e   73                stxd
   0b8f   86                glo R6
   0b90   73                stxd
                            
   0b91   95                ghi R5
   0b92   73                stxd
   0b93   85                glo R5
   0b94   73                stxd
                            
   0b95   f8 00             ldi 0
   0b97   73                stxd
   0b98   73                stxd                ;+7 currentSize
                            
   0b99   94                ghi R4
   0b9a   73                stxd
   0b9b   84                glo R4
   0b9c   73                stxd                ;+5 size
                            
   0b9d   84                glo R4              ;R4 += 5
   0b9e   fc 05             adi 5
   0ba0   a4                plo R4
   0ba1   94                ghi R4
   0ba2   7c 00             adci 0
   0ba4   b4                phi R4
                            
   0ba5   94                ghi R4
   0ba6   73                stxd
   0ba7   84                glo R4              ;newSize is initialized to size+5 for further calculation
   0ba8   73                stxd                ;+3 newSize
                        
   0ba9   f8 fc             ldi HEAP_END.1
   0bab   73                stxd
   0bac   f8 00             ldi HEAP_END.0
   0bae   73                stxd                ;+1 endAddress = HEAP_END
                            
   0baf   f8 06             ldi HEAP_LASTADDRESS.0
   0bb1   a4                plo R4
   0bb2   f8 21             ldi HEAP_LASTADDRESS.1
   0bb4   b4                phi R4
                            
   0bb5   44                lda R4
   0bb6   a5                plo R5
   0bb7   44                lda R4
   0bb8   b5                phi R5              ;R5 = lastAddress
                            
   0bb9   f8 00             ldi 0               ;R10 = 0
   0bbb   aa                plo R10
   0bbc   ba                phi R10
                            
   0bbd   f8 02             ldi 2               ;R8 = 2
   0bbf   a8                plo R8
                            
   0bc0                 DYN_MEMORY_ALLOC_MAINLOOP
   0bc0   8f                glo STACK_REG       ;set R4 pointer to endAddress
   0bc1   a4                plo R4
   0bc2   9f                ghi STACK_REG
   0bc3   b4                phi R4
   0bc4   14                inc R4
                            
   0bc5   e4                sex R4
                            
   0bc6   85                glo R5              ;currentAddress - endAddress
   0bc7   f7                sm
   0bc8   60                irx
   0bc9   95                ghi R5
   0bca   77                smb
                            
   0bcb   c3 0c b4          lbdf DYN_MEMORY_ALLOC_NEXTPASS      ;if currentAddress >= endAddress
                            
   0bce   8f                glo STACK_REG                       ;set R4 pointer to currentSize
   0bcf   fc 07             adi 7
   0bd1   a4                plo R4
   0bd2   9f                ghi STACK_REG
   0bd3   7c 00             adci 0
   0bd5   b4                phi R4
                            
   0bd6   85                glo R5                              ;R6 = R5 (currentAddress)
   0bd7   a6                plo R6
   0bd8   95                ghi R5
   0bd9   b6                phi R6
                            
   0bda   46                lda R6                              ;currentSize = block size
   0bdb   54                str R4
   0bdc   14                inc R4
                            
   0bdd   46                lda R6
   0bde   54                str R4
                            
   0bdf   16                inc R6
   0be0   16                inc R6
                                
   0be1   06                ldn R6
   0be2   ca 0c 9a          lbnz DYN_MEMORY_ALLOC_NEXTADDRESS   ;if the current block is USED
                            
   0be5   24                dec R4
                            
   0be6   8f                glo STACK_REG                   ;R6 pointer set to size
   0be7   fc 05             adi 5
   0be9   a6                plo R6
   0bea   9f                ghi STACK_REG
   0beb   7c 00             adci 0
   0bed   b6                phi R6
                            
   0bee   06                ldn R6                          ;currentSize == size
   0bef   f5                sd
   0bf0   ca 0c 0f          lbnz DYN_MEMORY_ALLOC_SIZEBIGGER
   0bf3   60                irx
   0bf4   16                inc R6
   0bf5   06                ldn R6
   0bf6   75                sdb
                        
   0bf7   26                dec R6                              ;set back R6
   0bf8   24                dec R4                              ;set back R4
                            
   0bf9   ca 0c 0f          lbnz DYN_MEMORY_ALLOC_SIZEBIGGER    ;if currentSize != size
                        
   0bfc                 DYN_MEMORY_ALLOC_SIZEEQ
   0bfc   85                glo R5                              ;R6 = currentAddress + 4
   0bfd   fc 04             adi 4
   0bff   a6                plo R6
   0c00   95                ghi R5
   0c01   7c 00             adci 0
   0c03   b6                phi R6
                            
   0c04   f8 01             ldi 1
   0c06   56                str R6                              ;used = 1
                            
   0c07   16                inc R6                              ;R6++
   0c08   86                glo R6
   0c09   aa                plo R10                             ;R10 = R6
   0c0a   96                ghi R6
   0c0b   ba                phi R10
                            
   0c0c   c0 0c cf          lbr DYN_MEMORY_ALLOC_END            ;RETURN
                        
   0c0f                 DYN_MEMORY_ALLOC_SIZEBIGGER
   0c0f   8f                glo STACK_REG                   ;R6 pinter set to newSize (size+5)
   0c10   fc 03             adi 3
   0c12   a6                plo R6
   0c13   9f                ghi STACK_REG
   0c14   7c 00             adci 0
   0c16   b6                phi R6
                            
   0c17   46                lda R6                          ;currentSize - newSize (size+5)
   0c18   f5                sd
   0c19   60                irx
   0c1a   46                lda R6
   0c1b   75                sdb
                            
   0c1c   26                dec R6                              ;set back R6
   0c1d   26                dec R6
                               
   0c1e   cb 0c 9a          lbnf DYN_MEMORY_ALLOC_NEXTADDRESS   ;if currentSize < newSize (size+5)
                            
   0c21   24                dec R4                              ;R4 pointer to size
   0c22   24                dec R4
   0c23   24                dec R4
                            
   0c24   85                glo R5                              ;R6 = R5 (currentAddress)
   0c25   a6                plo R6
   0c26   95                ghi R5
   0c27   b6                phi R6
                            
   0c28   44                lda R4                              ;set current block size to size
   0c29   56                str R6
   0c2a   16                inc R6
                            
   0c2b   44                lda R4
   0c2c   56                str R6
   0c2d   16                inc R6
                            
   0c2e   16                inc R6                              ;R6 += 2
   0c2f   16                inc R6
                            
   0c30   f8 01             ldi 1                               ;set used to 1
   0c32   56                str R6
                            
   0c33   16                inc R6                              ;R6++
   0c34   86                glo R6
   0c35   aa                plo R10                             ;R10 = R6
   0c36   96                ghi R6                              ;R10 is set for return
   0c37   ba                phi R10
                            
   0c38   8f                glo STACK_REG                   ;R4 pinter set to newSize (size+5)
   0c39   fc 03             adi 3
   0c3b   a4                plo R4
   0c3c   9f                ghi STACK_REG
   0c3d   7c 00             adci 0
   0c3f   b4                phi R4
                            
   0c40   85                glo R5                          ;R7 = currentAddress + size + 5
   0c41   f4                add
   0c42   60                irx
   0c43   a7                plo R7
   0c44   95                ghi R5
   0c45   74                adc
   0c46   b7                phi R7                          ;R7 is the newAddress
                            
   0c47   f8 06             ldi HEAP_LASTADDRESS.0
   0c49   a4                plo R4
   0c4a   f8 21             ldi HEAP_LASTADDRESS.1
   0c4c   b4                phi R4
                            
   0c4d   87                glo R7                          ;lastAddress = R7
   0c4e   54                str R4
   0c4f   14                inc R4
                            
   0c50   97                ghi R7
   0c51   54                str R4
                        
   0c52   8f                glo STACK_REG                   ;R4 pinter set to newSize
   0c53   fc 03             adi 3
   0c55   a4                plo R4
   0c56   9f                ghi STACK_REG
   0c57   7c 00             adci 0
   0c59   b4                phi R4
                            
   0c5a   8f                glo STACK_REG                   ;R4 pinter set to currentSize
   0c5b   fc 07             adi 7
   0c5d   a6                plo R6
   0c5e   9f                ghi STACK_REG
   0c5f   7c 00             adci 0
   0c61   b6                phi R6
                            
   0c62   46                lda R6                          ;newSize = currentSize - (size + 5)
   0c63   f7                sm
   0c64   54                str R4
   0c65   60                irx
                            
   0c66   46                lda R6
   0c67   77                smb
   0c68   54                str R4
                            
   0c69   24                dec R4                          ;set back R4 to newSize
                            
   0c6a   87                glo R7                          ;R6 = R7 (newAddress)
   0c6b   a6                plo R6
   0c6c   97                ghi R7
   0c6d   b6                phi R6
                            
   0c6e   44                lda R4                          ;new block size = newSize
   0c6f   56                str R6
   0c70   16                inc R6
                            
   0c71   44                lda R4
   0c72   56                str R6
   0c73   16                inc R6
                            
   0c74   85                glo R5                          ;new block previous address = currentAddress
   0c75   56                str R6
   0c76   16                inc R6
                            
   0c77   95                ghi R5
   0c78   56                str R6
   0c79   16                inc R6
                            
   0c7a   f8 00             ldi 0                           ;new block used = 0
   0c7c   56                str R6
   0c7d   16                inc R6
                            
   0c7e   24                dec R4
   0c7f   24                dec R4
                            
   0c80   86                glo R6                          ;R6 = R6 + newSize
   0c81   f4                add
   0c82   60                irx
   0c83   a6                plo R6
   0c84   96                ghi R6
   0c85   74                adc
   0c86   b6                phi R6
                            
   0c87   16                inc R6                          ;R6 += 2
   0c88   16                inc R6
                            
   0c89   86                glo R6
   0c8a   ff 00             smi HEAP_END.0
   0c8c   96                ghi R6
   0c8d   7f fc             smbi HEAP_END.1
                            
   0c8f   c3 0c cf          lbdf DYN_MEMORY_ALLOC_END
                            
   0c92   87                glo R7                          ;next block previous address = R7
   0c93   56                str R6
   0c94   16                inc R6
                            
   0c95   97                ghi R7
   0c96   56                str R6
                            
   0c97   c0 0c cf          lbr DYN_MEMORY_ALLOC_END
                            
   0c9a                 DYN_MEMORY_ALLOC_NEXTADDRESS
   0c9a   8f                glo STACK_REG               ;set R4 pointer to currentSize
   0c9b   fc 07             adi 7
   0c9d   a4                plo R4
   0c9e   9f                ghi STACK_REG
   0c9f   7c 00             adci 0
   0ca1   b4                phi R4
                            
   0ca2   85                glo R5
   0ca3   f4                add
   0ca4   60                irx
   0ca5   a5                plo R5
   0ca6   95                ghi R5
   0ca7   74                adc
   0ca8   b5                phi R5                          ;currentAddress += size
                            
   0ca9   85                glo R5
   0caa   fc 05             adi 5
   0cac   a5                plo R5
   0cad   95                ghi R5
   0cae   7c 00             adci 0
   0cb0   b5                phi R5                          ;currentAddress += 5
                            
   0cb1   c0 0b c0          lbr DYN_MEMORY_ALLOC_MAINLOOP
                            
   0cb4                 DYN_MEMORY_ALLOC_NEXTPASS
   0cb4   f8 10             ldi HEAP_START.0
   0cb6   a5                plo R5
   0cb7   f8 21             ldi HEAP_START.1
   0cb9   b5                phi R5
                            
   0cba   8f                glo STACK_REG                       ;set R4 pointer to endAddress
   0cbb   a4                plo R4
   0cbc   9f                ghi STACK_REG
   0cbd   b4                phi R4
   0cbe   14                inc R4
                            
   0cbf   f8 06             ldi HEAP_LASTADDRESS.0
   0cc1   a6                plo R6
   0cc2   f8 21             ldi HEAP_LASTADDRESS.1
   0cc4   b6                phi R6
                            
   0cc5   46                lda R6
   0cc6   54                str R4
   0cc7   14                inc R4
                            
   0cc8   46                lda R6
   0cc9   54                str R4
                        
   0cca   28                dec R8
   0ccb   88                glo R8
   0ccc   ca 0b c0          lbnz DYN_MEMORY_ALLOC_MAINLOOP
                            
   0ccf                 DYN_MEMORY_ALLOC_END
   0ccf   8f                glo STACK_REG
   0cd0   fc 09             adi 9
   0cd2   af                plo STACK_REG
   0cd3   9f                ghi STACK_REG
   0cd4   7c 00             adci 0
   0cd6   bf                phi STACK_REG
                            
   0cd7   ef                sex STACK_REG
                            
   0cd8   72                ldxa
   0cd9   a5                plo R5
   0cda   72                ldxa
   0cdb   b5                phi R5
                            
   0cdc   72                ldxa
   0cdd   a6                plo R6
   0cde   72                ldxa
   0cdf   b6                phi R6
                            
   0ce0   72                ldxa
   0ce1   a7                plo R7
   0ce2   72                ldxa
   0ce3   b7                phi R7
                            
   0ce4   72                ldxa
   0ce5   a8                plo R8
   0ce6   f0                ldx
   0ce7   b8                phi R8
                            
   0ce8   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-DYN MEMORY FREE------------------------------
                        ;-R4-address-----------------------------------
                        ;-Local registers------------------------------
                        ;-R5-R6----------------------------------------
   0ce9                 DYN_MEMORY_FREE
   0ce9   ef                sex STACK_REG
                            
   0cea   95                ghi R5      ;saving local registers
   0ceb   73                stxd
   0cec   85                glo R5
   0ced   73                stxd
                            
   0cee   96                ghi R6
   0cef   73                stxd
   0cf0   86                glo R6
   0cf1   73                stxd
                            
   0cf2   f8 00             ldi 0
   0cf4   73                stxd
   0cf5   73                stxd
   0cf6   73                stxd
   0cf7   73                stxd        ;+5 size
                            
   0cf8   73                stxd
   0cf9   73                stxd
   0cfa   73                stxd
   0cfb   73                stxd        ;+1 nextSize
                            
   0cfc   24                dec R4      ;R4-- (address--)
   0cfd   54                str R4      ;set current block to free
                            
   0cfe   24                dec R4
   0cff   24                dec R4
                            
   0d00   44                lda R4      ;R6 = previous block address
   0d01   a6                plo R6
   0d02   44                lda R4
   0d03   b6                phi R6
                            
   0d04   24                dec R4      ;set R4 to the beginning of the current block
   0d05   24                dec R4
   0d06   24                dec R4
   0d07   24                dec R4
                            
   0d08   86                glo R6
   0d09   ca 0d 12          lbnz DYN_MEMORY_FREE_NEXTCHECK
   0d0c   96                ghi R6
   0d0d   ca 0d 12          lbnz DYN_MEMORY_FREE_NEXTCHECK      ;if previousAddress != 0
                            
   0d10   30 21             br DYN_MEMORY_FREE_MERGE
                        
   0d12                 DYN_MEMORY_FREE_NEXTCHECK
   0d12   86                glo R6                              ;set R5 pointer to previous block used
   0d13   fc 04             adi 4
   0d15   a5                plo R5
   0d16   96                ghi R6
   0d17   7c 00             adci 0
   0d19   b5                phi R5
                            
   0d1a   05                ldn R5
   0d1b   3a 21             bnz DYN_MEMORY_FREE_MERGE           ;if used != 0
                            
   0d1d   86                glo R6                              ;set R4 to previous block
   0d1e   a4                plo R4
   0d1f   96                ghi R6
   0d20   b4                phi R4
                            
   0d21                 DYN_MEMORY_FREE_MERGE
   0d21   8f                glo STACK_REG                       ;set R5 pointer to size
   0d22   fc 05             adi 5
   0d24   a5                plo R5
   0d25   9f                ghi STACK_REG
   0d26   7c 00             adci 0
   0d28   b5                phi R5
                            
   0d29   e5                sex R5                              ;set R5 to pointer
                            
   0d2a   44                lda R4                              ;load block size to size
   0d2b   55                str R5
   0d2c   15                inc R5
                            
   0d2d   44                lda R4
   0d2e   55                str R5
                            
   0d2f   24                dec R4
   0d30   24                dec R4                              ;set back R4 and R5
   0d31   25                dec R5
                            
   0d32   84                glo R4                              ;R6 (nextAddress) = address + 5 
   0d33   fc 05             adi 5
   0d35   a6                plo R6
   0d36   94                ghi R4
   0d37   7c 00             adci 0
   0d39   b6                phi R6
                            
   0d3a   86                glo R6                              ;R6 += size
   0d3b   f4                add
   0d3c   60                irx
   0d3d   a6                plo R6
   0d3e   96                ghi R6
   0d3f   74                adc
   0d40   b6                phi R6
                            
   0d41                 DYN_MEMORY_FREE_MERGELOOP
   0d41   86                glo R6
   0d42   ff 00             smi HEAP_END.0
   0d44   96                ghi R6
   0d45   7f fc             smbi HEAP_END.1
                            
   0d47   c3 0d 80          lbdf DYN_MEMORY_FREE_END            ;if nextAddress - HEAP_END >= 0
                            
   0d4a   86                glo R6                              ;set R5 to nextAddress used
   0d4b   fc 04             adi 4
   0d4d   a5                plo R5
   0d4e   96                ghi R6
   0d4f   7c 00             adci 0
   0d51   b5                phi R5
                            
   0d52   05                ldn R5
   0d53   ca 0d 79          lbnz DYN_MEMORY_FREE_SETPREVIOUS    ;if used != 0
                            
   0d56   8f                glo STACK_REG                       ;set R5 pointer to nextSize
   0d57   a5                plo R5
   0d58   9f                ghi STACK_REG
   0d59   b5                phi R5
   0d5a   15                inc R5
                            
   0d5b   46                lda R6                              ;load size + 5 to nextSize 
   0d5c   fc 05             adi 5
   0d5e   55                str R5
   0d5f   60                irx
                            
   0d60   06                ldn R6
   0d61   7c 00             adci 0
   0d63   55                str R5
                            
   0d64   25                dec R5                              ;set back R5 and R6
   0d65   26                dec R6
                            
   0d66   04                ldn R4                              ;current block size += nextSize
   0d67   f4                add
   0d68   54                str R4
   0d69   60                irx
   0d6a   14                inc R4
                            
   0d6b   04                ldn R4
   0d6c   74                adc
   0d6d   54                str R4
                            
   0d6e   25                dec R5                              ;set back R4 and R5
   0d6f   24                dec R4
                            
   0d70   86                glo R6                              ;R6 (nextAddress) += nextSize
   0d71   f4                add
   0d72   a6                plo R6
   0d73   60                irx
   0d74   96                ghi R6
   0d75   74                adc
   0d76   b6                phi R6
                            
   0d77   30 41             br DYN_MEMORY_FREE_MERGELOOP
                        
   0d79                 DYN_MEMORY_FREE_SETPREVIOUS    
   0d79   16                inc R6                              ;increment nextAddress to previous address section
   0d7a   16                inc R6
                            
   0d7b   84                glo R4                              ;set previous address to R4 value
   0d7c   56                str R6
   0d7d   16                inc R6
   0d7e   94                ghi R4
   0d7f   56                str R6
                        
   0d80                 DYN_MEMORY_FREE_END
   0d80   8f                glo STACK_REG
   0d81   fc 09             adi 9
   0d83   af                plo STACK_REG
   0d84   9f                ghi STACK_REG
   0d85   7c 00             adci 0
   0d87   bf                phi STACK_REG
                            
   0d88   ef                sex STACK_REG
                            
   0d89   f8 06             ldi HEAP_LASTADDRESS.0
   0d8b   a5                plo R5
   0d8c   f8 21             ldi HEAP_LASTADDRESS.1
   0d8e   b5                phi R5
                            
   0d8f   84                glo R4
   0d90   55                str R5
   0d91   15                inc R5
                            
   0d92   94                ghi R4
   0d93   55                str R5
                            
   0d94   72                ldxa            ;restoring local registers
   0d95   a6                plo R6
   0d96   72                ldxa
   0d97   b6                phi R6
                            
   0d98   72                ldxa
   0d99   a5                plo R5
   0d9a   f0                ldx
   0d9b   b5                phi R5
                            
   0d9c   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-VAR-LIST-INIT--------------------------------
   0d9d                 VAR_LIST_INIT
   0d9d   f8 00             ldi VARLIST_COUNT.0
   0d9f   a4                plo R4
   0da0   f8 21             ldi VARLIST_COUNT.1
   0da2   b4                phi R4
                            
   0da3   f8 06             ldi 6
   0da5   a5                plo R5
                        
   0da6                 VAR_LIST_INIT_LOOP
   0da6   f8 00             ldi 0
   0da8   54                str R4
   0da9   14                inc R4
                            
   0daa   25                dec R5
   0dab   85                glo R5
   0dac   3a a6             bnz VAR_LIST_INIT_LOOP
                            
   0dae   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-GET-STRING-----------------------------------
                        ;-R4-Input string------------------------------
                        ;-R10-New string address-----------------------
                        ;-Local registers------------------------------
                        ;-R5-R6----------------------------------------
   0daf                 GET_STRING
   0daf   ef                sex STACK_REG
                            
   0db0   95                ghi R5
   0db1   73                stxd
   0db2   85                glo R5
   0db3   73                stxd
                            
   0db4   96                ghi R6
   0db5   73                stxd
   0db6   86                glo R6
   0db7   73                stxd
                            
   0db8   94                ghi R4
   0db9   73                stxd
   0dba   84                glo R4
   0dbb   73                stxd                    ;+1 startAddress
                            
   0dbc   f8 00             ldi 0                   ;set R5 and R10 to zero
   0dbe   a5                plo R5
   0dbf   b5                phi R5
                            
   0dc0   aa                plo R10
   0dc1   ba                phi R10
                        
   0dc2                 GET_STRING_LEN
   0dc2   04                ldn R4                  
   0dc3   ff 30             smi 48
   0dc5   3b e6             bm GET_STRING_LEN_END   ;if *R4 < '0'
   0dc7   04                ldn R4
   0dc8   ff 3a             smi 58
   0dca   3b e2             bm GET_STRING_ADDLEN    ;if *R4 <= '9'
   0dcc   04                ldn R4
   0dcd   ff 41             smi 65
   0dcf   3b e6             bm GET_STRING_LEN_END   ;if *R4 < 'A'
   0dd1   04                ldn R4
   0dd2   ff 5b             smi 91
   0dd4   3b e2             bm GET_STRING_ADDLEN    ;if *R4 <= 'Z'
   0dd6   04                ldn R4
   0dd7   ff 61             smi 97
   0dd9   3b e6             bm GET_STRING_LEN_END   ;if *R4 < 'a'
   0ddb   04                ldn R4
   0ddc   ff 7b             smi 123
   0dde   3b e2             bm GET_STRING_ADDLEN    ;if *R4 <= 'z'
                            
   0de0   30 e6             br GET_STRING_LEN_END   ;length checking end
                            
   0de2                 GET_STRING_ADDLEN
   0de2   15                inc R5                  ;increment R4 and R5
   0de3   14                inc R4
   0de4   30 c2             br GET_STRING_LEN
                                
   0de6                 GET_STRING_LEN_END
   0de6   85                glo R5
   0de7   3a ed             bnz GET_STRING_ALLOCATE_MEM
   0de9   95                ghi R5
   0dea   c2 0e 1b          lbz GET_STRING_END               ;if R5 == 0
                            
   0ded                 GET_STRING_ALLOCATE_MEM
   0ded   85                glo R5
   0dee   a4                plo R4
   0def   95                ghi R5
   0df0   b4                phi R4
   0df1   14                inc R4                          ;increment R4 because we need spacefor the termination char
                            
   0df2   f8 84             ldi DYN_MEMORY_ALLOC.0         ;call DYN_MEMORY_ALLOC
   0df4   ad                plo CALL_REG
   0df5   f8 0b             ldi DYN_MEMORY_ALLOC.1
   0df7   bd                phi CALL_REG
                            
   0df8   f8 00             ldi FCALL.0
   0dfa   ae                plo FCALL_REG
   0dfb   de                sep FCALL_REG
                            
   0dfc   8a                glo R10
   0dfd   ca 0e 04          lbnz GET_STRING_COPY
   0e00   9a                ghi R10
   0e01   c2 0e 1b          lbz GET_STRING_END               ;if R10 == 0
                            
   0e04                 GET_STRING_COPY
   0e04   8f                glo STACK_REG                   ;restore R4
   0e05   a6                plo R6
   0e06   9f                ghi STACK_REG
   0e07   b6                phi R6
   0e08   16                inc R6
                            
   0e09   46                lda R6
   0e0a   a4                plo R4
   0e0b   46                lda R6
   0e0c   b4                phi R4
                            
   0e0d   8a                glo R10                         ;R6 = R10
   0e0e   a6                plo R6
   0e0f   9a                ghi R10
   0e10   b6                phi R6
                            
   0e11                 GET_STRING_COPY_LOOP
   0e11   44                lda R4                          ;read data from R4 location
   0e12   56                str R6                          ;and store to R6 location
   0e13   16                inc R6
                            
   0e14   25                dec R5                          ;decrement R5
   0e15   85                glo R5
   0e16   3a 11             bnz GET_STRING_COPY_LOOP        ;if R5 != 0
                            
   0e18   f8 00             ldi 0
   0e1a   56                str R6                          ;terminate the string
                        
   0e1b                 GET_STRING_END
   0e1b   60                irx
   0e1c   60                irx
   0e1d   60                irx
                            
   0e1e   72                ldxa                            ;restore local registers
   0e1f   a6                plo R6
   0e20   72                ldxa
   0e21   b6                phi R6
                            
   0e22   72                ldxa
   0e23   a5                plo R5
   0e24   f0                ldx
   0e25   b5                phi R5
                            
   0e26   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-LET-STATEMENT--------------------------------
                        ;-R4-Input string------------------------------
                        ;-Local registres------------------------------
                        ;-R5-R6-R7-------------------------------------
   0e27                 LET_STATEMENT
   0e27   ef                sex STACK_REG
                            
   0e28   95                ghi R5
   0e29   73                stxd
   0e2a   85                glo R5
   0e2b   73                stxd
                            
   0e2c   96                ghi R6
   0e2d   73                stxd
   0e2e   86                glo R6
   0e2f   73                stxd
                            
   0e30   97                ghi R7
   0e31   73                stxd
   0e32   87                glo R7
   0e33   73                stxd
                            
   0e34   94                ghi R4          ;saving R4 value
   0e35   73                stxd
   0e36   84                glo R4
   0e37   73                stxd            ;+3 inputString
                            
   0e38   f8 00             ldi 0
   0e3a   73                stxd
   0e3b   73                stxd            ;+1 variableNode address
                            
   0e3c   b4                phi R4          ;R4 = 8
   0e3d   f8 08             ldi 8
   0e3f   a4                plo R4
                            
   0e40   f8 84             ldi DYN_MEMORY_ALLOC.0          ;call DYN_MEMORY_ALLOC
   0e42   ad                plo CALL_REG                    ;Allocating memory for the variable node
   0e43   f8 0b             ldi DYN_MEMORY_ALLOC.1
   0e45   bd                phi CALL_REG
                            
   0e46   f8 00             ldi FCALL.0
   0e48   ae                plo FCALL_REG
   0e49   de                sep FCALL_REG
                            
   0e4a   8a                glo R10
   0e4b   3a 51             bnz LET_STATEMENT_CONTINUE1
   0e4d   9a                ghi R10
   0e4e   c2 0f 05          lbz LET_STATEMENT_END            ;if R10 == 0
                            
   0e51                 LET_STATEMENT_CONTINUE1
   0e51   8f                glo STACK_REG                   ;set R5 pointer to variableNode address
   0e52   a5                plo R5
   0e53   9f                ghi STACK_REG
   0e54   b5                phi R5
   0e55   15                inc R5
                            
   0e56   8a                glo R10                         ;store R10 to variableNode address
   0e57   55                str R5
   0e58   15                inc R5
                            
   0e59   9a                ghi R10
   0e5a   55                str R5
   0e5b   15                inc R5
                        
   0e5c   45                lda R5                          ;restore R4 inputString
   0e5d   a4                plo R4
   0e5e   45                lda R5
   0e5f   b4                phi R4
                            
   0e60                 LET_STATEMENT_SKIPSPACES            ;skipping spaces
   0e60   44                lda R4
   0e61   fb 20             xri 32
   0e63   32 60             bz LET_STATEMENT_SKIPSPACES
                            
   0e65   24                dec R4
                            
   0e66   f8 af             ldi GET_STRING.0                ;call GET_STRING
   0e68   ad                plo CALL_REG
   0e69   f8 0d             ldi GET_STRING.1
   0e6b   bd                phi CALL_REG
                            
   0e6c   f8 00             ldi FCALL.0
   0e6e   ae                plo FCALL_REG
   0e6f   de                sep FCALL_REG
                            
   0e70   8a                glo R10
   0e71   3a 77             bnz LET_STATEMENT_CONTINUE2
   0e73   9a                ghi R10
   0e74   c2 0e f3          lbz LET_STATEMENT_FREENODE       ;if allocating failed
                        
   0e77                 LET_STATEMENT_CONTINUE2
   0e77   8f                glo STACK_REG
   0e78   a6                plo R6
   0e79   9f                ghi STACK_REG
   0e7a   b6                phi R6
   0e7b   16                inc R6
                            
   0e7c   46                lda R6                          ;set R6 to variableNode address
   0e7d   a5                plo R5
   0e7e   46                lda R6
   0e7f   b5                phi R5
                            
   0e80   f8 00             ldi 0                           ;set variableNode->nextNode to 0
   0e82   55                str R5
   0e83   15                inc R5
                            
   0e84   55                str R5
   0e85   15                inc R5
                            
   0e86   8a                glo R10                         ;store R10 to variableNode->name
   0e87   55                str R5
   0e88   15                inc R5
                            
   0e89   9a                ghi R10
   0e8a   55                str R5
   0e8b   15                inc R5
                            
   0e8c                 LET_STATEMENT_MAINLOOP
   0e8c   04                ldn R4
   0e8d   fb 20             xri 32
   0e8f   32 99             bz LET_STATEMENT_NEXTCHARACTER      ;if ' '
   0e91   04                ldn R4
   0e92   fb 3d             xri 61
   0e94   32 9c             bz LET_STATEMENT_EXPRESSION         ;if '='
                            
   0e96   c0 0f 05          lbr LET_STATEMENT_END
                        
   0e99                 LET_STATEMENT_NEXTCHARACTER
   0e99   14                inc R4
   0e9a   30 8c             br LET_STATEMENT_MAINLOOP
                        
   0e9c                 LET_STATEMENT_EXPRESSION
   0e9c   14                inc R4
                            
   0e9d   f8 f2             ldi EXPRESSION.0         ;call EXPRESSION
   0e9f   ad                plo CALL_REG
   0ea0   f8 08             ldi EXPRESSION.1
   0ea2   bd                phi CALL_REG
                            
   0ea3   f8 00             ldi FCALL.0
   0ea5   ae                plo FCALL_REG
   0ea6   de                sep FCALL_REG
                            
   0ea7                 LET_STATEMENT_ADDVAR
   0ea7   f8 00             ldi VARLIST_COUNT.0
   0ea9   a5                plo R5
   0eaa   f8 21             ldi VARLIST_COUNT.1
   0eac   b5                phi R5
                            
   0ead   e5                sex R5
                            
   0eae   45                lda R5
   0eaf   ca 0e b6          lbnz LET_STATEMENT_ADDNODE
   0eb2   05                ldn R5
   0eb3   c2 0e d7          lbz LET_STATEMENT_FIRSTNODE
                            
   0eb6                 LET_STATEMENT_ADDNODE
   0eb6   25                dec R5                          ;reset R5 to the VARLIST header
                            
   0eb7   f8 01             ldi 1                           ;increment the VARLIST_COUNT by one
   0eb9   f4                add
   0eba   55                str R5
   0ebb   15                inc R5
                            
   0ebc   f8 00             ldi 0
   0ebe   74                adc
   0ebf   55                str R5
   0ec0   15                inc R5
                            
   0ec1   15                inc R5                          ;skip VARLIST_FIRSTNODE
   0ec2   15                inc R5
                            
   0ec3   45                lda R5                          ;read VARLIST_LASTNODE
   0ec4   a7                plo R7                          ;and place the address to R7
   0ec5   05                ldn R5
   0ec6   b7                phi R7
                            
   0ec7   25                dec R5                          ;set R5 back to VARLIST_LASTNODE
                            
   0ec8   26                dec R6                          ;reset R6 to variableNode
   0ec9   26                dec R6
                            
   0eca   46                lda R6                          ;load address and store it to address R7 and R5
   0ecb   57                str R7
   0ecc   55                str R5
   0ecd   17                inc R7
   0ece   15                inc R5
                            
   0ecf   46                lda R6
   0ed0   57                str R7
   0ed1   55                str R5
   0ed2   17                inc R7
   0ed3   15                inc R5
                            
   0ed4   c0 0f 05          lbr LET_STATEMENT_END
                        
   0ed7                 LET_STATEMENT_FIRSTNODE
   0ed7   25                dec R5                          ;reset R5 to the VARLIST header
                            
   0ed8   f8 01             ldi 1                           ;set VARLIST_COUNT to one
   0eda   55                str R5
   0edb   15                inc R5
                            
   0edc   f8 00             ldi 0
   0ede   55                str R5
   0edf   15                inc R5
                            
   0ee0   26                dec R6                          ;reset R6 to variableNode
   0ee1   26                dec R6
                            
   0ee2   46                lda R6                          ;load address and store it to VARLIST_FIRSTNODE
   0ee3   55                str R5
   0ee4   15                inc R5
                            
   0ee5   46                lda R6
   0ee6   55                str R5
   0ee7   15                inc R5
                            
   0ee8   26                dec R6                          ;reset R6 to variableNode
   0ee9   26                dec R6
                            
   0eea   46                lda R6                          ;load address and store it to VARLIST_LASTNODE
   0eeb   55                str R5
   0eec   15                inc R5
                            
   0eed   46                lda R6
   0eee   55                str R5
   0eef   15                inc R5
                            
   0ef0   c0 0f 05          lbr LET_STATEMENT_END
                        
   0ef3                 LET_STATEMENT_FREENODE
   0ef3   25                dec R5
   0ef4   25                dec R5
   0ef5   25                dec R5
   0ef6   25                dec R5
                            
   0ef7   45                lda R5
   0ef8   a4                plo R4
   0ef9   45                lda R5
   0efa   b4                phi R4
                            
   0efb   f8 e9             ldi DYN_MEMORY_FREE.0         ;call DYN_MEMORY_FREE
   0efd   ad                plo CALL_REG
   0efe   f8 0c             ldi DYN_MEMORY_FREE.1
   0f00   bd                phi CALL_REG
                            
   0f01   f8 00             ldi FCALL.0
   0f03   ae                plo FCALL_REG
   0f04   de                sep FCALL_REG
                            
   0f05                 LET_STATEMENT_END
   0f05   8f                glo STACK_REG
   0f06   fc 05             adi 5
   0f08   af                plo STACK_REG
   0f09   9f                ghi STACK_REG
   0f0a   7c 00             adci 0
   0f0c   bf                phi STACK_REG
                            
   0f0d   ef                sex STACK_REG
                            
   0f0e   72                ldxa
   0f0f   a7                plo R7
   0f10   72                ldxa
   0f11   b7                phi R7
                            
   0f12   72                ldxa
   0f13   a6                plo R6
   0f14   72                ldxa
   0f15   b6                phi R6
                            
   0f16   72                ldxa
   0f17   a5                plo R5
   0f18   f0                ldx
   0f19   b5                phi R5
                            
   0f1a   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-HEXVIEWER------------------------------------
                        ;-R4-Start address-----------------------------
                        ;-R5-Count-------------------------------------
   0f1b                 HEX_BASE_SRT
   0f1b   0d 0a 42 61       db "\r\nBase address: 0x",0
   0f1f   73 65 20 61   
   0f23   64 64 72 65   
   0f27   73 73 3a 20   
   0f2b   30 78 00      
   0f2e                 HEX_HEADER_STR
   0f2e   0d 0a 0d 0a       db "\r\n\r\nOffset  00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F  String\r\n"
   0f32   4f 66 66 73   
   0f36   65 74 20 20   
   0f3a   30 30 20 30   
   0f3e   31 20 30 32   
   0f42   20 30 33 20   
   0f46   30 34 20 30   
   0f4a   35 20 30 36   
   0f4e   20 30 37 20   
   0f52   30 38 20 30   
   0f56   39 20 30 41   
   0f5a   20 30 42 20   
   0f5e   30 43 20 30   
   0f62   44 20 30 45   
   0f66   20 30 46 20   
   0f6a   20 53 74 72   
   0f6e   69 6e 67 0d   
   0f72   0a            
   0f73   2d 2d 2d 2d       db         "-------------------------------------------------------------------------\r\n",0
   0f77   2d 2d 2d 2d   
   0f7b   2d 2d 2d 2d   
   0f7f   2d 2d 2d 2d   
   0f83   2d 2d 2d 2d   
   0f87   2d 2d 2d 2d   
   0f8b   2d 2d 2d 2d   
   0f8f   2d 2d 2d 2d   
   0f93   2d 2d 2d 2d   
   0f97   2d 2d 2d 2d   
   0f9b   2d 2d 2d 2d   
   0f9f   2d 2d 2d 2d   
   0fa3   2d 2d 2d 2d   
   0fa7   2d 2d 2d 2d   
   0fab   2d 2d 2d 2d   
   0faf   2d 2d 2d 2d   
   0fb3   2d 2d 2d 2d   
   0fb7   2d 2d 2d 2d   
   0fbb   2d 0d 0a 00   
                        ;              "0000:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................"
   0fbf                 HEX_LINECNT_SEPARATOR
   0fbf   3a 20 20 20       db ":   ",0
   0fc3   00            
                            
   0fc4                 HEXVIEWER
   0fc4   ef                sex STACK_REG
                            
   0fc5   f8 00             ldi 0
   0fc7   73                stxd
   0fc8   73                stxd
   0fc9   94                ghi R4
   0fca   73                stxd
   0fcb   84                glo R4
   0fcc   73                stxd    ;+17 current address
                            
   0fcd   f8 00             ldi 0
   0fcf   73                stxd
   0fd0   73                stxd
   0fd1   94                ghi R4
   0fd2   73                stxd
   0fd3   84                glo R4
   0fd4   73                stxd    ;+13 start address
                            
   0fd5   f8 00             ldi 0
   0fd7   73                stxd
   0fd8   73                stxd
   0fd9   95                ghi R5
   0fda   73                stxd
   0fdb   85                glo R5
   0fdc   73                stxd    ;+9 last address
                            
   0fdd   f8 00             ldi 0
   0fdf   73                stxd
   0fe0   73                stxd
   0fe1   73                stxd
   0fe2   73                stxd    ;+5 line counter
                            
   0fe3   73                stxd
   0fe4   73                stxd
   0fe5   73                stxd
   0fe6   73                stxd    ;+1 temp for hex digits
                            
   0fe7   8f                glo STACK_REG
   0fe8   fc 0d             adi 13
   0fea   a4                plo R4
   0feb   9f                ghi STACK_REG
   0fec   7c 00             adci 0
   0fee   b4                phi R4
                            
   0fef   8f                glo STACK_REG
   0ff0   fc 09             adi 9
   0ff2   a6                plo R6
   0ff3   9f                ghi STACK_REG
   0ff4   7c 00             adci 0
   0ff6   b6                phi R6
                            
   0ff7   e4                sex R4
                            
   0ff8   85                glo R5      ;adding R5 value to start address and store it to last address
   0ff9   f4                add
   0ffa   56                str R6
   0ffb   60                irx
   0ffc   16                inc R6
   0ffd   95                ghi R5
   0ffe   74                adc
   0fff   56                str R6
   1000   60                irx
   1001   16                inc R6
   1002   f8 00             ldi 0
   1004   74                adc
   1005   56                str R6
                            
   1006   f8 1b             ldi HEX_BASE_SRT.0     ;prepare to print base address
   1008   a6                plo R6
   1009   f8 0f             ldi HEX_BASE_SRT.1
   100b   b6                phi R6
                        	
   100c   f8 52             ldi PRINT.0         ;prepare to call PRINT
   100e   ad                plo CALL_REG
   100f   f8 01             ldi PRINT.1
   1011   bd                phi CALL_REG
                            
   1012   f8 00             ldi FCALL.0
   1014   ae                plo FCALL_REG
   1015   de                sep FCALL_REG
                            
   1016   8f                glo STACK_REG       ;prepare to print the address in hex
   1017   fc 0d             adi 13
   1019   a4                plo R4
   101a   9f                ghi STACK_REG
   101b   7c 00             adci 0
   101d   b4                phi R4
                            
   101e   f8 04             ldi 4               ;with 4 digits
   1020   a5                plo R5
                            
   1021   f8 22             ldi PRINT_HEX.0     ;prepare to call PRINT_HEX
   1023   ad                plo CALL_REG
   1024   f8 04             ldi PRINT_HEX.1
   1026   bd                phi CALL_REG
                            
   1027   f8 00             ldi FCALL.0
   1029   ae                plo FCALL_REG
   102a   de                sep FCALL_REG
                            
   102b   f8 2e             ldi HEX_HEADER_STR.0     ;prepare to print the header
   102d   a6                plo R6
   102e   f8 0f             ldi HEX_HEADER_STR.1
   1030   b6                phi R6
                        	
   1031   f8 52             ldi PRINT.0         ;prepare to call PRINT
   1033   ad                plo CALL_REG
   1034   f8 01             ldi PRINT.1
   1036   bd                phi CALL_REG
                            
   1037   f8 00             ldi FCALL.0
   1039   ae                plo FCALL_REG
   103a   de                sep FCALL_REG
                        
   103b                 HEXVIEWER_MAINLOOP
   103b   8f                glo STACK_REG       ;prepare to print the first address in hex
   103c   fc 05             adi 5
   103e   a4                plo R4
   103f   9f                ghi STACK_REG
   1040   7c 00             adci 0
   1042   b4                phi R4
                            
   1043   f8 04             ldi 4               ;with 4 digits
   1045   a5                plo R5
                            
   1046   f8 22             ldi PRINT_HEX.0     ;prepare to call PRINT_HEX
   1048   ad                plo CALL_REG
   1049   f8 04             ldi PRINT_HEX.1
   104b   bd                phi CALL_REG
                            
   104c   f8 00             ldi FCALL.0
   104e   ae                plo FCALL_REG
   104f   de                sep FCALL_REG
                            
   1050   f8 bf             ldi HEX_LINECNT_SEPARATOR.0     ;prepare to print address separator
   1052   a6                plo R6
   1053   f8 0f             ldi HEX_LINECNT_SEPARATOR.1
   1055   b6                phi R6
                        	
   1056   f8 52             ldi PRINT.0         ;prepare to call PRINT
   1058   ad                plo CALL_REG
   1059   f8 01             ldi PRINT.1
   105b   bd                phi CALL_REG
                            
   105c   f8 00             ldi FCALL.0
   105e   ae                plo FCALL_REG
   105f   de                sep FCALL_REG
                            
   1060   f8 10             ldi 16      ;set R8 low to 16 for counting the bytes
   1062   a8                plo R8
                           
   1063                 HEXVIEWER_PRINT_HEX_LOOP
   1063   8f                glo STACK_REG       ;set R4 pointer to current address
   1064   fc 11             adi 17
   1066   a4                plo R4
   1067   9f                ghi STACK_REG
   1068   7c 00             adci 0
   106a   b4                phi R4
                            
   106b   8f                glo STACK_REG       ;set R5 pointer to last address
   106c   fc 09             adi 9
   106e   a5                plo R5
   106f   9f                ghi STACK_REG
   1070   7c 00             adci 0
   1072   b5                phi R5
                        
   1073   e4                sex R4          ;check if current address is >= last address
                            
   1074   45                lda R5
   1075   f5                sd
   1076   60                irx
                            
   1077   45                lda R5
   1078   75                sdb
   1079   60                irx
                            
   107a   45                lda R5
   107b   75                sdb
   107c   60                irx
                            
   107d   05                ldn R5
   107e   75                sdb
                            
   107f   c3 10 a7          lbdf HEXVIEWER_PRINT_HEX_SPACES   ;if current address >= last address then 
                        
   1082   8f                glo STACK_REG       ;set R4 pointer to current address
   1083   fc 11             adi 17
   1085   a4                plo R4
   1086   9f                ghi STACK_REG
   1087   7c 00             adci 0
   1089   b4                phi R4
                            
   108a   44                lda R4              ;get current address and load it in R5
   108b   a5                plo R5
   108c   44                lda R4
   108d   b5                phi R5
                            
   108e   05                ldn R5              ;get data from R5 address
   108f   a5                plo R5              ;store data in R5 low
                            
   1090   8f                glo STACK_REG       ;set R4 pointer to temp
   1091   a4                plo R4
   1092   9f                ghi STACK_REG
   1093   b4                phi R4
   1094   14                inc R4
                            
   1095   85                glo R5              ;get data from R5 low
   1096   54                str R4              ;store data to temp
                           
   1097   f8 02             ldi 2
   1099   a5                plo R5              ;set R5 low to 2 digits
                            
   109a   f8 22             ldi PRINT_HEX.0     ;prepare to call PRINT_HEX
   109c   ad                plo CALL_REG
   109d   f8 04             ldi PRINT_HEX.1
   109f   bd                phi CALL_REG
                            
   10a0   f8 00             ldi FCALL.0
   10a2   ae                plo FCALL_REG
   10a3   de                sep FCALL_REG
                            
   10a4   c0 10 b7          lbr HEXVIEWER_NEXT_HEX
                            
   10a7                 HEXVIEWER_PRINT_HEX_SPACES
   10a7   f8 c1             ldi HEX_LINECNT_SEPARATOR+2.0     ;prepare to print two space
   10a9   a6                plo R6
   10aa   f8 0f             ldi HEX_LINECNT_SEPARATOR+2.1
   10ac   b6                phi R6
                        	
   10ad   f8 52             ldi PRINT.0         ;prepare to call PRINT
   10af   ad                plo CALL_REG
   10b0   f8 01             ldi PRINT.1
   10b2   bd                phi CALL_REG
                            
   10b3   f8 00             ldi FCALL.0
   10b5   ae                plo FCALL_REG
   10b6   de                sep FCALL_REG
                        
   10b7                 HEXVIEWER_NEXT_HEX
   10b7   f8 c2             ldi HEX_LINECNT_SEPARATOR+3.0     ;prepare to print a space
   10b9   a6                plo R6
   10ba   f8 0f             ldi HEX_LINECNT_SEPARATOR+3.1
   10bc   b6                phi R6
                        	
   10bd   f8 52             ldi PRINT.0         ;prepare to call PRINT
   10bf   ad                plo CALL_REG
   10c0   f8 01             ldi PRINT.1
   10c2   bd                phi CALL_REG
                            
   10c3   f8 00             ldi FCALL.0
   10c5   ae                plo FCALL_REG
   10c6   de                sep FCALL_REG
                            
   10c7   8f                glo STACK_REG       ;set R4 pointer to current address
   10c8   fc 11             adi 17
   10ca   a4                plo R4
   10cb   9f                ghi STACK_REG
   10cc   7c 00             adci 0
   10ce   b4                phi R4
                            
   10cf   e4                sex R4
   10d0   f8 01             ldi 1
   10d2   f4                add
   10d3   54                str R4
   10d4   60                irx
                            
   10d5   f8 00             ldi 0
   10d7   74                adc
   10d8   54                str R4
   10d9   60                irx
                            
   10da   f8 00             ldi 0
   10dc   74                adc
   10dd   54                str R4
   10de   60                irx
                            
   10df   f8 00             ldi 0
   10e1   74                adc
   10e2   54                str R4
                            
   10e3   28                dec R8
   10e4   88                glo R8
   10e5   ca 10 63          lbnz HEXVIEWER_PRINT_HEX_LOOP
                            
   10e8   f8 c2             ldi HEX_LINECNT_SEPARATOR+3.0     ;prepare to print a space
   10ea   a6                plo R6
   10eb   f8 0f             ldi HEX_LINECNT_SEPARATOR+3.1
   10ed   b6                phi R6
                        	
   10ee   f8 52             ldi PRINT.0         ;prepare to call PRINT
   10f0   ad                plo CALL_REG
   10f1   f8 01             ldi PRINT.1
   10f3   bd                phi CALL_REG
                            
   10f4   f8 00             ldi FCALL.0
   10f6   ae                plo FCALL_REG
   10f7   de                sep FCALL_REG
                            
   10f8   8f                glo STACK_REG       ;set R4 pointer to current address
   10f9   fc 11             adi 17
   10fb   a4                plo R4
   10fc   9f                ghi STACK_REG
   10fd   7c 00             adci 0
   10ff   b4                phi R4
                            
   1100   8f                glo STACK_REG       ;set R5 pointer to start address
   1101   fc 0d             adi 13
   1103   a5                plo R5
   1104   9f                ghi STACK_REG
   1105   7c 00             adci 0
   1107   b5                phi R5
                            
   1108   e5                sex R5
                            
   1109   72                ldxa
   110a   54                str R4
   110b   14                inc R4
                            
   110c   72                ldxa
   110d   54                str R4
   110e   14                inc R4
                            
   110f   72                ldxa
   1110   54                str R4
   1111   14                inc R4
                            
   1112   72                ldxa
   1113   54                str R4
                            
   1114   f8 10             ldi 16      ;set R8 low to 16 for counting the bytes
   1116   a8                plo R8
                        
   1117                 HEXVIEWER_PRINT_STR_LOOP
   1117   8f                glo STACK_REG       ;set R4 pointer to current address
   1118   fc 11             adi 17
   111a   a4                plo R4
   111b   9f                ghi STACK_REG
   111c   7c 00             adci 0
   111e   b4                phi R4
                            
   111f   8f                glo STACK_REG       ;set R5 pointer to last address
   1120   fc 09             adi 9
   1122   a5                plo R5
   1123   9f                ghi STACK_REG
   1124   7c 00             adci 0
   1126   b5                phi R5
                        
   1127   e4                sex R4          ;check if current address is <= last address
                            
   1128   45                lda R5
   1129   f5                sd
   112a   60                irx
                            
   112b   45                lda R5
   112c   75                sdb
   112d   60                irx
                            
   112e   45                lda R5
   112f   75                sdb
   1130   60                irx
                            
   1131   05                ldn R5
   1132   75                sdb
                            
   1133   c3 11 69          lbdf HEXVIEWER_PRINT_STR_SPACE   ;if current address >= last address then 
                            
   1136   8f                glo STACK_REG       ;set R4 pointer to current address
   1137   fc 11             adi 17
   1139   a4                plo R4
   113a   9f                ghi STACK_REG
   113b   7c 00             adci 0
   113d   b4                phi R4
                            
   113e   44                lda R4              ;get current address and load it in R5
   113f   a5                plo R5
   1140   44                lda R4
   1141   b5                phi R5
                            
   1142   05                ldn R5              ;get data from R5 address
   1143   a5                plo R5              ;store data in R5 low
                            
   1144   ff 20             smi 32
   1146   3b 5a             bm HEXVIEWER_PRINT_STR_DOT
   1148   ff 5f             smi 95
   114a   33 5a             bpz HEXVIEWER_PRINT_STR_DOT
                            
   114c   85                glo R5
   114d   b4                phi R4
                            
   114e   f8 13             ldi SERIAL_SEND_START.0         ;prepare to call SERIAL_SEND_START to send one char
   1150   ad                plo CALL_REG
   1151   f8 01             ldi SERIAL_SEND_START.1
   1153   bd                phi CALL_REG
                            
   1154   f8 00             ldi FCALL.0
   1156   ae                plo FCALL_REG
   1157   de                sep FCALL_REG
                            
   1158   30 76             br HEXVIEWER_NEXT_STR
                            
   115a                 HEXVIEWER_PRINT_STR_DOT
   115a   f8 2e             ldi 46
   115c   b4                phi R4
                            
   115d   f8 13             ldi SERIAL_SEND_START.0         ;prepare to call SERIAL_SEND_START to send one char
   115f   ad                plo CALL_REG
   1160   f8 01             ldi SERIAL_SEND_START.1
   1162   bd                phi CALL_REG
                            
   1163   f8 00             ldi FCALL.0
   1165   ae                plo FCALL_REG
   1166   de                sep FCALL_REG
                            
   1167   30 76             br HEXVIEWER_NEXT_STR
                        
   1169                 HEXVIEWER_PRINT_STR_SPACE
   1169   f8 20             ldi 32
   116b   b4                phi R4
                            
   116c   f8 13             ldi SERIAL_SEND_START.0         ;prepare to call SERIAL_SEND_START to send one char
   116e   ad                plo CALL_REG
   116f   f8 01             ldi SERIAL_SEND_START.1
   1171   bd                phi CALL_REG
                            
   1172   f8 00             ldi FCALL.0
   1174   ae                plo FCALL_REG
   1175   de                sep FCALL_REG
                            
   1176                 HEXVIEWER_NEXT_STR
   1176   8f                glo STACK_REG       ;set R4 pointer to current address
   1177   fc 11             adi 17
   1179   a4                plo R4
   117a   9f                ghi STACK_REG
   117b   7c 00             adci 0
   117d   b4                phi R4
                            
   117e   e4                sex R4
   117f   f8 01             ldi 1
   1181   f4                add
   1182   54                str R4
   1183   60                irx
                            
   1184   f8 00             ldi 0
   1186   74                adc
   1187   54                str R4
   1188   60                irx
                            
   1189   f8 00             ldi 0
   118b   74                adc
   118c   54                str R4
   118d   60                irx
                            
   118e   f8 00             ldi 0
   1190   74                adc
   1191   54                str R4
                            
   1192   28                dec R8
   1193   88                glo R8
   1194   ca 11 17          lbnz HEXVIEWER_PRINT_STR_LOOP
                            
   1197   f8 a8             ldi NEW_LINE.0     ;prepare to print a space
   1199   a6                plo R6
   119a   f8 15             ldi NEW_LINE.1
   119c   b6                phi R6
                        	
   119d   f8 52             ldi PRINT.0         ;prepare to call PRINT
   119f   ad                plo CALL_REG
   11a0   f8 01             ldi PRINT.1
   11a2   bd                phi CALL_REG
                            
   11a3   f8 00             ldi FCALL.0
   11a5   ae                plo FCALL_REG
   11a6   de                sep FCALL_REG
                            
   11a7   8f                glo STACK_REG       ;set R4 pointer to current address
   11a8   fc 11             adi 17
   11aa   a4                plo R4
   11ab   9f                ghi STACK_REG
   11ac   7c 00             adci 0
   11ae   b4                phi R4
                            
   11af   8f                glo STACK_REG       ;set R5 pointer to last address
   11b0   fc 09             adi 9
   11b2   a5                plo R5
   11b3   9f                ghi STACK_REG
   11b4   7c 00             adci 0
   11b6   b5                phi R5
                        
   11b7   e4                sex R4          ;check if current address is >= last address
                            
   11b8   45                lda R5
   11b9   f5                sd
   11ba   60                irx
                            
   11bb   45                lda R5
   11bc   75                sdb
   11bd   60                irx
                            
   11be   45                lda R5
   11bf   75                sdb
   11c0   60                irx
                            
   11c1   05                ldn R5
   11c2   75                sdb
                            
   11c3   c3 12 01          lbdf HEXVIEWER_END
                            
   11c6   8f                glo STACK_REG       ;set R4 pointer to line counter
   11c7   fc 05             adi 5
   11c9   a4                plo R4
   11ca   9f                ghi STACK_REG
   11cb   7c 00             adci 0
   11cd   b4                phi R4
                            
   11ce   e4                sex R4
                            
   11cf   f8 10             ldi 16
   11d1   f4                add
   11d2   54                str R4
   11d3   60                irx
                            
   11d4   f8 00             ldi 0
   11d6   74                adc
   11d7   54                str R4
   11d8   60                irx
                            
   11d9   f8 00             ldi 0
   11db   74                adc
   11dc   54                str R4
   11dd   60                irx
                            
   11de   f8 00             ldi 0
   11e0   74                adc
   11e1   54                str R4
                            
   11e2   8f                glo STACK_REG       ;set R4 pointer to current address
   11e3   fc 11             adi 17
   11e5   a4                plo R4
   11e6   9f                ghi STACK_REG
   11e7   7c 00             adci 0
   11e9   b4                phi R4
                            
   11ea   8f                glo STACK_REG       ;set R5 pointer to start address
   11eb   fc 0d             adi 13
   11ed   a5                plo R5
   11ee   9f                ghi STACK_REG
   11ef   7c 00             adci 0
   11f1   b5                phi R5
                            
   11f2   e4                sex R4
                            
   11f3   72                ldxa
   11f4   55                str R5
   11f5   15                inc R5
                            
   11f6   72                ldxa
   11f7   55                str R5
   11f8   15                inc R5
                            
   11f9   72                ldxa
   11fa   55                str R5
   11fb   15                inc R5
                            
   11fc   72                ldxa
   11fd   55                str R5
                            
   11fe   c0 10 3b          lbr HEXVIEWER_MAINLOOP
                        
   1201                 HEXVIEWER_END
   1201   8f                glo STACK_REG
   1202   fc 14             adi 20
   1204   af                plo STACK_REG
   1205   9f                ghi STACK_REG
   1206   7c 00             adci 0
   1208   bf                phi STACK_REG
                            
   1209   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-DYN MEMORY ALLOC CALLER----------------------
   120a                 DYN_MEMORY_ALLOC_CALLER_STR1
   120a   20 62 79 74       db " bytes of memory allocated at memory address ",0," (0x",0,")\r\n",0
   120e   65 73 20 6f   
   1212   66 20 6d 65   
   1216   6d 6f 72 79   
   121a   20 61 6c 6c   
   121e   6f 63 61 74   
   1222   65 64 20 61   
   1226   74 20 6d 65   
   122a   6d 6f 72 79   
   122e   20 61 64 64   
   1232   72 65 73 73   
   1236   20 00 20 28   
   123a   30 78 00 29   
   123e   0d 0a 00      
   1241                 DYN_MEMORY_ALLOC_CALLER_STR2
   1241   4f 75 74 20       db "Out of memory!\r\n",0
   1245   6f 66 20 6d   
   1249   65 6d 6f 72   
   124d   79 21 0d 0a   
   1251   00            
                        
   1252                 DYN_MEMORY_ALLOC_CALLER
   1252   ef                sex STACK_REG
                            
   1253   f8 00             ldi 0
   1255   73                stxd
   1256   73                stxd
   1257   73                stxd
   1258   73                stxd                        ;+5 address
                            
   1259   73                stxd
   125a   73                stxd
   125b   73                stxd
   125c   73                stxd                        ;+1 size
                            
   125d   8f                glo STACK_REG               ;set R5 pointer to size
   125e   a5                plo R5
   125f   9f                ghi STACK_REG
   1260   b5                phi R5
   1261   15                inc R5
                            
   1262   f8 f2             ldi EXPRESSION.0            ;evaluate expression
   1264   ad                plo CALL_REG
   1265   f8 08             ldi EXPRESSION.1
   1267   bd                phi CALL_REG
                            
   1268   f8 00             ldi FCALL.0
   126a   ae                plo FCALL_REG
   126b   de                sep FCALL_REG
                            
   126c   8f                glo STACK_REG               ;set R5 pointer to size
   126d   a5                plo R5
   126e   9f                ghi STACK_REG
   126f   b5                phi R5
   1270   15                inc R5
                            
   1271   45                lda R5                      ;R4 = size
   1272   a4                plo R4
   1273   45                lda R5
   1274   b4                phi R4
                            
   1275   f8 84             ldi DYN_MEMORY_ALLOC.0      ;call memory allocation
   1277   ad                plo CALL_REG
   1278   f8 0b             ldi DYN_MEMORY_ALLOC.1
   127a   bd                phi CALL_REG
                            
   127b   f8 00             ldi FCALL.0
   127d   ae                plo FCALL_REG
   127e   de                sep FCALL_REG
                            
   127f   8a                glo R10                                 ;check if R10 has a value, if it is 0 then it failed
   1280   ca 12 9a          lbnz DYN_MEMORY_ALLOC_CALLER_SUCCESS
   1283   9a                ghi R10
   1284   ca 12 9a          lbnz DYN_MEMORY_ALLOC_CALLER_SUCCESS
                            
   1287                 DYN_MEMORY_ALLOC_CALLER_FAIL
   1287   f8 41             ldi DYN_MEMORY_ALLOC_CALLER_STR2.0      ;print out of memory
   1289   a6                plo R6
   128a   f8 12             ldi DYN_MEMORY_ALLOC_CALLER_STR2.1
   128c   b6                phi R6
                            
   128d   f8 52             ldi PRINT.0                             ;prepare to call PRINT
   128f   ad                plo CALL_REG
   1290   f8 01             ldi PRINT.1
   1292   bd                phi CALL_REG
                            
   1293   f8 00             ldi FCALL.0
   1295   ae                plo FCALL_REG
   1296   de                sep FCALL_REG                           ;call PRINT
                        	
   1297   c0 13 04          lbr DYN_MEMORY_ALLOC_CALLER_END         ;return
                        
   129a                 DYN_MEMORY_ALLOC_CALLER_SUCCESS
   129a   8f                glo STACK_REG                           ;set R5 pointer to address
   129b   fc 05             adi 5
   129d   a4                plo R4
   129e   9f                ghi STACK_REG
   129f   7c 00             adci 0
   12a1   b4                phi R4
                            
   12a2   8a                glo R10                                 ;copy R10 value to address
   12a3   54                str R4
   12a4   14                inc R4
                            
   12a5   9a                ghi R10
   12a6   54                str R4
                            
   12a7   8f                glo STACK_REG                           ;set R4 pointor to size
   12a8   a4                plo R4
   12a9   9f                ghi STACK_REG
   12aa   b4                phi R4
   12ab   14                inc R4
                            
   12ac   f8 ae             ldi PRINT_DEC.0                         ;print size in decimal
   12ae   ad                plo CALL_REG
   12af   f8 04             ldi PRINT_DEC.1
   12b1   bd                phi CALL_REG
                            
   12b2   f8 00             ldi FCALL.0
   12b4   ae                plo FCALL_REG
   12b5   de                sep FCALL_REG
                            
   12b6   f8 0a             ldi DYN_MEMORY_ALLOC_CALLER_STR1.0      ;print the first part of the allocation message
   12b8   a6                plo R6
   12b9   f8 12             ldi DYN_MEMORY_ALLOC_CALLER_STR1.1
   12bb   b6                phi R6
                            
   12bc   f8 52             ldi PRINT.0                             ;prepare to call PRINT
   12be   ad                plo CALL_REG    
   12bf   f8 01             ldi PRINT.1
   12c1   bd                phi CALL_REG
                            
   12c2   f8 00             ldi FCALL.0
   12c4   ae                plo FCALL_REG
   12c5   de                sep FCALL_REG                           ;call PRINT
                            
   12c6   8f                glo STACK_REG                           ;set R4 pointer to address
   12c7   fc 05             adi 5
   12c9   a4                plo R4
   12ca   9f                ghi STACK_REG
   12cb   7c 00             adci 0
   12cd   b4                phi R4
                            
   12ce   f8 ae             ldi PRINT_DEC.0                         ;print address in decimal
   12d0   ad                plo CALL_REG
   12d1   f8 04             ldi PRINT_DEC.1
   12d3   bd                phi CALL_REG
                            
   12d4   f8 00             ldi FCALL.0
   12d6   ae                plo FCALL_REG
   12d7   de                sep FCALL_REG
                            
   12d8   f8 52             ldi PRINT.0                             ;print the second part of the allocation message
   12da   ad                plo CALL_REG
   12db   f8 01             ldi PRINT.1
   12dd   bd                phi CALL_REG
                            
   12de   f8 00             ldi FCALL.0
   12e0   ae                plo FCALL_REG
   12e1   de                sep FCALL_REG                           ;call PRINT
                            
   12e2   8f                glo STACK_REG                           ;reset R4 pointer to address
   12e3   fc 05             adi 5
   12e5   a4                plo R4
   12e6   9f                ghi STACK_REG
   12e7   7c 00             adci 0
   12e9   b4                phi R4
                            
   12ea   f8 04             ldi 4                                   ;set number of digits to 4
   12ec   a5                plo R5
   12ed   f8 00             ldi 0
   12ef   b5                phi R5
                            
   12f0   f8 22             ldi PRINT_HEX.0                         ;print address in hexadecimal
   12f2   ad                plo CALL_REG
   12f3   f8 04             ldi PRINT_HEX.1
   12f5   bd                phi CALL_REG
                            
   12f6   f8 00             ldi FCALL.0
   12f8   ae                plo FCALL_REG
   12f9   de                sep FCALL_REG
                            
   12fa   f8 52             ldi PRINT.0                             ;print the last part of the allocation message
   12fc   ad                plo CALL_REG
   12fd   f8 01             ldi PRINT.1
   12ff   bd                phi CALL_REG
                            
   1300   f8 00             ldi FCALL.0
   1302   ae                plo FCALL_REG
   1303   de                sep FCALL_REG                           ;call PRINT
                        
   1304                 DYN_MEMORY_ALLOC_CALLER_END
   1304   8f                glo STACK_REG
   1305   fc 08             adi 8
   1307   af                plo STACK_REG
   1308   9f                ghi STACK_REG
   1309   7c 00             adci 0
   130b   bf                phi STACK_REG
                            
   130c   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-DYN MEMORY FREE CALLER-----------------------
   130d                 DYN_MEMORY_FREE_CALLER_STR1
   130d   41 6c 6c 6f       db "Allocated memory has been freed at address ",0," (0x",0,")\r\n",0
   1311   63 61 74 65   
   1315   64 20 6d 65   
   1319   6d 6f 72 79   
   131d   20 68 61 73   
   1321   20 62 65 65   
   1325   6e 20 66 72   
   1329   65 65 64 20   
   132d   61 74 20 61   
   1331   64 64 72 65   
   1335   73 73 20 00   
   1339   20 28 30 78   
   133d   00 29 0d 0a   
   1341   00            
   1342                 DYN_MEMORY_FREE_CALLER_STR2
   1342   4d 65 6d 6f       db "Memory address is out of the heap range!\r\n",0
   1346   72 79 20 61   
   134a   64 64 72 65   
   134e   73 73 20 69   
   1352   73 20 6f 75   
   1356   74 20 6f 66   
   135a   20 74 68 65   
   135e   20 68 65 61   
   1362   70 20 72 61   
   1366   6e 67 65 21   
   136a   0d 0a 00      
                            
   136d                 DYN_MEMORY_FREE_CALLER
   136d   ef                sex STACK_REG
                            
   136e   f8 00             ldi 0
   1370   73                stxd
   1371   73                stxd
   1372   73                stxd
   1373   73                stxd                    ;+1 address
                            
   1374   8f                glo STACK_REG
   1375   a5                plo R5
   1376   9f                ghi STACK_REG
   1377   b5                phi R5
   1378   15                inc R5
                            
   1379   f8 f2             ldi EXPRESSION.0
   137b   ad                plo CALL_REG
   137c   f8 08             ldi EXPRESSION.1
   137e   bd                phi CALL_REG
                            
   137f   f8 00             ldi FCALL.0
   1381   ae                plo FCALL_REG
   1382   de                sep FCALL_REG
                            
   1383   8f                glo STACK_REG
   1384   a5                plo R5
   1385   9f                ghi STACK_REG
   1386   b5                phi R5
   1387   15                inc R5
                            
   1388   e5                sex R5
                            
   1389   f8 10             ldi HEAP_START.0
   138b   f5                sd
   138c   60                irx
   138d   f8 21             ldi HEAP_START.1
   138f   75                sdb
                            
   1390   25                dec R5
                            
   1391   cb 13 f7          lbnf DYN_MEMORY_FREE_CALLER_OUTOFRANGE
                            
   1394   f8 00             ldi HEAP_END.0
   1396   f5                sd
   1397   60                irx
   1398   f8 fc             ldi HEAP_END.1
   139a   75                sdb
                            
   139b   25                dec R5
                            
   139c   c3 13 f7          lbdf DYN_MEMORY_FREE_CALLER_OUTOFRANGE
                            
   139f   72                ldxa
   13a0   a4                plo R4
   13a1   f0                ldx
   13a2   b4                phi R4
                            
   13a3   25                dec R5
                            
   13a4   f8 e9             ldi DYN_MEMORY_FREE.0                 ;call free
   13a6   ad                plo CALL_REG
   13a7   f8 0c             ldi DYN_MEMORY_FREE.1
   13a9   bd                phi CALL_REG
                            
   13aa   f8 00             ldi FCALL.0
   13ac   ae                plo FCALL_REG
   13ad   de                sep FCALL_REG
                            
   13ae   f8 0d             ldi DYN_MEMORY_FREE_CALLER_STR1.0
   13b0   a6                plo R6
   13b1   f8 13             ldi DYN_MEMORY_FREE_CALLER_STR1.1
   13b3   b6                phi R6
                            
   13b4   f8 52             ldi PRINT.0                             ;print the success message 1st part
   13b6   ad                plo CALL_REG
   13b7   f8 01             ldi PRINT.1
   13b9   bd                phi CALL_REG
                            
   13ba   f8 00             ldi FCALL.0
   13bc   ae                plo FCALL_REG
   13bd   de                sep FCALL_REG
                            
   13be   85                glo R5
   13bf   a4                plo R4
   13c0   95                ghi R5
   13c1   b4                phi R4
                            
   13c2   f8 ae             ldi PRINT_DEC.0                         ;print address in decimal
   13c4   ad                plo CALL_REG
   13c5   f8 04             ldi PRINT_DEC.1
   13c7   bd                phi CALL_REG
                            
   13c8   f8 00             ldi FCALL.0
   13ca   ae                plo FCALL_REG
   13cb   de                sep FCALL_REG
                            
   13cc   f8 52             ldi PRINT.0                             ;print the success message 2nd part
   13ce   ad                plo CALL_REG
   13cf   f8 01             ldi PRINT.1
   13d1   bd                phi CALL_REG
                            
   13d2   f8 00             ldi FCALL.0
   13d4   ae                plo FCALL_REG
   13d5   de                sep FCALL_REG
                            
   13d6   85                glo R5
   13d7   a4                plo R4
   13d8   95                ghi R5
   13d9   b4                phi R4
                            
   13da   f8 04             ldi 4
   13dc   a5                plo R5
   13dd   f8 00             ldi 0
   13df   b5                phi R5
                            
   13e0   f8 22             ldi PRINT_HEX.0                         ;print address in hexadecimal
   13e2   ad                plo CALL_REG
   13e3   f8 04             ldi PRINT_HEX.1
   13e5   bd                phi CALL_REG
                            
   13e6   f8 00             ldi FCALL.0
   13e8   ae                plo FCALL_REG
   13e9   de                sep FCALL_REG
                            
   13ea   f8 52             ldi PRINT.0                             ;print the success message 2nd part
   13ec   ad                plo CALL_REG
   13ed   f8 01             ldi PRINT.1
   13ef   bd                phi CALL_REG
                            
   13f0   f8 00             ldi FCALL.0
   13f2   ae                plo FCALL_REG
   13f3   de                sep FCALL_REG
                            
   13f4   c0 14 07          lbr DYN_MEMORY_FREE_CALLER_END
                            
   13f7                 DYN_MEMORY_FREE_CALLER_OUTOFRANGE
   13f7   f8 42             ldi DYN_MEMORY_FREE_CALLER_STR2.0
   13f9   a6                plo R6
   13fa   f8 13             ldi DYN_MEMORY_FREE_CALLER_STR2.1
   13fc   b6                phi R6
                            
   13fd   f8 52             ldi PRINT.0                             ;print the out of range message
   13ff   ad                plo CALL_REG
   1400   f8 01             ldi PRINT.1
   1402   bd                phi CALL_REG
                            
   1403   f8 00             ldi FCALL.0
   1405   ae                plo FCALL_REG
   1406   de                sep FCALL_REG                           ;call PRINT
                            
   1407                 DYN_MEMORY_FREE_CALLER_END
   1407   8f                glo STACK_REG
   1408   fc 04             adi 4
   140a   af                plo STACK_REG
   140b   9f                ghi STACK_REG
   140c   7c 00             adci 0
   140e   bf                phi STACK_REG
                            
   140f   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-HEXVIEW_CALLER-------------------------------
   1410                 HEXVIEW_CALLER
   1410   ef                sex STACK_REG
                            
   1411   f8 00             ldi 0
   1413   73                stxd
   1414   73                stxd
   1415   73                stxd
   1416   73                stxd    ;+5 first arg
                            
   1417   73                stxd
   1418   73                stxd
   1419   f8 01             ldi 1
   141b   73                stxd
   141c   f8 00             ldi 0
   141e   73                stxd    ;+1 second arg
                            
   141f   8f                glo STACK_REG
   1420   fc 05             adi 5
   1422   a5                plo R5
   1423   9f                ghi STACK_REG
   1424   7c 00             adci 0
   1426   b5                phi R5
                            
   1427   f8 f2             ldi EXPRESSION.0
   1429   ad                plo CALL_REG
   142a   f8 08             ldi EXPRESSION.1
   142c   bd                phi CALL_REG
                            
   142d   f8 00             ldi FCALL.0
   142f   ae                plo FCALL_REG
   1430   de                sep FCALL_REG
                            
   1431   44                lda R4
   1432   fb 2c             xri 44
   1434   c2 14 4b          lbz HEXVIEW_CALLER_NEXTARG
   1437   24                dec R4
   1438   44                lda R4
   1439   c2 14 5a          lbz HEXVIEW_CALLER_EXEC
   143c   24                dec R4
                            
   143d   04                ldn R4
   143e   b4                phi R4
                            
   143f   f8 13             ldi SERIAL_SEND_START.0
   1441   ad                plo CALL_REG
   1442   f8 01             ldi SERIAL_SEND_START.1
   1444   bd                phi CALL_REG
                            
   1445   f8 00             ldi FCALL.0
   1447   ae                plo FCALL_REG
   1448   de                sep FCALL_REG
                            
   1449   30 79             br HEXVIEW_CALLER_END
                            
   144b                 HEXVIEW_CALLER_NEXTARG
   144b   8f                glo STACK_REG
   144c   a5                plo R5
   144d   9f                ghi STACK_REG
   144e   b5                phi R5
   144f   15                inc R5
                            
   1450   f8 f2             ldi EXPRESSION.0
   1452   ad                plo CALL_REG
   1453   f8 08             ldi EXPRESSION.1
   1455   bd                phi CALL_REG
                            
   1456   f8 00             ldi FCALL.0
   1458   ae                plo FCALL_REG
   1459   de                sep FCALL_REG
                            
   145a                 HEXVIEW_CALLER_EXEC
   145a   8f                glo STACK_REG
   145b   fc 05             adi 5
   145d   a5                plo R5
   145e   9f                ghi STACK_REG
   145f   7c 00             adci 0
   1461   b5                phi R5
                            
   1462   45                lda R5
   1463   a4                plo R4
   1464   45                lda R5
   1465   b4                phi R4
                            
   1466   8f                glo STACK_REG
   1467   a6                plo R6
   1468   9f                ghi STACK_REG
   1469   b6                phi R6
   146a   16                inc R6
                            
   146b   46                lda R6
   146c   a5                plo R5
   146d   46                lda R6
   146e   b5                phi R5
                            
   146f   f8 c4             ldi HEXVIEWER.0
   1471   ad                plo CALL_REG
   1472   f8 0f             ldi HEXVIEWER.1
   1474   bd                phi CALL_REG
                            
   1475   f8 00             ldi FCALL.0
   1477   ae                plo FCALL_REG
   1478   de                sep FCALL_REG
                            
   1479                 HEXVIEW_CALLER_END
   1479   8f                glo STACK_REG
   147a   fc 08             adi 8
   147c   af                plo STACK_REG
   147d   9f                ghi STACK_REG
   147e   7c 00             adci 0
   1480   bf                phi STACK_REG
                            
   1481   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-TEST FUNCTION--------------------------------
   1482                 TEST_STR1
   1482   52 65 73 75       db "Result: ",0
   1486   6c 74 3a 20   
   148a   00            
                        
   148b                 FUNC_TEST
   148b   ef                sex STACK_REG
                            
   148c   f8 00             ldi 0
   148e   73                stxd
   148f   73                stxd
   1490   73                stxd
   1491   73                stxd    ;+1 result
                            
   1492   8f                glo STACK_REG
   1493   a5                plo R5
   1494   9f                ghi STACK_REG
   1495   b5                phi R5
   1496   15                inc R5
                            
   1497   f8 f2             ldi EXPRESSION.0
   1499   ad                plo CALL_REG
   149a   f8 08             ldi EXPRESSION.1
   149c   bd                phi CALL_REG
                            
   149d   f8 00             ldi FCALL.0
   149f   ae                plo FCALL_REG
   14a0   de                sep FCALL_REG
                            
   14a1   8f                glo STACK_REG
   14a2   a4                plo R4
   14a3   9f                ghi STACK_REG
   14a4   b4                phi R4
   14a5   14                inc R4
                        
   14a6   f8 00             ldi 0
   14a8   a5                plo R5
                            
   14a9   f8 ae             ldi PRINT_DEC.0     ;prepare to print the Decimal result.
   14ab   ad                plo CALL_REG
   14ac   f8 04             ldi PRINT_DEC.1
   14ae   bd                phi CALL_REG
                            
   14af   f8 00             ldi FCALL.0
   14b1   ae                plo FCALL_REG
   14b2   de                sep FCALL_REG
                            
   14b3   f8 a8             ldi NEW_LINE.0  ;print newline
   14b5   a6                plo R6
   14b6   f8 15             ldi NEW_LINE.1
   14b8   b6                phi R6
                        	
   14b9   f8 52             ldi PRINT.0     ;prepare to call PRINT
   14bb   ad                plo CALL_REG
   14bc   f8 01             ldi PRINT.1
   14be   bd                phi CALL_REG
                            
   14bf   f8 00             ldi FCALL.0
   14c1   ae                plo FCALL_REG
   14c2   de                sep FCALL_REG
                            
   14c3   8f                glo STACK_REG
   14c4   fc 04             adi 4
   14c6   af                plo STACK_REG
   14c7   9f                ghi STACK_REG
   14c8   7c 00             adci 0
   14ca   bf                phi STACK_REG
                            
   14cb   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-COMMAND-CHECK--------------------------------
                        ;-R4-input string------------------------------
   14cc                 COMMAND_CHECK
   14cc   f8 dc             ldi COMMAND_FUNC_LIST.0
   14ce   a5                plo R5
   14cf   f8 15             ldi COMMAND_FUNC_LIST.1
   14d1   b5                phi R5
                            
   14d2   f8 ab             ldi COMMAND_LIST.0
   14d4   a9                plo R9
   14d5   f8 15             ldi COMMAND_LIST.1
   14d7   b9                phi R9
                            
   14d8   84                glo R4
   14d9   a6                plo R6
   14da   94                ghi R4
   14db   b6                phi R6
                            
   14dc                 COMMAND_CHECK_GOTOSPACE
   14dc   46                lda R6
   14dd   c2 14 e8          lbz COMMAND_CHECK_INSERTZERO
   14e0   fb 20             xri 32
   14e2   c2 14 e9          lbz COMMAND_CHECK_REPLACESPACE
   14e5   c0 14 dc          lbr COMMAND_CHECK_GOTOSPACE
                            
   14e8                 COMMAND_CHECK_INSERTZERO
   14e8   56                str R6
   14e9                 COMMAND_CHECK_REPLACESPACE
   14e9   26                dec R6
   14ea   56                str R6
   14eb   16                inc R6
                            
   14ec                 COMMAND_CHECK_LOOP
   14ec   84                glo R4
   14ed   a8                plo R8
   14ee   94                ghi R4
   14ef   b8                phi R8
                            
   14f0   09                ldn R9
   14f1   c2 15 19          lbz COMMAND_CHECK_END
                        
   14f4   f8 c0             ldi STR_COMPARATOR.0
   14f6   ad                plo CALL_REG
   14f7   f8 01             ldi STR_COMPARATOR.1
   14f9   bd                phi CALL_REG
                            
   14fa   f8 00             ldi FCALL.0
   14fc   ae                plo FCALL_REG
   14fd   de                sep FCALL_REG
                            
   14fe   8a                glo R10
   14ff   ca 15 0c          lbnz COMMAND_CHECK_EXEC
                            
   1502                 COMMAND_CHECK_STR_END
   1502   09                ldn R9
   1503   19                inc R9
   1504   ca 15 02          lbnz COMMAND_CHECK_STR_END
                            
   1507   15                inc R5
   1508   15                inc R5
   1509   c0 14 ec          lbr COMMAND_CHECK_LOOP
                            
   150c                 COMMAND_CHECK_EXEC
   150c   86                glo R6
   150d   a4                plo R4
   150e   96                ghi R6
   150f   b4                phi R4
                            
   1510   45                lda R5
   1511   ad                plo CALL_REG
   1512   05                ldn R5
   1513   bd                phi CALL_REG
                            
   1514   f8 00             ldi FCALL.0
   1516   ae                plo FCALL_REG
   1517   de                sep FCALL_REG
                            
   1518   de                sep RETURN
                            
   1519                 COMMAND_CHECK_END
   1519   f8 e8             ldi UNKNOWN_COMMAND.0  ;set the address of the boot msg in R6
   151b   a6                plo R6
   151c   f8 15             ldi UNKNOWN_COMMAND.1
   151e   b6                phi R6
                        	
   151f   f8 52             ldi PRINT.0     ;prepare to call PRINT
   1521   ad                plo CALL_REG
   1522   f8 01             ldi PRINT.1
   1524   bd                phi CALL_REG
                            
   1525   f8 00             ldi FCALL.0
   1527   ae                plo FCALL_REG
   1528   de                sep FCALL_REG   ;call PRINT
                            
   1529   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-MAIN-----------------------------------------
   152a                 MAIN_PROGRAM
   152a   f8 9d             ldi VAR_LIST_INIT.0       ;variable list init
   152c   ad                plo CALL_REG
   152d   f8 0d             ldi VAR_LIST_INIT.1
   152f   bd                phi CALL_REG
                            
   1530   f8 00             ldi FCALL.0
   1532   ae                plo FCALL_REG
   1533   de                sep FCALL_REG
                            
   1534   f8 ed             ldi DYN_MEMORY_INIT.0     ;heap init
   1536   ad                plo CALL_REG
   1537   f8 09             ldi DYN_MEMORY_INIT.1
   1539   bd                phi CALL_REG
                            
   153a   f8 00             ldi FCALL.0
   153c   ae                plo FCALL_REG
   153d   de                sep FCALL_REG   ;call heap init
                            
   153e   f8 81             ldi BOOT_MSG.0  ;set the address of the boot msg in R6
   1540   a6                plo R6
   1541   f8 15             ldi BOOT_MSG.1
   1543   b6                phi R6
                        	
   1544   f8 52             ldi PRINT.0     ;prepare to call PRINT
   1546   ad                plo CALL_REG
   1547   f8 01             ldi PRINT.1
   1549   bd                phi CALL_REG
                            
   154a   f8 00             ldi FCALL.0
   154c   ae                plo FCALL_REG
   154d   de                sep FCALL_REG   ;call PRINT
                        
   154e                 ASK_INPUT
   154e   f8 00             ldi INPUT_BUFF.0    ;load the address of the buffer to R7
   1550   a7                plo R7
   1551   f8 20             ldi INPUT_BUFF.1
   1553   b7                phi R7
                            
   1554   f8 68             ldi READLINE.0      ;prepare to call READLINE
   1556   ad                plo CALL_REG
   1557   f8 01             ldi READLINE.1
   1559   bd                phi CALL_REG
                            
   155a   f8 00             ldi FCALL.0
   155c   ae                plo FCALL_REG
   155d   de                sep FCALL_REG       ;call READLINE
                            
                            ;Program goes here
   155e   f8 00             ldi INPUT_BUFF.0
   1560   a4                plo R4
   1561   f8 20             ldi INPUT_BUFF.1
   1563   b4                phi R4
                            
   1564   f8 cc             ldi COMMAND_CHECK.0      ;prepare to call COMMAND_CHECK
   1566   ad                plo CALL_REG
   1567   f8 14             ldi COMMAND_CHECK.1
   1569   bd                phi CALL_REG
                            
   156a   f8 00             ldi FCALL.0
   156c   ae                plo FCALL_REG
   156d   de                sep FCALL_REG
                            ;Program ends here
                            
   156e   f8 a4             ldi ASK_IN.0        ;load the ASK_IN string's address to R6
   1570   a6                plo R6
   1571   f8 15             ldi ASK_IN.1
   1573   b6                phi R6
                            
   1574   f8 52             ldi PRINT.0         ;prepare to call PRINT
   1576   ad                plo CALL_REG
   1577   f8 01             ldi PRINT.1
   1579   bd                phi CALL_REG
                            
   157a   f8 00             ldi FCALL.0
   157c   ae                plo FCALL_REG
   157d   de                sep FCALL_REG       ;call PRINT
                        	
   157e   c0 15 4e          lbr ASK_INPUT
                        ;----------------------------------------------
                        
                        ;-CONSTANT DATA--------------------------------
   1581                 BOOT_MSG
   1581   5a 4c 45 44       db "ZLED - CDP1802 Terminal.\r\n\r\nREADY\r\n"
   1585   20 2d 20 43   
   1589   44 50 31 38   
   158d   30 32 20 54   
   1591   65 72 6d 69   
   1595   6e 61 6c 2e   
   1599   0d 0a 0d 0a   
   159d   52 45 41 44   
   15a1   59 0d 0a      
   15a4                 ASK_IN
   15a4   0d 0a 3e 00       db "\r\n>",0
   15a8                 NEW_LINE
   15a8   0d 0a 00          db "\r\n",0
   15ab                 COMMAND_LIST
   15ab   70 72 69 6e       db "print",0,"let",0,"mem_view",0,"mem_debug",0,"mem_alloc",0,"mem_free",0,0
   15af   74 00 6c 65   
   15b3   74 00 6d 65   
   15b7   6d 5f 76 69   
   15bb   65 77 00 6d   
   15bf   65 6d 5f 64   
   15c3   65 62 75 67   
   15c7   00 6d 65 6d   
   15cb   5f 61 6c 6c   
   15cf   6f 63 00 6d   
   15d3   65 6d 5f 66   
   15d7   72 65 65 00   
   15db   00            
   15dc                 COMMAND_FUNC_LIST
   15dc   8b 14             db FUNC_TEST.0,FUNC_TEST.1
   15de   27 0e             db LET_STATEMENT.0,LET_STATEMENT.1
   15e0   10 14             db HEXVIEW_CALLER.0,HEXVIEW_CALLER.1
   15e2   45 0a             db DYN_MEMORY_DEBUG.0,DYN_MEMORY_DEBUG.1
   15e4   52 12             db DYN_MEMORY_ALLOC_CALLER.0,DYN_MEMORY_ALLOC_CALLER.1
   15e6   6d 13             db DYN_MEMORY_FREE_CALLER.0,DYN_MEMORY_FREE_CALLER.1
   15e8                 UNKNOWN_COMMAND
   15e8   55 6e 6b 6e       db "Unknown command.\r\n",0
   15ec   6f 77 6e 20   
   15f0   63 6f 6d 6d   
   15f4   61 6e 64 2e   
   15f8   0d 0a 00      
   15fb                 TEST_RESP
   15fb   45 76 65 72       db "Everything is ok!",0
   15ff   79 74 68 69   
   1603   6e 67 20 69   
   1607   73 20 6f 6b   
   160b   21 00         
                        
   160d                     end
15a4  ASK_IN        154e  ASK_INPUT     0164  BACKSPACE_ACTION    1581  BOOT_MSG  
000d  CALL_REG      0283  CARRY_SHIFTING    14cc  COMMAND_CHECK    1519  COMMAND_CHECK_END
150c  COMMAND_CHECK_EXEC    14dc  COMMAND_CHECK_GOTOSPACE    14e8  COMMAND_CHECK_INSERTZERO    14ec  COMMAND_CHECK_LOOP
14e9  COMMAND_CHECK_REPLACESPACE    1502  COMMAND_CHECK_STR_END    15dc  COMMAND_FUNC_LIST    15ab  COMMAND_LIST
028d  DIVISION_LOOP    3000  DMA_ADDRESS    0013  DMA_INIT      0000  DMA_REG   
0b84  DYN_MEMORY_ALLOC    1252  DYN_MEMORY_ALLOC_CALLER    1304  DYN_MEMORY_ALLOC_CALLER_END    1287  DYN_MEMORY_ALLOC_CALLER_FAIL
120a  DYN_MEMORY_ALLOC_CALLER_STR1    1241  DYN_MEMORY_ALLOC_CALLER_STR2    129a  DYN_MEMORY_ALLOC_CALLER_SUCCESS    0ccf  DYN_MEMORY_ALLOC_END
0bc0  DYN_MEMORY_ALLOC_MAINLOOP    0c9a  DYN_MEMORY_ALLOC_NEXTADDRESS    0cb4  DYN_MEMORY_ALLOC_NEXTPASS    0c0f  DYN_MEMORY_ALLOC_SIZEBIGGER
0bfc  DYN_MEMORY_ALLOC_SIZEEQ    0a45  DYN_MEMORY_DEBUG    0b7b  DYN_MEMORY_DEBUG_END    0b40  DYN_MEMORY_DEBUG_FREE
0a5f  DYN_MEMORY_DEBUG_MAINLOOP    0b46  DYN_MEMORY_DEBUG_NEXTADDRESS    0aa2  DYN_MEMORY_DEBUG_PRINT    0a10  DYN_MEMORY_DEBUG_STR
0a37  DYN_MEMORY_DEBUG_STR_FREE    0a3e  DYN_MEMORY_DEBUG_STR_USED    0ce9  DYN_MEMORY_FREE    136d  DYN_MEMORY_FREE_CALLER
1407  DYN_MEMORY_FREE_CALLER_END    13f7  DYN_MEMORY_FREE_CALLER_OUTOFRANGE    130d  DYN_MEMORY_FREE_CALLER_STR1    1342  DYN_MEMORY_FREE_CALLER_STR2
0d80  DYN_MEMORY_FREE_END    0d21  DYN_MEMORY_FREE_MERGE    0d41  DYN_MEMORY_FREE_MERGELOOP    0d12  DYN_MEMORY_FREE_NEXTCHECK
0d79  DYN_MEMORY_FREE_SETPREVIOUS    09ed  DYN_MEMORY_INIT    017a  END_LINE      08f2  EXPRESSION
0927  EXPRESSION_ADD    0961  EXPRESSION_ADD_LOOP    09dc  EXPRESSION_END    0913  EXPRESSION_MAIN
09d8  EXPRESSION_NEXT_CYCLE    0903  EXPRESSION_SKIPSPACES    0980  EXPRESSION_SUB    09ba  EXPRESSION_SUB_LOOP
074d  FACTOR        07cc  FACTOR_END    07f2  FACTOR_FINAL    07e7  FACTOR_INVERTING
0759  FACTOR_MAIN    07bd  FACTOR_NEGATE    07c8  FACTOR_NEXT_CYCLE    07a3  FACTOR_PARENTHESIS
07ae  FACTOR_PARENTHESIS_SKIPSPACES    0788  FACTOR_READ_DEC    0795  FACTOR_READ_HEX    0100  FCALL     
000e  FCALL_REG     031f  FINAL_CHECK    0343  FINAL_CHECK2    010a  FRETURN   
148b  FUNC_TEST     0daf  GET_STRING    0de2  GET_STRING_ADDLEN    0ded  GET_STRING_ALLOCATE_MEM
0e04  GET_STRING_COPY    0e11  GET_STRING_COPY_LOOP    0e1b  GET_STRING_END    0dc2  GET_STRING_LEN
0de6  GET_STRING_LEN_END    fc00  HEAP_END      2106  HEAP_LASTADDRESS    2110  HEAP_START
0fc4  HEXVIEWER     1201  HEXVIEWER_END    103b  HEXVIEWER_MAINLOOP    10b7  HEXVIEWER_NEXT_HEX
1176  HEXVIEWER_NEXT_STR    1063  HEXVIEWER_PRINT_HEX_LOOP    10a7  HEXVIEWER_PRINT_HEX_SPACES    115a  HEXVIEWER_PRINT_STR_DOT
1117  HEXVIEWER_PRINT_STR_LOOP    1169  HEXVIEWER_PRINT_STR_SPACE    1410  HEXVIEW_CALLER    1479  HEXVIEW_CALLER_END
145a  HEXVIEW_CALLER_EXEC    144b  HEXVIEW_CALLER_NEXTARG    0f1b  HEX_BASE_SRT    0412  HEX_CHARS 
0f2e  HEX_HEADER_STR    0fbf  HEX_LINECNT_SEPARATOR    2000  INPUT_BUFF    01d4  INTEGER_DIV
0224  INTEGER_DIV_INVERT_LOOP1    0234  INTEGER_DIV_NEXT_CHECK    0372  INTEGER_MUL    03d3  INTEGER_MUL_ADD
0409  INTEGER_MUL_END    039f  INTEGER_MUL_LOOP    03dc  INTEGER_MUL_SHIFT    03fd  INTEGER_MUL_SHMULTIPLICAND
03e9  INTEGER_MUL_SHMULTIPLIER    0262  INTEGER_SHIFT_DR    0001  INTP_REG      0002  INTX_REG  
0253  INVERT_LOOP2    0337  INVERT_LOOP3    035e  INVERT_LOOP4    0e27  LET_STATEMENT
0eb6  LET_STATEMENT_ADDNODE    0ea7  LET_STATEMENT_ADDVAR    0e51  LET_STATEMENT_CONTINUE1    0e77  LET_STATEMENT_CONTINUE2
0f05  LET_STATEMENT_END    0e9c  LET_STATEMENT_EXPRESSION    0ed7  LET_STATEMENT_FIRSTNODE    0ef3  LET_STATEMENT_FREENODE
0e8c  LET_STATEMENT_MAINLOOP    0e99  LET_STATEMENT_NEXTCHARACTER    0e60  LET_STATEMENT_SKIPSPACES    152a  MAIN_PROGRAM
15a8  NEW_LINE      0307  NEXT_BIT      0003  PC_REG        0152  PRINT     
045e  PRINT_CHECK_DIGIT    04ae  PRINT_DEC     0555  PRINT_DEC_END    055e  PRINT_DEC_FINAL
0502  PRINT_DEC_INVER_LOOP    050d  PRINT_DEC_MAIN_LOOP    0461  PRINT_DIGIT_LOOP    0422  PRINT_HEX 
048f  PRINT_HEX_END    0473  PRINT_HEX_SHIFT_LOOP1    0449  PRINT_UNTIL_R    000a  R10       
000b  R11           000c  R12           0004  R4            0005  R5        
0006  R6            0007  R7            0008  R8            0009  R9        
0168  READLINE      018e  READLINE_BACKSPACE    016b  READLINE_LOOP    058b  READ_DEC  
061c  READ_DEC_END    05a5  READ_DEC_MAIN_LOOP    062e  READ_HEX      066a  READ_HEX_CONTINUE
069e  READ_HEX_END    068d  READ_HEX_HEXDIGIT    0696  READ_HEX_HEXDIGITLOWER    064b  READ_HEX_MAINLOOP
0699  READ_HEX_NEXTCHAR    066d  READ_HEX_SHIFTLOOP    06b0  READ_VAR      06cc  READ_VAR_CONTINUE
073f  READ_VAR_END    0711  READ_VAR_FOUND    06fd  READ_VAR_NEXTNODE    072a  READ_VAR_NOTFOUND
06de  READ_VAR_SEARCHLOOP    06e5  READ_VAR_SEARCHLOOP_CONTINUE    000e  RETURN        013f  SERIAL_NULL_BIT
012d  SERIAL_READ_START    0139  SERIAL_SAMPLE_BIT    0143  SERIAL_SAVE_BIT    011b  SERIAL_SEND_BIT
0113  SERIAL_SEND_START    0131  SERIAL_WAIT_START    02a5  SHIFTING_Q    0276  SHIFT_DR  
0314  SHIFT_SUBTRACTOR    ffff  STACK_ADDRESS    000f  STACK_REG     0000  START     
01aa  STORE_CHAR    01c3  STR_CHARCHECK    01c0  STR_COMPARATOR    01c9  STR_EQUAL 
01d0  STR_INC       02fd  SUBTRACT_FOR_REAL    07fb  TERM          0822  TERM_DIVIDE
08e0  TERM_END      080e  TERM_MAIN     0887  TERM_MULTIPLY    08dc  TERM_NEXT_CYCLE
15fb  TEST_RESP     1482  TEST_STR1     0369  THE_END       02c7  TRY_SUBTRACTING
15e8  UNKNOWN_COMMAND    2100  VARLIST_COUNT    2102  VARLIST_FIRSTNODE    2104  VARLIST_LASTNODE
0d9d  VAR_LIST_INIT    0da6  VAR_LIST_INIT_LOOP    
