                        
   0000                 DMA_REG EQU 0
   0001                 INTP_REG EQU 1
   0002                 INTX_REG EQU 2
   0003                 PC_REG EQU 3
   0004                 R4 EQU 4
   0005                 R5 EQU 5
   0006                 R6 EQU 6
   0007                 R7 EQU 7
   0008                 R8 EQU 8
   0009                 R9 EQU 9
   000a                 R10 EQU 10
   000b                 R11 EQU 11
   000c                 R12 EQU 12
   000d                 CALL_REG EQU 13
   000e                 FCALL_REG EQU 14
   000e                 RETURN EQU 14
   000f                 STACK_REG EQU 15
                        
   ffff                 STACK_ADDRESS EQU 0FFFFh
   3000                 DMA_ADDRESS EQU 03000h
                        
   2000                 INPUT_BUFF EQU 02000h
                        
   0000                     org 00h
                        
   0000                 START
   0000   71                dis
   0001   00                idl
                            
   0002   7b                seq     ;set Q output to high
                            
   0003   f8 ff             ldi STACK_ADDRESS.0 ;setup the STACK pointer
   0005   af                plo STACK_REG
   0006   f8 ff             ldi STACK_ADDRESS.1
   0008   bf                phi STACK_REG
                            
   0009   f8 01             ldi FCALL.1         ;setup FCALL
   000b   be                phi FCALL_REG
                            
   000c   f8 13             ldi DMA_INIT.0      ;switch PC to R3 and init DMA
   000e   a3                plo PC_REG
   000f   f8 00             ldi DMA_INIT.1
   0011   b3                phi PC_REG
                            
   0012   d3                sep PC_REG
                            
   0013                 DMA_INIT
   0013   f8 00             ldi DMA_ADDRESS.0   ;setup DMA address
   0015   a0                plo DMA_REG
   0016   f8 30             ldi DMA_ADDRESS.1
   0018   b0                phi DMA_REG
                            
   0019   c0 0c 2d          lbr MAIN_PROGRAM
                            
                        ;-FUNCTION CALL HELPER-------------------------
                        ;-WHERE TO JUMP-(CALL_REG)---------------------
   0100                     org 0100h
                            
   0100                 FCALL
   0100   ef                sex STACK_REG   ;set STACK as X register
   0101   93                ghi PC_REG      ;saving the PC value to stack
   0102   73                stxd
   0103   83                glo PC_REG
   0104   73                stxd
                            
   0105   8d                glo CALL_REG    ;put the new address in the PC
   0106   a3                plo PC_REG
   0107   9d                ghi CALL_REG
   0108   b3                phi PC_REG
   0109   d3                sep PC_REG      ;jumping to PC
                            
   010a                 FRETURN
   010a   1f                inc STACK_REG   ;increment the STACK register
   010b   ef                sex STACK_REG   ;set STACK as X register
   010c   72                ldxa            ;restoring PC from STACK
   010d   a3                plo PC_REG
   010e   f0                ldx
   010f   b3                phi PC_REG
   0110   d3                sep PC_REG      ;jumping to PC
   0111   30 0a             br FRETURN
                        ;----------------------------------------------
                        
                        ;-SERIAL SEND BYTE-----------------------------
                        ;-DATA-R4.1------------------------------------
   0113                 SERIAL_SEND_START
   0113   94                ghi R4      ;R4 high is the data, load it into the D reg
   0114   fb ff             xri 0FFh    ;invert it
   0116   b4                phi R4      ;put it back
   0117   f8 85             ldi 085h    ;load 0x85 to the D reg
   0119   fe                shl         ;shift it left so we get 0x0A and set the flag bit
   011a   a4                plo R4      ;put the 0x10 to R4 low, this will be our bit counter
                        
   011b                 SERIAL_SEND_BIT
   011b   c7                lsnf        ;24 - long skip if the flag is not set
   011c   7a                req         ;16 - reset Q if the flag is set
   011d   c8                lskp        ;24
   011e   7b                seq         ;16 - set Q if the flag is not set
   011f   c4                nop         ;24
                            
   0120   24                dec R4      ;16 - decrement R4, this will only affect the R4 lower 8bit
   0121   84                glo R4      ;16
   0122   c6                lsnz        ;24 - if R4 lower is not 0 then long skip
   0123   de                sep RETURN  ;--
   0124   c4                nop         ;--
   0125   94                ghi R4      ;16 - get R4 high
   0126   f6                shr         ;16 - shift it right to get LSB in the flag
   0127   b4                phi R4      ;16 - put it back
   0128   c4                nop         ;24
   0129   c4                nop         ;24
   012a   c4                nop         ;24
   012b   30 1b             br SERIAL_SEND_BIT ;16
                        ;----------------------------------------------
                        
                        ;-SERIAL READ BYTE-----------------------------
                        ;-RETURN R5.1----------------------------------
   012d                 SERIAL_READ_START
   012d   f8 00             ldi 00h     ;set input data register to 0
   012f   a5                plo R5
   0130   b5                phi R5
                            
   0131                 SERIAL_WAIT_START
   0131   3c 31             bn1 SERIAL_WAIT_START ;16 - loop until EF1 goes low
   0133   c4                nop         ;24
   0134   c4                nop         ;24
   0135   c4                nop         ;24
   0136   c4                nop         ;24
   0137   f9 00             ori 00h     ;16 - do nothing for 16 clock cycles
                        
   0139                 SERIAL_SAMPLE_BIT
   0139   34 3f             b1 SERIAL_NULL_BIT  ;16 - checking the EF1
   013b   f9 80             ori 080h            ;16 - if EF1 is high then set MSB to 1 in D register
   013d   30 43             br SERIAL_SAVE_BIT  ;16
                        
   013f                 SERIAL_NULL_BIT
   013f   f9 00             ori 00h         ;16 - of EF1 is low we do nothing
   0141   f9 00             ori 00h         ;16
                        
   0143                 SERIAL_SAVE_BIT
   0143   b5                phi R5          ;16 - put D in R5 high
   0144   15                inc R5          ;16 - increment R5, this will only affect R5 low 8bit
   0145   85                glo R5          ;16 - get R5 low to D register
   0146   fb 09             xri 09h         ;16 - D = D ^ 0x09
   0148   c6                lsnz            ;24 
   0149   de                sep RETURN      ;--
   014a   c4                nop             ;--
   014b   95                ghi R5          ;16 - get R5 high
   014c   f6                shr             ;16 - shift it righ
   014d   c4                nop             ;24
   014e   c4                nop             ;24
   014f   c4                nop             ;24
   0150   30 39             br SERIAL_SAMPLE_BIT ;16
                        ;----------------------------------------------
                        
                        ;-PRINT----------------------------------------
                        ;-FIRST CHAR-R6--------------------------------
   0152                 PRINT
   0152   e6                sex R6          ;set X register to R6
   0153   72                ldxa            ;load data to D and increment R6
   0154   c6                lsnz            ;if it is not zero then long skip
   0155   de                sep RETURN
   0156   c4                nop
                            
   0157   b4                phi R4          ;put D register to R4 to send it
                            
   0158   f8 13             ldi SERIAL_SEND_START.0     ;prepare to call SERIAL_SEND
   015a   ad                plo CALL_REG
   015b   f8 01             ldi SERIAL_SEND_START.1
   015d   bd                phi CALL_REG
                            
   015e   f8 00             ldi FCALL.0
   0160   ae                plo FCALL_REG
   0161   de                sep FCALL_REG   ;call SERIAL_SEND
   0162   30 52             br PRINT
                        ;----------------------------------------------
                        
   0164                 BACKSPACE_ACTION
   0164   08 20 08 00       db 8, 32, 8, 0
                        ;-READ LINE------------------------------------
                        ;-WHERE TO READ-R7-----------------------------
                        ;-R8.1-Character counter-------------------------
   0168                 READLINE
   0168   f8 00             ldi 0
   016a   a8                plo R8
                            
   016b                 READLINE_LOOP
   016b   f8 2d             ldi SERIAL_READ_START.0     ;prepare calling SERIAL_READ
   016d   ad                plo CALL_REG
   016e   f8 01             ldi SERIAL_READ_START.1
   0170   bd                phi CALL_REG
                            
   0171   f8 00             ldi FCALL.0
   0173   ae                plo FCALL_REG
   0174   de                sep FCALL_REG       ;call SERIAL_READ
                            
   0175   95                ghi R5              ;get the result of SERIAL_READ
   0176   fb 0d             xri 13              ;check if it is 13 (ENTER KEY)
   0178   3a 8e             bnz READLINE_BACKSPACE      ;if not jump to READLINE_BACKSPACE
                            
   017a                 END_LINE
   017a   f8 00             ldi 00h             ;put 0 to the endof the string
   017c   57                str R7
                            
   017d   f8 97             ldi NEW_LINE.0      ;load the address of CRLF string
   017f   a6                plo R6
   0180   f8 0c             ldi NEW_LINE.1
   0182   b6                phi R6
                            
   0183   f8 52             ldi PRINT.0         ;prepare to call PRINT
   0185   ad                plo CALL_REG
   0186   f8 01             ldi PRINT.1
   0188   bd                phi CALL_REG
                            
   0189   f8 00             ldi FCALL.0
   018b   ae                plo FCALL_REG
   018c   de                sep FCALL_REG       ;call PRINT
                            
   018d   de                sep RETURN          ;RETURN from READLINE
                            
   018e                 READLINE_BACKSPACE
   018e   95                ghi R5              ;get the result of SERIAL_READ
   018f   fb 7f             xri 127             ;check if it is 127 (DEL)
   0191   3a aa             bnz STORE_CHAR      ;if not jump to STORE_CHAR
                            
   0193   88                glo R8
   0194   32 6b             bz READLINE_LOOP
                            
   0196   f8 64             ldi BACKSPACE_ACTION.0      ;load the address of the backspace action
   0198   a6                plo R6
   0199   f8 01             ldi BACKSPACE_ACTION.1
   019b   b6                phi R6
                            
   019c   f8 52             ldi PRINT.0                 ;prepare to call PRINT
   019e   ad                plo CALL_REG
   019f   f8 01             ldi PRINT.1
   01a1   bd                phi CALL_REG
                            
   01a2   f8 00             ldi FCALL.0
   01a4   ae                plo FCALL_REG
   01a5   de                sep FCALL_REG               ;call PRINT
                            
   01a6   27                dec R7
   01a7   28                dec R8
                            
   01a8   30 6b             br READLINE_LOOP
                            
   01aa                 STORE_CHAR
   01aa   88                glo R8
   01ab   fb ff             xri 0FFh
   01ad   32 6b             bz READLINE_LOOP
                            
   01af   95                ghi R5              ;get the result of the SERIAL_READ again
   01b0   57                str R7              ;store it where R7 pointing
   01b1   17                inc R7              ;increment R7
   01b2   18                inc R8
                            
   01b3   b4                phi R4              ;load the result to R4 to Echo it back
                            
   01b4   f8 13             ldi SERIAL_SEND_START.0     ;prepare to call SERIAL_SEND
   01b6   ad                plo CALL_REG
   01b7   f8 01             ldi SERIAL_SEND_START.1
   01b9   bd                phi CALL_REG
                            
   01ba   f8 00             ldi FCALL.0
   01bc   ae                plo FCALL_REG
   01bd   de                sep FCALL_REG       ;call SERIAL_SEND
   01be   30 6b             br READLINE_LOOP
                        ;----------------------------------------------
                        
                        ;-STR COMPARATOR-------------------------------
                        ;-R8 stringA-R9 stringB------------------------
                        ;-RETURN R10.0---------------------------------
   01c0                 STR_COMPARATOR
   01c0   f8 00             ldi 0           ;R10 low is the result, set it to 0
   01c2   aa                plo R10
                        	
   01c3                 STR_CHARCHECK
   01c3   08                ldn R8          ;load value from RAM[R8] to D register
   01c4   e9                sex R9          ;set X pointer to R9
   01c5   f3                xor             ;D = D ^ RAM[R9]
                            
   01c6   32 c9             bz STR_EQUAL    ;if D == 0 jump to STR_EQUAL
   01c8   de                sep RETURN      ;RETURN
                            
   01c9                 STR_EQUAL 
   01c9   08            	ldn R8          ;load value from RAM[R8] to D register again
   01ca   3a d0         	bnz STR_INC     ;if D != 0 jump to STR_INC
   01cc   f8 01         	ldi 1           ;set R10 to 1 and return
   01ce   aa            	plo R10
   01cf   de            	sep RETURN
                        	
   01d0                 STR_INC
   01d0   18            	inc R8          ;increment both address by 1
   01d1   19            	inc R9
   01d2   30 c3         	br STR_CHARCHECK
                        ;----------------------------------------------
                        
                        ;-INTEGER DIV----------------------------------
                        ;-R4 pointing to divident----------------------
                        ;-R5 pointing to divider-----------------------
                        ;-R6 pointing to quotient----------------------
                        ;-R7 pointing to remainder---------------------
                        ;-R8.0 bitcnt, R8.1 flags----------------------
                        ;-R9 general counter---------------------------
   01d4                 INTEGER_DIV
   01d4   ef                sex STACK_REG   ;set STACK_REG as data pointer to store variables in STACK
   01d5   f8 00             ldi 0           ;set bitcnt and flags to 0
   01d7   a8                plo R8
   01d8   b8                phi R8
                            
   01d9   15                inc R5          ;increment R5 to the MSB because we want to store the divider it in little-endian format
   01da   15                inc R5
   01db   15                inc R5
                            
   01dc   05                ldn R5          ;copying starts here
   01dd   73                stxd
   01de   25                dec R5
                            
   01df   05                ldn R5
   01e0   73                stxd
   01e1   25                dec R5
                            
   01e2   05                ldn R5
   01e3   73                stxd
   01e4   25                dec R5
                            
   01e5   05                ldn R5
   01e6   73                stxd            ;+11 divider, +11 shows the start of the data from the STACK pointer
                            
   01e7   f8 00             ldi 0           ;storing 0 for the subtractor
   01e9   73                stxd
   01ea   73                stxd
   01eb   73                stxd
   01ec   73                stxd            ;+7 subtractor
                            
   01ed   96                ghi R6          ;saving the quotient pointer
   01ee   73                stxd
   01ef   86                glo R6
   01f0   73                stxd            ;+5 quotient pointer
                        
   01f1   97                ghi R7          ;saving the remainder
   01f2   73                stxd
   01f3   87                glo R7
   01f4   73                stxd            ;+3 remainder pointer
                            
   01f5   94                ghi R4          ;saving the dividend pointer
   01f6   73                stxd
   01f7   84                glo R4
   01f8   73                stxd            ;+1 dividend pointer
                            
   01f9   e4                sex R4
                            
   01fa   72                ldxa            ;copy dividend to remainder
   01fb   57                str R7
   01fc   17                inc R7
                            
   01fd   72                ldxa
   01fe   57                str R7
   01ff   17                inc R7
                            
   0200   72                ldxa
   0201   57                str R7
   0202   17                inc R7
                            
   0203   f0                ldx
   0204   57                str R7
                            
   0205   f8 00             ldi 0
   0207   56                str R6
   0208   16                inc R6
   0209   56                str R6
   020a   16                inc R6
   020b   56                str R6
   020c   16                inc R6
   020d   56                str R6
                        
   020e   8f                glo STACK_REG   ;get the STACK_REG pointer to position it to the divider MSB
   020f   fc 0e             adi 14          ;add 14 to it
   0211   a5                plo R5          ;store the new pointer to R5
   0212   9f                ghi STACK_REG   ;get the STACK_REG high part to add the carry to it
   0213   7c 00             adci 0          ;adding the carry
   0215   b5                phi R5          ;store the new high part to R5
                            
   0216   e5                sex R5          ;set X data pointer to R5
   0217   f0                ldx             ;load data from RAM[R5]
   0218   25                dec R5          ;decrement R5 to set it back to the divider's LSB
   0219   25                dec R5
   021a   25                dec R5
   021b   fa 80             ani 080h        ;check if sign bit is set
                            
   021d   c2 02 34          lbz INTEGER_DIV_NEXT_CHECK
                            
   0220   f8 82             ldi 082h        ;load 0x82 to the D register
   0222   fe                shl             ;shit it left so it will set the carry flag and the D registre will be 4
   0223   a9                plo R9          ;store it to R9 low
                            
   0224                 INTEGER_DIV_INVERT_LOOP1
   0224   f0                ldx             ;load data from RAM[R5]
   0225   fb ff             xri 0FFh        ;xor D with 0xFF to invert it
   0227   7c 00             adci 0          ;add the carry for to the result (inver+1)
   0229   55                str R5          ;store the result to RAM[R5]
   022a   60                irx             ;increment R5
                        
   022b   29                dec R9          ;decrement R8
   022c   89                glo R9          ;get R8 low, and if it's not 0 then do the loop
   022d   ca 02 24          lbnz INTEGER_DIV_INVERT_LOOP1
                            
   0230   98                ghi R8          ;set the flag
   0231   f9 01             ori 1
   0233   b8                phi R8
                            
   0234                 INTEGER_DIV_NEXT_CHECK
   0234   8f                glo STACK_REG
   0235   fc 03             adi 3
   0237   a9                plo R9
   0238   9f                ghi STACK_REG
   0239   7c 00             adci 0
   023b   b9                phi R9
                            
   023c   09                ldn R9              ;restore and get remainder MSB
   023d   fc 03             adi 3
   023f   a4                plo R4
   0240   19                inc R9
   0241   09                ldn R9
   0242   7c 00             adci 0
   0244   b4                phi R4
                            
   0245   e4                sex R4
   0246   f0                ldx
   0247   24                dec R4
   0248   24                dec R4
   0249   24                dec R4
   024a   fa 80             ani 080h            ;check if sign bit is set
                            
   024c   c2 02 62          lbz INTEGER_SHIFT_DR
                            
   024f   f8 82             ldi 082h
   0251   fe                shl
   0252   a9                plo R9
                            
   0253                 INVERT_LOOP2
   0253   f0                ldx         ;invert byte 3
   0254   fb ff             xri 0FFh
   0256   7c 00             adci 0
   0258   54                str R4
   0259   60                irx
                        
   025a   29                dec R9
   025b   89                glo R9
   025c   3a 53             bnz INVERT_LOOP2
                            
   025e   98                ghi R8      ;set the flag
   025f   f9 02             ori 2
   0261   b8                phi R8
                            
   0262                 INTEGER_SHIFT_DR
   0262   8f                glo STACK_REG ;get divider MSB
   0263   fc 0b             adi 11
   0265   a5                plo R5
   0266   9f                ghi STACK_REG
   0267   7c 00             adci 0
   0269   b5                phi R5
                            
   026a   f8 00             ldi 0
   026c   e5                sex R5
   026d   f1                or
   026e   60                irx
   026f   f1                or
   0270   60                irx
   0271   f1                or
   0272   60                irx
   0273   f1                or
   0274   32 8d             bz DIVISION_LOOP
                            
   0276                 SHIFT_DR
   0276   8f                glo STACK_REG ;get divider MSB
   0277   fc 0e             adi 14
   0279   a5                plo R5
   027a   9f                ghi STACK_REG
   027b   7c 00             adci 0
   027d   b5                phi R5
                            
   027e   e5                sex R5
                            
   027f   f8 04             ldi 4
   0281   fe                shl
   0282   a9                plo R9
                            
   0283                 CARRY_SHIFTING
   0283   f0                ldx
   0284   76                shrc
   0285   73                stxd
                            
   0286   29                dec R9
   0287   89                glo R9
   0288   3a 83             bnz CARRY_SHIFTING
                            
   028a   18                inc R8
                            
   028b   30 62             br INTEGER_SHIFT_DR
                            
   028d                 DIVISION_LOOP
   028d   88                glo R8              ;get R8 low
   028e   fd 20             sdi 32              ;if larger than 32 then finish the loop
   0290   cb 03 1f          lbnf FINAL_CHECK
                        
   0293   8f                glo STACK_REG       ;restore quotient pointer to R6
   0294   fc 05             adi 5
   0296   a9                plo R9
   0297   9f                ghi STACK_REG
   0298   7c 00             adci 0
   029a   b9                phi R9
                            
   029b   09                ldn R9
   029c   a6                plo R6
   029d   19                inc R9
   029e   09                ldn R9
   029f   b6                phi R6
                            
   02a0   e6                sex R6
                            
   02a1   f8 02             ldi 2
   02a3   fe                shl
   02a4   a9                plo R9
                            
   02a5                 SHIFTING_Q
   02a5   f0                ldx                 ;shifting quotient to left
   02a6   7e                shlc
   02a7   56                str R6
   02a8   60                irx
                        
   02a9   29                dec R9
   02aa   89                glo R9
   02ab   3a a5             bnz SHIFTING_Q
                            
   02ad   8f                glo STACK_REG    ;restore remainder pointer to R4
   02ae   fc 03             adi 3
   02b0   a9                plo R9
   02b1   9f                ghi STACK_REG
   02b2   7c 00             adci 0
   02b4   b9                phi R9
                            
   02b5   09                ldn R9
   02b6   a4                plo R4
   02b7   19                inc R9
   02b8   09                ldn R9
   02b9   b4                phi R4
                            
   02ba   8f                glo STACK_REG    ;restore subtractor pointer to R5
   02bb   fc 07             adi 7
   02bd   a5                plo R5
   02be   9f                ghi STACK_REG
   02bf   7c 00             adci 0
   02c1   b5                phi R5
                            
   02c2   e4                sex R4
   02c3   f8 82             ldi 082h
   02c5   fe                shl
   02c6   a9                plo R9
                            
   02c7                 TRY_SUBTRACTING         ;try subtracting
   02c7   05                ldn R5
   02c8   75                sdb
   02c9   60                irx
   02ca   15                inc R5
                            
   02cb   29                dec R9
   02cc   89                glo R9
   02cd   3a c7             bnz TRY_SUBTRACTING
                            
   02cf   cb 03 07          lbnf NEXT_BIT        ;if subtracting unsuccesful, jump to NEXT_BIT
                            
   02d2   8f                glo STACK_REG
   02d3   fc 05             adi 5
   02d5   a9                plo R9
   02d6   9f                ghi STACK_REG
   02d7   7c 00             adci 0
   02d9   b9                phi R9
                            
   02da   09                ldn R9
   02db   a6                plo R6
   02dc   19                inc R9
   02dd   09                ldn R9
   02de   b6                phi R6
                            
   02df   06                ldn R6
   02e0   f9 01             ori 1
   02e2   56                str R6
                            
   02e3   8f                glo STACK_REG    ;restore remainder pointer
   02e4   fc 03             adi 3
   02e6   a9                plo R9
   02e7   9f                ghi STACK_REG
   02e8   7c 00             adci 0
   02ea   b9                phi R9
                            
   02eb   09                ldn R9
   02ec   a4                plo R4
   02ed   19                inc R9
   02ee   09                ldn R9
   02ef   b4                phi R4
                            
   02f0   8f                glo STACK_REG    ;restore subtractor's pointer to R5
   02f1   fc 07             adi 7
   02f3   a5                plo R5
   02f4   9f                ghi STACK_REG
   02f5   7c 00             adci 0
   02f7   b5                phi R5
                            
   02f8   e4                sex R4
                            
   02f9   f8 82             ldi 082h
   02fb   fe                shl
   02fc   a9                plo R9
                            
   02fd                 SUBTRACT_FOR_REAL
   02fd   05                ldn R5          ;subtract the subtractor from the remainder and store it
   02fe   75                sdb
   02ff   54                str R4
   0300   60                irx
   0301   15                inc R5
                            
   0302   29                dec R9
   0303   89                glo R9
   0304   ca 02 fd          lbnz SUBTRACT_FOR_REAL
                            
   0307                 NEXT_BIT
   0307   8f                glo STACK_REG    ;restore subtractor pointer to R5 and set it to MSB
   0308   fc 0a             adi 10
   030a   a5                plo R5
   030b   9f                ghi STACK_REG
   030c   7c 00             adci 0
   030e   b5                phi R5
                            
   030f   e5                sex R5
   0310   f8 02             ldi 2
   0312   fe                shl
   0313   a9                plo R9
                            
   0314                 SHIFT_SUBTRACTOR
   0314   f0                ldx
   0315   76                shrc
   0316   73                stxd
                            
   0317   29                dec R9
   0318   89                glo R9
   0319   3a 14             bnz SHIFT_SUBTRACTOR
                            
   031b   18                inc R8
   031c   c0 02 8d          lbr DIVISION_LOOP
                            
   031f                 FINAL_CHECK
   031f   98                ghi R8
   0320   fa 02             ani 2
   0322   c2 03 43          lbz FINAL_CHECK2
                            
   0325   8f                glo STACK_REG    ;restore remainder pointer to R4
   0326   fc 03             adi 3
   0328   a9                plo R9
   0329   9f                ghi STACK_REG
   032a   7c 00             adci 0
   032c   b9                phi R9
                            
   032d   09                ldn R9
   032e   a4                plo R4
   032f   19                inc R9
   0330   09                ldn R9
   0331   b4                phi R4
                            
   0332   e4                sex R4
                            
   0333   f8 82             ldi 082h
   0335   fe                shl
   0336   a9                plo R9
                            
   0337                 INVERT_LOOP3
   0337   f0                ldx
   0338   fb ff             xri 0FFh
   033a   7c 00             adci 0
   033c   54                str R4
   033d   60                irx
                            
   033e   29                dec R9
   033f   89                glo R9
   0340   ca 03 37          lbnz INVERT_LOOP3
                            
   0343                 FINAL_CHECK2
   0343   98                ghi R8
   0344   c2 03 69          lbz THE_END
   0347   fb 03             xri 3
   0349   c2 03 69          lbz THE_END
                            
   034c   8f                glo STACK_REG    ;restore quotient pointer to R6
   034d   fc 05             adi 5
   034f   a9                plo R9
   0350   9f                ghi STACK_REG
   0351   7c 00             adci 0
   0353   b9                phi R9
                            
   0354   09                ldn R9
   0355   a6                plo R6
   0356   19                inc R9
   0357   09                ldn R9
   0358   b6                phi R6
                            
   0359   e6                sex R6
                            
   035a   f8 82             ldi 082h
   035c   fe                shl
   035d   a9                plo R9
                            
   035e                 INVERT_LOOP4
   035e   f0                ldx
   035f   fb ff             xri 0FFh
   0361   7c 00             adci 0
   0363   56                str R6
   0364   60                irx
                            
   0365   29                dec R9
   0366   89                glo R9
   0367   3a 5e             bnz INVERT_LOOP4
                        
   0369                 THE_END
   0369   8f                glo STACK_REG       ;setting back the STACK_REG for return
   036a   fc 0e             adi 14
   036c   af                plo STACK_REG
   036d   9f                ghi STACK_REG
   036e   7c 00             adci 0
   0370   bf                phi STACK_REG
                            
   0371   de                sep RETURN          ;RETURN
                        ;----------------------------------------------
                        
                        ;-INTEGER MUL----------------------------------
                        ;-R4-multiplicand pointer----------------------
                        ;-R5-multiplier pointer------------------------
                        ;-R6-result pointer----------------------------
                        ;-R7-general register--------------------------
   0372                 INTEGER_MUL
   0372   ef                sex STACK_REG
                            
   0373   14                inc R4      ;increment R4 and R5 pointer to MSB
   0374   14                inc R4      ;to copy the values to the local variables
   0375   14                inc R4
                            
   0376   15                inc R5
   0377   15                inc R5
   0378   15                inc R5
                            
   0379   04                ldn R4      ;copying starts here
   037a   73                stxd
   037b   24                dec R4
                            
   037c   04                ldn R4
   037d   73                stxd
   037e   24                dec R4
                            
   037f   04                ldn R4
   0380   73                stxd
   0381   24                dec R4
                            
   0382   04                ldn R4
   0383   73                stxd        ;+7 multiplicand
                            
   0384   05                ldn R5
   0385   73                stxd
   0386   25                dec R5
                            
   0387   05                ldn R5
   0388   73                stxd
   0389   25                dec R5
                            
   038a   05                ldn R5
   038b   73                stxd
   038c   25                dec R5
                            
   038d   05                ldn R5
   038e   73                stxd        ;+3 multiplier
                            
   038f   96                ghi R6
   0390   73                stxd
   0391   86                glo R6
   0392   73                stxd        ;+1 result pointer
                        
   0393   f8 00             ldi 0       ;zeroing the result
                            
   0395   56                str R6
   0396   16                inc R6
                            
   0397   56                str R6
   0398   16                inc R6
                            
   0399   56                str R6
   039a   16                inc R6
                            
   039b   56                str R6
                            
   039c   26                dec R6
   039d   26                dec R6
   039e   26                dec R6
                        
   039f                 INTEGER_MUL_LOOP
   039f   8f                glo STACK_REG   ;restore multiplier pointer
   03a0   fc 03             adi 3
   03a2   a5                plo R5
   03a3   9f                ghi STACK_REG
   03a4   7c 00             adci 0
   03a6   b5                phi R5
                            
   03a7   e5                sex R5          ;check if multiplier is 0
   03a8   f8 00             ldi 0
   03aa   f1                or
   03ab   60                irx
   03ac   f1                or
   03ad   60                irx
   03ae   f1                or
   03af   60                irx
   03b0   f1                or
                            
   03b1   25                dec R5
   03b2   25                dec R5
   03b3   25                dec R5
                            
   03b4   c2 04 09          lbz INTEGER_MUL_END      ;if 0 then jump to the end
                            
   03b7   05                ldn R5                  ;load the multiplier's LSB
   03b8   fa 01             ani 1                   ;filter for the LSb
   03ba   32 dc             bz INTEGER_MUL_SHIFT    ;if zero, skip the addition
                            
   03bc   8f                glo STACK_REG           ;restore multiplicand pointer
   03bd   fc 07             adi 7
   03bf   a4                plo R4
   03c0   9f                ghi STACK_REG
   03c1   7c 00             adci 0
   03c3   b4                phi R4
                            
   03c4   8f                glo STACK_REG           ;restore result pointer
   03c5   a7                plo R7
   03c6   9f                ghi STACK_REG
   03c7   b7                phi R7
   03c8   17                inc R7
                            
   03c9   07                ldn R7
   03ca   a5                plo R5
   03cb   17                inc R7
   03cc   07                ldn R7
   03cd   b5                phi R5
                            
   03ce   e5                sex R5
                            
   03cf   f8 02             ldi 2                   ;prepare addition
   03d1   fe                shl
   03d2   a7                plo R7
                            
   03d3                 INTEGER_MUL_ADD
   03d3   04                ldn R4
   03d4   74                adc
   03d5   55                str R5
   03d6   60                irx
   03d7   14                inc R4
                            
   03d8   27                dec R7
   03d9   87                glo R7
   03da   3a d3             bnz INTEGER_MUL_ADD
                        
   03dc                 INTEGER_MUL_SHIFT
                        
   03dc   8f                glo STACK_REG           ;set multiplier's pointer to MSB
   03dd   fc 06             adi 6                   ;to shift it right
   03df   a5                plo R5
   03e0   9f                ghi STACK_REG
   03e1   7c 00             adci 0
   03e3   b5                phi R5
                            
   03e4   e5                sex R5
                            
   03e5   f8 02             ldi 2
   03e7   fe                shl
   03e8   a7                plo R7
                            
   03e9                 INTEGER_MUL_SHMULTIPLIER
   03e9   f0                ldx                     ;shifting right the multiplier
   03ea   76                shrc
   03eb   73                stxd
                            
   03ec   27                dec R7
   03ed   87                glo R7
   03ee   3a e9             bnz INTEGER_MUL_SHMULTIPLIER
                            
   03f0   8f                glo STACK_REG           ;restore multiplicand pointer
   03f1   fc 07             adi 7                   ;to shift it left
   03f3   a4                plo R4
   03f4   9f                ghi STACK_REG
   03f5   7c 00             adci 0
   03f7   b4                phi R4
                            
   03f8   e4                sex R4
                            
   03f9   f8 02             ldi 2
   03fb   fe                shl
   03fc   a7                plo R7
                            
   03fd                 INTEGER_MUL_SHMULTIPLICAND
   03fd   f0                ldx                     ;shifting the multiplicand left
   03fe   7e                shlc
   03ff   54                str R4
   0400   60                irx
                        
   0401   27                dec R7
   0402   87                glo R7
   0403   ca 03 fd          lbnz INTEGER_MUL_SHMULTIPLICAND
                            
   0406   c0 03 9f          lbr INTEGER_MUL_LOOP
                            
   0409                 INTEGER_MUL_END
   0409   8f                glo STACK_REG
   040a   fc 0a             adi 10
   040c   af                plo STACK_REG
   040d   9f                ghi STACK_REG
   040e   7c 00             adci 0
   0410   bf                phi STACK_REG
                            
   0411   de                sep RETURN          ;RETURN    
                        ;----------------------------------------------
                        
                        ;-PRINT HEX------------------------------------
                        ;-R4-int pointer-------------------------------
                        ;-R5.0-number of digits------------------------
                        ;-Local registers------------------------------
                        ;-R5.1-flag, R6--------------------------------
   0412                 HEX_CHARS
   0412   30 31 32 33       db "0123456789ABCDEF"
   0416   34 35 36 37   
   041a   38 39 41 42   
   041e   43 44 45 46   
                        ;----------------------------------------------
   0422                 PRINT_HEX
   0422   ef                sex STACK_REG
                            
   0423   95                ghi R5  ;saving the state of the local registers
   0424   73                stxd
                            
   0425   96                ghi R6
   0426   73                stxd
   0427   86                glo R6
   0428   73                stxd
                            
   0429   14                inc R4  ;making a copy of the Integer
   042a   14                inc R4
   042b   14                inc R4
                            
   042c   04                ldn R4
   042d   73                stxd
   042e   24                dec R4
   042f   04                ldn R4
   0430   73                stxd
   0431   24                dec R4
   0432   04                ldn R4
   0433   73                stxd
   0434   24                dec R4
   0435   04                ldn R4
   0436   73                stxd    ;+2 the integer
                            
   0437   f8 00             ldi 0   ;+1 
   0439   73                stxd
                            
   043a   8f                glo STACK_REG   ;set R4 to point to the Integer
   043b   a4                plo R4
   043c   9f                ghi STACK_REG
   043d   b4                phi R4
   043e   14                inc R4
   043f   14                inc R4
                            
   0440   f8 00             ldi 0           ;set R5 flags to 0
   0442   b5                phi R5
   0443   85                glo R5              
   0444   3a 49             bnz PRINT_UNTIL_R
   0446   f8 01             ldi 1           ;if R5 low, the number of digits, is zero, then set R5 flag
   0448   b5                phi R5
                        
   0449                 PRINT_UNTIL_R
   0449   95                ghi R5                  ;check the flag if set or not
   044a   32 5e             bz PRINT_CHECK_DIGIT    
   044c   e4                sex R4              ;checking the integer if it's zero
   044d   f8 00             ldi 0
   044f   f1                or
   0450   60                irx
   0451   f1                or
   0452   60                irx
   0453   f1                or
   0454   60                irx
   0455   f1                or
                            
   0456   24                dec R4
   0457   24                dec R4
   0458   24                dec R4
                            
   0459   ef                sex STACK_REG    
   045a   3a 61             bnz PRINT_DIGIT_LOOP
   045c   30 8f             br PRINT_HEX_END
                            
   045e                 PRINT_CHECK_DIGIT
   045e   85                glo R5
   045f   32 8f             bz PRINT_HEX_END
                        
   0461                 PRINT_DIGIT_LOOP
   0461   04                ldn R4
   0462   fa 0f             ani 0Fh
   0464   5f                str STACK_REG
   0465   f8 12             ldi HEX_CHARS.0
   0467   f4                add
   0468   a6                plo R6
   0469   f8 04             ldi HEX_CHARS.1
   046b   7c 00             adci 0
   046d   b6                phi R6
                            
   046e   06                ldn R6
   046f   73                stxd
                            
   0470   f8 04             ldi 4
   0472   a6                plo R6
                            
   0473                 PRINT_HEX_SHIFT_LOOP1
   0473   14                inc R4
   0474   14                inc R4
   0475   14                inc R4
                            
   0476   04                ldn R4
   0477   f6                shr
   0478   54                str R4
   0479   24                dec R4
                            
   047a   04                ldn R4
   047b   76                shrc
   047c   54                str R4
   047d   24                dec R4
                            
   047e   04                ldn R4
   047f   76                shrc
   0480   54                str R4
   0481   24                dec R4
                            
   0482   04                ldn R4
   0483   76                shrc
   0484   54                str R4
                            
   0485   26                dec R6
   0486   86                glo R6
   0487   3a 73             bnz PRINT_HEX_SHIFT_LOOP1
                            
   0489   95                ghi R5      ;check if R5 flag is set, if set then skip decrementing.
   048a   c6                lsnz
   048b   25                dec R5
   048c   c4                nop
   048d   30 49             br PRINT_UNTIL_R
                        
   048f                 PRINT_HEX_END
   048f   8f                glo STACK_REG
   0490   a6                plo R6
   0491   9f                ghi STACK_REG
   0492   b6                phi R6
   0493   16                inc R6
                            
   0494   f8 52             ldi PRINT.0     ;prepare to call PRINT
   0496   ad                plo CALL_REG
   0497   f8 01             ldi PRINT.1
   0499   bd                phi CALL_REG
                            
   049a   f8 00             ldi FCALL.0
   049c   ae                plo FCALL_REG
   049d   de                sep FCALL_REG
                            
   049e   86                glo R6
   049f   fc 04             adi 4
   04a1   af                plo STACK_REG
   04a2   96                ghi R6
   04a3   7c 00             adci 0
   04a5   bf                phi STACK_REG
                            
   04a6   ef                sex STACK_REG   ;restore local registers
   04a7   72                ldxa
   04a8   a6                plo R6
   04a9   72                ldxa
   04aa   b6                phi R6
   04ab   f0                ldx
   04ac   b5                phi R5
                            
   04ad   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-PRINT DEC------------------------------------
                        ;-R4-int pointer-------------------------------
                        ;-R10-flags-------------------------------------
   04ae                 PRINT_DEC
   04ae   ef                sex STACK_REG
                            
   04af   f8 00             ldi 0
   04b1   aa                plo R10
   04b2   ba                phi R10
                            
   04b3   14                inc R4
   04b4   14                inc R4
   04b5   14                inc R4
                            
   04b6   04                ldn R4
   04b7   73                stxd
   04b8   24                dec R4
   04b9   04                ldn R4
   04ba   73                stxd
   04bb   24                dec R4
   04bc   04                ldn R4
   04bd   73                stxd
   04be   24                dec R4
   04bf   04                ldn R4
   04c0   73                stxd        ;+10 the integer
                            
   04c1   f8 00             ldi 0
   04c3   73                stxd
   04c4   73                stxd
   04c5   73                stxd
   04c6   f8 0a             ldi 0Ah
   04c8   73                stxd        ;+6 divider
                            
   04c9   f8 00             ldi 0
   04cb   73                stxd
   04cc   73                stxd
   04cd   73                stxd
   04ce   73                stxd        ;+2 remainder
                            
   04cf   73                stxd        ;+1 output string buffer end
                            
   04d0   8f                glo STACK_REG
   04d1   ac                plo R12
   04d2   9f                ghi STACK_REG
   04d3   bc                phi R12
                            
   04d4   8c                glo R12
   04d5   fc 0d             adi 13
   04d7   a4                plo R4
   04d8   9c                ghi R12
   04d9   7c 00             adci 0
   04db   b4                phi R4
                            
   04dc   e4                sex R4
   04dd   f0                ldx
   04de   fa 80             ani 080h
   04e0   32 f8             bz PRINT_DEC_MAIN_LOOP
                            
   04e2   8a                glo R10
   04e3   f9 01             ori 1
   04e5   aa                plo R10
                            
   04e6   24                dec R4
   04e7   24                dec R4
   04e8   24                dec R4
                            
   04e9   f8 82             ldi 082h
   04eb   fe                shl
   04ec   a6                plo R6
                            
   04ed                 PRINT_DEC_INVER_LOOP
   04ed   f0                ldx
   04ee   fb ff             xri 0FFh
   04f0   7c 00             adci 0
   04f2   54                str R4
   04f3   14                inc R4
                            
   04f4   26                dec R6
   04f5   86                glo R6
   04f6   3a ed             bnz PRINT_DEC_INVER_LOOP
                            
   04f8                 PRINT_DEC_MAIN_LOOP    
   04f8   8c                glo R12
   04f9   fc 0a             adi 10
   04fb   a4                plo R4
   04fc   a6                plo R6
   04fd   9c                ghi R12
   04fe   7c 00             adci 0
   0500   b4                phi R4
   0501   b6                phi R6
                            
   0502   8c                glo R12
   0503   fc 06             adi 6
   0505   a5                plo R5
   0506   9c                ghi R12
   0507   7c 00             adci 0
   0509   b5                phi R5
                            
   050a   8c                glo R12
   050b   fc 02             adi 2
   050d   a7                plo R7
   050e   9c                ghi R12
   050f   7c 00             adci 0
   0511   b7                phi R7
                            
   0512   f8 d4             ldi INTEGER_DIV.0
   0514   ad                plo CALL_REG
   0515   f8 01             ldi INTEGER_DIV.1
   0517   bd                phi CALL_REG
                            
   0518   f8 00             ldi FCALL.0
   051a   ae                plo FCALL_REG
   051b   de                sep FCALL_REG
                            
   051c   ef                sex STACK_REG
                            
   051d   8c                glo R12
   051e   fc 02             adi 2
   0520   a7                plo R7
   0521   9c                ghi R12
   0522   7c 00             adci 0
   0524   b7                phi R7
                            
   0525   07                ldn R7
   0526   fc 30             adi 48
   0528   73                stxd
                            
   0529   8c                glo R12
   052a   fc 0a             adi 10
   052c   a4                plo R4
   052d   9c                ghi R12
   052e   7c 00             adci 0
   0530   b4                phi R4
                            
   0531   e4                sex R4
                            
   0532   f8 00             ldi 0
   0534   f1                or
   0535   60                irx
   0536   f1                or
   0537   60                irx
   0538   f1                or
   0539   60                irx
   053a   f1                or
                            
   053b   32 40             bz PRINT_DEC_END
   053d   c0 04 f8          lbr PRINT_DEC_MAIN_LOOP
                        
   0540                 PRINT_DEC_END
   0540   8a                glo R10
   0541   fa 01             ani 1
   0543   32 49             bz PRINT_DEC_FINAL
                            
   0545   ef                sex STACK_REG
   0546   f8 2d             ldi 45
   0548   73                stxd
                        
   0549                 PRINT_DEC_FINAL
   0549   8f                glo STACK_REG
   054a   a6                plo R6
   054b   9f                ghi STACK_REG
   054c   b6                phi R6
   054d   16                inc R6
                            
   054e   f8 52             ldi PRINT.0
   0550   ad                plo CALL_REG
   0551   f8 01             ldi PRINT.1
   0553   bd                phi CALL_REG
                            
   0554   f8 00             ldi FCALL.0
   0556   ae                plo FCALL_REG
   0557   de                sep FCALL_REG
                            
   0558   8c                glo R12
   0559   fc 0d             adi 13
   055b   af                plo STACK_REG
   055c   9c                ghi R12
   055d   7c 00             adci 0
   055f   bf                phi STACK_REG
                            
   0560   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-READ DEC-------------------------------------
                        ;-R4-string pointer----------------------------
                        ;-R5-result pointer----------------------------
   0561                 READ_DEC
   0561   ef                sex STACK_REG
                            
   0562   94                ghi R4
   0563   73                stxd
   0564   84                glo R4
   0565   73                stxd        ;+7 string pointer
                            
   0566   95                ghi R5
   0567   73                stxd
   0568   85                glo R5
   0569   73                stxd        ;+5 result pointer
                            
   056a   f8 00             ldi 0
   056c   73                stxd
   056d   73                stxd
   056e   73                stxd
   056f   f8 0a             ldi 0Ah
   0571   73                stxd        ;+1 multiplier
                            
   0572                 READ_DEC_MAIN_LOOP
   0572   8f                glo STACK_REG
   0573   fc 07             adi 7
   0575   a6                plo R6
   0576   9f                ghi STACK_REG
   0577   7c 00             adci 0
   0579   b6                phi R6
                            
   057a   06                ldn R6
   057b   a4                plo R4
   057c   16                inc R6
   057d   06                ldn R6
   057e   b4                phi R4
                            
   057f   04                ldn R4
   0580   ff 30             smi 48
   0582   3b e6             bnf READ_DEC_END
   0584   ff 0a             smi 10
   0586   33 e6             bdf READ_DEC_END
                            
   0588   8f                glo STACK_REG
   0589   fc 05             adi 5
   058b   a6                plo R6
   058c   9f                ghi STACK_REG
   058d   7c 00             adci 0
   058f   b6                phi R6
                            
   0590   06                ldn R6
   0591   a4                plo R4
   0592   16                inc R6
   0593   06                ldn R6
   0594   b4                phi R4
                            
   0595   b6                phi R6
   0596   84                glo R4
   0597   a6                plo R6
                            
   0598   8f                glo STACK_REG
   0599   a5                plo R5
   059a   9f                ghi STACK_REG
   059b   b5                phi R5
   059c   15                inc R5
                            
   059d   f8 72             ldi INTEGER_MUL.0     ;prepare to call INTEGER_MUL
   059f   ad                plo CALL_REG
   05a0   f8 03             ldi INTEGER_MUL.1       
   05a2   bd                phi CALL_REG
                            
   05a3   f8 00             ldi FCALL.0
   05a5   ae                plo FCALL_REG
   05a6   de                sep FCALL_REG
                            
   05a7   8f                glo STACK_REG
   05a8   fc 07             adi 7
   05aa   a6                plo R6
   05ab   9f                ghi STACK_REG
   05ac   7c 00             adci 0
   05ae   b6                phi R6
                            
   05af   06                ldn R6
   05b0   a4                plo R4
   05b1   16                inc R6
   05b2   06                ldn R6
   05b3   b4                phi R4
                            
   05b4   8f                glo STACK_REG
   05b5   fc 05             adi 5
   05b7   a6                plo R6
   05b8   9f                ghi STACK_REG
   05b9   7c 00             adci 0
   05bb   b6                phi R6
                            
   05bc   06                ldn R6
   05bd   a5                plo R5
   05be   16                inc R6
   05bf   06                ldn R6
   05c0   b5                phi R5
                            
   05c1   e5                sex R5
                            
   05c2   04                ldn R4
   05c3   ff 30             smi 48
                            
   05c5   f4                add
   05c6   55                str R5
   05c7   15                inc R5
                            
   05c8   f8 00             ldi 0
   05ca   74                adc
   05cb   55                str R5
   05cc   15                inc R5
                            
   05cd   f8 00             ldi 0
   05cf   74                adc
   05d0   55                str R5
   05d1   15                inc R5
                            
   05d2   f8 00             ldi 0
   05d4   74                adc
   05d5   55                str R5
                        
   05d6   14                inc R4
                            
   05d7   8f                glo STACK_REG
   05d8   fc 07             adi 7
   05da   a6                plo R6
   05db   9f                ghi STACK_REG
   05dc   7c 00             adci 0
   05de   b6                phi R6
                            
   05df   84                glo R4
   05e0   56                str R6
   05e1   16                inc R6
   05e2   94                ghi R4
   05e3   56                str R6
                            
   05e4   30 72             br READ_DEC_MAIN_LOOP
                           
   05e6                 READ_DEC_END
   05e6   8f                glo STACK_REG
   05e7   fc 07             adi 7
   05e9   a6                plo R6
   05ea   9f                ghi STACK_REG
   05eb   7c 00             adci 0
   05ed   b6                phi R6
                            
   05ee   06                ldn R6
   05ef   a4                plo R4
   05f0   16                inc R6
   05f1   06                ldn R6
   05f2   b4                phi R4
                        
   05f3   8f                glo STACK_REG
   05f4   fc 08             adi 8
   05f6   af                plo STACK_REG
   05f7   9f                ghi STACK_REG
   05f8   7c 00             adci 0
   05fa   bf                phi STACK_REG
                            
   05fb   de                sep RETURN      ;RETURN    
                        ;----------------------------------------------
                        
                        ;-FACTOR---------------------------------------
                        ;-R4-string pointer----------------------------
                        ;-R5-result pointer----------------------------
   05fc                 FACTOR
   05fc   ef                sex STACK_REG
                            
   05fd   94                ghi R4
   05fe   73                stxd
   05ff   84                glo R4
   0600   73                stxd    ;+4 string pt
                            
   0601   95                ghi R5
   0602   73                stxd
   0603   85                glo R5
   0604   73                stxd    ;+2 result pt
                            
   0605   f8 00             ldi 0
   0607   73                stxd    ;+1 flag
                            
                            
   0608                 FACTOR_MAIN
   0608   04                ldn R4
   0609   fb 20             xri 32
   060b   c2 06 57          lbz FACTOR_NEXT_CYCLE
   060e   04                ldn R4
   060f   fb 2b             xri 43
   0611   c2 06 57          lbz FACTOR_NEXT_CYCLE
   0614   04                ldn R4
   0615   fb 2d             xri 45
   0617   c2 06 4c          lbz FACTOR_NEGATE
   061a   04                ldn R4
   061b   fb 28             xri 40
   061d   c2 06 3e          lbz FACTOR_PARENTHESIS
   0620   04                ldn R4
   0621   fb 29             xri 41
   0623   c2 06 57          lbz FACTOR_NEXT_CYCLE
   0626   04                ldn R4
   0627   ff 30             smi 48
   0629   cb 06 5b          lbnf FACTOR_END
   062c   ff 0a             smi 10
   062e   c3 06 5b          lbdf FACTOR_END
                            
   0631   f8 61             ldi READ_DEC.0
   0633   ad                plo CALL_REG
   0634   f8 05             ldi READ_DEC.1
   0636   bd                phi CALL_REG
                            
   0637   f8 00             ldi FCALL.0
   0639   ae                plo FCALL_REG
   063a   de                sep FCALL_REG
                            
   063b   c0 06 5b          lbr FACTOR_END
                            
   063e                 FACTOR_PARENTHESIS
   063e   14                inc R4
                            
   063f   f8 78             ldi EXPRESSION.0
   0641   ad                plo CALL_REG
   0642   f8 07             ldi EXPRESSION.1
   0644   bd                phi CALL_REG
                            
   0645   f8 00             ldi FCALL.0
   0647   ae                plo FCALL_REG
   0648   de                sep FCALL_REG
                            
   0649   c0 06 08          lbr FACTOR_MAIN
                            
   064c                 FACTOR_NEGATE
   064c   8f                glo STACK_REG
   064d   a6                plo R6
   064e   9f                ghi STACK_REG
   064f   b6                phi R6
   0650   16                inc R6
                            
   0651   06                ldn R6
   0652   fb ff             xri 0FFh
   0654   fa 01             ani 1
   0656   56                str R6
                            
   0657                 FACTOR_NEXT_CYCLE
   0657   14                inc R4
   0658   c0 06 08          lbr FACTOR_MAIN
                            
   065b                 FACTOR_END
   065b   8f                glo STACK_REG
   065c   a6                plo R6
   065d   9f                ghi STACK_REG
   065e   86                glo R6
   065f   16                inc R6
                            
   0660   06                ldn R6
   0661   c2 06 81          lbz FACTOR_FINAL
                            
   0664   8f                glo STACK_REG
   0665   fc 02             adi 2
   0667   a6                plo R6
   0668   9f                ghi STACK_REG
   0669   7c 00             adci 0
   066b   b6                phi R6
                            
   066c   06                ldn R6
   066d   a5                plo R5
   066e   16                inc R6
   066f   06                ldn R6
   0670   b5                phi R5
                            
   0671   e5                sex R5
                            
   0672   f8 82             ldi 082h
   0674   fe                shl
   0675   a6                plo R6
                            
   0676                 FACTOR_INVERTING
   0676   f0                ldx
   0677   fb ff             xri 0FFh
   0679   7c 00             adci 0
   067b   55                str R5
   067c   60                irx
                            
   067d   26                dec R6
   067e   86                glo R6
   067f   3a 76             bnz FACTOR_INVERTING
                            
   0681                 FACTOR_FINAL
   0681   8f                glo STACK_REG
   0682   fc 05             adi 5
   0684   af                plo STACK_REG
   0685   9f                ghi STACK_REG
   0686   7c 00             adci 0
   0688   bf                phi STACK_REG
                            
   0689   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-TERM-----------------------------------------
                        ;-R4-string pointer----------------------------
                        ;-R5-result------------------------------------
   068a                 TERM
   068a   ef                sex STACK_REG
                            
   068b   94                ghi R4
   068c   73                stxd
   068d   84                glo R4
   068e   73                stxd
                            
   068f   95                ghi R5
   0690   73                stxd
   0691   85                glo R5
   0692   73                stxd
                            
   0693   f8 fc             ldi FACTOR.0
   0695   ad                plo CALL_REG
   0696   f8 05             ldi FACTOR.1
   0698   bd                phi CALL_REG
                            
   0699   f8 00             ldi FCALL.0
   069b   ae                plo FCALL_REG
   069c   de                sep FCALL_REG
                            
   069d                 TERM_MAIN
   069d   04                ldn R4
   069e   fb 20             xri 32
   06a0   c2 07 6b          lbz TERM_NEXT_CYCLE
   06a3   04                ldn R4
   06a4   fb 2a             xri 42
   06a6   c2 07 16          lbz TERM_MULTIPLY
   06a9   04                ldn R4
   06aa   fb 2f             xri 47
   06ac   32 b1             bz TERM_DIVIDE
                            
   06ae   c0 07 6f          lbr TERM_END
                            
   06b1                 TERM_DIVIDE
   06b1   14                inc R4
                            
   06b2   f8 00             ldi 0
   06b4   73                stxd
   06b5   73                stxd
   06b6   73                stxd
   06b7   73                stxd    ;+5 remainder
                            
   06b8   73                stxd
   06b9   73                stxd
   06ba   73                stxd
   06bb   73                stxd    ;+1 divider
                            
   06bc   8f                glo STACK_REG
   06bd   a5                plo R5
   06be   9f                ghi STACK_REG
   06bf   b5                phi R5
   06c0   15                inc R5
                            
   06c1   f8 fc             ldi FACTOR.0
   06c3   ad                plo CALL_REG
   06c4   f8 05             ldi FACTOR.1
   06c6   bd                phi CALL_REG
                            
   06c7   f8 00             ldi FCALL.0
   06c9   ae                plo FCALL_REG
   06ca   de                sep FCALL_REG
                            
   06cb   8f                glo STACK_REG ;save R4 pointer
   06cc   fc 0b             adi 11
   06ce   a6                plo R6
   06cf   9f                ghi STACK_REG
   06d0   7c 00             adci 0
   06d2   b6                phi R6
                            
   06d3   84                glo R4
   06d4   56                str R6
   06d5   16                inc R6
   06d6   94                ghi R4
   06d7   56                str R6
                            
   06d8   8f                glo STACK_REG
   06d9   fc 09             adi 9
   06db   a8                plo R8
   06dc   9f                ghi STACK_REG
   06dd   7c 00             adci 0
   06df   b8                phi R8
                            
   06e0   08                ldn R8
   06e1   a4                plo R4
   06e2   a6                plo R6
   06e3   18                inc R8
   06e4   08                ldn R8
   06e5   b4                phi R4
   06e6   b6                phi R6
                            
   06e7   8f                glo STACK_REG
   06e8   a5                plo R5
   06e9   9f                ghi STACK_REG
   06ea   b5                phi R5
   06eb   15                inc R5
                            
   06ec   8f                glo STACK_REG
   06ed   fc 05             adi 5
   06ef   a7                plo R7
   06f0   9f                ghi STACK_REG
   06f1   7c 00             adci 0
   06f3   b7                phi R7
                            
   06f4   f8 d4             ldi INTEGER_DIV.0
   06f6   ad                plo CALL_REG
   06f7   f8 01             ldi INTEGER_DIV.1
   06f9   bd                phi CALL_REG
                            
   06fa   f8 00             ldi FCALL.0
   06fc   ae                plo FCALL_REG
   06fd   de                sep FCALL_REG
                            
   06fe   8f                glo STACK_REG
   06ff   fc 0b             adi 11
   0701   a6                plo R6
   0702   9f                ghi STACK_REG
   0703   7c 00             adci 0
   0705   b6                phi R6
                            
   0706   06                ldn R6
   0707   a4                plo R4
   0708   16                inc R6
   0709   06                ldn R6
   070a   b4                phi R4
                            
   070b   8f                glo STACK_REG
   070c   fc 08             adi 8
   070e   af                plo STACK_REG
   070f   9f                ghi STACK_REG
   0710   7c 00             adci 0
   0712   bf                phi STACK_REG
                        
   0713   c0 06 9d          lbr TERM_MAIN
                            
   0716                 TERM_MULTIPLY
   0716   14                inc R4
                            
   0717   f8 00             ldi 0
   0719   73                stxd
   071a   73                stxd
   071b   73                stxd
   071c   73                stxd
                            
   071d   8f                glo STACK_REG
   071e   a5                plo R5
   071f   9f                ghi STACK_REG
   0720   b5                phi R5
   0721   15                inc R5
                            
   0722   f8 fc             ldi FACTOR.0
   0724   ad                plo CALL_REG
   0725   f8 05             ldi FACTOR.1
   0727   bd                phi CALL_REG
                            
   0728   f8 00             ldi FCALL.0
   072a   ae                plo FCALL_REG
   072b   de                sep FCALL_REG
                            
   072c   8f                glo STACK_REG
   072d   fc 07             adi 7
   072f   a6                plo R6
   0730   9f                ghi STACK_REG
   0731   7c 00             adci 0
   0733   b6                phi R6
                            
   0734   84                glo R4
   0735   56                str R6
   0736   16                inc R6
   0737   94                ghi R4
   0738   56                str R6
                            
   0739   8f                glo STACK_REG
   073a   fc 05             adi 5
   073c   a8                plo R8
   073d   9f                ghi STACK_REG
   073e   7c 00             adci 0
   0740   b8                phi R8
                            
   0741   08                ldn R8
   0742   a4                plo R4
   0743   a6                plo R6
   0744   18                inc R8
   0745   08                ldn R8
   0746   b4                phi R4
   0747   b6                phi R6
                            
   0748   8f                glo STACK_REG
   0749   a5                plo R5
   074a   9f                ghi STACK_REG
   074b   b5                phi R5
   074c   15                inc R5
                            
   074d   f8 72             ldi INTEGER_MUL.0
   074f   ad                plo CALL_REG
   0750   f8 03             ldi INTEGER_MUL.1
   0752   bd                phi CALL_REG
                            
   0753   f8 00             ldi FCALL.0
   0755   ae                plo FCALL_REG
   0756   de                sep FCALL_REG
                            
   0757   8f                glo STACK_REG
   0758   fc 07             adi 7
   075a   a6                plo R6
   075b   9f                ghi STACK_REG
   075c   7c 00             adci 0
   075e   b6                phi R6
                            
   075f   06                ldn R6
   0760   a4                plo R4
   0761   16                inc R6
   0762   06                ldn R6
   0763   b4                phi R4
                            
   0764   1f                inc STACK_REG
   0765   1f                inc STACK_REG
   0766   1f                inc STACK_REG
   0767   1f                inc STACK_REG
                        
   0768   c0 06 9d          lbr TERM_MAIN
                            
   076b                 TERM_NEXT_CYCLE
   076b   14                inc R4
   076c   c0 06 9d          lbr TERM_MAIN
                            
   076f                 TERM_END
   076f   8f                glo STACK_REG
   0770   fc 04             adi 4
   0772   af                plo STACK_REG
   0773   9f                ghi STACK_REG
   0774   7c 00             adci 0
   0776   bf                phi STACK_REG
                            
   0777   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-EXPRESSION-----------------------------------
                        ;-R4-string pointer----------------------------
                        ;-R5-result pointer----------------------------
   0778                 EXPRESSION
   0778   ef                sex STACK_REG
                            
   0779   94                ghi R4
   077a   73                stxd
   077b   84                glo R4
   077c   73                stxd
                            
   077d   95                ghi R5
   077e   73                stxd
   077f   85                glo R5
   0780   73                stxd
                            
   0781   f8 8a             ldi TERM.0
   0783   ad                plo CALL_REG
   0784   f8 06             ldi TERM.1
   0786   bd                phi CALL_REG
                            
   0787   f8 00             ldi FCALL.0
   0789   ae                plo FCALL_REG
   078a   de                sep FCALL_REG
                            
   078b                 EXPRESSION_MAIN
   078b   04                ldn R4
   078c   fb 20             xri 32
   078e   c2 08 4e          lbz EXPRESSION_NEXT_CYCLE
   0791   04                ldn R4
   0792   fb 2b             xri 43
   0794   32 9e             bz EXPRESSION_ADD
   0796   04                ldn R4
   0797   fb 2d             xri 45
   0799   32 f6             bz EXPRESSION_SUB
                            
   079b   c0 08 52          lbr EXPRESSION_END
                            
   079e                 EXPRESSION_ADD
   079e   14                inc R4
                            
   079f   f8 00             ldi 0
   07a1   73                stxd
   07a2   73                stxd
   07a3   73                stxd
   07a4   73                stxd
                            
   07a5   8f                glo STACK_REG
   07a6   a5                plo R5
   07a7   9f                ghi STACK_REG
   07a8   b5                phi R5
   07a9   15                inc R5
                            
   07aa   f8 8a             ldi TERM.0
   07ac   ad                plo CALL_REG
   07ad   f8 06             ldi TERM.1
   07af   bd                phi CALL_REG
                            
   07b0   f8 00             ldi FCALL.0
   07b2   ae                plo FCALL_REG
   07b3   de                sep FCALL_REG
                            
   07b4   8f                glo STACK_REG
   07b5   fc 07             adi 7
   07b7   a6                plo R6
   07b8   9f                ghi STACK_REG
   07b9   7c 00             adci 0
   07bb   b6                phi R6
                            
   07bc   84                glo R4
   07bd   56                str R6
   07be   16                inc R6
   07bf   94                ghi R4
   07c0   56                str R6
                            
   07c1   8f                glo STACK_REG
   07c2   a5                plo R5
   07c3   9f                ghi STACK_REG
   07c4   b5                phi R5
   07c5   15                inc R5
                            
   07c6   8f                glo STACK_REG
   07c7   fc 05             adi 5
   07c9   a6                plo R6
   07ca   9f                ghi STACK_REG
   07cb   7c 00             adci 0
   07cd   b6                phi R6
                            
   07ce   06                ldn R6
   07cf   a4                plo R4
   07d0   16                inc R6
   07d1   06                ldn R6
   07d2   b4                phi R4
                            
   07d3   e4                sex R4
                            
   07d4   f8 02             ldi 2
   07d6   fe                shl
   07d7   a7                plo R7
                            
   07d8                 EXPRESSION_ADD_LOOP
   07d8   05                ldn R5
   07d9   74                adc
   07da   54                str R4
   07db   15                inc R5
   07dc   60                irx
                            
   07dd   27                dec R7
   07de   87                glo R7
   07df   3a d8             bnz EXPRESSION_ADD_LOOP
                            
   07e1   ef                sex STACK_REG
                            
   07e2   8f                glo STACK_REG
   07e3   fc 07             adi 7
   07e5   a6                plo R6
   07e6   9f                ghi STACK_REG
   07e7   7c 00             adci 0
   07e9   b6                phi R6
                            
   07ea   06                ldn R6
   07eb   a4                plo R4
   07ec   16                inc R6
   07ed   06                ldn R6
   07ee   b4                phi R4
                            
   07ef   1f                inc STACK_REG
   07f0   1f                inc STACK_REG
   07f1   1f                inc STACK_REG
   07f2   1f                inc STACK_REG
                        
   07f3   c0 07 8b          lbr EXPRESSION_MAIN
                        
   07f6                 EXPRESSION_SUB
   07f6   14                inc R4
                            
   07f7   f8 00             ldi 0
   07f9   73                stxd
   07fa   73                stxd
   07fb   73                stxd
   07fc   73                stxd
                            
   07fd   8f                glo STACK_REG
   07fe   a5                plo R5
   07ff   9f                ghi STACK_REG
   0800   b5                phi R5
   0801   15                inc R5
                            
   0802   f8 8a             ldi TERM.0
   0804   ad                plo CALL_REG
   0805   f8 06             ldi TERM.1
   0807   bd                phi CALL_REG
                            
   0808   f8 00             ldi FCALL.0
   080a   ae                plo FCALL_REG
   080b   de                sep FCALL_REG
                            
   080c   8f                glo STACK_REG
   080d   fc 07             adi 7
   080f   a6                plo R6
   0810   9f                ghi STACK_REG
   0811   7c 00             adci 0
   0813   b6                phi R6
                            
   0814   84                glo R4
   0815   56                str R6
   0816   16                inc R6
   0817   94                ghi R4
   0818   56                str R6
                            
   0819   8f                glo STACK_REG
   081a   a5                plo R5
   081b   9f                ghi STACK_REG
   081c   b5                phi R5
   081d   15                inc R5
                            
   081e   8f                glo STACK_REG
   081f   fc 05             adi 5
   0821   a6                plo R6
   0822   9f                ghi STACK_REG
   0823   7c 00             adci 0
   0825   b6                phi R6
                            
   0826   06                ldn R6
   0827   a4                plo R4
   0828   16                inc R6
   0829   06                ldn R6
   082a   b4                phi R4
                            
   082b   e4                sex R4
                            
   082c   f8 82             ldi 082h
   082e   fe                shl
   082f   a7                plo R7
                            
   0830                 EXPRESSION_SUB_LOOP
   0830   05                ldn R5
   0831   75                sdb
   0832   54                str R4
   0833   15                inc R5
   0834   60                irx
                            
   0835   27                dec R7
   0836   87                glo R7
   0837   3a 30             bnz EXPRESSION_SUB_LOOP
                            
   0839   ef                sex STACK_REG
                            
   083a   8f                glo STACK_REG
   083b   fc 07             adi 7
   083d   a6                plo R6
   083e   9f                ghi STACK_REG
   083f   7c 00             adci 0
   0841   b6                phi R6
                            
   0842   06                ldn R6
   0843   a4                plo R4
   0844   16                inc R6
   0845   06                ldn R6
   0846   b4                phi R4
                            
   0847   1f                inc STACK_REG
   0848   1f                inc STACK_REG
   0849   1f                inc STACK_REG
   084a   1f                inc STACK_REG
                        
   084b   c0 07 8b          lbr EXPRESSION_MAIN
                        
   084e                 EXPRESSION_NEXT_CYCLE    
   084e   14                inc R4
   084f   c0 07 8b          lbr EXPRESSION_MAIN
                            
   0852                 EXPRESSION_END
   0852   8f                glo STACK_REG
   0853   fc 04             adi 4
   0855   af                plo STACK_REG
   0856   9f                ghi STACK_REG
   0857   7c 00             adci 0
   0859   bf                phi STACK_REG
                            
   085a   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-HEXVIEWER------------------------------------
                        ;-R4-Start address-----------------------------
                        ;-R5-Count-------------------------------------
   085b                 HEX_BASE_SRT
   085b   0d 0a 42 61       db "\r\nBase address: 0x",0
   085f   73 65 20 61   
   0863   64 64 72 65   
   0867   73 73 3a 20   
   086b   30 78 00      
   086e                 HEX_HEADER_STR
   086e   0d 0a 0d 0a       db "\r\n\r\nOffset  00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F  String\r\n"
   0872   4f 66 66 73   
   0876   65 74 20 20   
   087a   30 30 20 30   
   087e   31 20 30 32   
   0882   20 30 33 20   
   0886   30 34 20 30   
   088a   35 20 30 36   
   088e   20 30 37 20   
   0892   30 38 20 30   
   0896   39 20 30 41   
   089a   20 30 42 20   
   089e   30 43 20 30   
   08a2   44 20 30 45   
   08a6   20 30 46 20   
   08aa   20 53 74 72   
   08ae   69 6e 67 0d   
   08b2   0a            
   08b3   2d 2d 2d 2d       db         "-------------------------------------------------------------------------\r\n",0
   08b7   2d 2d 2d 2d   
   08bb   2d 2d 2d 2d   
   08bf   2d 2d 2d 2d   
   08c3   2d 2d 2d 2d   
   08c7   2d 2d 2d 2d   
   08cb   2d 2d 2d 2d   
   08cf   2d 2d 2d 2d   
   08d3   2d 2d 2d 2d   
   08d7   2d 2d 2d 2d   
   08db   2d 2d 2d 2d   
   08df   2d 2d 2d 2d   
   08e3   2d 2d 2d 2d   
   08e7   2d 2d 2d 2d   
   08eb   2d 2d 2d 2d   
   08ef   2d 2d 2d 2d   
   08f3   2d 2d 2d 2d   
   08f7   2d 2d 2d 2d   
   08fb   2d 0d 0a 00   
                        ;              "0000:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................"
   08ff                 HEX_LINECNT_SEPARATOR
   08ff   3a 20 20 20       db ":   ",0
   0903   00            
                            
   0904                 HEXVIEWER
   0904   ef                sex STACK_REG
                            
   0905   f8 00             ldi 0
   0907   73                stxd
   0908   73                stxd
   0909   94                ghi R4
   090a   73                stxd
   090b   84                glo R4
   090c   73                stxd    ;+17 current address
                            
   090d   f8 00             ldi 0
   090f   73                stxd
   0910   73                stxd
   0911   94                ghi R4
   0912   73                stxd
   0913   84                glo R4
   0914   73                stxd    ;+13 start address
                            
   0915   f8 00             ldi 0
   0917   73                stxd
   0918   73                stxd
   0919   95                ghi R5
   091a   73                stxd
   091b   85                glo R5
   091c   73                stxd    ;+9 last address
                            
   091d   f8 00             ldi 0
   091f   73                stxd
   0920   73                stxd
   0921   73                stxd
   0922   73                stxd    ;+5 line counter
                            
   0923   73                stxd
   0924   73                stxd
   0925   73                stxd
   0926   73                stxd    ;+1 temp for hex digits
                            
   0927   8f                glo STACK_REG
   0928   fc 0d             adi 13
   092a   a4                plo R4
   092b   9f                ghi STACK_REG
   092c   7c 00             adci 0
   092e   b4                phi R4
                            
   092f   8f                glo STACK_REG
   0930   fc 09             adi 9
   0932   a6                plo R6
   0933   9f                ghi STACK_REG
   0934   7c 00             adci 0
   0936   b6                phi R6
                            
   0937   e4                sex R4
                            
   0938   85                glo R5      ;adding R5 value to start address and store it to last address
   0939   f4                add
   093a   56                str R6
   093b   60                irx
   093c   16                inc R6
   093d   95                ghi R5
   093e   74                adc
   093f   56                str R6
   0940   60                irx
   0941   16                inc R6
   0942   f8 00             ldi 0
   0944   74                adc
   0945   56                str R6
                            
   0946   f8 5b             ldi HEX_BASE_SRT.0     ;prepare to print base address
   0948   a6                plo R6
   0949   f8 08             ldi HEX_BASE_SRT.1
   094b   b6                phi R6
                        	
   094c   f8 52             ldi PRINT.0         ;prepare to call PRINT
   094e   ad                plo CALL_REG
   094f   f8 01             ldi PRINT.1
   0951   bd                phi CALL_REG
                            
   0952   f8 00             ldi FCALL.0
   0954   ae                plo FCALL_REG
   0955   de                sep FCALL_REG
                            
   0956   8f                glo STACK_REG       ;prepare to print the address in hex
   0957   fc 0d             adi 13
   0959   a4                plo R4
   095a   9f                ghi STACK_REG
   095b   7c 00             adci 0
   095d   b4                phi R4
                            
   095e   f8 04             ldi 4               ;with 4 digits
   0960   a5                plo R5
                            
   0961   f8 22             ldi PRINT_HEX.0     ;prepare to call PRINT_HEX
   0963   ad                plo CALL_REG
   0964   f8 04             ldi PRINT_HEX.1
   0966   bd                phi CALL_REG
                            
   0967   f8 00             ldi FCALL.0
   0969   ae                plo FCALL_REG
   096a   de                sep FCALL_REG
                            
   096b   f8 6e             ldi HEX_HEADER_STR.0     ;prepare to print the header
   096d   a6                plo R6
   096e   f8 08             ldi HEX_HEADER_STR.1
   0970   b6                phi R6
                        	
   0971   f8 52             ldi PRINT.0         ;prepare to call PRINT
   0973   ad                plo CALL_REG
   0974   f8 01             ldi PRINT.1
   0976   bd                phi CALL_REG
                            
   0977   f8 00             ldi FCALL.0
   0979   ae                plo FCALL_REG
   097a   de                sep FCALL_REG
                        
   097b                 HEXVIEWER_MAINLOOP
   097b   8f                glo STACK_REG       ;prepare to print the first address in hex
   097c   fc 05             adi 5
   097e   a4                plo R4
   097f   9f                ghi STACK_REG
   0980   7c 00             adci 0
   0982   b4                phi R4
                            
   0983   f8 04             ldi 4               ;with 4 digits
   0985   a5                plo R5
                            
   0986   f8 22             ldi PRINT_HEX.0     ;prepare to call PRINT_HEX
   0988   ad                plo CALL_REG
   0989   f8 04             ldi PRINT_HEX.1
   098b   bd                phi CALL_REG
                            
   098c   f8 00             ldi FCALL.0
   098e   ae                plo FCALL_REG
   098f   de                sep FCALL_REG
                            
   0990   f8 ff             ldi HEX_LINECNT_SEPARATOR.0     ;prepare to print address separator
   0992   a6                plo R6
   0993   f8 08             ldi HEX_LINECNT_SEPARATOR.1
   0995   b6                phi R6
                        	
   0996   f8 52             ldi PRINT.0         ;prepare to call PRINT
   0998   ad                plo CALL_REG
   0999   f8 01             ldi PRINT.1
   099b   bd                phi CALL_REG
                            
   099c   f8 00             ldi FCALL.0
   099e   ae                plo FCALL_REG
   099f   de                sep FCALL_REG
                            
   09a0   f8 10             ldi 16      ;set R8 low to 16 for counting the bytes
   09a2   a8                plo R8
                           
   09a3                 HEXVIEWER_PRINT_HEX_LOOP
   09a3   8f                glo STACK_REG       ;set R4 pointer to current address
   09a4   fc 11             adi 17
   09a6   a4                plo R4
   09a7   9f                ghi STACK_REG
   09a8   7c 00             adci 0
   09aa   b4                phi R4
                            
   09ab   8f                glo STACK_REG       ;set R5 pointer to last address
   09ac   fc 09             adi 9
   09ae   a5                plo R5
   09af   9f                ghi STACK_REG
   09b0   7c 00             adci 0
   09b2   b5                phi R5
                        
   09b3   e4                sex R4          ;check if current address is >= last address
                            
   09b4   45                lda R5
   09b5   f5                sd
   09b6   60                irx
                            
   09b7   45                lda R5
   09b8   75                sdb
   09b9   60                irx
                            
   09ba   45                lda R5
   09bb   75                sdb
   09bc   60                irx
                            
   09bd   05                ldn R5
   09be   75                sdb
                            
   09bf   33 e5             bpz HEXVIEWER_PRINT_HEX_SPACES   ;if current address >= last address then 
                        
   09c1   8f                glo STACK_REG       ;set R4 pointer to current address
   09c2   fc 11             adi 17
   09c4   a4                plo R4
   09c5   9f                ghi STACK_REG
   09c6   7c 00             adci 0
   09c8   b4                phi R4
                            
   09c9   44                lda R4              ;get current address and load it in R5
   09ca   a5                plo R5
   09cb   44                lda R4
   09cc   b5                phi R5
                            
   09cd   05                ldn R5              ;get data from R5 address
   09ce   a5                plo R5              ;store data in R5 low
                            
   09cf   8f                glo STACK_REG       ;set R4 pointer to temp
   09d0   a4                plo R4
   09d1   9f                ghi STACK_REG
   09d2   b4                phi R4
   09d3   14                inc R4
                            
   09d4   85                glo R5              ;get data from R5 low
   09d5   54                str R4              ;store data to temp
                           
   09d6   f8 02             ldi 2
   09d8   a5                plo R5              ;set R5 low to 2 digits
                            
   09d9   f8 22             ldi PRINT_HEX.0     ;prepare to call PRINT_HEX
   09db   ad                plo CALL_REG
   09dc   f8 04             ldi PRINT_HEX.1
   09de   bd                phi CALL_REG
                            
   09df   f8 00             ldi FCALL.0
   09e1   ae                plo FCALL_REG
   09e2   de                sep FCALL_REG
                            
   09e3   30 f5             br HEXVIEWER_NEXT_HEX
                            
   09e5                 HEXVIEWER_PRINT_HEX_SPACES
   09e5   f8 01             ldi HEX_LINECNT_SEPARATOR+2.0     ;prepare to print two space
   09e7   a6                plo R6
   09e8   f8 09             ldi HEX_LINECNT_SEPARATOR+2.1
   09ea   b6                phi R6
                        	
   09eb   f8 52             ldi PRINT.0         ;prepare to call PRINT
   09ed   ad                plo CALL_REG
   09ee   f8 01             ldi PRINT.1
   09f0   bd                phi CALL_REG
                            
   09f1   f8 00             ldi FCALL.0
   09f3   ae                plo FCALL_REG
   09f4   de                sep FCALL_REG
                        
   09f5                 HEXVIEWER_NEXT_HEX
   09f5   f8 02             ldi HEX_LINECNT_SEPARATOR+3.0     ;prepare to print a space
   09f7   a6                plo R6
   09f8   f8 09             ldi HEX_LINECNT_SEPARATOR+3.1
   09fa   b6                phi R6
                        	
   09fb   f8 52             ldi PRINT.0         ;prepare to call PRINT
   09fd   ad                plo CALL_REG
   09fe   f8 01             ldi PRINT.1
   0a00   bd                phi CALL_REG
                            
   0a01   f8 00             ldi FCALL.0
   0a03   ae                plo FCALL_REG
   0a04   de                sep FCALL_REG
                            
   0a05   8f                glo STACK_REG       ;set R4 pointer to current address
   0a06   fc 11             adi 17
   0a08   a4                plo R4
   0a09   9f                ghi STACK_REG
   0a0a   7c 00             adci 0
   0a0c   b4                phi R4
                            
   0a0d   e4                sex R4
   0a0e   f8 01             ldi 1
   0a10   f4                add
   0a11   54                str R4
   0a12   60                irx
                            
   0a13   f8 00             ldi 0
   0a15   74                adc
   0a16   54                str R4
   0a17   60                irx
                            
   0a18   f8 00             ldi 0
   0a1a   74                adc
   0a1b   54                str R4
   0a1c   60                irx
                            
   0a1d   f8 00             ldi 0
   0a1f   74                adc
   0a20   54                str R4
                            
   0a21   28                dec R8
   0a22   88                glo R8
   0a23   ca 09 a3          lbnz HEXVIEWER_PRINT_HEX_LOOP
                            
   0a26   f8 02             ldi HEX_LINECNT_SEPARATOR+3.0     ;prepare to print a space
   0a28   a6                plo R6
   0a29   f8 09             ldi HEX_LINECNT_SEPARATOR+3.1
   0a2b   b6                phi R6
                        	
   0a2c   f8 52             ldi PRINT.0         ;prepare to call PRINT
   0a2e   ad                plo CALL_REG
   0a2f   f8 01             ldi PRINT.1
   0a31   bd                phi CALL_REG
                            
   0a32   f8 00             ldi FCALL.0
   0a34   ae                plo FCALL_REG
   0a35   de                sep FCALL_REG
                            
   0a36   8f                glo STACK_REG       ;set R4 pointer to current address
   0a37   fc 11             adi 17
   0a39   a4                plo R4
   0a3a   9f                ghi STACK_REG
   0a3b   7c 00             adci 0
   0a3d   b4                phi R4
                            
   0a3e   8f                glo STACK_REG       ;set R5 pointer to start address
   0a3f   fc 0d             adi 13
   0a41   a5                plo R5
   0a42   9f                ghi STACK_REG
   0a43   7c 00             adci 0
   0a45   b5                phi R5
                            
   0a46   e5                sex R5
                            
   0a47   72                ldxa
   0a48   54                str R4
   0a49   14                inc R4
                            
   0a4a   72                ldxa
   0a4b   54                str R4
   0a4c   14                inc R4
                            
   0a4d   72                ldxa
   0a4e   54                str R4
   0a4f   14                inc R4
                            
   0a50   72                ldxa
   0a51   54                str R4
                            
   0a52   f8 10             ldi 16      ;set R8 low to 16 for counting the bytes
   0a54   a8                plo R8
                        
   0a55                 HEXVIEWER_PRINT_STR_LOOP
   0a55   8f                glo STACK_REG       ;set R4 pointer to current address
   0a56   fc 11             adi 17
   0a58   a4                plo R4
   0a59   9f                ghi STACK_REG
   0a5a   7c 00             adci 0
   0a5c   b4                phi R4
                            
   0a5d   8f                glo STACK_REG       ;set R5 pointer to last address
   0a5e   fc 09             adi 9
   0a60   a5                plo R5
   0a61   9f                ghi STACK_REG
   0a62   7c 00             adci 0
   0a64   b5                phi R5
                        
   0a65   e4                sex R4          ;check if current address is <= last address
                            
   0a66   45                lda R5
   0a67   f5                sd
   0a68   60                irx
                            
   0a69   45                lda R5
   0a6a   75                sdb
   0a6b   60                irx
                            
   0a6c   45                lda R5
   0a6d   75                sdb
   0a6e   60                irx
                            
   0a6f   05                ldn R5
   0a70   75                sdb
                            
   0a71   33 a6             bpz HEXVIEWER_PRINT_STR_SPACE   ;if current address >= last address then 
                            
   0a73   8f                glo STACK_REG       ;set R4 pointer to current address
   0a74   fc 11             adi 17
   0a76   a4                plo R4
   0a77   9f                ghi STACK_REG
   0a78   7c 00             adci 0
   0a7a   b4                phi R4
                            
   0a7b   44                lda R4              ;get current address and load it in R5
   0a7c   a5                plo R5
   0a7d   44                lda R4
   0a7e   b5                phi R5
                            
   0a7f   05                ldn R5              ;get data from R5 address
   0a80   a5                plo R5              ;store data in R5 low
                            
   0a81   ff 20             smi 32
   0a83   3b 97             bm HEXVIEWER_PRINT_STR_DOT
   0a85   ff 5f             smi 95
   0a87   33 97             bpz HEXVIEWER_PRINT_STR_DOT
                            
   0a89   85                glo R5
   0a8a   b4                phi R4
                            
   0a8b   f8 13             ldi SERIAL_SEND_START.0         ;prepare to call SERIAL_SEND_START to send one char
   0a8d   ad                plo CALL_REG
   0a8e   f8 01             ldi SERIAL_SEND_START.1
   0a90   bd                phi CALL_REG
                            
   0a91   f8 00             ldi FCALL.0
   0a93   ae                plo FCALL_REG
   0a94   de                sep FCALL_REG
                            
   0a95   30 b3             br HEXVIEWER_NEXT_STR
                            
   0a97                 HEXVIEWER_PRINT_STR_DOT
   0a97   f8 2e             ldi 46
   0a99   b4                phi R4
                            
   0a9a   f8 13             ldi SERIAL_SEND_START.0         ;prepare to call SERIAL_SEND_START to send one char
   0a9c   ad                plo CALL_REG
   0a9d   f8 01             ldi SERIAL_SEND_START.1
   0a9f   bd                phi CALL_REG
                            
   0aa0   f8 00             ldi FCALL.0
   0aa2   ae                plo FCALL_REG
   0aa3   de                sep FCALL_REG
                            
   0aa4   30 b3             br HEXVIEWER_NEXT_STR
                        
   0aa6                 HEXVIEWER_PRINT_STR_SPACE
   0aa6   f8 20             ldi 32
   0aa8   b4                phi R4
                            
   0aa9   f8 13             ldi SERIAL_SEND_START.0         ;prepare to call SERIAL_SEND_START to send one char
   0aab   ad                plo CALL_REG
   0aac   f8 01             ldi SERIAL_SEND_START.1
   0aae   bd                phi CALL_REG
                            
   0aaf   f8 00             ldi FCALL.0
   0ab1   ae                plo FCALL_REG
   0ab2   de                sep FCALL_REG
                            
   0ab3                 HEXVIEWER_NEXT_STR
   0ab3   8f                glo STACK_REG       ;set R4 pointer to current address
   0ab4   fc 11             adi 17
   0ab6   a4                plo R4
   0ab7   9f                ghi STACK_REG
   0ab8   7c 00             adci 0
   0aba   b4                phi R4
                            
   0abb   e4                sex R4
   0abc   f8 01             ldi 1
   0abe   f4                add
   0abf   54                str R4
   0ac0   60                irx
                            
   0ac1   f8 00             ldi 0
   0ac3   74                adc
   0ac4   54                str R4
   0ac5   60                irx
                            
   0ac6   f8 00             ldi 0
   0ac8   74                adc
   0ac9   54                str R4
   0aca   60                irx
                            
   0acb   f8 00             ldi 0
   0acd   74                adc
   0ace   54                str R4
                            
   0acf   28                dec R8
   0ad0   88                glo R8
   0ad1   3a 55             bnz HEXVIEWER_PRINT_STR_LOOP
                            
   0ad3   f8 97             ldi NEW_LINE.0     ;prepare to print a space
   0ad5   a6                plo R6
   0ad6   f8 0c             ldi NEW_LINE.1
   0ad8   b6                phi R6
                        	
   0ad9   f8 52             ldi PRINT.0         ;prepare to call PRINT
   0adb   ad                plo CALL_REG
   0adc   f8 01             ldi PRINT.1
   0ade   bd                phi CALL_REG
                            
   0adf   f8 00             ldi FCALL.0
   0ae1   ae                plo FCALL_REG
   0ae2   de                sep FCALL_REG
                            
   0ae3   8f                glo STACK_REG       ;set R4 pointer to current address
   0ae4   fc 11             adi 17
   0ae6   a4                plo R4
   0ae7   9f                ghi STACK_REG
   0ae8   7c 00             adci 0
   0aea   b4                phi R4
                            
   0aeb   8f                glo STACK_REG       ;set R5 pointer to last address
   0aec   fc 09             adi 9
   0aee   a5                plo R5
   0aef   9f                ghi STACK_REG
   0af0   7c 00             adci 0
   0af2   b5                phi R5
                        
   0af3   e4                sex R4          ;check if current address is >= last address
                            
   0af4   45                lda R5
   0af5   f5                sd
   0af6   60                irx
                            
   0af7   45                lda R5
   0af8   75                sdb
   0af9   60                irx
                            
   0afa   45                lda R5
   0afb   75                sdb
   0afc   60                irx
                            
   0afd   05                ldn R5
   0afe   75                sdb
                            
   0aff   33 3c             bpz HEXVIEWER_END
                            
   0b01   8f                glo STACK_REG       ;set R4 pointer to line counter
   0b02   fc 05             adi 5
   0b04   a4                plo R4
   0b05   9f                ghi STACK_REG
   0b06   7c 00             adci 0
   0b08   b4                phi R4
                            
   0b09   e4                sex R4
                            
   0b0a   f8 10             ldi 16
   0b0c   f4                add
   0b0d   54                str R4
   0b0e   60                irx
                            
   0b0f   f8 00             ldi 0
   0b11   74                adc
   0b12   54                str R4
   0b13   60                irx
                            
   0b14   f8 00             ldi 0
   0b16   74                adc
   0b17   54                str R4
   0b18   60                irx
                            
   0b19   f8 00             ldi 0
   0b1b   74                adc
   0b1c   54                str R4
                            
   0b1d   8f                glo STACK_REG       ;set R4 pointer to current address
   0b1e   fc 11             adi 17
   0b20   a4                plo R4
   0b21   9f                ghi STACK_REG
   0b22   7c 00             adci 0
   0b24   b4                phi R4
                            
   0b25   8f                glo STACK_REG       ;set R5 pointer to start address
   0b26   fc 0d             adi 13
   0b28   a5                plo R5
   0b29   9f                ghi STACK_REG
   0b2a   7c 00             adci 0
   0b2c   b5                phi R5
                            
   0b2d   e4                sex R4
                            
   0b2e   72                ldxa
   0b2f   55                str R5
   0b30   15                inc R5
                            
   0b31   72                ldxa
   0b32   55                str R5
   0b33   15                inc R5
                            
   0b34   72                ldxa
   0b35   55                str R5
   0b36   15                inc R5
                            
   0b37   72                ldxa
   0b38   55                str R5
                            
   0b39   c0 09 7b          lbr HEXVIEWER_MAINLOOP
                        
   0b3c                 HEXVIEWER_END
   0b3c   8f                glo STACK_REG
   0b3d   fc 14             adi 20
   0b3f   af                plo STACK_REG
   0b40   9f                ghi STACK_REG
   0b41   7c 00             adci 0
   0b43   bf                phi STACK_REG
                            
   0b44   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-HEXVIEW_CALLER-------------------------------
   0b45                 HEXVIEW_CALLER
   0b45   ef                sex STACK_REG
                            
   0b46   f8 00             ldi 0
   0b48   73                stxd
   0b49   73                stxd
   0b4a   73                stxd
   0b4b   73                stxd    ;+1 result
                            
   0b4c   f8 00             ldi INPUT_BUFF.0
   0b4e   a4                plo R4
   0b4f   f8 20             ldi INPUT_BUFF.1
   0b51   b4                phi R4
                            
   0b52                 HEXVIEW_CALLER_GOTOZERO
   0b52   44                lda R4
   0b53   3a 52             bnz HEXVIEW_CALLER_GOTOZERO
                            
   0b55   8f                glo STACK_REG
   0b56   a5                plo R5
   0b57   9f                ghi STACK_REG
   0b58   b5                phi R5
   0b59   15                inc R5
                            
   0b5a   f8 78             ldi EXPRESSION.0
   0b5c   ad                plo CALL_REG
   0b5d   f8 07             ldi EXPRESSION.1
   0b5f   bd                phi CALL_REG
                            
   0b60   f8 00             ldi FCALL.0
   0b62   ae                plo FCALL_REG
   0b63   de                sep FCALL_REG
                            
   0b64   8f                glo STACK_REG
   0b65   a5                plo R5
   0b66   9f                ghi STACK_REG
   0b67   b5                phi R5
   0b68   15                inc R5
                            
   0b69   45                lda R5
   0b6a   a4                plo R4
   0b6b   45                lda R5
   0b6c   b4                phi R4
                            
   0b6d   f8 00             ldi 0
   0b6f   a5                plo R5
   0b70   f8 01             ldi 1
   0b72   b5                phi R5
                            
   0b73   f8 04             ldi HEXVIEWER.0
   0b75   ad                plo CALL_REG
   0b76   f8 09             ldi HEXVIEWER.1
   0b78   bd                phi CALL_REG
                            
   0b79   f8 00             ldi FCALL.0
   0b7b   ae                plo FCALL_REG
   0b7c   de                sep FCALL_REG
                            
   0b7d   8f                glo STACK_REG
   0b7e   fc 04             adi 4
   0b80   af                plo STACK_REG
   0b81   9f                ghi STACK_REG
   0b82   7c 00             adci 0
   0b84   bf                phi STACK_REG
                            
   0b85   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-TEST FUNCTION--------------------------------
   0b86                 TEST_STR1
   0b86   52 65 73 75       db "Result: ",0
   0b8a   6c 74 3a 20   
   0b8e   00            
                        
   0b8f                 FUNC_TEST
   0b8f   ef                sex STACK_REG
                            
   0b90   f8 00             ldi 0
   0b92   73                stxd
   0b93   73                stxd
   0b94   73                stxd
   0b95   73                stxd    ;+1 result
                        
   0b96   f8 00             ldi INPUT_BUFF.0
   0b98   a4                plo R4
   0b99   f8 20             ldi INPUT_BUFF.1
   0b9b   b4                phi R4
                            
   0b9c                 FUNC_TEST_GOTOZERO
   0b9c   44                lda R4
   0b9d   3a 9c             bnz FUNC_TEST_GOTOZERO
                            
   0b9f   8f                glo STACK_REG
   0ba0   a5                plo R5
   0ba1   9f                ghi STACK_REG
   0ba2   b5                phi R5
   0ba3   15                inc R5
                            
   0ba4   f8 78             ldi EXPRESSION.0
   0ba6   ad                plo CALL_REG
   0ba7   f8 07             ldi EXPRESSION.1
   0ba9   bd                phi CALL_REG
                            
   0baa   f8 00             ldi FCALL.0
   0bac   ae                plo FCALL_REG
   0bad   de                sep FCALL_REG
                            
   0bae   8f                glo STACK_REG
   0baf   a4                plo R4
   0bb0   9f                ghi STACK_REG
   0bb1   b4                phi R4
   0bb2   14                inc R4
                        
   0bb3   f8 08             ldi 8
   0bb5   a5                plo R5
                            
   0bb6   f8 22             ldi PRINT_HEX.0     ;prepare to print the Decimal result.
   0bb8   ad                plo CALL_REG
   0bb9   f8 04             ldi PRINT_HEX.1
   0bbb   bd                phi CALL_REG
                            
   0bbc   f8 00             ldi FCALL.0
   0bbe   ae                plo FCALL_REG
   0bbf   de                sep FCALL_REG
                            
   0bc0   f8 97             ldi NEW_LINE.0  ;print newline
   0bc2   a6                plo R6
   0bc3   f8 0c             ldi NEW_LINE.1
   0bc5   b6                phi R6
                        	
   0bc6   f8 52             ldi PRINT.0     ;prepare to call PRINT
   0bc8   ad                plo CALL_REG
   0bc9   f8 01             ldi PRINT.1
   0bcb   bd                phi CALL_REG
                            
   0bcc   f8 00             ldi FCALL.0
   0bce   ae                plo FCALL_REG
   0bcf   de                sep FCALL_REG
                            
   0bd0   8f                glo STACK_REG
   0bd1   fc 04             adi 4
   0bd3   af                plo STACK_REG
   0bd4   9f                ghi STACK_REG
   0bd5   7c 00             adci 0
   0bd7   bf                phi STACK_REG
                            
   0bd8   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-COMMAND-CHECK--------------------------------
                        ;-R4-input string------------------------------
   0bd9                 COMMAND_CHECK
   0bd9   f8 aa             ldi COMMAND_FUNC_LIST.0
   0bdb   a5                plo R5
   0bdc   f8 0c             ldi COMMAND_FUNC_LIST.1
   0bde   b5                phi R5
                            
   0bdf   f8 9a             ldi COMMAND_LIST.0
   0be1   a9                plo R9
   0be2   f8 0c             ldi COMMAND_LIST.1
   0be4   b9                phi R9
                            
   0be5   84                glo R4
   0be6   a8                plo R8
   0be7   94                ghi R4
   0be8   b8                phi R8
                            
   0be9                 COMMAND_CHECK_GOTOSPACE
   0be9   48                lda R8
   0bea   32 f3             bz COMMAND_CHECK_INSERTZERO
   0bec   fb 20             xri 32
   0bee   32 f2             bz COMMAND_CHECK_REPLACESPACE
   0bf0   30 e9             br COMMAND_CHECK_GOTOSPACE
                            
   0bf2                 COMMAND_CHECK_REPLACESPACE
   0bf2   28                dec R8
   0bf3                 COMMAND_CHECK_INSERTZERO
   0bf3   58                str R8
                            
   0bf4                 COMMAND_CHECK_LOOP
   0bf4   84                glo R4
   0bf5   a8                plo R8
   0bf6   94                ghi R4
   0bf7   b8                phi R8
                            
   0bf8   09                ldn R9
   0bf9   c2 0c 1c          lbz COMMAND_CHECK_END
                        
   0bfc   f8 c0             ldi STR_COMPARATOR.0
   0bfe   ad                plo CALL_REG
   0bff   f8 01             ldi STR_COMPARATOR.1
   0c01   bd                phi CALL_REG
                            
   0c02   f8 00             ldi FCALL.0
   0c04   ae                plo FCALL_REG
   0c05   de                sep FCALL_REG
                            
   0c06   8a                glo R10
   0c07   ca 0c 13          lbnz COMMAND_CHECK_EXEC
                            
   0c0a                 COMMAND_CHECK_STR_END
   0c0a   09                ldn R9
   0c0b   19                inc R9
   0c0c   3a 0a             bnz COMMAND_CHECK_STR_END
                            
   0c0e   15                inc R5
   0c0f   15                inc R5
   0c10   c0 0b f4          lbr COMMAND_CHECK_LOOP
                            
   0c13                 COMMAND_CHECK_EXEC
   0c13   45                lda R5
   0c14   ad                plo CALL_REG
   0c15   05                ldn R5
   0c16   bd                phi CALL_REG
                            
   0c17   f8 00             ldi FCALL.0
   0c19   ae                plo FCALL_REG
   0c1a   de                sep FCALL_REG
                            
   0c1b   de                sep RETURN
                            
   0c1c                 COMMAND_CHECK_END
   0c1c   f8 ae             ldi UNKNOWN_COMMAND.0  ;set the address of the boot msg in R6
   0c1e   a6                plo R6
   0c1f   f8 0c             ldi UNKNOWN_COMMAND.1
   0c21   b6                phi R6
                        	
   0c22   f8 52             ldi PRINT.0     ;prepare to call PRINT
   0c24   ad                plo CALL_REG
   0c25   f8 01             ldi PRINT.1
   0c27   bd                phi CALL_REG
                            
   0c28   f8 00             ldi FCALL.0
   0c2a   ae                plo FCALL_REG
   0c2b   de                sep FCALL_REG   ;call PRINT
                            
   0c2c   de                sep RETURN
                        ;----------------------------------------------
                        
                        ;-MAIN-----------------------------------------
   0c2d                 MAIN_PROGRAM
   0c2d   f8 70             ldi BOOT_MSG.0  ;set the address of the boot msg in R6
   0c2f   a6                plo R6
   0c30   f8 0c             ldi BOOT_MSG.1
   0c32   b6                phi R6
                        	
   0c33   f8 52             ldi PRINT.0     ;prepare to call PRINT
   0c35   ad                plo CALL_REG
   0c36   f8 01             ldi PRINT.1
   0c38   bd                phi CALL_REG
                            
   0c39   f8 00             ldi FCALL.0
   0c3b   ae                plo FCALL_REG
   0c3c   de                sep FCALL_REG   ;call PRINT
                        
   0c3d                 ASK_INPUT
   0c3d   f8 00             ldi INPUT_BUFF.0    ;load the address of the buffer to R7
   0c3f   a7                plo R7
   0c40   f8 20             ldi INPUT_BUFF.1
   0c42   b7                phi R7
                            
   0c43   f8 68             ldi READLINE.0      ;prepare to call READLINE
   0c45   ad                plo CALL_REG
   0c46   f8 01             ldi READLINE.1
   0c48   bd                phi CALL_REG
                            
   0c49   f8 00             ldi FCALL.0
   0c4b   ae                plo FCALL_REG
   0c4c   de                sep FCALL_REG       ;call READLINE
                            
                            ;Program goes here
   0c4d   f8 00             ldi INPUT_BUFF.0
   0c4f   a4                plo R4
   0c50   f8 20             ldi INPUT_BUFF.1
   0c52   b4                phi R4
                            
   0c53   f8 d9             ldi COMMAND_CHECK.0      ;prepare to call COMMAND_CHECK
   0c55   ad                plo CALL_REG
   0c56   f8 0b             ldi COMMAND_CHECK.1
   0c58   bd                phi CALL_REG
                            
   0c59   f8 00             ldi FCALL.0
   0c5b   ae                plo FCALL_REG
   0c5c   de                sep FCALL_REG
                            ;Program ends here
                            
   0c5d   f8 93             ldi ASK_IN.0        ;load the ASK_IN string's address to R6
   0c5f   a6                plo R6
   0c60   f8 0c             ldi ASK_IN.1
   0c62   b6                phi R6
                            
   0c63   f8 52             ldi PRINT.0         ;prepare to call PRINT
   0c65   ad                plo CALL_REG
   0c66   f8 01             ldi PRINT.1
   0c68   bd                phi CALL_REG
                            
   0c69   f8 00             ldi FCALL.0
   0c6b   ae                plo FCALL_REG
   0c6c   de                sep FCALL_REG       ;call PRINT
                        	
   0c6d   c0 0c 3d          lbr ASK_INPUT
                        ;----------------------------------------------
                        
                        ;-CONSTANT DATA--------------------------------
   0c70                 BOOT_MSG
   0c70   5a 4c 45 44       db "ZLED - CDP1802 Terminal.\r\n\r\nREADY\r\n"
   0c74   20 2d 20 43   
   0c78   44 50 31 38   
   0c7c   30 32 20 54   
   0c80   65 72 6d 69   
   0c84   6e 61 6c 2e   
   0c88   0d 0a 0d 0a   
   0c8c   52 45 41 44   
   0c90   59 0d 0a      
   0c93                 ASK_IN
   0c93   0d 0a 3e 00       db "\r\n>",0
   0c97                 NEW_LINE
   0c97   0d 0a 00          db "\r\n",0
   0c9a                 COMMAND_LIST
   0c9a   70 72 69 6e       db "print",0,"mem_view",0,0
   0c9e   74 00 6d 65   
   0ca2   6d 5f 76 69   
   0ca6   65 77 00 00   
   0caa                 COMMAND_FUNC_LIST
   0caa   8f 0b             db FUNC_TEST.0,FUNC_TEST.1
   0cac   45 0b             db HEXVIEW_CALLER.0,HEXVIEW_CALLER.1
   0cae                 UNKNOWN_COMMAND
   0cae   55 6e 6b 6e       db "Unknown command.\r\n",0
   0cb2   6f 77 6e 20   
   0cb6   63 6f 6d 6d   
   0cba   61 6e 64 2e   
   0cbe   0d 0a 00      
   0cc1                 TEST_RESP
   0cc1   45 76 65 72       db "Everything is ok!",0
   0cc5   79 74 68 69   
   0cc9   6e 67 20 69   
   0ccd   73 20 6f 6b   
   0cd1   21 00         
                        
   0cd3                     end
0c93  ASK_IN        0c3d  ASK_INPUT     0164  BACKSPACE_ACTION    0c70  BOOT_MSG  
000d  CALL_REG      0283  CARRY_SHIFTING    0bd9  COMMAND_CHECK    0c1c  COMMAND_CHECK_END
0c13  COMMAND_CHECK_EXEC    0be9  COMMAND_CHECK_GOTOSPACE    0bf3  COMMAND_CHECK_INSERTZERO    0bf4  COMMAND_CHECK_LOOP
0bf2  COMMAND_CHECK_REPLACESPACE    0c0a  COMMAND_CHECK_STR_END    0caa  COMMAND_FUNC_LIST    0c9a  COMMAND_LIST
028d  DIVISION_LOOP    3000  DMA_ADDRESS    0013  DMA_INIT      0000  DMA_REG   
017a  END_LINE      0778  EXPRESSION    079e  EXPRESSION_ADD    07d8  EXPRESSION_ADD_LOOP
0852  EXPRESSION_END    078b  EXPRESSION_MAIN    084e  EXPRESSION_NEXT_CYCLE    07f6  EXPRESSION_SUB
0830  EXPRESSION_SUB_LOOP    05fc  FACTOR        065b  FACTOR_END    0681  FACTOR_FINAL
0676  FACTOR_INVERTING    0608  FACTOR_MAIN    064c  FACTOR_NEGATE    0657  FACTOR_NEXT_CYCLE
063e  FACTOR_PARENTHESIS    0100  FCALL         000e  FCALL_REG     031f  FINAL_CHECK
0343  FINAL_CHECK2    010a  FRETURN       0b8f  FUNC_TEST     0b9c  FUNC_TEST_GOTOZERO
0904  HEXVIEWER     0b3c  HEXVIEWER_END    097b  HEXVIEWER_MAINLOOP    09f5  HEXVIEWER_NEXT_HEX
0ab3  HEXVIEWER_NEXT_STR    09a3  HEXVIEWER_PRINT_HEX_LOOP    09e5  HEXVIEWER_PRINT_HEX_SPACES    0a97  HEXVIEWER_PRINT_STR_DOT
0a55  HEXVIEWER_PRINT_STR_LOOP    0aa6  HEXVIEWER_PRINT_STR_SPACE    0b45  HEXVIEW_CALLER    0b52  HEXVIEW_CALLER_GOTOZERO
085b  HEX_BASE_SRT    0412  HEX_CHARS     086e  HEX_HEADER_STR    08ff  HEX_LINECNT_SEPARATOR
2000  INPUT_BUFF    01d4  INTEGER_DIV    0224  INTEGER_DIV_INVERT_LOOP1    0234  INTEGER_DIV_NEXT_CHECK
0372  INTEGER_MUL    03d3  INTEGER_MUL_ADD    0409  INTEGER_MUL_END    039f  INTEGER_MUL_LOOP
03dc  INTEGER_MUL_SHIFT    03fd  INTEGER_MUL_SHMULTIPLICAND    03e9  INTEGER_MUL_SHMULTIPLIER    0262  INTEGER_SHIFT_DR
0001  INTP_REG      0002  INTX_REG      0253  INVERT_LOOP2    0337  INVERT_LOOP3
035e  INVERT_LOOP4    0c2d  MAIN_PROGRAM    0c97  NEW_LINE      0307  NEXT_BIT  
0003  PC_REG        0152  PRINT         045e  PRINT_CHECK_DIGIT    04ae  PRINT_DEC 
0540  PRINT_DEC_END    0549  PRINT_DEC_FINAL    04ed  PRINT_DEC_INVER_LOOP    04f8  PRINT_DEC_MAIN_LOOP
0461  PRINT_DIGIT_LOOP    0422  PRINT_HEX     048f  PRINT_HEX_END    0473  PRINT_HEX_SHIFT_LOOP1
0449  PRINT_UNTIL_R    000a  R10           000b  R11           000c  R12       
0004  R4            0005  R5            0006  R6            0007  R7        
0008  R8            0009  R9            0168  READLINE      018e  READLINE_BACKSPACE
016b  READLINE_LOOP    0561  READ_DEC      05e6  READ_DEC_END    0572  READ_DEC_MAIN_LOOP
000e  RETURN        013f  SERIAL_NULL_BIT    012d  SERIAL_READ_START    0139  SERIAL_SAMPLE_BIT
0143  SERIAL_SAVE_BIT    011b  SERIAL_SEND_BIT    0113  SERIAL_SEND_START    0131  SERIAL_WAIT_START
02a5  SHIFTING_Q    0276  SHIFT_DR      0314  SHIFT_SUBTRACTOR    ffff  STACK_ADDRESS
000f  STACK_REG     0000  START         01aa  STORE_CHAR    01c3  STR_CHARCHECK
01c0  STR_COMPARATOR    01c9  STR_EQUAL     01d0  STR_INC       02fd  SUBTRACT_FOR_REAL
068a  TERM          06b1  TERM_DIVIDE    076f  TERM_END      069d  TERM_MAIN 
0716  TERM_MULTIPLY    076b  TERM_NEXT_CYCLE    0cc1  TEST_RESP     0b86  TEST_STR1 
0369  THE_END       02c7  TRY_SUBTRACTING    0cae  UNKNOWN_COMMAND    
